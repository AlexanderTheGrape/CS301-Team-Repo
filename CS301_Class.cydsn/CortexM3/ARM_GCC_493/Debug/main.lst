ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	flag_print_rf
  95              		.bss
  96              		.type	flag_print_rf, %object
  97              		.size	flag_print_rf, 1
  98              	flag_print_rf:
  99 0012 00       		.space	1
 100              		.global	flag_receive_ADC
 101              		.type	flag_receive_ADC, %object
 102              		.size	flag_receive_ADC, 1
 103              	flag_receive_ADC:
 104 0013 00       		.space	1
 105              		.comm	adc_result,2,2
 106              		.global	direction
 107              		.type	direction, %object
 108              		.size	direction, 1
 109              	direction:
 110 0014 00       		.space	1
 111              		.global	BIN_ENABLED
 112              		.type	BIN_ENABLED, %object
 113              		.size	BIN_ENABLED, 1
 114              	BIN_ENABLED:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 3


 115 0015 00       		.space	1
 116              		.global	BT_ENABLED
 117              		.data
 118              		.type	BT_ENABLED, %object
 119              		.size	BT_ENABLED, 1
 120              	BT_ENABLED:
 121 0001 01       		.byte	1
 122              		.global	flag_calc_wheelspeed
 123              		.bss
 124              		.type	flag_calc_wheelspeed, %object
 125              		.size	flag_calc_wheelspeed, 1
 126              	flag_calc_wheelspeed:
 127 0016 00       		.space	1
 128              		.global	quad_count1
 129 0017 00       		.align	1
 130              		.type	quad_count1, %object
 131              		.size	quad_count1, 2
 132              	quad_count1:
 133 0018 0000     		.space	2
 134              		.global	quad_count2
 135              		.align	1
 136              		.type	quad_count2, %object
 137              		.size	quad_count2, 2
 138              	quad_count2:
 139 001a 0000     		.space	2
 140              		.global	last_quad_count1
 141              		.align	1
 142              		.type	last_quad_count1, %object
 143              		.size	last_quad_count1, 2
 144              	last_quad_count1:
 145 001c 0000     		.space	2
 146              		.global	last_quad_count2
 147              		.align	1
 148              		.type	last_quad_count2, %object
 149              		.size	last_quad_count2, 2
 150              	last_quad_count2:
 151 001e 0000     		.space	2
 152              		.global	quad_diff1
 153              		.align	1
 154              		.type	quad_diff1, %object
 155              		.size	quad_diff1, 2
 156              	quad_diff1:
 157 0020 0000     		.space	2
 158              		.global	quad_diff2
 159              		.align	1
 160              		.type	quad_diff2, %object
 161              		.size	quad_diff2, 2
 162              	quad_diff2:
 163 0022 0000     		.space	2
 164              		.global	deadzone
 165              		.type	deadzone, %object
 166              		.size	deadzone, 1
 167              	deadzone:
 168 0024 00       		.space	1
 169              		.global	start_turn_count
 170 0025 00       		.align	1
 171              		.type	start_turn_count, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 4


 172              		.size	start_turn_count, 2
 173              	start_turn_count:
 174 0026 0000     		.space	2
 175              		.global	left_duty_cycle
 176              		.align	1
 177              		.type	left_duty_cycle, %object
 178              		.size	left_duty_cycle, 2
 179              	left_duty_cycle:
 180 0028 0000     		.space	2
 181              		.global	right_duty_cycle
 182              		.align	1
 183              		.type	right_duty_cycle, %object
 184              		.size	right_duty_cycle, 2
 185              	right_duty_cycle:
 186 002a 0000     		.space	2
 187              		.global	leftSpeedLimit
 188              		.align	1
 189              		.type	leftSpeedLimit, %object
 190              		.size	leftSpeedLimit, 2
 191              	leftSpeedLimit:
 192 002c 0000     		.space	2
 193              		.global	rightSpeedLimit
 194              		.align	1
 195              		.type	rightSpeedLimit, %object
 196              		.size	rightSpeedLimit, 2
 197              	rightSpeedLimit:
 198 002e 0000     		.space	2
 199              		.global	target_distance_cm
 200              		.data
 201              		.align	1
 202              		.type	target_distance_cm, %object
 203              		.size	target_distance_cm, 2
 204              	target_distance_cm:
 205 0002 6400     		.short	100
 206              		.global	accum_dist
 207              		.bss
 208              		.align	1
 209              		.type	accum_dist, %object
 210              		.size	accum_dist, 2
 211              	accum_dist:
 212 0030 0000     		.space	2
 213              		.global	target_distance_quad
 214              		.align	1
 215              		.type	target_distance_quad, %object
 216              		.size	target_distance_quad, 2
 217              	target_distance_quad:
 218 0032 0000     		.space	2
 219              		.global	reached_target
 220              		.type	reached_target, %object
 221              		.size	reached_target, 1
 222              	reached_target:
 223 0034 00       		.space	1
 224              		.global	overshot_target
 225              		.type	overshot_target, %object
 226              		.size	overshot_target, 1
 227              	overshot_target:
 228 0035 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 5


 229              		.global	quad_per_cm
 230              		.data
 231              		.align	2
 232              		.type	quad_per_cm, %object
 233              		.size	quad_per_cm, 4
 234              	quad_per_cm:
 235 0004 F0A73241 		.word	1093838832
 236              		.global	initial_pos_valid
 237              		.bss
 238              		.type	initial_pos_valid, %object
 239              		.size	initial_pos_valid, 1
 240              	initial_pos_valid:
 241 0036 00       		.space	1
 242              		.global	initial_x_pos
 243 0037 00       		.align	1
 244              		.type	initial_x_pos, %object
 245              		.size	initial_x_pos, 2
 246              	initial_x_pos:
 247 0038 0000     		.space	2
 248              		.global	initial_y_pos
 249              		.align	1
 250              		.type	initial_y_pos, %object
 251              		.size	initial_y_pos, 2
 252              	initial_y_pos:
 253 003a 0000     		.space	2
 254              		.comm	brakeFlag,1,1
 255              		.global	portOpen
 256              		.data
 257              		.type	portOpen, %object
 258              		.size	portOpen, 1
 259              	portOpen:
 260 0008 01       		.byte	1
 261              		.comm	frontSensors,5,4
 262              		.comm	leftOn,1,1
 263              		.comm	rightOn,1,1
 264              		.comm	prevVoltage,2,2
 265              		.comm	prevVoltage2,2,2
 266              		.global	displaystring
 267 0009 000000   		.align	2
 268              		.type	displaystring, %object
 269              		.size	displaystring, 64
 270              	displaystring:
 271 000c 43533330 		.ascii	"CS301 2016\012\000"
 271      31203230 
 271      31360A00 
 272 0018 00000000 		.space	52
 272      00000000 
 272      00000000 
 272      00000000 
 272      00000000 
 273              		.comm	line,64,4
 274              		.comm	entry,64,4
 275              		.comm	usbBuffer,64,4
 276              		.comm	buffer_state,32,4
 277              		.comm	system_state,32,4
 278              		.global	prev_movement_state
 279              		.type	prev_movement_state, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 6


 280              		.size	prev_movement_state, 1
 281              	prev_movement_state:
 282 004c 03       		.byte	3
 283              		.global	movement_state
 284              		.type	movement_state, %object
 285              		.size	movement_state, 1
 286              	movement_state:
 287 004d 03       		.byte	3
 288              		.global	track_mode
 289              		.bss
 290              		.type	track_mode, %object
 291              		.size	track_mode, 1
 292              	track_mode:
 293 003c 00       		.space	1
 294              		.global	byteCount
 295              		.type	byteCount, %object
 296              		.size	byteCount, 1
 297              	byteCount:
 298 003d 00       		.space	1
 299              		.comm	packet,2,4
 300              		.global	speed
 301              		.data
 302 004e 0000     		.align	3
 303              		.type	speed, %object
 304              		.size	speed, 8
 305              	speed:
 306 0050 00000000 		.word	0
 307 0054 00002E40 		.word	1076756480
 308              		.comm	tracked_direction,4,4
 309              		.global	instructions
 310              		.bss
 311 003e 0000     		.align	2
 312              		.type	instructions, %object
 313              		.size	instructions, 800
 314              	instructions:
 315 0040 00000000 		.space	800
 315      00000000 
 315      00000000 
 315      00000000 
 315      00000000 
 316              		.global	instructionCount
 317              		.align	1
 318              		.type	instructionCount, %object
 319              		.size	instructionCount, 2
 320              	instructionCount:
 321 0360 0000     		.space	2
 322              		.global	instructionLength
 323              		.align	1
 324              		.type	instructionLength, %object
 325              		.size	instructionLength, 2
 326              	instructionLength:
 327 0362 0000     		.space	2
 328              		.global	sensorsDisabled
 329              		.align	2
 330              		.type	sensorsDisabled, %object
 331              		.size	sensorsDisabled, 4
 332              	sensorsDisabled:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 7


 333 0364 00000000 		.space	4
 334              		.global	robot_direction
 335              		.data
 336              		.align	2
 337              		.type	robot_direction, %object
 338              		.size	robot_direction, 4
 339              	robot_direction:
 340 0058 02000000 		.word	2
 341              		.global	path
 342              		.bss
 343              		.align	2
 344              		.type	path, %object
 345              		.size	path, 9600
 346              	path:
 347 0368 00000000 		.space	9600
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.global	start
 349              		.data
 350              		.align	2
 351              		.type	start, %object
 352              		.size	start, 8
 353              	start:
 354 005c 01000000 		.word	1
 355 0060 01000000 		.word	1
 356              		.global	destination
 357              		.align	2
 358              		.type	destination, %object
 359              		.size	destination, 8
 360              	destination:
 361 0064 0E000000 		.word	14
 362 0068 12000000 		.word	18
 363              		.global	map
 364              		.align	2
 365              		.type	map, %object
 366              		.size	map, 1140
 367              	map:
 368 006c 01000000 		.word	1
 369 0070 01000000 		.word	1
 370 0074 01000000 		.word	1
 371 0078 01000000 		.word	1
 372 007c 01000000 		.word	1
 373 0080 01000000 		.word	1
 374 0084 01000000 		.word	1
 375 0088 01000000 		.word	1
 376 008c 01000000 		.word	1
 377 0090 01000000 		.word	1
 378 0094 01000000 		.word	1
 379 0098 01000000 		.word	1
 380 009c 01000000 		.word	1
 381 00a0 01000000 		.word	1
 382 00a4 01000000 		.word	1
 383 00a8 01000000 		.word	1
 384 00ac 01000000 		.word	1
 385 00b0 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 8


 386 00b4 01000000 		.word	1
 387 00b8 01000000 		.word	1
 388 00bc 00000000 		.word	0
 389 00c0 00000000 		.word	0
 390 00c4 00000000 		.word	0
 391 00c8 00000000 		.word	0
 392 00cc 00000000 		.word	0
 393 00d0 00000000 		.word	0
 394 00d4 00000000 		.word	0
 395 00d8 00000000 		.word	0
 396 00dc 00000000 		.word	0
 397 00e0 00000000 		.word	0
 398 00e4 00000000 		.word	0
 399 00e8 00000000 		.word	0
 400 00ec 00000000 		.word	0
 401 00f0 00000000 		.word	0
 402 00f4 00000000 		.word	0
 403 00f8 00000000 		.word	0
 404 00fc 00000000 		.word	0
 405 0100 01000000 		.word	1
 406 0104 01000000 		.word	1
 407 0108 01000000 		.word	1
 408 010c 00000000 		.word	0
 409 0110 01000000 		.word	1
 410 0114 01000000 		.word	1
 411 0118 01000000 		.word	1
 412 011c 01000000 		.word	1
 413 0120 01000000 		.word	1
 414 0124 01000000 		.word	1
 415 0128 01000000 		.word	1
 416 012c 01000000 		.word	1
 417 0130 01000000 		.word	1
 418 0134 01000000 		.word	1
 419 0138 00000000 		.word	0
 420 013c 01000000 		.word	1
 421 0140 01000000 		.word	1
 422 0144 00000000 		.word	0
 423 0148 01000000 		.word	1
 424 014c 01000000 		.word	1
 425 0150 01000000 		.word	1
 426 0154 01000000 		.word	1
 427 0158 00000000 		.word	0
 428 015c 01000000 		.word	1
 429 0160 00000000 		.word	0
 430 0164 00000000 		.word	0
 431 0168 00000000 		.word	0
 432 016c 00000000 		.word	0
 433 0170 01000000 		.word	1
 434 0174 01000000 		.word	1
 435 0178 00000000 		.word	0
 436 017c 00000000 		.word	0
 437 0180 00000000 		.word	0
 438 0184 00000000 		.word	0
 439 0188 01000000 		.word	1
 440 018c 01000000 		.word	1
 441 0190 00000000 		.word	0
 442 0194 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 9


 443 0198 01000000 		.word	1
 444 019c 01000000 		.word	1
 445 01a0 01000000 		.word	1
 446 01a4 00000000 		.word	0
 447 01a8 01000000 		.word	1
 448 01ac 00000000 		.word	0
 449 01b0 01000000 		.word	1
 450 01b4 01000000 		.word	1
 451 01b8 00000000 		.word	0
 452 01bc 01000000 		.word	1
 453 01c0 01000000 		.word	1
 454 01c4 01000000 		.word	1
 455 01c8 01000000 		.word	1
 456 01cc 01000000 		.word	1
 457 01d0 00000000 		.word	0
 458 01d4 01000000 		.word	1
 459 01d8 01000000 		.word	1
 460 01dc 00000000 		.word	0
 461 01e0 01000000 		.word	1
 462 01e4 01000000 		.word	1
 463 01e8 01000000 		.word	1
 464 01ec 01000000 		.word	1
 465 01f0 00000000 		.word	0
 466 01f4 01000000 		.word	1
 467 01f8 00000000 		.word	0
 468 01fc 01000000 		.word	1
 469 0200 01000000 		.word	1
 470 0204 00000000 		.word	0
 471 0208 00000000 		.word	0
 472 020c 00000000 		.word	0
 473 0210 00000000 		.word	0
 474 0214 00000000 		.word	0
 475 0218 00000000 		.word	0
 476 021c 00000000 		.word	0
 477 0220 01000000 		.word	1
 478 0224 01000000 		.word	1
 479 0228 00000000 		.word	0
 480 022c 01000000 		.word	1
 481 0230 01000000 		.word	1
 482 0234 01000000 		.word	1
 483 0238 01000000 		.word	1
 484 023c 00000000 		.word	0
 485 0240 00000000 		.word	0
 486 0244 00000000 		.word	0
 487 0248 00000000 		.word	0
 488 024c 00000000 		.word	0
 489 0250 00000000 		.word	0
 490 0254 01000000 		.word	1
 491 0258 01000000 		.word	1
 492 025c 01000000 		.word	1
 493 0260 01000000 		.word	1
 494 0264 01000000 		.word	1
 495 0268 00000000 		.word	0
 496 026c 01000000 		.word	1
 497 0270 01000000 		.word	1
 498 0274 00000000 		.word	0
 499 0278 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 10


 500 027c 01000000 		.word	1
 501 0280 01000000 		.word	1
 502 0284 01000000 		.word	1
 503 0288 01000000 		.word	1
 504 028c 01000000 		.word	1
 505 0290 01000000 		.word	1
 506 0294 01000000 		.word	1
 507 0298 01000000 		.word	1
 508 029c 00000000 		.word	0
 509 02a0 01000000 		.word	1
 510 02a4 01000000 		.word	1
 511 02a8 01000000 		.word	1
 512 02ac 00000000 		.word	0
 513 02b0 00000000 		.word	0
 514 02b4 00000000 		.word	0
 515 02b8 01000000 		.word	1
 516 02bc 01000000 		.word	1
 517 02c0 00000000 		.word	0
 518 02c4 01000000 		.word	1
 519 02c8 01000000 		.word	1
 520 02cc 01000000 		.word	1
 521 02d0 01000000 		.word	1
 522 02d4 00000000 		.word	0
 523 02d8 00000000 		.word	0
 524 02dc 00000000 		.word	0
 525 02e0 00000000 		.word	0
 526 02e4 00000000 		.word	0
 527 02e8 00000000 		.word	0
 528 02ec 01000000 		.word	1
 529 02f0 01000000 		.word	1
 530 02f4 01000000 		.word	1
 531 02f8 00000000 		.word	0
 532 02fc 01000000 		.word	1
 533 0300 00000000 		.word	0
 534 0304 01000000 		.word	1
 535 0308 01000000 		.word	1
 536 030c 00000000 		.word	0
 537 0310 01000000 		.word	1
 538 0314 01000000 		.word	1
 539 0318 01000000 		.word	1
 540 031c 01000000 		.word	1
 541 0320 00000000 		.word	0
 542 0324 01000000 		.word	1
 543 0328 00000000 		.word	0
 544 032c 01000000 		.word	1
 545 0330 01000000 		.word	1
 546 0334 00000000 		.word	0
 547 0338 01000000 		.word	1
 548 033c 01000000 		.word	1
 549 0340 01000000 		.word	1
 550 0344 00000000 		.word	0
 551 0348 01000000 		.word	1
 552 034c 00000000 		.word	0
 553 0350 01000000 		.word	1
 554 0354 01000000 		.word	1
 555 0358 00000000 		.word	0
 556 035c 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 11


 557 0360 01000000 		.word	1
 558 0364 01000000 		.word	1
 559 0368 01000000 		.word	1
 560 036c 00000000 		.word	0
 561 0370 01000000 		.word	1
 562 0374 00000000 		.word	0
 563 0378 01000000 		.word	1
 564 037c 01000000 		.word	1
 565 0380 00000000 		.word	0
 566 0384 01000000 		.word	1
 567 0388 01000000 		.word	1
 568 038c 01000000 		.word	1
 569 0390 00000000 		.word	0
 570 0394 01000000 		.word	1
 571 0398 00000000 		.word	0
 572 039c 01000000 		.word	1
 573 03a0 01000000 		.word	1
 574 03a4 00000000 		.word	0
 575 03a8 01000000 		.word	1
 576 03ac 01000000 		.word	1
 577 03b0 01000000 		.word	1
 578 03b4 01000000 		.word	1
 579 03b8 00000000 		.word	0
 580 03bc 01000000 		.word	1
 581 03c0 00000000 		.word	0
 582 03c4 00000000 		.word	0
 583 03c8 00000000 		.word	0
 584 03cc 00000000 		.word	0
 585 03d0 00000000 		.word	0
 586 03d4 00000000 		.word	0
 587 03d8 00000000 		.word	0
 588 03dc 00000000 		.word	0
 589 03e0 01000000 		.word	1
 590 03e4 00000000 		.word	0
 591 03e8 00000000 		.word	0
 592 03ec 00000000 		.word	0
 593 03f0 00000000 		.word	0
 594 03f4 01000000 		.word	1
 595 03f8 01000000 		.word	1
 596 03fc 01000000 		.word	1
 597 0400 01000000 		.word	1
 598 0404 00000000 		.word	0
 599 0408 01000000 		.word	1
 600 040c 01000000 		.word	1
 601 0410 01000000 		.word	1
 602 0414 01000000 		.word	1
 603 0418 01000000 		.word	1
 604 041c 01000000 		.word	1
 605 0420 01000000 		.word	1
 606 0424 01000000 		.word	1
 607 0428 01000000 		.word	1
 608 042c 01000000 		.word	1
 609 0430 00000000 		.word	0
 610 0434 01000000 		.word	1
 611 0438 01000000 		.word	1
 612 043c 00000000 		.word	0
 613 0440 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 12


 614 0444 01000000 		.word	1
 615 0448 01000000 		.word	1
 616 044c 00000000 		.word	0
 617 0450 00000000 		.word	0
 618 0454 00000000 		.word	0
 619 0458 00000000 		.word	0
 620 045c 00000000 		.word	0
 621 0460 00000000 		.word	0
 622 0464 00000000 		.word	0
 623 0468 00000000 		.word	0
 624 046c 00000000 		.word	0
 625 0470 00000000 		.word	0
 626 0474 00000000 		.word	0
 627 0478 00000000 		.word	0
 628 047c 00000000 		.word	0
 629 0480 00000000 		.word	0
 630 0484 00000000 		.word	0
 631 0488 00000000 		.word	0
 632 048c 00000000 		.word	0
 633 0490 01000000 		.word	1
 634 0494 01000000 		.word	1
 635 0498 01000000 		.word	1
 636 049c 01000000 		.word	1
 637 04a0 01000000 		.word	1
 638 04a4 01000000 		.word	1
 639 04a8 01000000 		.word	1
 640 04ac 01000000 		.word	1
 641 04b0 01000000 		.word	1
 642 04b4 01000000 		.word	1
 643 04b8 01000000 		.word	1
 644 04bc 01000000 		.word	1
 645 04c0 01000000 		.word	1
 646 04c4 01000000 		.word	1
 647 04c8 01000000 		.word	1
 648 04cc 01000000 		.word	1
 649 04d0 01000000 		.word	1
 650 04d4 01000000 		.word	1
 651 04d8 01000000 		.word	1
 652 04dc 01000000 		.word	1
 653              		.global	food_list
 654              		.align	2
 655              		.type	food_list, %object
 656              		.size	food_list, 48
 657              	food_list:
 658 04e0 03000000 		.word	3
 659 04e4 06000000 		.word	6
 660 04e8 05000000 		.word	5
 661 04ec 0A000000 		.word	10
 662 04f0 0D000000 		.word	13
 663 04f4 09000000 		.word	9
 664 04f8 0D000000 		.word	13
 665 04fc 10000000 		.word	16
 666 0500 01000000 		.word	1
 667 0504 11000000 		.word	17
 668 0508 00000000 		.space	8
 668      00000000 
 669              		.global	food_length
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 13


 670              		.align	2
 671              		.type	food_length, %object
 672              		.size	food_length, 4
 673              	food_length:
 674 0510 05000000 		.word	5
 675 0514 00000000 		.section	.text.BT_txInt,"ax",%progbits
 676              		.align	2
 677              		.global	BT_txInt
 678              		.thumb
 679              		.thumb_func
 680              		.type	BT_txInt, %function
 681              	BT_txInt:
 682              	.LFB63:
 683              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *
   3:.\main.c      ****  * Copyright Univ of Auckland, 2016
   4:.\main.c      ****  * All Rights Reserved
   5:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\main.c      ****  *
   7:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   9:.\main.c      ****  *
  10:.\main.c      ****  * ========================================
  11:.\main.c      **** */
  12:.\main.c      **** #include <stdio.h>
  13:.\main.c      **** #include <string.h>
  14:.\main.c      **** #include <stdlib.h>
  15:.\main.c      **** #include <project.h>
  16:.\main.c      **** #include <math.h>
  17:.\main.c      **** //* ========================================
  18:.\main.c      **** #include "defines.h"
  19:.\main.c      **** #include "vars.h"
  20:.\main.c      **** #include "pathfinder.h"
  21:.\main.c      **** //* ========================================
  22:.\main.c      **** void usbPutString(char *s);
  23:.\main.c      **** void usbPutChar(char c);
  24:.\main.c      **** //void handle_usb();
  25:.\main.c      **** //* ========================================
  26:.\main.c      **** 
  27:.\main.c      **** #define QUAD_RATIO 0.99556
  28:.\main.c      **** #define TURN_OFFSET 138
  29:.\main.c      **** #define U_OFFSET 120
  30:.\main.c      **** 
  31:.\main.c      **** #define U_DEADZONE 90000
  32:.\main.c      **** #define TURN_DEADZONE 50000
  33:.\main.c      **** #define S_DEADZONE 10000
  34:.\main.c      **** #define QUAD_PER_UNIT 144
  35:.\main.c      **** 
  36:.\main.c      **** char instructions[DEFAULT_ARRAY_SIZE] = {0};
  37:.\main.c      **** uint16 instructionCount = 0;
  38:.\main.c      **** uint16 instructionLength = 0;
  39:.\main.c      **** uint32_t sensorsDisabled = 0;
  40:.\main.c      **** 
  41:.\main.c      **** uint32_t robot_direction = 2;
  42:.\main.c      **** 
  43:.\main.c      **** uint32_t path[DEFAULT_ARRAY_SIZE][3] = {0};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 14


  44:.\main.c      **** uint32_t start[2] = {1, 1};//(y, x) array starts at 0
  45:.\main.c      **** uint32_t destination[2] = {14, 18};//(y, x) DON'T HARDCODE THIS
  46:.\main.c      **** 
  47:.\main.c      **** // map default
  48:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  49:.\main.c      **** //                    {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1},
  50:.\main.c      **** //                    {1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1},
  51:.\main.c      **** //                    {1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
  52:.\main.c      **** //                    {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
  53:.\main.c      **** //                    {1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
  54:.\main.c      **** //                    {1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1},
  55:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
  56:.\main.c      **** //                    {1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
  57:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
  58:.\main.c      **** //                    {1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1},
  59:.\main.c      **** //                    {1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
  60:.\main.c      **** //                    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
  61:.\main.c      **** //                    {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
  62:.\main.c      **** //                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  63:.\main.c      **** 
  64:.\main.c      **** //practice map 1
  65:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,
  66:.\main.c      **** ////practice map 2
  67:.\main.c      **** uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  68:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  69:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  70:.\main.c      ****                         {1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1},
  71:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1},
  72:.\main.c      ****                         {1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1},
  73:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1},
  74:.\main.c      ****                         {1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1},
  75:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1},
  76:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  77:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  78:.\main.c      ****                         {1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1},
  79:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  80:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  81:.\main.c      ****                         {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  82:.\main.c      **** 
  83:.\main.c      **** //practice map 3
  84:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  85:.\main.c      **** 
  86:.\main.c      **** //first number is the y coord, second is x
  87:.\main.c      **** //first number is row, second column
  88:.\main.c      **** 
  89:.\main.c      **** //uint32_t food_list[6][2]= {{4,5},{7,1},{11,5},{10,11},{5,8},{17,2}};//???
  90:.\main.c      **** //uint32_t food_list[6][2] = {{5, 9},{5,3}, {13, 2}}; //???
  91:.\main.c      **** //uint32_t food_list[6][2] ={ //default
  92:.\main.c      **** //{5, 7},
  93:.\main.c      **** //{5, 17},
  94:.\main.c      **** //{12, 13},
  95:.\main.c      **** //{5, 17},
  96:.\main.c      **** //{9, 3}
  97:.\main.c      **** //};
  98:.\main.c      **** //uint32_t food_list[6][2]= {{1,10},{1,17},{13,16},{7,9},{13,1}}; //practice map 1
  99:.\main.c      **** //practice map 2
 100:.\main.c      **** uint32_t food_list[6][2]= {{3,6},{5,10},{13,9},{13,16},{1,17}};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 15


 101:.\main.c      **** 
 102:.\main.c      **** //practice map 3
 103:.\main.c      **** //uint32_t food_list[6][2]= {{16,11},{3,12},{3,5},{9,7},{5,9}};
 104:.\main.c      **** 
 105:.\main.c      **** uint32_t food_length = 5;
 106:.\main.c      **** 
 107:.\main.c      **** void changeToRF();
 108:.\main.c      **** void changeToBT();
 109:.\main.c      **** void brakeMotor();
 110:.\main.c      **** void driveForwards();
 111:.\main.c      **** void initTurnLeft();
 112:.\main.c      **** void initTurnRight();
 113:.\main.c      **** void inittrackLineZ();
 114:.\main.c      **** void trackLineU();
 115:.\main.c      **** void trackLine();
 116:.\main.c      **** void trackLineZ();
 117:.\main.c      **** void initTrackU();
 118:.\main.c      **** void turnLeft();
 119:.\main.c      **** void turnRight();
 120:.\main.c      **** void initForward();
 121:.\main.c      **** void initTurnU();
 122:.\main.c      **** void turnU();
 123:.\main.c      **** void initBrake();
 124:.\main.c      **** void print_ADC();
 125:.\main.c      **** void Quad_Dec_response();
 126:.\main.c      **** void handle_rx_binary();
 127:.\main.c      **** void readFrontSensors();
 128:.\main.c      **** void print_RF();
 129:.\main.c      **** 
 130:.\main.c      **** /*--------------------------------------------ISRs-----------------------------------------------*/
 131:.\main.c      **** //BT
 132:.\main.c      **** CY_ISR(BT_txInt)
 133:.\main.c      **** {
 684              		.loc 1 133 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689 0000 80B4     		push	{r7}
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 00AF     		add	r7, sp, #0
 693              		.cfi_def_cfa_register 7
 134:.\main.c      ****     
 135:.\main.c      **** }
 694              		.loc 1 135 0
 695 0004 BD46     		mov	sp, r7
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 0006 5DF8047B 		ldr	r7, [sp], #4
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 000a 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE63:
 704              		.size	BT_txInt, .-BT_txInt
 705              		.section	.text.adc_isr,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 16


 706              		.align	2
 707              		.global	adc_isr
 708              		.thumb
 709              		.thumb_func
 710              		.type	adc_isr, %function
 711              	adc_isr:
 712              	.LFB64:
 136:.\main.c      **** 
 137:.\main.c      **** //ADC:
 138:.\main.c      **** CY_ISR (adc_isr)
 139:.\main.c      **** {
 713              		.loc 1 139 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 140:.\main.c      ****     //adc_result = ADC_GetResult16(0);
 141:.\main.c      ****     adc_result = ADC_GetResult16();
 723              		.loc 1 141 0
 724 0004 FFF7FEFF 		bl	ADC_GetResult16
 725 0008 0346     		mov	r3, r0
 726 000a 1A46     		mov	r2, r3
 727 000c 044B     		ldr	r3, .L3
 728 000e 1A80     		strh	r2, [r3]	@ movhi
 142:.\main.c      ****     flag_receive_ADC = 1;
 729              		.loc 1 142 0
 730 0010 044B     		ldr	r3, .L3+4
 731 0012 0122     		movs	r2, #1
 732 0014 1A70     		strb	r2, [r3]
 143:.\main.c      ****     flag_print_rf = 1;
 733              		.loc 1 143 0
 734 0016 044B     		ldr	r3, .L3+8
 735 0018 0122     		movs	r2, #1
 736 001a 1A70     		strb	r2, [r3]
 144:.\main.c      ****     //LED_Write(~LED_Read());
 145:.\main.c      **** }
 737              		.loc 1 145 0
 738 001c 80BD     		pop	{r7, pc}
 739              	.L4:
 740 001e 00BF     		.align	2
 741              	.L3:
 742 0020 00000000 		.word	adc_result
 743 0024 00000000 		.word	flag_receive_ADC
 744 0028 00000000 		.word	flag_print_rf
 745              		.cfi_endproc
 746              	.LFE64:
 747              		.size	adc_isr, .-adc_isr
 748              		.global	__aeabi_i2d
 749              		.global	__aeabi_dsub
 750              		.global	__aeabi_dcmpge
 751              		.global	__aeabi_dadd
 752              		.section	.text.isr_quad1,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 17


 753              		.align	2
 754              		.global	isr_quad1
 755              		.thumb
 756              		.thumb_func
 757              		.type	isr_quad1, %function
 758              	isr_quad1:
 759              	.LFB65:
 146:.\main.c      **** 
 147:.\main.c      **** CY_ISR (isr_quad1)
 148:.\main.c      **** {
 760              		.loc 1 148 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 0000 B0B5     		push	{r4, r5, r7, lr}
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 4, -16
 767              		.cfi_offset 5, -12
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 149:.\main.c      ****     
 150:.\main.c      ****     //LED_Write(~LED_Read());
 151:.\main.c      ****     last_quad_count1 = quad_count1;
 772              		.loc 1 151 0
 773 0004 564B     		ldr	r3, .L12
 774 0006 1A88     		ldrh	r2, [r3]
 775 0008 564B     		ldr	r3, .L12+4
 776 000a 1A80     		strh	r2, [r3]	@ movhi
 152:.\main.c      ****     last_quad_count2 = quad_count2;
 777              		.loc 1 152 0
 778 000c 564B     		ldr	r3, .L12+8
 779 000e 1A88     		ldrh	r2, [r3]
 780 0010 564B     		ldr	r3, .L12+12
 781 0012 1A80     		strh	r2, [r3]	@ movhi
 153:.\main.c      ****     quad_count1 = QuadDec_M1_GetCounter();
 782              		.loc 1 153 0
 783 0014 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 784 0018 0346     		mov	r3, r0
 785 001a 1A46     		mov	r2, r3
 786 001c 504B     		ldr	r3, .L12
 787 001e 1A80     		strh	r2, [r3]	@ movhi
 154:.\main.c      ****     quad_count2 = QuadDec_M2_GetCounter();
 788              		.loc 1 154 0
 789 0020 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 790 0024 0346     		mov	r3, r0
 791 0026 1A46     		mov	r2, r3
 792 0028 4F4B     		ldr	r3, .L12+8
 793 002a 1A80     		strh	r2, [r3]	@ movhi
 155:.\main.c      ****     quad_diff1 = quad_count1 - last_quad_count1;
 794              		.loc 1 155 0
 795 002c 4C4B     		ldr	r3, .L12
 796 002e 1B88     		ldrh	r3, [r3]
 797 0030 9AB2     		uxth	r2, r3
 798 0032 4C4B     		ldr	r3, .L12+4
 799 0034 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 18


 800 0036 9BB2     		uxth	r3, r3
 801 0038 D31A     		subs	r3, r2, r3
 802 003a 9BB2     		uxth	r3, r3
 803 003c 9AB2     		uxth	r2, r3
 804 003e 4C4B     		ldr	r3, .L12+16
 805 0040 1A80     		strh	r2, [r3]	@ movhi
 156:.\main.c      ****     quad_diff2 = quad_count2 - last_quad_count2;
 806              		.loc 1 156 0
 807 0042 494B     		ldr	r3, .L12+8
 808 0044 1B88     		ldrh	r3, [r3]
 809 0046 9AB2     		uxth	r2, r3
 810 0048 484B     		ldr	r3, .L12+12
 811 004a 1B88     		ldrh	r3, [r3]
 812 004c 9BB2     		uxth	r3, r3
 813 004e D31A     		subs	r3, r2, r3
 814 0050 9BB2     		uxth	r3, r3
 815 0052 9AB2     		uxth	r2, r3
 816 0054 474B     		ldr	r3, .L12+20
 817 0056 1A80     		strh	r2, [r3]	@ movhi
 157:.\main.c      ****     
 158:.\main.c      ****     if(abs(quad_count1) > 3000 && movement_state != LTURN && movement_state != RTURN && movement_st
 818              		.loc 1 158 0
 819 0058 414B     		ldr	r3, .L12
 820 005a 1B88     		ldrh	r3, [r3]
 821 005c 1BB2     		sxth	r3, r3
 822 005e 002B     		cmp	r3, #0
 823 0060 B8BF     		it	lt
 824 0062 5B42     		rsblt	r3, r3, #0
 825 0064 40F6B832 		movw	r2, #3000
 826 0068 9342     		cmp	r3, r2
 827 006a 17DD     		ble	.L6
 828              		.loc 1 158 0 is_stmt 0 discriminator 1
 829 006c 424B     		ldr	r3, .L12+24
 830 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 831 0070 012B     		cmp	r3, #1
 832 0072 13D0     		beq	.L6
 833              		.loc 1 158 0 discriminator 2
 834 0074 404B     		ldr	r3, .L12+24
 835 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 836 0078 022B     		cmp	r3, #2
 837 007a 0FD0     		beq	.L6
 838              		.loc 1 158 0 discriminator 3
 839 007c 3E4B     		ldr	r3, .L12+24
 840 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0080 072B     		cmp	r3, #7
 842 0082 0BD0     		beq	.L6
 159:.\main.c      ****     {
 160:.\main.c      ****         QuadDec_M1_SetCounter(0);
 843              		.loc 1 160 0 is_stmt 1
 844 0084 0020     		movs	r0, #0
 845 0086 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 161:.\main.c      ****         QuadDec_M2_SetCounter(0);
 846              		.loc 1 161 0
 847 008a 0020     		movs	r0, #0
 848 008c FFF7FEFF 		bl	QuadDec_M2_SetCounter
 162:.\main.c      ****         quad_count1 = 0;
 849              		.loc 1 162 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 19


 850 0090 334B     		ldr	r3, .L12
 851 0092 0022     		movs	r2, #0
 852 0094 1A80     		strh	r2, [r3]	@ movhi
 163:.\main.c      ****         quad_count2 = 0;
 853              		.loc 1 163 0
 854 0096 344B     		ldr	r3, .L12+8
 855 0098 0022     		movs	r2, #0
 856 009a 1A80     		strh	r2, [r3]	@ movhi
 857              	.L6:
 164:.\main.c      ****     }
 165:.\main.c      **** 
 166:.\main.c      ****     flag_calc_wheelspeed = 1;
 858              		.loc 1 166 0
 859 009c 374B     		ldr	r3, .L12+28
 860 009e 0122     		movs	r2, #1
 861 00a0 1A70     		strb	r2, [r3]
 167:.\main.c      ****     
 168:.\main.c      ****     
 169:.\main.c      ****     if(track_mode == DEST_TEST && movement_state == TRACKING_SOFT)
 862              		.loc 1 169 0
 863 00a2 374B     		ldr	r3, .L12+32
 864 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 00a6 062B     		cmp	r3, #6
 866 00a8 58D1     		bne	.L5
 867              		.loc 1 169 0 is_stmt 0 discriminator 1
 868 00aa 334B     		ldr	r3, .L12+24
 869 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 00ae 062B     		cmp	r3, #6
 871 00b0 54D1     		bne	.L5
 170:.\main.c      ****     {
 171:.\main.c      ****         //track the distance
 172:.\main.c      ****         accum_dist -= quad_diff1;
 872              		.loc 1 172 0 is_stmt 1
 873 00b2 344B     		ldr	r3, .L12+36
 874 00b4 1B88     		ldrh	r3, [r3]
 875 00b6 9AB2     		uxth	r2, r3
 876 00b8 2D4B     		ldr	r3, .L12+16
 877 00ba 1B88     		ldrh	r3, [r3]
 878 00bc 9BB2     		uxth	r3, r3
 879 00be D31A     		subs	r3, r2, r3
 880 00c0 9BB2     		uxth	r3, r3
 881 00c2 9AB2     		uxth	r2, r3
 882 00c4 2F4B     		ldr	r3, .L12+36
 883 00c6 1A80     		strh	r2, [r3]	@ movhi
 173:.\main.c      ****         if(accum_dist >= (target_distance_quad - QUAD_PER_UNIT*0.5))
 884              		.loc 1 173 0
 885 00c8 2E4B     		ldr	r3, .L12+36
 886 00ca 1B88     		ldrh	r3, [r3]
 887 00cc 1BB2     		sxth	r3, r3
 888 00ce 1846     		mov	r0, r3
 889 00d0 FFF7FEFF 		bl	__aeabi_i2d
 890 00d4 0446     		mov	r4, r0
 891 00d6 0D46     		mov	r5, r1
 892 00d8 2B4B     		ldr	r3, .L12+40
 893 00da 1B88     		ldrh	r3, [r3]
 894 00dc 1BB2     		sxth	r3, r3
 895 00de 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 20


 896 00e0 FFF7FEFF 		bl	__aeabi_i2d
 897 00e4 0246     		mov	r2, r0
 898 00e6 0B46     		mov	r3, r1
 899 00e8 1046     		mov	r0, r2
 900 00ea 1946     		mov	r1, r3
 901 00ec 4FF00002 		mov	r2, #0
 902 00f0 264B     		ldr	r3, .L12+44
 903 00f2 FFF7FEFF 		bl	__aeabi_dsub
 904 00f6 0246     		mov	r2, r0
 905 00f8 0B46     		mov	r3, r1
 906 00fa 2046     		mov	r0, r4
 907 00fc 2946     		mov	r1, r5
 908 00fe FFF7FEFF 		bl	__aeabi_dcmpge
 909 0102 0346     		mov	r3, r0
 910 0104 002B     		cmp	r3, #0
 911 0106 02D0     		beq	.L8
 174:.\main.c      ****         {
 175:.\main.c      ****             reached_target = 1;
 912              		.loc 1 175 0
 913 0108 214B     		ldr	r3, .L12+48
 914 010a 0122     		movs	r2, #1
 915 010c 1A70     		strb	r2, [r3]
 916              	.L8:
 176:.\main.c      ****         }
 177:.\main.c      ****         if((accum_dist >= (target_distance_quad + QUAD_PER_UNIT * 0.5)) || target_distance_quad == 
 917              		.loc 1 177 0
 918 010e 1D4B     		ldr	r3, .L12+36
 919 0110 1B88     		ldrh	r3, [r3]
 920 0112 1BB2     		sxth	r3, r3
 921 0114 1846     		mov	r0, r3
 922 0116 FFF7FEFF 		bl	__aeabi_i2d
 923 011a 0446     		mov	r4, r0
 924 011c 0D46     		mov	r5, r1
 925 011e 1A4B     		ldr	r3, .L12+40
 926 0120 1B88     		ldrh	r3, [r3]
 927 0122 1BB2     		sxth	r3, r3
 928 0124 1846     		mov	r0, r3
 929 0126 FFF7FEFF 		bl	__aeabi_i2d
 930 012a 0246     		mov	r2, r0
 931 012c 0B46     		mov	r3, r1
 932 012e 1046     		mov	r0, r2
 933 0130 1946     		mov	r1, r3
 934 0132 4FF00002 		mov	r2, #0
 935 0136 154B     		ldr	r3, .L12+44
 936 0138 FFF7FEFF 		bl	__aeabi_dadd
 937 013c 0246     		mov	r2, r0
 938 013e 0B46     		mov	r3, r1
 939 0140 2046     		mov	r0, r4
 940 0142 2946     		mov	r1, r5
 941 0144 FFF7FEFF 		bl	__aeabi_dcmpge
 942 0148 0346     		mov	r3, r0
 943 014a 002B     		cmp	r3, #0
 944 014c 03D1     		bne	.L10
 945              		.loc 1 177 0 is_stmt 0 discriminator 1
 946 014e 0E4B     		ldr	r3, .L12+40
 947 0150 1B88     		ldrh	r3, [r3]
 948 0152 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 21


 949 0154 02D1     		bne	.L5
 950              	.L10:
 178:.\main.c      ****         {
 179:.\main.c      ****             overshot_target = 1;
 951              		.loc 1 179 0 is_stmt 1
 952 0156 0F4B     		ldr	r3, .L12+52
 953 0158 0122     		movs	r2, #1
 954 015a 1A70     		strb	r2, [r3]
 955              	.L5:
 180:.\main.c      ****         }
 181:.\main.c      ****     }
 182:.\main.c      **** }
 956              		.loc 1 182 0
 957 015c B0BD     		pop	{r4, r5, r7, pc}
 958              	.L13:
 959 015e 00BF     		.align	2
 960              	.L12:
 961 0160 00000000 		.word	quad_count1
 962 0164 00000000 		.word	last_quad_count1
 963 0168 00000000 		.word	quad_count2
 964 016c 00000000 		.word	last_quad_count2
 965 0170 00000000 		.word	quad_diff1
 966 0174 00000000 		.word	quad_diff2
 967 0178 00000000 		.word	movement_state
 968 017c 00000000 		.word	flag_calc_wheelspeed
 969 0180 00000000 		.word	track_mode
 970 0184 00000000 		.word	accum_dist
 971 0188 00000000 		.word	target_distance_quad
 972 018c 00005240 		.word	1079115776
 973 0190 00000000 		.word	reached_target
 974 0194 00000000 		.word	overshot_target
 975              		.cfi_endproc
 976              	.LFE65:
 977              		.size	isr_quad1, .-isr_quad1
 978              		.section	.text.isr_turn_timer,"ax",%progbits
 979              		.align	2
 980              		.global	isr_turn_timer
 981              		.thumb
 982              		.thumb_func
 983              		.type	isr_turn_timer, %function
 984              	isr_turn_timer:
 985              	.LFB66:
 183:.\main.c      **** 
 184:.\main.c      **** CY_ISR(isr_turn_timer)
 185:.\main.c      **** {
 986              		.loc 1 185 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 82B0     		sub	sp, sp, #8
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 22


 186:.\main.c      ****     if(movement_state == LTURN)
 998              		.loc 1 186 0
 999 0006 464B     		ldr	r3, .L22
 1000 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1001 000a 012B     		cmp	r3, #1
 1002 000c 33D1     		bne	.L15
 1003              	.LBB2:
 187:.\main.c      ****     {
 188:.\main.c      ****         uint16 distTurned = (abs(QuadDec_M2_GetCounter() - start_turn_count) % 832);
 1004              		.loc 1 188 0
 1005 000e FFF7FEFF 		bl	QuadDec_M2_GetCounter
 1006 0012 0346     		mov	r3, r0
 1007 0014 1A46     		mov	r2, r3
 1008 0016 434B     		ldr	r3, .L22+4
 1009 0018 1B88     		ldrh	r3, [r3]
 1010 001a 1BB2     		sxth	r3, r3
 1011 001c D31A     		subs	r3, r2, r3
 1012 001e 002B     		cmp	r3, #0
 1013 0020 B8BF     		it	lt
 1014 0022 5B42     		rsblt	r3, r3, #0
 1015 0024 404A     		ldr	r2, .L22+8
 1016 0026 82FB0312 		smull	r1, r2, r2, r3
 1017 002a 1112     		asrs	r1, r2, #8
 1018 002c DA17     		asrs	r2, r3, #31
 1019 002e 8A1A     		subs	r2, r1, r2
 1020 0030 4FF45071 		mov	r1, #832
 1021 0034 01FB02F2 		mul	r2, r1, r2
 1022 0038 9A1A     		subs	r2, r3, r2
 1023 003a 1346     		mov	r3, r2	@ movhi
 1024 003c FB80     		strh	r3, [r7, #6]	@ movhi
 189:.\main.c      ****   
 190:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1025              		.loc 1 190 0
 1026 003e FB88     		ldrh	r3, [r7, #6]
 1027 0040 B82B     		cmp	r3, #184
 1028 0042 17D9     		bls	.L16
 1029              		.loc 1 190 0 is_stmt 0 discriminator 1
 1030 0044 FB88     		ldrh	r3, [r7, #6]
 1031 0046 E02B     		cmp	r3, #224
 1032 0048 14D8     		bhi	.L16
 1033              		.loc 1 190 0 discriminator 2
 1034 004a 384B     		ldr	r3, .L22+12
 1035 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1036 004e 012B     		cmp	r3, #1
 1037 0050 07D0     		beq	.L17
 1038              		.loc 1 190 0 discriminator 3
 1039 0052 364B     		ldr	r3, .L22+12
 1040 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1041 0056 012B     		cmp	r3, #1
 1042 0058 03D0     		beq	.L17
 1043              		.loc 1 190 0 discriminator 4
 1044 005a 344B     		ldr	r3, .L22+12
 1045 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1046 005e 012B     		cmp	r3, #1
 1047 0060 08D1     		bne	.L16
 1048              	.L17:
 191:.\main.c      ****         {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 23


 192:.\main.c      ****             //movement_state = STOPPED;
 193:.\main.c      ****             brakeMotor();
 1049              		.loc 1 193 0 is_stmt 1
 1050 0062 FFF7FEFF 		bl	brakeMotor
 194:.\main.c      ****             movement_state = prev_movement_state;
 1051              		.loc 1 194 0
 1052 0066 324B     		ldr	r3, .L22+16
 1053 0068 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1054 006a 2D4B     		ldr	r3, .L22
 1055 006c 1A70     		strb	r2, [r3]
 195:.\main.c      ****             Timer_2_Stop();
 1056              		.loc 1 195 0
 1057 006e FFF7FEFF 		bl	Timer_2_Stop
 1058              	.LBE2:
 1059 0072 51E0     		b	.L14
 1060              	.L16:
 1061 0074 50E0     		b	.L14
 1062              	.L15:
 196:.\main.c      ****         }
 197:.\main.c      ****     }
 198:.\main.c      ****     else if (movement_state == RTURN)
 1063              		.loc 1 198 0
 1064 0076 2A4B     		ldr	r3, .L22
 1065 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1066 007a 022B     		cmp	r3, #2
 1067 007c 33D1     		bne	.L19
 1068              	.LBB3:
 199:.\main.c      ****     {
 200:.\main.c      ****         uint16 distTurned = abs(QuadDec_M1_GetCounter() - start_turn_count) % 832;
 1069              		.loc 1 200 0
 1070 007e FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1071 0082 0346     		mov	r3, r0
 1072 0084 1A46     		mov	r2, r3
 1073 0086 274B     		ldr	r3, .L22+4
 1074 0088 1B88     		ldrh	r3, [r3]
 1075 008a 1BB2     		sxth	r3, r3
 1076 008c D31A     		subs	r3, r2, r3
 1077 008e 002B     		cmp	r3, #0
 1078 0090 B8BF     		it	lt
 1079 0092 5B42     		rsblt	r3, r3, #0
 1080 0094 244A     		ldr	r2, .L22+8
 1081 0096 82FB0312 		smull	r1, r2, r2, r3
 1082 009a 1112     		asrs	r1, r2, #8
 1083 009c DA17     		asrs	r2, r3, #31
 1084 009e 8A1A     		subs	r2, r1, r2
 1085 00a0 4FF45071 		mov	r1, #832
 1086 00a4 01FB02F2 		mul	r2, r1, r2
 1087 00a8 9A1A     		subs	r2, r3, r2
 1088 00aa 1346     		mov	r3, r2	@ movhi
 1089 00ac BB80     		strh	r3, [r7, #4]	@ movhi
 201:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1090              		.loc 1 201 0
 1091 00ae BB88     		ldrh	r3, [r7, #4]
 1092 00b0 B82B     		cmp	r3, #184
 1093 00b2 17D9     		bls	.L20
 1094              		.loc 1 201 0 is_stmt 0 discriminator 1
 1095 00b4 BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 24


 1096 00b6 E02B     		cmp	r3, #224
 1097 00b8 14D8     		bhi	.L20
 1098              		.loc 1 201 0 discriminator 2
 1099 00ba 1C4B     		ldr	r3, .L22+12
 1100 00bc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1101 00be 012B     		cmp	r3, #1
 1102 00c0 07D0     		beq	.L21
 1103              		.loc 1 201 0 discriminator 3
 1104 00c2 1A4B     		ldr	r3, .L22+12
 1105 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 00c6 012B     		cmp	r3, #1
 1107 00c8 03D0     		beq	.L21
 1108              		.loc 1 201 0 discriminator 4
 1109 00ca 184B     		ldr	r3, .L22+12
 1110 00cc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1111 00ce 012B     		cmp	r3, #1
 1112 00d0 08D1     		bne	.L20
 1113              	.L21:
 202:.\main.c      ****         {
 203:.\main.c      ****             //movement_state = STOPPED;
 204:.\main.c      ****             brakeMotor();
 1114              		.loc 1 204 0 is_stmt 1
 1115 00d2 FFF7FEFF 		bl	brakeMotor
 205:.\main.c      ****             movement_state = prev_movement_state;
 1116              		.loc 1 205 0
 1117 00d6 164B     		ldr	r3, .L22+16
 1118 00d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1119 00da 114B     		ldr	r3, .L22
 1120 00dc 1A70     		strb	r2, [r3]
 206:.\main.c      ****             Timer_2_Stop();
 1121              		.loc 1 206 0
 1122 00de FFF7FEFF 		bl	Timer_2_Stop
 1123              	.LBE3:
 1124 00e2 19E0     		b	.L14
 1125              	.L20:
 1126 00e4 18E0     		b	.L14
 1127              	.L19:
 207:.\main.c      ****         }
 208:.\main.c      ****     }
 209:.\main.c      ****     else if (movement_state == UTURN)
 1128              		.loc 1 209 0
 1129 00e6 0E4B     		ldr	r3, .L22
 1130 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1131 00ea 072B     		cmp	r3, #7
 1132 00ec 14D1     		bne	.L14
 210:.\main.c      ****     {
 211:.\main.c      ****         if(abs(QuadDec_M1_GetCounter() - start_turn_count) >= 208)
 1133              		.loc 1 211 0
 1134 00ee FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1135 00f2 0346     		mov	r3, r0
 1136 00f4 1A46     		mov	r2, r3
 1137 00f6 0B4B     		ldr	r3, .L22+4
 1138 00f8 1B88     		ldrh	r3, [r3]
 1139 00fa 1BB2     		sxth	r3, r3
 1140 00fc D31A     		subs	r3, r2, r3
 1141 00fe 002B     		cmp	r3, #0
 1142 0100 B8BF     		it	lt
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 25


 1143 0102 5B42     		rsblt	r3, r3, #0
 1144 0104 CF2B     		cmp	r3, #207
 1145 0106 07DD     		ble	.L14
 212:.\main.c      ****         {
 213:.\main.c      ****             //movement_state = STOPPED;
 214:.\main.c      ****             brakeMotor();
 1146              		.loc 1 214 0
 1147 0108 FFF7FEFF 		bl	brakeMotor
 215:.\main.c      ****             movement_state = prev_movement_state;
 1148              		.loc 1 215 0
 1149 010c 084B     		ldr	r3, .L22+16
 1150 010e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1151 0110 034B     		ldr	r3, .L22
 1152 0112 1A70     		strb	r2, [r3]
 216:.\main.c      ****             Timer_2_Stop();
 1153              		.loc 1 216 0
 1154 0114 FFF7FEFF 		bl	Timer_2_Stop
 1155              	.L14:
 217:.\main.c      ****         }
 218:.\main.c      ****     }
 219:.\main.c      **** }
 1156              		.loc 1 219 0
 1157 0118 0837     		adds	r7, r7, #8
 1158              		.cfi_def_cfa_offset 8
 1159 011a BD46     		mov	sp, r7
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 011c 80BD     		pop	{r7, pc}
 1163              	.L23:
 1164 011e 00BF     		.align	2
 1165              	.L22:
 1166 0120 00000000 		.word	movement_state
 1167 0124 00000000 		.word	start_turn_count
 1168 0128 4FECC44E 		.word	1321528399
 1169 012c 00000000 		.word	frontSensors
 1170 0130 00000000 		.word	prev_movement_state
 1171              		.cfi_endproc
 1172              	.LFE66:
 1173              		.size	isr_turn_timer, .-isr_turn_timer
 1174              		.section	.text.Stop_on_line,"ax",%progbits
 1175              		.align	2
 1176              		.global	Stop_on_line
 1177              		.thumb
 1178              		.thumb_func
 1179              		.type	Stop_on_line, %function
 1180              	Stop_on_line:
 1181              	.LFB67:
 220:.\main.c      **** 
 221:.\main.c      **** 
 222:.\main.c      **** CY_ISR (Stop_on_line)
 223:.\main.c      **** {
 1182              		.loc 1 223 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187 0000 80B4     		push	{r7}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 26


 1188              		.cfi_def_cfa_offset 4
 1189              		.cfi_offset 7, -4
 1190 0002 00AF     		add	r7, sp, #0
 1191              		.cfi_def_cfa_register 7
 224:.\main.c      ****     movement_state = STOPPED;
 1192              		.loc 1 224 0
 1193 0004 054B     		ldr	r3, .L26
 1194 0006 0322     		movs	r2, #3
 1195 0008 1A70     		strb	r2, [r3]
 225:.\main.c      ****     if(movement_state != DRIVE) return;
 1196              		.loc 1 225 0
 1197 000a 044B     		ldr	r3, .L26
 1198 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1199 000e 002B     		cmp	r3, #0
 1200 0010 00D0     		beq	.L24
 1201 0012 00BF     		nop
 1202              	.L24:
 226:.\main.c      ****     //initTurnLeft();
 227:.\main.c      **** }
 1203              		.loc 1 227 0
 1204 0014 BD46     		mov	sp, r7
 1205              		.cfi_def_cfa_register 13
 1206              		@ sp needed
 1207 0016 5DF8047B 		ldr	r7, [sp], #4
 1208              		.cfi_restore 7
 1209              		.cfi_def_cfa_offset 0
 1210 001a 7047     		bx	lr
 1211              	.L27:
 1212              		.align	2
 1213              	.L26:
 1214 001c 00000000 		.word	movement_state
 1215              		.cfi_endproc
 1216              	.LFE67:
 1217              		.size	Stop_on_line, .-Stop_on_line
 1218              		.section	.rodata
 1219              		.align	2
 1220              	.LC0:
 1221 0000 53746172 		.ascii	"Starting robot!\015\012\000"
 1221      74696E67 
 1221      20726F62 
 1221      6F74210D 
 1221      0A00
 1222              		.section	.text.button,"ax",%progbits
 1223              		.align	2
 1224              		.global	button
 1225              		.thumb
 1226              		.thumb_func
 1227              		.type	button, %function
 1228              	button:
 1229              	.LFB68:
 228:.\main.c      **** 
 229:.\main.c      **** CY_ISR (button)
 230:.\main.c      **** {
 1230              		.loc 1 230 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 27


 1234 0000 80B5     		push	{r7, lr}
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238 0002 00AF     		add	r7, sp, #0
 1239              		.cfi_def_cfa_register 7
 231:.\main.c      ****     if(BT_ENABLED)
 1240              		.loc 1 231 0
 1241 0004 054B     		ldr	r3, .L30
 1242 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1243 0008 002B     		cmp	r3, #0
 1244 000a 02D0     		beq	.L29
 232:.\main.c      ****     {
 233:.\main.c      ****         UART_PutString("Starting robot!\r\n");
 1245              		.loc 1 233 0
 1246 000c 0448     		ldr	r0, .L30+4
 1247 000e FFF7FEFF 		bl	UART_PutString
 1248              	.L29:
 234:.\main.c      ****     }
 235:.\main.c      ****     movement_state = DRIVE;
 1249              		.loc 1 235 0
 1250 0012 044B     		ldr	r3, .L30+8
 1251 0014 0022     		movs	r2, #0
 1252 0016 1A70     		strb	r2, [r3]
 236:.\main.c      **** }
 1253              		.loc 1 236 0
 1254 0018 80BD     		pop	{r7, pc}
 1255              	.L31:
 1256 001a 00BF     		.align	2
 1257              	.L30:
 1258 001c 00000000 		.word	BT_ENABLED
 1259 0020 00000000 		.word	.LC0
 1260 0024 00000000 		.word	movement_state
 1261              		.cfi_endproc
 1262              	.LFE68:
 1263              		.size	button, .-button
 1264              		.section	.text.isr_adcTimer,"ax",%progbits
 1265              		.align	2
 1266              		.global	isr_adcTimer
 1267              		.thumb
 1268              		.thumb_func
 1269              		.type	isr_adcTimer, %function
 1270              	isr_adcTimer:
 1271              	.LFB69:
 237:.\main.c      **** 
 238:.\main.c      **** CY_ISR(isr_adcTimer)
 239:.\main.c      **** {
 1272              		.loc 1 239 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276 0000 80B5     		push	{r7, lr}
 1277              		.cfi_def_cfa_offset 8
 1278              		.cfi_offset 7, -8
 1279              		.cfi_offset 14, -4
 1280 0002 00AF     		add	r7, sp, #0
 1281              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 28


 240:.\main.c      ****     ADC_StartConvert();
 1282              		.loc 1 240 0
 1283 0004 FFF7FEFF 		bl	ADC_StartConvert
 241:.\main.c      **** }
 1284              		.loc 1 241 0
 1285 0008 80BD     		pop	{r7, pc}
 1286              		.cfi_endproc
 1287              	.LFE69:
 1288              		.size	isr_adcTimer, .-isr_adcTimer
 1289 000a 00BF     		.section	.rodata
 1290 0012 0000     		.align	2
 1291              	.LC1:
 1292 0014 44656164 		.ascii	"Deadzone left\015\012\000"
 1292      7A6F6E65 
 1292      206C6566 
 1292      740D0A00 
 1293              		.section	.text.isr_deadzone,"ax",%progbits
 1294              		.align	2
 1295              		.global	isr_deadzone
 1296              		.thumb
 1297              		.thumb_func
 1298              		.type	isr_deadzone, %function
 1299              	isr_deadzone:
 1300              	.LFB70:
 242:.\main.c      **** 
 243:.\main.c      **** CY_ISR(isr_deadzone)
 244:.\main.c      **** {
 1301              		.loc 1 244 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 1, uses_anonymous_args = 0
 1305 0000 80B5     		push	{r7, lr}
 1306              		.cfi_def_cfa_offset 8
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 00AF     		add	r7, sp, #0
 1310              		.cfi_def_cfa_register 7
 245:.\main.c      ****     sensorsDisabled = 0;
 1311              		.loc 1 245 0
 1312 0004 054B     		ldr	r3, .L34
 1313 0006 0022     		movs	r2, #0
 1314 0008 1A60     		str	r2, [r3]
 246:.\main.c      ****     deadzone = 0;
 1315              		.loc 1 246 0
 1316 000a 054B     		ldr	r3, .L34+4
 1317 000c 0022     		movs	r2, #0
 1318 000e 1A70     		strb	r2, [r3]
 247:.\main.c      ****     Timer_Deadzone_Stop();
 1319              		.loc 1 247 0
 1320 0010 FFF7FEFF 		bl	Timer_Deadzone_Stop
 248:.\main.c      ****     UART_PutString("Deadzone left\r\n");
 1321              		.loc 1 248 0
 1322 0014 0348     		ldr	r0, .L34+8
 1323 0016 FFF7FEFF 		bl	UART_PutString
 249:.\main.c      **** }
 1324              		.loc 1 249 0
 1325 001a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 29


 1326              	.L35:
 1327              		.align	2
 1328              	.L34:
 1329 001c 00000000 		.word	sensorsDisabled
 1330 0020 00000000 		.word	deadzone
 1331 0024 14000000 		.word	.LC1
 1332              		.cfi_endproc
 1333              	.LFE70:
 1334              		.size	isr_deadzone, .-isr_deadzone
 1335              		.section	.rodata
 1336              		.align	2
 1337              	.LC2:
 1338 0024 44697374 		.ascii	"Dist travel: %d\015\012\000"
 1338      20747261 
 1338      76656C3A 
 1338      2025640D 
 1338      0A00
 1339 0036 0000     		.align	2
 1340              	.LC3:
 1341 0038 54726967 		.ascii	"Trigger intersection\015\012\000"
 1341      67657220 
 1341      696E7465 
 1341      72736563 
 1341      74696F6E 
 1342 004f 00       		.align	2
 1343              	.LC4:
 1344 0050 44656164 		.ascii	"Deadzone enter\015\012\000"
 1344      7A6F6E65 
 1344      20656E74 
 1344      65720D0A 
 1344      00
 1345 0061 000000   		.align	2
 1346              	.LC5:
 1347 0064 54617267 		.ascii	"Target dist: %d\015\012\000"
 1347      65742064 
 1347      6973743A 
 1347      2025640D 
 1347      0A00
 1348 0076 0000     		.align	2
 1349              	.LC6:
 1350 0078 696E7374 		.ascii	"instr count:%d\015\012\000"
 1350      7220636F 
 1350      756E743A 
 1350      25640D0A 
 1350      00
 1351 0089 000000   		.align	2
 1352              	.LC7:
 1353 008c 54726967 		.ascii	"Trigger quad\015\012\000"
 1353      67657220 
 1353      71756164 
 1353      0D0A00
 1354              		.global	__aeabi_d2iz
 1355              		.section	.text.main,"ax",%progbits
 1356              		.align	2
 1357              		.global	main
 1358              		.thumb
 1359              		.thumb_func
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 30


 1360              		.type	main, %function
 1361              	main:
 1362              	.LFB71:
 250:.\main.c      **** 
 251:.\main.c      **** /*-------------------------------------------------------------------------------------------*/
 252:.\main.c      **** 
 253:.\main.c      **** /* -----------------------------------------MAIN-----------------------------MAIN------------------
 254:.\main.c      **** int main()
 255:.\main.c      **** {  
 1363              		.loc 1 255 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 40
 1366              		@ frame_needed = 1, uses_anonymous_args = 0
 1367 0000 80B5     		push	{r7, lr}
 1368              		.cfi_def_cfa_offset 8
 1369              		.cfi_offset 7, -8
 1370              		.cfi_offset 14, -4
 1371 0002 8AB0     		sub	sp, sp, #40
 1372              		.cfi_def_cfa_offset 48
 1373 0004 00AF     		add	r7, sp, #0
 1374              		.cfi_def_cfa_register 7
 256:.\main.c      **** 
 257:.\main.c      **** // ----- INITIALIZATIONS ----------
 258:.\main.c      ****     CYGlobalIntEnable;
 1375              		.loc 1 258 0
 1376              	@ 258 ".\main.c" 1
 1377 0006 62B6     		CPSIE   i
 1378              	@ 0 "" 2
 259:.\main.c      ****     if(ENABLE_PWM)
 260:.\main.c      ****     {
 261:.\main.c      ****         PWM_1_Start();// starting the pwm
 1379              		.loc 1 261 0
 1380              		.thumb
 1381 0008 FFF7FEFF 		bl	PWM_1_Start
 262:.\main.c      ****         PWM_2_Start();// starting the pwm
 1382              		.loc 1 262 0
 1383 000c FFF7FEFF 		bl	PWM_2_Start
 263:.\main.c      ****     }
 264:.\main.c      ****     
 265:.\main.c      ****     if(ENABLE_ADC)
 266:.\main.c      ****     {
 267:.\main.c      ****         ADC_Start();
 268:.\main.c      ****         isr_eoc_StartEx(adc_isr);
 269:.\main.c      ****         //ADC_StartConvert();
 270:.\main.c      ****         
 271:.\main.c      ****         //start the ADC timer for software trigger mode
 272:.\main.c      ****         Timer_TS_Start();
 273:.\main.c      ****         isr_TS_StartEx(isr_adcTimer);
 274:.\main.c      ****     }
 275:.\main.c      ****     
 276:.\main.c      ****     if (ENABLE_QUAD)
 277:.\main.c      ****     {
 278:.\main.c      ****         QuadDec_M1_Start();
 1384              		.loc 1 278 0
 1385 0010 FFF7FEFF 		bl	QuadDec_M1_Start
 279:.\main.c      ****         QuadDec_M2_Start();
 1386              		.loc 1 279 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 31


 1387 0014 FFF7FEFF 		bl	QuadDec_M2_Start
 280:.\main.c      ****         
 281:.\main.c      ****         isr_quad1_StartEx(isr_quad1);
 1388              		.loc 1 281 0
 1389 0018 B148     		ldr	r0, .L98
 1390 001a FFF7FEFF 		bl	isr_quad1_StartEx
 282:.\main.c      ****         isr_turn_count_StartEx(isr_turn_timer);
 1391              		.loc 1 282 0
 1392 001e B148     		ldr	r0, .L98+4
 1393 0020 FFF7FEFF 		bl	isr_turn_count_StartEx
 283:.\main.c      ****         
 284:.\main.c      ****         Timer_1_Start();
 1394              		.loc 1 284 0
 1395 0024 FFF7FEFF 		bl	Timer_1_Start
 285:.\main.c      ****     }
 286:.\main.c      ****     
 287:.\main.c      ****     if(ENABLE_STOP){
 288:.\main.c      ****         isr_OnLine_StartEx(Stop_on_line);
 289:.\main.c      ****         
 290:.\main.c      ****     }
 291:.\main.c      ****     isr_button_StartEx(button);
 1396              		.loc 1 291 0
 1397 0028 AF48     		ldr	r0, .L98+8
 1398 002a FFF7FEFF 		bl	isr_button_StartEx
 292:.\main.c      ****     isr_action_deadzone_StartEx(isr_deadzone);
 1399              		.loc 1 292 0
 1400 002e AF48     		ldr	r0, .L98+12
 1401 0030 FFF7FEFF 		bl	isr_action_deadzone_StartEx
 293:.\main.c      **** 
 294:.\main.c      ****     // ------USB SETUP ----------------    
 295:.\main.c      ****     if (USE_USB){    
 296:.\main.c      ****         USBUART_Start(0,USBUART_5V_OPERATION);
 1402              		.loc 1 296 0
 1403 0034 0020     		movs	r0, #0
 1404 0036 0121     		movs	r1, #1
 1405 0038 FFF7FEFF 		bl	USBUART_Start
 297:.\main.c      ****         if (USBUART_GetConfiguration())
 1406              		.loc 1 297 0
 1407 003c FFF7FEFF 		bl	USBUART_GetConfiguration
 1408 0040 0346     		mov	r3, r0
 1409 0042 002B     		cmp	r3, #0
 1410 0044 01D0     		beq	.L37
 298:.\main.c      ****             {
 299:.\main.c      ****                  USBUART_CDC_Init();
 1411              		.loc 1 299 0
 1412 0046 FFF7FEFF 		bl	USBUART_CDC_Init
 1413              	.L37:
 300:.\main.c      ****             }
 301:.\main.c      ****     }
 302:.\main.c      ****     
 303:.\main.c      ****     if(BIN_ENABLED){
 1414              		.loc 1 303 0
 1415 004a A94B     		ldr	r3, .L98+16
 1416 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1417 004e 002B     		cmp	r3, #0
 1418 0050 01D0     		beq	.L38
 304:.\main.c      ****         changeToRF();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 32


 1419              		.loc 1 304 0
 1420 0052 FFF7FEFF 		bl	changeToRF
 1421              	.L38:
 305:.\main.c      ****     }
 306:.\main.c      ****     
 307:.\main.c      ****     if(BT_ENABLED){
 1422              		.loc 1 307 0
 1423 0056 A74B     		ldr	r3, .L98+20
 1424 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1425 005a 002B     		cmp	r3, #0
 1426 005c 01D0     		beq	.L39
 308:.\main.c      ****         changeToBT();
 1427              		.loc 1 308 0
 1428 005e FFF7FEFF 		bl	changeToBT
 1429              	.L39:
 309:.\main.c      ****     }
 310:.\main.c      ****     
 311:.\main.c      ****     uint16 actionDebounce = 0;
 1430              		.loc 1 311 0
 1431 0062 0023     		movs	r3, #0
 1432 0064 FB84     		strh	r3, [r7, #38]	@ movhi
 1433              	.L95:
 312:.\main.c      ****     
 313:.\main.c      ****     //usbPutString("Started");
 314:.\main.c      ****     for(;;)
 315:.\main.c      ****     {
 316:.\main.c      ****         if(ENABLE_ADC) print_ADC();
 317:.\main.c      ****         if(ENABLE_QUAD) Quad_Dec_response();
 1434              		.loc 1 317 0
 1435 0066 FFF7FEFF 		bl	Quad_Dec_response
 318:.\main.c      ****         if(BIN_ENABLED == 1)
 1436              		.loc 1 318 0
 1437 006a A14B     		ldr	r3, .L98+16
 1438 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1439 006e 012B     		cmp	r3, #1
 1440 0070 03D1     		bne	.L40
 319:.\main.c      ****         {
 320:.\main.c      ****             handle_rx_binary();
 1441              		.loc 1 320 0
 1442 0072 FFF7FEFF 		bl	handle_rx_binary
 321:.\main.c      ****             print_RF();
 1443              		.loc 1 321 0
 1444 0076 FFF7FEFF 		bl	print_RF
 1445              	.L40:
 322:.\main.c      ****         }
 323:.\main.c      ****         // NO_TRACK, CURVE_TRACK, U_TRACK, SQUARE_TRACK
 324:.\main.c      ****        
 325:.\main.c      ****         readFrontSensors(frontSensors);
 1446              		.loc 1 325 0
 1447 007a 9F48     		ldr	r0, .L98+24
 1448 007c FFF7FEFF 		bl	readFrontSensors
 326:.\main.c      ****         
 327:.\main.c      ****         switch(track_mode)
 1449              		.loc 1 327 0
 1450 0080 9E4B     		ldr	r3, .L98+28
 1451 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1452 0084 072B     		cmp	r3, #7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 33


 1453 0086 00F2BA82 		bhi	.L41
 1454 008a 01A2     		adr	r2, .L43
 1455 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1456              		.p2align 2
 1457              	.L43:
 1458 0090 FF050000 		.word	.L41+1
 1459 0094 FF050000 		.word	.L41+1
 1460 0098 FF050000 		.word	.L41+1
 1461 009c B1000000 		.word	.L46+1
 1462 00a0 FF050000 		.word	.L41+1
 1463 00a4 F5000000 		.word	.L48+1
 1464 00a8 1B010000 		.word	.L49+1
 1465 00ac 1B010000 		.word	.L49+1
 1466              		.p2align 1
 1467              	.L46:
 328:.\main.c      ****         {
 329:.\main.c      ****             case SQUARE_TRACK:
 330:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN)
 1468              		.loc 1 330 0
 1469 00b0 934B     		ldr	r3, .L98+32
 1470 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1471 00b4 012B     		cmp	r3, #1
 1472 00b6 1CD0     		beq	.L50
 1473              		.loc 1 330 0 is_stmt 0 discriminator 1
 1474 00b8 914B     		ldr	r3, .L98+32
 1475 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1476 00bc 022B     		cmp	r3, #2
 1477 00be 18D0     		beq	.L50
 331:.\main.c      ****                 {
 332:.\main.c      ****                     if(frontSensors[0] == 1 && frontSensors[2] == 1){ //left turn
 1478              		.loc 1 332 0 is_stmt 1
 1479 00c0 8D4B     		ldr	r3, .L98+24
 1480 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1481 00c4 012B     		cmp	r3, #1
 1482 00c6 06D1     		bne	.L51
 1483              		.loc 1 332 0 is_stmt 0 discriminator 1
 1484 00c8 8B4B     		ldr	r3, .L98+24
 1485 00ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1486 00cc 012B     		cmp	r3, #1
 1487 00ce 02D1     		bne	.L51
 333:.\main.c      ****                         initTurnLeft();
 1488              		.loc 1 333 0 is_stmt 1
 1489 00d0 FFF7FEFF 		bl	initTurnLeft
 1490 00d4 0DE0     		b	.L50
 1491              	.L51:
 334:.\main.c      ****                     }
 335:.\main.c      ****                     else if (frontSensors[4] == 1 && frontSensors[2] == 1) //right turn
 1492              		.loc 1 335 0
 1493 00d6 884B     		ldr	r3, .L98+24
 1494 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1495 00da 012B     		cmp	r3, #1
 1496 00dc 06D1     		bne	.L52
 1497              		.loc 1 335 0 is_stmt 0 discriminator 1
 1498 00de 864B     		ldr	r3, .L98+24
 1499 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1500 00e2 012B     		cmp	r3, #1
 1501 00e4 02D1     		bne	.L52
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 34


 336:.\main.c      ****                     {
 337:.\main.c      ****                         initTurnRight();
 1502              		.loc 1 337 0 is_stmt 1
 1503 00e6 FFF7FEFF 		bl	initTurnRight
 1504 00ea 02E0     		b	.L50
 1505              	.L52:
 338:.\main.c      ****                     }
 339:.\main.c      ****                     else inittrackLineZ();
 1506              		.loc 1 339 0
 1507 00ec FFF7FEFF 		bl	inittrackLineZ
 340:.\main.c      ****                 }
 341:.\main.c      ****             break;
 1508              		.loc 1 341 0
 1509 00f0 85E2     		b	.L41
 1510              	.L50:
 1511 00f2 84E2     		b	.L41
 1512              	.L48:
 342:.\main.c      ****             case NO_TRACK:
 343:.\main.c      ****             break;
 344:.\main.c      ****             case CURVE_TRACK:
 345:.\main.c      ****             break;
 346:.\main.c      ****             case U_TRACK:
 347:.\main.c      ****             break;
 348:.\main.c      ****             case QUAD_STOP:
 349:.\main.c      ****             break;
 350:.\main.c      ****             case RF_STOP:
 351:.\main.c      ****                 if(initial_pos_valid == 1)
 1513              		.loc 1 351 0
 1514 00f4 834B     		ldr	r3, .L98+36
 1515 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1516 00f8 012B     		cmp	r3, #1
 1517 00fa 0DD1     		bne	.L53
 352:.\main.c      ****                 {
 353:.\main.c      ****                     //changeToBT();
 354:.\main.c      ****                    // UART_PutString("Valid RF detected!");
 355:.\main.c      ****                     //changeToRF();
 356:.\main.c      ****                     initial_x_pos = system_state.robot_xpos;
 1518              		.loc 1 356 0
 1519 00fc 824B     		ldr	r3, .L98+40
 1520 00fe 5A88     		ldrh	r2, [r3, #2]
 1521 0100 824B     		ldr	r3, .L98+44
 1522 0102 1A80     		strh	r2, [r3]	@ movhi
 357:.\main.c      ****                     initial_y_pos = system_state.robot_ypos;
 1523              		.loc 1 357 0
 1524 0104 804B     		ldr	r3, .L98+40
 1525 0106 9A88     		ldrh	r2, [r3, #4]
 1526 0108 814B     		ldr	r3, .L98+48
 1527 010a 1A80     		strh	r2, [r3]	@ movhi
 358:.\main.c      ****                     initial_pos_valid = 2;
 1528              		.loc 1 358 0
 1529 010c 7D4B     		ldr	r3, .L98+36
 1530 010e 0222     		movs	r2, #2
 1531 0110 1A70     		strb	r2, [r3]
 359:.\main.c      ****                     initForward();
 1532              		.loc 1 359 0
 1533 0112 FFF7FEFF 		bl	initForward
 360:.\main.c      ****                 }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 35


 361:.\main.c      ****             break;
 1534              		.loc 1 361 0
 1535 0116 72E2     		b	.L41
 1536              	.L53:
 1537 0118 71E2     		b	.L41
 1538              	.L49:
 362:.\main.c      ****             case MAP_TRAVERSE:
 363:.\main.c      ****             case DEST_TEST:
 364:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN && movement_state != UTURN){
 1539              		.loc 1 364 0
 1540 011a 794B     		ldr	r3, .L98+32
 1541 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1542 011e 012B     		cmp	r3, #1
 1543 0120 00F06C82 		beq	.L54
 1544              		.loc 1 364 0 is_stmt 0 discriminator 1
 1545 0124 764B     		ldr	r3, .L98+32
 1546 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1547 0128 022B     		cmp	r3, #2
 1548 012a 00F06782 		beq	.L54
 1549              		.loc 1 364 0 discriminator 2
 1550 012e 744B     		ldr	r3, .L98+32
 1551 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1552 0132 072B     		cmp	r3, #7
 1553 0134 00F06282 		beq	.L54
 1554              	.LBB4:
 365:.\main.c      ****                     //when we hit an intersection, verify the next step then evaluate
 366:.\main.c      ****                     char nextStep = instructions[instructionCount];
 1555              		.loc 1 366 0 is_stmt 1
 1556 0138 764B     		ldr	r3, .L98+52
 1557 013a 1B88     		ldrh	r3, [r3]
 1558 013c 1A46     		mov	r2, r3
 1559 013e 764B     		ldr	r3, .L98+56
 1560 0140 9B5C     		ldrb	r3, [r3, r2]
 1561 0142 87F82330 		strb	r3, [r7, #35]
 367:.\main.c      ****                     
 368:.\main.c      **** //                    if(nextStep == 'D' && instructions[instructionCount+1] == 0)
 369:.\main.c      **** //                    {
 370:.\main.c      **** //                        instructionCount += 2;
 371:.\main.c      **** //                        nextStep = instructions[instructionCount];
 372:.\main.c      **** //                    }
 373:.\main.c      ****                     
 374:.\main.c      ****                     leftOn = frontSensors[0] && frontSensors[2];
 1562              		.loc 1 374 0
 1563 0146 6C4B     		ldr	r3, .L98+24
 1564 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1565 014a 002B     		cmp	r3, #0
 1566 014c 05D0     		beq	.L55
 1567              		.loc 1 374 0 is_stmt 0 discriminator 1
 1568 014e 6A4B     		ldr	r3, .L98+24
 1569 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1570 0152 002B     		cmp	r3, #0
 1571 0154 01D0     		beq	.L55
 1572              		.loc 1 374 0 discriminator 3
 1573 0156 0123     		movs	r3, #1
 1574 0158 00E0     		b	.L56
 1575              	.L55:
 1576              		.loc 1 374 0 discriminator 4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 36


 1577 015a 0023     		movs	r3, #0
 1578              	.L56:
 1579              		.loc 1 374 0 discriminator 6
 1580 015c DAB2     		uxtb	r2, r3
 1581 015e 6F4B     		ldr	r3, .L98+60
 1582 0160 1A70     		strb	r2, [r3]
 375:.\main.c      ****                     rightOn = frontSensors[4] && frontSensors[2];
 1583              		.loc 1 375 0 is_stmt 1 discriminator 6
 1584 0162 654B     		ldr	r3, .L98+24
 1585 0164 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1586 0166 002B     		cmp	r3, #0
 1587 0168 05D0     		beq	.L57
 1588              		.loc 1 375 0 is_stmt 0 discriminator 1
 1589 016a 634B     		ldr	r3, .L98+24
 1590 016c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1591 016e 002B     		cmp	r3, #0
 1592 0170 01D0     		beq	.L57
 1593              		.loc 1 375 0 discriminator 3
 1594 0172 0123     		movs	r3, #1
 1595 0174 00E0     		b	.L58
 1596              	.L57:
 1597              		.loc 1 375 0 discriminator 4
 1598 0176 0023     		movs	r3, #0
 1599              	.L58:
 1600              		.loc 1 375 0 discriminator 6
 1601 0178 DAB2     		uxtb	r2, r3
 1602 017a 694B     		ldr	r3, .L98+64
 1603 017c 1A70     		strb	r2, [r3]
 376:.\main.c      ****                     if((leftOn && (nextStep != 'R')) || (rightOn && (nextStep != 'L'))){ //intersec
 1604              		.loc 1 376 0 is_stmt 1 discriminator 6
 1605 017e 674B     		ldr	r3, .L98+60
 1606 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1607 0182 002B     		cmp	r3, #0
 1608 0184 03D0     		beq	.L59
 1609              		.loc 1 376 0 is_stmt 0 discriminator 1
 1610 0186 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1611 018a 522B     		cmp	r3, #82
 1612 018c 09D1     		bne	.L60
 1613              	.L59:
 1614              		.loc 1 376 0 discriminator 3
 1615 018e 644B     		ldr	r3, .L98+64
 1616 0190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1617 0192 002B     		cmp	r3, #0
 1618 0194 00F01081 		beq	.L61
 1619              		.loc 1 376 0 discriminator 4
 1620 0198 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1621 019c 4C2B     		cmp	r3, #76
 1622 019e 00F00B81 		beq	.L61
 1623              	.L60:
 377:.\main.c      ****                         if(sensorsDisabled == 0)
 1624              		.loc 1 377 0 is_stmt 1
 1625 01a2 604B     		ldr	r3, .L98+68
 1626 01a4 1B68     		ldr	r3, [r3]
 1627 01a6 002B     		cmp	r3, #0
 1628 01a8 40F00581 		bne	.L62
 378:.\main.c      ****                         {
 379:.\main.c      ****                             actionDebounce++;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 37


 1629              		.loc 1 379 0
 1630 01ac FB8C     		ldrh	r3, [r7, #38]
 1631 01ae 0133     		adds	r3, r3, #1
 1632 01b0 FB84     		strh	r3, [r7, #38]	@ movhi
 380:.\main.c      ****                             if(actionDebounce >= 400)
 1633              		.loc 1 380 0
 1634 01b2 FB8C     		ldrh	r3, [r7, #38]
 1635 01b4 B3F5C87F 		cmp	r3, #400
 1636 01b8 C0F0FD80 		bcc	.L62
 1637              	.LBB5:
 381:.\main.c      ****                             {
 382:.\main.c      ****                                 char mes[16];
 383:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1638              		.loc 1 383 0
 1639 01bc 5A4B     		ldr	r3, .L98+72
 1640 01be 1B88     		ldrh	r3, [r3]
 1641 01c0 1BB2     		sxth	r3, r3
 1642 01c2 07F11002 		add	r2, r7, #16
 1643 01c6 1046     		mov	r0, r2
 1644 01c8 5849     		ldr	r1, .L98+76
 1645 01ca 1A46     		mov	r2, r3
 1646 01cc FFF7FEFF 		bl	sprintf
 384:.\main.c      ****                                  UART_PutString(mes);
 1647              		.loc 1 384 0
 1648 01d0 07F11003 		add	r3, r7, #16
 1649 01d4 1846     		mov	r0, r3
 1650 01d6 FFF7FEFF 		bl	UART_PutString
 385:.\main.c      ****                             if(reached_target == 1)
 1651              		.loc 1 385 0
 1652 01da 554B     		ldr	r3, .L98+80
 1653 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1654 01de 012B     		cmp	r3, #1
 1655 01e0 40F0E980 		bne	.L62
 1656              	.LBB6:
 386:.\main.c      ****                             {
 387:.\main.c      **** //                                if(nextStep == 'D')
 388:.\main.c      **** //                                {
 389:.\main.c      **** //                                    instructionCount += 2;
 390:.\main.c      **** //                                    nextStep = instructions[instructionCount]; 
 391:.\main.c      **** //                                }
 392:.\main.c      ****                                 
 393:.\main.c      ****                                 sensorsDisabled = 1;
 1657              		.loc 1 393 0
 1658 01e4 4F4B     		ldr	r3, .L98+68
 1659 01e6 0122     		movs	r2, #1
 1660 01e8 1A60     		str	r2, [r3]
 394:.\main.c      ****                                 UART_PutString("Trigger intersection\r\n");
 1661              		.loc 1 394 0
 1662 01ea 5248     		ldr	r0, .L98+84
 1663 01ec FFF7FEFF 		bl	UART_PutString
 395:.\main.c      ****                                 UART_PutString("Deadzone enter\r\n");
 1664              		.loc 1 395 0
 1665 01f0 5148     		ldr	r0, .L98+88
 1666 01f2 FFF7FEFF 		bl	UART_PutString
 396:.\main.c      ****                                 deadzone = 1;
 1667              		.loc 1 396 0
 1668 01f6 514B     		ldr	r3, .L98+92
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 38


 1669 01f8 0122     		movs	r2, #1
 1670 01fa 1A70     		strb	r2, [r3]
 397:.\main.c      ****                                 
 398:.\main.c      ****                                 accum_dist = 0;
 1671              		.loc 1 398 0
 1672 01fc 4A4B     		ldr	r3, .L98+72
 1673 01fe 0022     		movs	r2, #0
 1674 0200 1A80     		strh	r2, [r3]	@ movhi
 399:.\main.c      ****                                 uint8 nextStepDist;
 400:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 1675              		.loc 1 400 0
 1676 0202 444B     		ldr	r3, .L98+52
 1677 0204 1B88     		ldrh	r3, [r3]
 1678 0206 1A46     		mov	r2, r3
 1679 0208 4D4B     		ldr	r3, .L98+96
 1680 020a 1B88     		ldrh	r3, [r3]
 1681 020c 053B     		subs	r3, r3, #5
 1682 020e 9A42     		cmp	r2, r3
 1683 0210 07DC     		bgt	.L64
 1684              		.loc 1 400 0 is_stmt 0 discriminator 1
 1685 0212 404B     		ldr	r3, .L98+52
 1686 0214 1B88     		ldrh	r3, [r3]
 1687 0216 0333     		adds	r3, r3, #3
 1688 0218 3F4A     		ldr	r2, .L98+56
 1689 021a D35C     		ldrb	r3, [r2, r3]
 1690 021c 87F82530 		strb	r3, [r7, #37]
 1691 0220 02E0     		b	.L65
 1692              	.L64:
 401:.\main.c      ****                                 else nextStepDist = 0;
 1693              		.loc 1 401 0 is_stmt 1
 1694 0222 0023     		movs	r3, #0
 1695 0224 87F82530 		strb	r3, [r7, #37]
 1696              	.L65:
 402:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 1697              		.loc 1 402 0
 1698 0228 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1699 022c 9BB2     		uxth	r3, r3
 1700 022e 1A46     		mov	r2, r3	@ movhi
 1701 0230 D200     		lsls	r2, r2, #3
 1702 0232 1344     		add	r3, r3, r2
 1703 0234 1B01     		lsls	r3, r3, #4
 1704 0236 9BB2     		uxth	r3, r3
 1705 0238 9AB2     		uxth	r2, r3
 1706 023a 424B     		ldr	r3, .L98+100
 1707 023c 1A80     		strh	r2, [r3]	@ movhi
 403:.\main.c      ****                                 
 404:.\main.c      ****                                 
 405:.\main.c      ****                                 
 406:.\main.c      ****                                 switch(nextStep)
 1708              		.loc 1 406 0
 1709 023e 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1710 0242 4C3B     		subs	r3, r3, #76
 1711 0244 092B     		cmp	r3, #9
 1712 0246 00F28180 		bhi	.L96
 1713 024a 01A2     		adr	r2, .L68
 1714 024c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1715              		.p2align 2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 39


 1716              	.L68:
 1717 0250 87020000 		.word	.L67+1
 1718 0254 4D030000 		.word	.L96+1
 1719 0258 4D030000 		.word	.L96+1
 1720 025c 4D030000 		.word	.L96+1
 1721 0260 4D030000 		.word	.L96+1
 1722 0264 4D030000 		.word	.L96+1
 1723 0268 A5020000 		.word	.L69+1
 1724 026c 79020000 		.word	.L70+1
 1725 0270 4D030000 		.word	.L96+1
 1726 0274 C3020000 		.word	.L71+1
 1727              		.p2align 1
 1728              	.L70:
 407:.\main.c      ****                                 {
 408:.\main.c      ****                                     case 'S':
 409:.\main.c      ****                                         inittrackLineZ();
 1729              		.loc 1 409 0
 1730 0278 FFF7FEFF 		bl	inittrackLineZ
 410:.\main.c      ****                                          Timer_Deadzone_WriteCounter(S_DEADZONE);
 1731              		.loc 1 410 0
 1732 027c 42F21070 		movw	r0, #10000
 1733 0280 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 411:.\main.c      ****                                         //do nothing
 412:.\main.c      ****                                     break;
 1734              		.loc 1 412 0
 1735 0284 63E0     		b	.L72
 1736              	.L67:
 413:.\main.c      ****                                     case 'L':
 414:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 415:.\main.c      ****                                         initTurnLeft();
 1737              		.loc 1 415 0
 1738 0286 FFF7FEFF 		bl	initTurnLeft
 416:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1739              		.loc 1 416 0
 1740 028a 4CF25030 		movw	r0, #50000
 1741 028e FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 417:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1742              		.loc 1 417 0
 1743 0292 2C4B     		ldr	r3, .L98+100
 1744 0294 1B88     		ldrh	r3, [r3]
 1745 0296 9BB2     		uxth	r3, r3
 1746 0298 8A3B     		subs	r3, r3, #138
 1747 029a 9BB2     		uxth	r3, r3
 1748 029c 9AB2     		uxth	r2, r3
 1749 029e 294B     		ldr	r3, .L98+100
 1750 02a0 1A80     		strh	r2, [r3]	@ movhi
 418:.\main.c      ****                                     break;
 1751              		.loc 1 418 0
 1752 02a2 54E0     		b	.L72
 1753              	.L69:
 419:.\main.c      ****                                     case 'R':
 420:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 421:.\main.c      ****                                         initTurnRight();
 1754              		.loc 1 421 0
 1755 02a4 FFF7FEFF 		bl	initTurnRight
 422:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1756              		.loc 1 422 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 40


 1757 02a8 264B     		ldr	r3, .L98+100
 1758 02aa 1B88     		ldrh	r3, [r3]
 1759 02ac 9BB2     		uxth	r3, r3
 1760 02ae 8A3B     		subs	r3, r3, #138
 1761 02b0 9BB2     		uxth	r3, r3
 1762 02b2 9AB2     		uxth	r2, r3
 1763 02b4 234B     		ldr	r3, .L98+100
 1764 02b6 1A80     		strh	r2, [r3]	@ movhi
 423:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 424:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1765              		.loc 1 424 0
 1766 02b8 4CF25030 		movw	r0, #50000
 1767 02bc FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 425:.\main.c      ****                                     break;
 1768              		.loc 1 425 0
 1769 02c0 45E0     		b	.L72
 1770              	.L71:
 426:.\main.c      ****                                     case 'U':
 427:.\main.c      ****                                         // Direction not tracked any more
 428:.\main.c      ****                                         initTurnU();
 1771              		.loc 1 428 0
 1772 02c2 FFF7FEFF 		bl	initTurnU
 429:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 1773              		.loc 1 429 0
 1774 02c6 2048     		ldr	r0, .L98+104
 1775 02c8 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 430:.\main.c      ****                                         target_distance_quad -= U_OFFSET;
 1776              		.loc 1 430 0
 1777 02cc 1D4B     		ldr	r3, .L98+100
 1778 02ce 1B88     		ldrh	r3, [r3]
 1779 02d0 9BB2     		uxth	r3, r3
 1780 02d2 783B     		subs	r3, r3, #120
 1781 02d4 9BB2     		uxth	r3, r3
 1782 02d6 9AB2     		uxth	r2, r3
 1783 02d8 1A4B     		ldr	r3, .L98+100
 1784 02da 1A80     		strh	r2, [r3]	@ movhi
 431:.\main.c      ****                                         //target_distance_quad += 208;
 432:.\main.c      ****                                     break;
 1785              		.loc 1 432 0
 1786 02dc 37E0     		b	.L72
 1787              	.L99:
 1788 02de 00BF     		.align	2
 1789              	.L98:
 1790 02e0 00000000 		.word	isr_quad1
 1791 02e4 00000000 		.word	isr_turn_timer
 1792 02e8 00000000 		.word	button
 1793 02ec 00000000 		.word	isr_deadzone
 1794 02f0 00000000 		.word	BIN_ENABLED
 1795 02f4 00000000 		.word	BT_ENABLED
 1796 02f8 00000000 		.word	frontSensors
 1797 02fc 00000000 		.word	track_mode
 1798 0300 00000000 		.word	movement_state
 1799 0304 00000000 		.word	initial_pos_valid
 1800 0308 00000000 		.word	system_state
 1801 030c 00000000 		.word	initial_x_pos
 1802 0310 00000000 		.word	initial_y_pos
 1803 0314 00000000 		.word	instructionCount
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 41


 1804 0318 00000000 		.word	instructions
 1805 031c 00000000 		.word	leftOn
 1806 0320 00000000 		.word	rightOn
 1807 0324 00000000 		.word	sensorsDisabled
 1808 0328 00000000 		.word	accum_dist
 1809 032c 24000000 		.word	.LC2
 1810 0330 00000000 		.word	reached_target
 1811 0334 38000000 		.word	.LC3
 1812 0338 50000000 		.word	.LC4
 1813 033c 00000000 		.word	deadzone
 1814 0340 00000000 		.word	instructionLength
 1815 0344 00000000 		.word	target_distance_quad
 1816 0348 905F0100 		.word	90000
 1817              	.L96:
 433:.\main.c      ****                                     
 434:.\main.c      ****                                     default:
 435:.\main.c      ****                                         //do nothing
 436:.\main.c      ****                                         break;
 1818              		.loc 1 436 0
 1819 034c 00BF     		nop
 1820              	.L72:
 437:.\main.c      ****                                 }
 438:.\main.c      ****                                 if(target_distance_quad < 0) target_distance_quad = 0;
 1821              		.loc 1 438 0
 1822 034e C04B     		ldr	r3, .L100
 1823 0350 1B88     		ldrh	r3, [r3]
 1824 0352 1BB2     		sxth	r3, r3
 1825 0354 002B     		cmp	r3, #0
 1826 0356 02DA     		bge	.L73
 1827              		.loc 1 438 0 is_stmt 0 discriminator 1
 1828 0358 BD4B     		ldr	r3, .L100
 1829 035a 0022     		movs	r2, #0
 1830 035c 1A80     		strh	r2, [r3]	@ movhi
 1831              	.L73:
 439:.\main.c      ****                                 sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 1832              		.loc 1 439 0 is_stmt 1
 1833 035e BC4B     		ldr	r3, .L100
 1834 0360 1B88     		ldrh	r3, [r3]
 1835 0362 1BB2     		sxth	r3, r3
 1836 0364 07F11002 		add	r2, r7, #16
 1837 0368 1046     		mov	r0, r2
 1838 036a BA49     		ldr	r1, .L100+4
 1839 036c 1A46     		mov	r2, r3
 1840 036e FFF7FEFF 		bl	sprintf
 440:.\main.c      ****                                  UART_PutString(mes);
 1841              		.loc 1 440 0
 1842 0372 07F11003 		add	r3, r7, #16
 1843 0376 1846     		mov	r0, r3
 1844 0378 FFF7FEFF 		bl	UART_PutString
 441:.\main.c      ****                                 
 442:.\main.c      ****                                 Timer_Deadzone_Start();
 1845              		.loc 1 442 0
 1846 037c FFF7FEFF 		bl	Timer_Deadzone_Start
 443:.\main.c      ****                                 reached_target = 0;
 1847              		.loc 1 443 0
 1848 0380 B54B     		ldr	r3, .L100+8
 1849 0382 0022     		movs	r2, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 42


 1850 0384 1A70     		strb	r2, [r3]
 444:.\main.c      ****                                 overshot_target = 0;
 1851              		.loc 1 444 0
 1852 0386 B54B     		ldr	r3, .L100+12
 1853 0388 0022     		movs	r2, #0
 1854 038a 1A70     		strb	r2, [r3]
 445:.\main.c      ****                                 instructionCount += 2;
 1855              		.loc 1 445 0
 1856 038c B44B     		ldr	r3, .L100+16
 1857 038e 1B88     		ldrh	r3, [r3]
 1858 0390 0233     		adds	r3, r3, #2
 1859 0392 9AB2     		uxth	r2, r3
 1860 0394 B24B     		ldr	r3, .L100+16
 1861 0396 1A80     		strh	r2, [r3]	@ movhi
 446:.\main.c      ****                                 sprintf(mes, "instr count:%d\r\n", instructionCount);
 1862              		.loc 1 446 0
 1863 0398 B14B     		ldr	r3, .L100+16
 1864 039a 1B88     		ldrh	r3, [r3]
 1865 039c 1A46     		mov	r2, r3
 1866 039e 07F11003 		add	r3, r7, #16
 1867 03a2 1846     		mov	r0, r3
 1868 03a4 AF49     		ldr	r1, .L100+20
 1869 03a6 FFF7FEFF 		bl	sprintf
 447:.\main.c      ****                                 UART_PutString(mes);
 1870              		.loc 1 447 0
 1871 03aa 07F11003 		add	r3, r7, #16
 1872 03ae 1846     		mov	r0, r3
 1873 03b0 FFF7FEFF 		bl	UART_PutString
 1874              	.LBE6:
 1875              	.LBE5:
 377:.\main.c      ****                         {
 1876              		.loc 1 377 0
 1877 03b4 22E1     		b	.L54
 1878              	.L62:
 377:.\main.c      ****                         {
 1879              		.loc 1 377 0 is_stmt 0 discriminator 1
 1880 03b6 21E1     		b	.L54
 1881              	.L61:
 448:.\main.c      ****                                 
 449:.\main.c      ****                             }
 450:.\main.c      ****                             }
 451:.\main.c      ****                         }
 452:.\main.c      ****                     }
 453:.\main.c      **** //                    else if (frontSensors[0] == 0 && frontSensors[1] == 0 && frontSensors[2] == 0
 454:.\main.c      **** //                    {
 455:.\main.c      **** //                        if(sensorsDisabled == 0)
 456:.\main.c      **** //                        {
 457:.\main.c      **** //                                if(0)
 458:.\main.c      **** //                                {
 459:.\main.c      **** //                                    char nextInstruction = instructions[instructionCount+2];
 460:.\main.c      **** //                                    if(nextInstruction == 'U')
 461:.\main.c      **** //                                    {
 462:.\main.c      **** //                                        instructionCount += 2;
 463:.\main.c      **** //                                        nextStep = instructions[instructionCount];
 464:.\main.c      **** //                                    }
 465:.\main.c      **** //                                }
 466:.\main.c      **** //                                
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 43


 467:.\main.c      **** //                                if(nextStep == 'U')
 468:.\main.c      **** //                                {
 469:.\main.c      **** //                                    actionDebounce++;
 470:.\main.c      **** //                                    if(actionDebounce >= 2400)
 471:.\main.c      **** //                                    {
 472:.\main.c      **** //                                        if(reached_target == 1)
 473:.\main.c      **** //                                        {
 474:.\main.c      **** //                                    char mes[16];
 475:.\main.c      **** //                                    sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 476:.\main.c      **** //                                     UART_PutString(mes);
 477:.\main.c      **** //                                         accum_dist = 0;
 478:.\main.c      **** //                                    uint8 nextStepDist;
 479:.\main.c      **** //                                    if(instructionCount <= instructionLength - 5) nextStepDist = 
 480:.\main.c      **** //                                    else nextStepDist = 0;
 481:.\main.c      **** //                                    
 482:.\main.c      **** //                                    target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 483:.\main.c      **** //                                    target_distance_quad -= U_OFFSET;
 484:.\main.c      **** //                                    //target_distance_quad += 208;
 485:.\main.c      **** //                                    
 486:.\main.c      **** //                                        UART_PutString("Trigger white light\r\n");
 487:.\main.c      **** //                                        UART_PutString("Deadzone enter\r\n");
 488:.\main.c      **** //                                        
 489:.\main.c      **** //                                        deadzone = 1;
 490:.\main.c      **** //                                        Timer_Deadzone_WriteCounter(U_DEADZONE);
 491:.\main.c      **** //                                        if(target_distance_quad < 0) target_distance_quad = 0;
 492:.\main.c      **** //                                        Timer_Deadzone_Start();
 493:.\main.c      **** //                                        actionDebounce = 0;
 494:.\main.c      **** //                                        sensorsDisabled = 1;
 495:.\main.c      **** //                                        initTurnU();
 496:.\main.c      **** //                                        reached_target = 0;
 497:.\main.c      **** //                                        overshot_target = 0;
 498:.\main.c      **** //                                        instructionCount += 2;
 499:.\main.c      **** //                                        
 500:.\main.c      **** //                                        sprintf(mes, "Target dist: %d\r\n", target_distance_quad)
 501:.\main.c      **** //                                        UART_PutString(mes);
 502:.\main.c      **** //                                        sprintf(mes, "instr count:%d\r\n", instructionCount);
 503:.\main.c      **** //                                        UART_PutString(mes);
 504:.\main.c      **** //                                }
 505:.\main.c      **** //                                }
 506:.\main.c      **** //                            }
 507:.\main.c      **** //                        }
 508:.\main.c      **** //                    }
 509:.\main.c      ****                     //else if (overshot_target == 1 && (nextStep == 'D' || nextStep == 'U' || nextS
 510:.\main.c      ****                     else if (overshot_target == 1)
 1882              		.loc 1 510 0 is_stmt 1
 1883 03b8 A84B     		ldr	r3, .L100+12
 1884 03ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1885 03bc 012B     		cmp	r3, #1
 1886 03be 40F01881 		bne	.L74
 1887              	.LBB7:
 511:.\main.c      ****                     {
 512:.\main.c      ****                         
 513:.\main.c      ****                                 //instructionCount += 2;
 514:.\main.c      ****                                 //nextStep = instructions[instructionCount]; 
 515:.\main.c      ****                                 char mes[16];
 516:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1888              		.loc 1 516 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 44


 1889 03c2 A94B     		ldr	r3, .L100+24
 1890 03c4 1B88     		ldrh	r3, [r3]
 1891 03c6 1BB2     		sxth	r3, r3
 1892 03c8 3A46     		mov	r2, r7
 1893 03ca 1046     		mov	r0, r2
 1894 03cc A749     		ldr	r1, .L100+28
 1895 03ce 1A46     		mov	r2, r3
 1896 03d0 FFF7FEFF 		bl	sprintf
 517:.\main.c      ****                                  UART_PutString(mes);
 1897              		.loc 1 517 0
 1898 03d4 3B46     		mov	r3, r7
 1899 03d6 1846     		mov	r0, r3
 1900 03d8 FFF7FEFF 		bl	UART_PutString
 518:.\main.c      ****                                  accum_dist = 0;
 1901              		.loc 1 518 0
 1902 03dc A24B     		ldr	r3, .L100+24
 1903 03de 0022     		movs	r2, #0
 1904 03e0 1A80     		strh	r2, [r3]	@ movhi
 519:.\main.c      ****                                 uint8 nextStepDist;
 520:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 1905              		.loc 1 520 0
 1906 03e2 9F4B     		ldr	r3, .L100+16
 1907 03e4 1B88     		ldrh	r3, [r3]
 1908 03e6 1A46     		mov	r2, r3
 1909 03e8 A14B     		ldr	r3, .L100+32
 1910 03ea 1B88     		ldrh	r3, [r3]
 1911 03ec 053B     		subs	r3, r3, #5
 1912 03ee 9A42     		cmp	r2, r3
 1913 03f0 07DC     		bgt	.L75
 1914              		.loc 1 520 0 is_stmt 0 discriminator 1
 1915 03f2 9B4B     		ldr	r3, .L100+16
 1916 03f4 1B88     		ldrh	r3, [r3]
 1917 03f6 0333     		adds	r3, r3, #3
 1918 03f8 9E4A     		ldr	r2, .L100+36
 1919 03fa D35C     		ldrb	r3, [r2, r3]
 1920 03fc 87F82430 		strb	r3, [r7, #36]
 1921 0400 02E0     		b	.L76
 1922              	.L75:
 521:.\main.c      ****                                 else nextStepDist = 0;
 1923              		.loc 1 521 0 is_stmt 1
 1924 0402 0023     		movs	r3, #0
 1925 0404 87F82430 		strb	r3, [r7, #36]
 1926              	.L76:
 522:.\main.c      ****                                 
 523:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 1927              		.loc 1 523 0
 1928 0408 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 1929 040c 9BB2     		uxth	r3, r3
 1930 040e 1A46     		mov	r2, r3	@ movhi
 1931 0410 D200     		lsls	r2, r2, #3
 1932 0412 1344     		add	r3, r3, r2
 1933 0414 1B01     		lsls	r3, r3, #4
 1934 0416 9BB2     		uxth	r3, r3
 1935 0418 9AB2     		uxth	r2, r3
 1936 041a 8D4B     		ldr	r3, .L100
 1937 041c 1A80     		strh	r2, [r3]	@ movhi
 524:.\main.c      ****                                 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 45


 525:.\main.c      ****                                 
 526:.\main.c      ****                                     UART_PutString("Trigger quad\r\n");
 1938              		.loc 1 526 0
 1939 041e 9648     		ldr	r0, .L100+40
 1940 0420 FFF7FEFF 		bl	UART_PutString
 527:.\main.c      ****                                     switch(nextStep)
 1941              		.loc 1 527 0
 1942 0424 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1943 0428 443B     		subs	r3, r3, #68
 1944 042a 112B     		cmp	r3, #17
 1945 042c 00F2B380 		bhi	.L77
 1946 0430 01A2     		adr	r2, .L79
 1947 0432 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1948 0436 00BF     		.p2align 2
 1949              	.L79:
 1950 0438 C9040000 		.word	.L78+1
 1951 043c 97050000 		.word	.L77+1
 1952 0440 97050000 		.word	.L77+1
 1953 0444 97050000 		.word	.L77+1
 1954 0448 97050000 		.word	.L77+1
 1955 044c 97050000 		.word	.L77+1
 1956 0450 97050000 		.word	.L77+1
 1957 0454 97050000 		.word	.L77+1
 1958 0458 47050000 		.word	.L80+1
 1959 045c 97050000 		.word	.L77+1
 1960 0460 97050000 		.word	.L77+1
 1961 0464 97050000 		.word	.L77+1
 1962 0468 97050000 		.word	.L77+1
 1963 046c 97050000 		.word	.L77+1
 1964 0470 6F050000 		.word	.L81+1
 1965 0474 FD040000 		.word	.L82+1
 1966 0478 97050000 		.word	.L77+1
 1967 047c 81040000 		.word	.L83+1
 1968              		.p2align 1
 1969              	.L83:
 528:.\main.c      ****                                     {
 529:.\main.c      ****                                         case 'U':
 530:.\main.c      ****                                              Timer_Deadzone_WriteCounter(U_DEADZONE);
 1970              		.loc 1 530 0
 1971 0480 7E48     		ldr	r0, .L100+44
 1972 0482 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 531:.\main.c      ****                                             initTurnU();
 1973              		.loc 1 531 0
 1974 0486 FFF7FEFF 		bl	initTurnU
 532:.\main.c      ****                                             //target_distance_quad += 208;
 533:.\main.c      ****                                             target_distance_quad -= (U_OFFSET - QUAD_PER_UNIT * 0.5
 1975              		.loc 1 533 0
 1976 048a 714B     		ldr	r3, .L100
 1977 048c 1B88     		ldrh	r3, [r3]
 1978 048e 1BB2     		sxth	r3, r3
 1979 0490 1846     		mov	r0, r3
 1980 0492 FFF7FEFF 		bl	__aeabi_i2d
 1981 0496 0246     		mov	r2, r0
 1982 0498 0B46     		mov	r3, r1
 1983 049a 1046     		mov	r0, r2
 1984 049c 1946     		mov	r1, r3
 1985 049e 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 46


 1986 04a2 774B     		ldr	r3, .L100+48
 1987 04a4 FFF7FEFF 		bl	__aeabi_dsub
 1988 04a8 0246     		mov	r2, r0
 1989 04aa 0B46     		mov	r3, r1
 1990 04ac 1046     		mov	r0, r2
 1991 04ae 1946     		mov	r1, r3
 1992 04b0 FFF7FEFF 		bl	__aeabi_d2iz
 1993 04b4 0346     		mov	r3, r0
 1994 04b6 9AB2     		uxth	r2, r3
 1995 04b8 654B     		ldr	r3, .L100
 1996 04ba 1A80     		strh	r2, [r3]	@ movhi
 534:.\main.c      ****                                             Timer_Deadzone_Start();
 1997              		.loc 1 534 0
 1998 04bc FFF7FEFF 		bl	Timer_Deadzone_Start
 535:.\main.c      ****                                              deadzone = 1;
 1999              		.loc 1 535 0
 2000 04c0 704B     		ldr	r3, .L100+52
 2001 04c2 0122     		movs	r2, #1
 2002 04c4 1A70     		strb	r2, [r3]
 536:.\main.c      ****                                         break;
 2003              		.loc 1 536 0
 2004 04c6 66E0     		b	.L77
 2005              	.L78:
 537:.\main.c      ****                                         case 'D':
 538:.\main.c      ****                                             target_distance_quad -= QUAD_PER_UNIT * 0.5;
 2006              		.loc 1 538 0
 2007 04c8 614B     		ldr	r3, .L100
 2008 04ca 1B88     		ldrh	r3, [r3]
 2009 04cc 1BB2     		sxth	r3, r3
 2010 04ce 1846     		mov	r0, r3
 2011 04d0 FFF7FEFF 		bl	__aeabi_i2d
 2012 04d4 0246     		mov	r2, r0
 2013 04d6 0B46     		mov	r3, r1
 2014 04d8 1046     		mov	r0, r2
 2015 04da 1946     		mov	r1, r3
 2016 04dc 4FF00002 		mov	r2, #0
 2017 04e0 694B     		ldr	r3, .L100+56
 2018 04e2 FFF7FEFF 		bl	__aeabi_dsub
 2019 04e6 0246     		mov	r2, r0
 2020 04e8 0B46     		mov	r3, r1
 2021 04ea 1046     		mov	r0, r2
 2022 04ec 1946     		mov	r1, r3
 2023 04ee FFF7FEFF 		bl	__aeabi_d2iz
 2024 04f2 0346     		mov	r3, r0
 2025 04f4 9AB2     		uxth	r2, r3
 2026 04f6 564B     		ldr	r3, .L100
 2027 04f8 1A80     		strh	r2, [r3]	@ movhi
 539:.\main.c      ****                                             //do nothing
 540:.\main.c      ****                                         break;
 2028              		.loc 1 540 0
 2029 04fa 4CE0     		b	.L77
 2030              	.L82:
 541:.\main.c      ****                                         case 'S':
 542:.\main.c      ****                                             inittrackLineZ();
 2031              		.loc 1 542 0
 2032 04fc FFF7FEFF 		bl	inittrackLineZ
 543:.\main.c      ****                                             Timer_Deadzone_WriteCounter(S_DEADZONE);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 47


 2033              		.loc 1 543 0
 2034 0500 42F21070 		movw	r0, #10000
 2035 0504 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 544:.\main.c      ****                                              target_distance_quad -= (QUAD_PER_UNIT * 0.5);
 2036              		.loc 1 544 0
 2037 0508 514B     		ldr	r3, .L100
 2038 050a 1B88     		ldrh	r3, [r3]
 2039 050c 1BB2     		sxth	r3, r3
 2040 050e 1846     		mov	r0, r3
 2041 0510 FFF7FEFF 		bl	__aeabi_i2d
 2042 0514 0246     		mov	r2, r0
 2043 0516 0B46     		mov	r3, r1
 2044 0518 1046     		mov	r0, r2
 2045 051a 1946     		mov	r1, r3
 2046 051c 4FF00002 		mov	r2, #0
 2047 0520 594B     		ldr	r3, .L100+56
 2048 0522 FFF7FEFF 		bl	__aeabi_dsub
 2049 0526 0246     		mov	r2, r0
 2050 0528 0B46     		mov	r3, r1
 2051 052a 1046     		mov	r0, r2
 2052 052c 1946     		mov	r1, r3
 2053 052e FFF7FEFF 		bl	__aeabi_d2iz
 2054 0532 0346     		mov	r3, r0
 2055 0534 9AB2     		uxth	r2, r3
 2056 0536 464B     		ldr	r3, .L100
 2057 0538 1A80     		strh	r2, [r3]	@ movhi
 545:.\main.c      ****                                             Timer_Deadzone_Start();
 2058              		.loc 1 545 0
 2059 053a FFF7FEFF 		bl	Timer_Deadzone_Start
 546:.\main.c      ****                                             deadzone = 1;
 2060              		.loc 1 546 0
 2061 053e 514B     		ldr	r3, .L100+52
 2062 0540 0122     		movs	r2, #1
 2063 0542 1A70     		strb	r2, [r3]
 547:.\main.c      ****                                         break;
 2064              		.loc 1 547 0
 2065 0544 27E0     		b	.L77
 2066              	.L80:
 548:.\main.c      ****                                         case 'L':
 549:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 550:.\main.c      ****                                         initTurnLeft();
 2067              		.loc 1 550 0
 2068 0546 FFF7FEFF 		bl	initTurnLeft
 551:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 2069              		.loc 1 551 0
 2070 054a 4CF25030 		movw	r0, #50000
 2071 054e FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 552:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 2072              		.loc 1 552 0
 2073 0552 3F4B     		ldr	r3, .L100
 2074 0554 1B88     		ldrh	r3, [r3]
 2075 0556 9BB2     		uxth	r3, r3
 2076 0558 8A3B     		subs	r3, r3, #138
 2077 055a 9BB2     		uxth	r3, r3
 2078 055c 9AB2     		uxth	r2, r3
 2079 055e 3C4B     		ldr	r3, .L100
 2080 0560 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 48


 553:.\main.c      ****                                         Timer_Deadzone_Start();
 2081              		.loc 1 553 0
 2082 0562 FFF7FEFF 		bl	Timer_Deadzone_Start
 554:.\main.c      ****                                             deadzone = 1;
 2083              		.loc 1 554 0
 2084 0566 474B     		ldr	r3, .L100+52
 2085 0568 0122     		movs	r2, #1
 2086 056a 1A70     		strb	r2, [r3]
 555:.\main.c      ****                                         break;
 2087              		.loc 1 555 0
 2088 056c 13E0     		b	.L77
 2089              	.L81:
 556:.\main.c      ****                                         case 'R':
 557:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 558:.\main.c      ****                                         initTurnRight();
 2090              		.loc 1 558 0
 2091 056e FFF7FEFF 		bl	initTurnRight
 559:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 2092              		.loc 1 559 0
 2093 0572 374B     		ldr	r3, .L100
 2094 0574 1B88     		ldrh	r3, [r3]
 2095 0576 9BB2     		uxth	r3, r3
 2096 0578 8A3B     		subs	r3, r3, #138
 2097 057a 9BB2     		uxth	r3, r3
 2098 057c 9AB2     		uxth	r2, r3
 2099 057e 344B     		ldr	r3, .L100
 2100 0580 1A80     		strh	r2, [r3]	@ movhi
 560:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 561:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 2101              		.loc 1 561 0
 2102 0582 4CF25030 		movw	r0, #50000
 2103 0586 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 562:.\main.c      ****                                         Timer_Deadzone_Start();
 2104              		.loc 1 562 0
 2105 058a FFF7FEFF 		bl	Timer_Deadzone_Start
 563:.\main.c      ****                                             deadzone = 1;
 2106              		.loc 1 563 0
 2107 058e 3D4B     		ldr	r3, .L100+52
 2108 0590 0122     		movs	r2, #1
 2109 0592 1A70     		strb	r2, [r3]
 564:.\main.c      ****                                         break;
 2110              		.loc 1 564 0
 2111 0594 00BF     		nop
 2112              	.L77:
 565:.\main.c      ****                                     }                                   
 566:.\main.c      ****                                     reached_target = 0;
 2113              		.loc 1 566 0
 2114 0596 304B     		ldr	r3, .L100+8
 2115 0598 0022     		movs	r2, #0
 2116 059a 1A70     		strb	r2, [r3]
 567:.\main.c      ****                                     overshot_target = 0;
 2117              		.loc 1 567 0
 2118 059c 2F4B     		ldr	r3, .L100+12
 2119 059e 0022     		movs	r2, #0
 2120 05a0 1A70     		strb	r2, [r3]
 568:.\main.c      ****                                     instructionCount += 2;
 2121              		.loc 1 568 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 49


 2122 05a2 2F4B     		ldr	r3, .L100+16
 2123 05a4 1B88     		ldrh	r3, [r3]
 2124 05a6 0233     		adds	r3, r3, #2
 2125 05a8 9AB2     		uxth	r2, r3
 2126 05aa 2D4B     		ldr	r3, .L100+16
 2127 05ac 1A80     		strh	r2, [r3]	@ movhi
 569:.\main.c      ****                                     if(target_distance_quad < 0) target_distance_quad = 0;
 2128              		.loc 1 569 0
 2129 05ae 284B     		ldr	r3, .L100
 2130 05b0 1B88     		ldrh	r3, [r3]
 2131 05b2 1BB2     		sxth	r3, r3
 2132 05b4 002B     		cmp	r3, #0
 2133 05b6 02DA     		bge	.L84
 2134              		.loc 1 569 0 is_stmt 0 discriminator 1
 2135 05b8 254B     		ldr	r3, .L100
 2136 05ba 0022     		movs	r2, #0
 2137 05bc 1A80     		strh	r2, [r3]	@ movhi
 2138              	.L84:
 570:.\main.c      ****                                     //Timer_Deadzone_Start();
 571:.\main.c      ****                                     //deadzone = 1;
 572:.\main.c      ****                                     sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2139              		.loc 1 572 0 is_stmt 1 discriminator 3
 2140 05be 244B     		ldr	r3, .L100
 2141 05c0 1B88     		ldrh	r3, [r3]
 2142 05c2 1BB2     		sxth	r3, r3
 2143 05c4 3A46     		mov	r2, r7
 2144 05c6 1046     		mov	r0, r2
 2145 05c8 2249     		ldr	r1, .L100+4
 2146 05ca 1A46     		mov	r2, r3
 2147 05cc FFF7FEFF 		bl	sprintf
 573:.\main.c      ****                                     UART_PutString(mes);
 2148              		.loc 1 573 0 discriminator 3
 2149 05d0 3B46     		mov	r3, r7
 2150 05d2 1846     		mov	r0, r3
 2151 05d4 FFF7FEFF 		bl	UART_PutString
 574:.\main.c      ****                                     sprintf(mes, "instr count:%d\r\n", instructionCount);
 2152              		.loc 1 574 0 discriminator 3
 2153 05d8 214B     		ldr	r3, .L100+16
 2154 05da 1B88     		ldrh	r3, [r3]
 2155 05dc 1A46     		mov	r2, r3
 2156 05de 3B46     		mov	r3, r7
 2157 05e0 1846     		mov	r0, r3
 2158 05e2 2049     		ldr	r1, .L100+20
 2159 05e4 FFF7FEFF 		bl	sprintf
 575:.\main.c      ****                                     UART_PutString(mes);
 2160              		.loc 1 575 0 discriminator 3
 2161 05e8 3B46     		mov	r3, r7
 2162 05ea 1846     		mov	r0, r3
 2163 05ec FFF7FEFF 		bl	UART_PutString
 2164              	.LBE7:
 2165 05f0 04E0     		b	.L54
 2166              	.L74:
 576:.\main.c      ****                     }
 577:.\main.c      ****                     else
 578:.\main.c      ****                     {
 579:.\main.c      ****                         inittrackLineZ();
 2167              		.loc 1 579 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 50


 2168 05f2 FFF7FEFF 		bl	inittrackLineZ
 580:.\main.c      ****                         actionDebounce = 0;
 2169              		.loc 1 580 0
 2170 05f6 0023     		movs	r3, #0
 2171 05f8 FB84     		strh	r3, [r7, #38]	@ movhi
 2172              	.LBE4:
 581:.\main.c      ****                     }
 582:.\main.c      ****                 }
 583:.\main.c      ****                 break;
 2173              		.loc 1 583 0
 2174 05fa FFE7     		b	.L97
 2175              	.L54:
 2176              	.L97:
 2177 05fc 00BF     		nop
 2178              	.L41:
 584:.\main.c      ****         }
 585:.\main.c      ****         
 586:.\main.c      ****         switch(movement_state)
 2179              		.loc 1 586 0
 2180 05fe 234B     		ldr	r3, .L100+60
 2181 0600 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2182 0602 072B     		cmp	r3, #7
 2183 0604 3FF62FAD 		bhi	.L95
 2184 0608 01A2     		adr	r2, .L87
 2185 060a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2186 060e 00BF     		.p2align 2
 2187              	.L87:
 2188 0610 31060000 		.word	.L86+1
 2189 0614 37060000 		.word	.L88+1
 2190 0618 3D060000 		.word	.L89+1
 2191 061c 49060000 		.word	.L90+1
 2192 0620 91060000 		.word	.L91+1
 2193 0624 97060000 		.word	.L92+1
 2194 0628 9D060000 		.word	.L93+1
 2195 062c 43060000 		.word	.L94+1
 2196              		.p2align 1
 2197              	.L86:
 587:.\main.c      ****         {
 588:.\main.c      ****             case DRIVE:
 589:.\main.c      ****                 driveForwards();
 2198              		.loc 1 589 0
 2199 0630 FFF7FEFF 		bl	driveForwards
 590:.\main.c      ****             break;
 2200              		.loc 1 590 0
 2201 0634 34E0     		b	.L85
 2202              	.L88:
 591:.\main.c      ****             case LTURN:
 592:.\main.c      ****                 turnLeft();
 2203              		.loc 1 592 0
 2204 0636 FFF7FEFF 		bl	turnLeft
 593:.\main.c      ****             break;
 2205              		.loc 1 593 0
 2206 063a 31E0     		b	.L85
 2207              	.L89:
 594:.\main.c      ****             case RTURN:
 595:.\main.c      ****                 turnRight();
 2208              		.loc 1 595 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 51


 2209 063c FFF7FEFF 		bl	turnRight
 596:.\main.c      ****             break;
 2210              		.loc 1 596 0
 2211 0640 2EE0     		b	.L85
 2212              	.L94:
 597:.\main.c      ****             case UTURN:
 598:.\main.c      ****                 turnU();
 2213              		.loc 1 598 0
 2214 0642 FFF7FEFF 		bl	turnU
 599:.\main.c      ****             break;
 2215              		.loc 1 599 0
 2216 0646 2BE0     		b	.L85
 2217              	.L90:
 600:.\main.c      ****             case STOPPED:
 601:.\main.c      ****                 brakeMotor();
 2218              		.loc 1 601 0
 2219 0648 FFF7FEFF 		bl	brakeMotor
 602:.\main.c      ****             break;
 2220              		.loc 1 602 0
 2221 064c 28E0     		b	.L85
 2222              	.L101:
 2223 064e 00BF     		.align	2
 2224              	.L100:
 2225 0650 00000000 		.word	target_distance_quad
 2226 0654 64000000 		.word	.LC5
 2227 0658 00000000 		.word	reached_target
 2228 065c 00000000 		.word	overshot_target
 2229 0660 00000000 		.word	instructionCount
 2230 0664 78000000 		.word	.LC6
 2231 0668 00000000 		.word	accum_dist
 2232 066c 24000000 		.word	.LC2
 2233 0670 00000000 		.word	instructionLength
 2234 0674 00000000 		.word	instructions
 2235 0678 8C000000 		.word	.LC7
 2236 067c 905F0100 		.word	90000
 2237 0680 00004840 		.word	1078460416
 2238 0684 00000000 		.word	deadzone
 2239 0688 00005240 		.word	1079115776
 2240 068c 00000000 		.word	movement_state
 2241              	.L91:
 603:.\main.c      ****             case TRACKING:
 604:.\main.c      ****                 trackLine();
 2242              		.loc 1 604 0
 2243 0690 FFF7FEFF 		bl	trackLine
 605:.\main.c      ****             break;
 2244              		.loc 1 605 0
 2245 0694 04E0     		b	.L85
 2246              	.L92:
 606:.\main.c      ****             case TRACKING_U:
 607:.\main.c      ****                 trackLineU();
 2247              		.loc 1 607 0
 2248 0696 FFF7FEFF 		bl	trackLineU
 608:.\main.c      ****             break;
 2249              		.loc 1 608 0
 2250 069a 01E0     		b	.L85
 2251              	.L93:
 609:.\main.c      ****             case TRACKING_SOFT:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 52


 610:.\main.c      ****                 trackLineZ();
 2252              		.loc 1 610 0
 2253 069c FFF7FEFF 		bl	trackLineZ
 2254              	.L85:
 611:.\main.c      ****         }      
 612:.\main.c      ****     }   
 2255              		.loc 1 612 0
 2256 06a0 E1E4     		b	.L95
 2257              		.cfi_endproc
 2258              	.LFE71:
 2259              		.size	main, .-main
 2260 06a2 00BF     		.section	.text.handle_rx_binary,"ax",%progbits
 2261              		.align	2
 2262              		.global	handle_rx_binary
 2263              		.thumb
 2264              		.thumb_func
 2265              		.type	handle_rx_binary, %function
 2266              	handle_rx_binary:
 2267              	.LFB72:
 613:.\main.c      **** }
 614:.\main.c      **** 
 615:.\main.c      **** /*-------------------------------------------------------------------------------------------------
 616:.\main.c      **** 
 617:.\main.c      **** void handle_rx_binary()
 618:.\main.c      **** {
 2268              		.loc 1 618 0
 2269              		.cfi_startproc
 2270              		@ args = 0, pretend = 0, frame = 32
 2271              		@ frame_needed = 1, uses_anonymous_args = 0
 2272              		@ link register save eliminated.
 2273 0000 80B4     		push	{r7}
 2274              		.cfi_def_cfa_offset 4
 2275              		.cfi_offset 7, -4
 2276 0002 89B0     		sub	sp, sp, #36
 2277              		.cfi_def_cfa_offset 40
 2278 0004 00AF     		add	r7, sp, #0
 2279              		.cfi_def_cfa_register 7
 619:.\main.c      ****     if(flag_rx == 1)
 2280              		.loc 1 619 0
 2281 0006 524B     		ldr	r3, .L122
 2282 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2283 000a 012B     		cmp	r3, #1
 2284 000c 40F09A80 		bne	.L102
 2285              	.LBB8:
 620:.\main.c      ****     {    
 621:.\main.c      ****         flag_rx = 0;
 2286              		.loc 1 621 0
 2287 0010 4F4B     		ldr	r3, .L122
 2288 0012 0022     		movs	r2, #0
 2289 0014 1A70     		strb	r2, [r3]
 622:.\main.c      ****         
 623:.\main.c      ****         uint16 packet_bytes = (packet[1] << 8) | (packet[0]);
 2290              		.loc 1 623 0
 2291 0016 4F4B     		ldr	r3, .L122+4
 2292 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2293 001a 1B02     		lsls	r3, r3, #8
 2294 001c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 53


 2295 001e 4D4B     		ldr	r3, .L122+4
 2296 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2297 0022 9BB2     		uxth	r3, r3
 2298 0024 1343     		orrs	r3, r3, r2
 2299 0026 9BB2     		uxth	r3, r3
 2300 0028 FB83     		strh	r3, [r7, #30]	@ movhi
 624:.\main.c      ****         char byte_packet[12];
 625:.\main.c      ****         char string_packet[12];
 626:.\main.c      ****         
 627:.\main.c      ****         switch(byteCount)
 2301              		.loc 1 627 0
 2302 002a 4B4B     		ldr	r3, .L122+8
 2303 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2304 002e 043B     		subs	r3, r3, #4
 2305 0030 1E2B     		cmp	r3, #30
 2306 0032 00F28780 		bhi	.L102
 2307 0036 01A2     		adr	r2, .L106
 2308 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2309              		.p2align 2
 2310              	.L106:
 2311 003c B9000000 		.word	.L105+1
 2312 0040 45010000 		.word	.L102+1
 2313 0044 CD000000 		.word	.L107+1
 2314 0048 45010000 		.word	.L102+1
 2315 004c D5000000 		.word	.L108+1
 2316 0050 45010000 		.word	.L102+1
 2317 0054 DD000000 		.word	.L109+1
 2318 0058 45010000 		.word	.L102+1
 2319 005c E5000000 		.word	.L110+1
 2320 0060 45010000 		.word	.L102+1
 2321 0064 ED000000 		.word	.L111+1
 2322 0068 45010000 		.word	.L102+1
 2323 006c F5000000 		.word	.L112+1
 2324 0070 45010000 		.word	.L102+1
 2325 0074 FD000000 		.word	.L113+1
 2326 0078 45010000 		.word	.L102+1
 2327 007c 05010000 		.word	.L114+1
 2328 0080 45010000 		.word	.L102+1
 2329 0084 0D010000 		.word	.L115+1
 2330 0088 45010000 		.word	.L102+1
 2331 008c 15010000 		.word	.L116+1
 2332 0090 45010000 		.word	.L102+1
 2333 0094 1D010000 		.word	.L117+1
 2334 0098 45010000 		.word	.L102+1
 2335 009c 25010000 		.word	.L118+1
 2336 00a0 45010000 		.word	.L102+1
 2337 00a4 2D010000 		.word	.L119+1
 2338 00a8 45010000 		.word	.L102+1
 2339 00ac 35010000 		.word	.L120+1
 2340 00b0 45010000 		.word	.L102+1
 2341 00b4 3D010000 		.word	.L121+1
 2342              		.p2align 1
 2343              	.L105:
 628:.\main.c      ****         {
 629:.\main.c      ****             case 4:
 630:.\main.c      ****                 buffer_state.rssi = packet[0];
 2344              		.loc 1 630 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 54


 2345 00b8 264B     		ldr	r3, .L122+4
 2346 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2347 00bc DAB2     		uxtb	r2, r3
 2348 00be 274B     		ldr	r3, .L122+12
 2349 00c0 1A70     		strb	r2, [r3]
 631:.\main.c      ****                 buffer_state.index = packet[1];
 2350              		.loc 1 631 0
 2351 00c2 244B     		ldr	r3, .L122+4
 2352 00c4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2353 00c6 254B     		ldr	r3, .L122+12
 2354 00c8 5A70     		strb	r2, [r3, #1]
 632:.\main.c      ****             break;
 2355              		.loc 1 632 0
 2356 00ca 3BE0     		b	.L102
 2357              	.L107:
 633:.\main.c      ****             case 6:
 634:.\main.c      ****                 buffer_state.robot_xpos = packet_bytes;
 2358              		.loc 1 634 0
 2359 00cc FA8B     		ldrh	r2, [r7, #30]
 2360 00ce 234B     		ldr	r3, .L122+12
 2361 00d0 5A80     		strh	r2, [r3, #2]	@ movhi
 635:.\main.c      ****             break;
 2362              		.loc 1 635 0
 2363 00d2 37E0     		b	.L102
 2364              	.L108:
 636:.\main.c      ****             case 8:
 637:.\main.c      ****                 buffer_state.robot_ypos = packet_bytes;
 2365              		.loc 1 637 0
 2366 00d4 FA8B     		ldrh	r2, [r7, #30]
 2367 00d6 214B     		ldr	r3, .L122+12
 2368 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 638:.\main.c      ****             break;
 2369              		.loc 1 638 0
 2370 00da 33E0     		b	.L102
 2371              	.L109:
 639:.\main.c      ****             case 10:
 640:.\main.c      ****                 buffer_state.robot_orientation = packet_bytes;
 2372              		.loc 1 640 0
 2373 00dc FA8B     		ldrh	r2, [r7, #30]
 2374 00de 1F4B     		ldr	r3, .L122+12
 2375 00e0 DA80     		strh	r2, [r3, #6]	@ movhi
 641:.\main.c      ****             break;
 2376              		.loc 1 641 0
 2377 00e2 2FE0     		b	.L102
 2378              	.L110:
 642:.\main.c      ****             case 12:
 643:.\main.c      ****                 buffer_state.g0_xpos = packet_bytes;
 2379              		.loc 1 643 0
 2380 00e4 FA8B     		ldrh	r2, [r7, #30]
 2381 00e6 1D4B     		ldr	r3, .L122+12
 2382 00e8 1A81     		strh	r2, [r3, #8]	@ movhi
 644:.\main.c      ****             break;
 2383              		.loc 1 644 0
 2384 00ea 2BE0     		b	.L102
 2385              	.L111:
 645:.\main.c      ****             case 14:
 646:.\main.c      ****                 buffer_state.g0_ypos = packet_bytes;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 55


 2386              		.loc 1 646 0
 2387 00ec FA8B     		ldrh	r2, [r7, #30]
 2388 00ee 1B4B     		ldr	r3, .L122+12
 2389 00f0 5A81     		strh	r2, [r3, #10]	@ movhi
 647:.\main.c      ****             break;
 2390              		.loc 1 647 0
 2391 00f2 27E0     		b	.L102
 2392              	.L112:
 648:.\main.c      ****             case 16:
 649:.\main.c      ****                 buffer_state.g0_speed = packet_bytes;
 2393              		.loc 1 649 0
 2394 00f4 FA8B     		ldrh	r2, [r7, #30]
 2395 00f6 194B     		ldr	r3, .L122+12
 2396 00f8 9A81     		strh	r2, [r3, #12]	@ movhi
 650:.\main.c      ****             break;
 2397              		.loc 1 650 0
 2398 00fa 23E0     		b	.L102
 2399              	.L113:
 651:.\main.c      ****             case 18:
 652:.\main.c      ****                 buffer_state.g0_direction = packet_bytes;
 2400              		.loc 1 652 0
 2401 00fc FA8B     		ldrh	r2, [r7, #30]
 2402 00fe 174B     		ldr	r3, .L122+12
 2403 0100 DA81     		strh	r2, [r3, #14]	@ movhi
 653:.\main.c      ****             break;
 2404              		.loc 1 653 0
 2405 0102 1FE0     		b	.L102
 2406              	.L114:
 654:.\main.c      ****             case 20:
 655:.\main.c      ****                 buffer_state.g1_xpos = packet_bytes;
 2407              		.loc 1 655 0
 2408 0104 FA8B     		ldrh	r2, [r7, #30]
 2409 0106 154B     		ldr	r3, .L122+12
 2410 0108 1A82     		strh	r2, [r3, #16]	@ movhi
 656:.\main.c      ****             break;
 2411              		.loc 1 656 0
 2412 010a 1BE0     		b	.L102
 2413              	.L115:
 657:.\main.c      ****             case 22:
 658:.\main.c      ****                 buffer_state.g1_ypos = packet_bytes;
 2414              		.loc 1 658 0
 2415 010c FA8B     		ldrh	r2, [r7, #30]
 2416 010e 134B     		ldr	r3, .L122+12
 2417 0110 5A82     		strh	r2, [r3, #18]	@ movhi
 659:.\main.c      ****             break;
 2418              		.loc 1 659 0
 2419 0112 17E0     		b	.L102
 2420              	.L116:
 660:.\main.c      ****             case 24:
 661:.\main.c      ****                 buffer_state.g1_speed = packet_bytes;
 2421              		.loc 1 661 0
 2422 0114 FA8B     		ldrh	r2, [r7, #30]
 2423 0116 114B     		ldr	r3, .L122+12
 2424 0118 9A82     		strh	r2, [r3, #20]	@ movhi
 662:.\main.c      ****             break;
 2425              		.loc 1 662 0
 2426 011a 13E0     		b	.L102
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 56


 2427              	.L117:
 663:.\main.c      ****             case 26:
 664:.\main.c      ****                 buffer_state.g1_direction = packet_bytes;
 2428              		.loc 1 664 0
 2429 011c FA8B     		ldrh	r2, [r7, #30]
 2430 011e 0F4B     		ldr	r3, .L122+12
 2431 0120 DA82     		strh	r2, [r3, #22]	@ movhi
 665:.\main.c      ****             break;
 2432              		.loc 1 665 0
 2433 0122 0FE0     		b	.L102
 2434              	.L118:
 666:.\main.c      ****             case 28:
 667:.\main.c      ****                 buffer_state.g2_xpos = packet_bytes;
 2435              		.loc 1 667 0
 2436 0124 FA8B     		ldrh	r2, [r7, #30]
 2437 0126 0D4B     		ldr	r3, .L122+12
 2438 0128 1A83     		strh	r2, [r3, #24]	@ movhi
 668:.\main.c      ****             break;
 2439              		.loc 1 668 0
 2440 012a 0BE0     		b	.L102
 2441              	.L119:
 669:.\main.c      ****             case 30:
 670:.\main.c      ****                 buffer_state.g2_ypos = packet_bytes;
 2442              		.loc 1 670 0
 2443 012c FA8B     		ldrh	r2, [r7, #30]
 2444 012e 0B4B     		ldr	r3, .L122+12
 2445 0130 5A83     		strh	r2, [r3, #26]	@ movhi
 671:.\main.c      ****             break;
 2446              		.loc 1 671 0
 2447 0132 07E0     		b	.L102
 2448              	.L120:
 672:.\main.c      ****             case 32:
 673:.\main.c      ****                 buffer_state.g2_speed = packet_bytes;
 2449              		.loc 1 673 0
 2450 0134 FA8B     		ldrh	r2, [r7, #30]
 2451 0136 094B     		ldr	r3, .L122+12
 2452 0138 9A83     		strh	r2, [r3, #28]	@ movhi
 674:.\main.c      ****             break;
 2453              		.loc 1 674 0
 2454 013a 03E0     		b	.L102
 2455              	.L121:
 675:.\main.c      ****             case 34:
 676:.\main.c      ****                 buffer_state.g2_direction = packet_bytes;
 2456              		.loc 1 676 0
 2457 013c FA8B     		ldrh	r2, [r7, #30]
 2458 013e 074B     		ldr	r3, .L122+12
 2459 0140 DA83     		strh	r2, [r3, #30]	@ movhi
 677:.\main.c      ****             break;
 2460              		.loc 1 677 0
 2461 0142 00BF     		nop
 2462              	.L102:
 2463              	.LBE8:
 678:.\main.c      ****         }
 679:.\main.c      ****     }
 680:.\main.c      **** }
 2464              		.loc 1 680 0
 2465 0144 2437     		adds	r7, r7, #36
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 57


 2466              		.cfi_def_cfa_offset 4
 2467 0146 BD46     		mov	sp, r7
 2468              		.cfi_def_cfa_register 13
 2469              		@ sp needed
 2470 0148 5DF8047B 		ldr	r7, [sp], #4
 2471              		.cfi_restore 7
 2472              		.cfi_def_cfa_offset 0
 2473 014c 7047     		bx	lr
 2474              	.L123:
 2475 014e 00BF     		.align	2
 2476              	.L122:
 2477 0150 00000000 		.word	flag_rx
 2478 0154 00000000 		.word	packet
 2479 0158 00000000 		.word	byteCount
 2480 015c 00000000 		.word	buffer_state
 2481              		.cfi_endproc
 2482              	.LFE72:
 2483              		.size	handle_rx_binary, .-handle_rx_binary
 2484              		.section	.text.setLeftDir,"ax",%progbits
 2485              		.align	2
 2486              		.global	setLeftDir
 2487              		.thumb
 2488              		.thumb_func
 2489              		.type	setLeftDir, %function
 2490              	setLeftDir:
 2491              	.LFB73:
 681:.\main.c      **** 
 682:.\main.c      **** void setLeftDir(uint8 dir)
 683:.\main.c      **** {
 2492              		.loc 1 683 0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 8
 2495              		@ frame_needed = 1, uses_anonymous_args = 0
 2496 0000 80B5     		push	{r7, lr}
 2497              		.cfi_def_cfa_offset 8
 2498              		.cfi_offset 7, -8
 2499              		.cfi_offset 14, -4
 2500 0002 82B0     		sub	sp, sp, #8
 2501              		.cfi_def_cfa_offset 16
 2502 0004 00AF     		add	r7, sp, #0
 2503              		.cfi_def_cfa_register 7
 2504 0006 0346     		mov	r3, r0
 2505 0008 FB71     		strb	r3, [r7, #7]
 684:.\main.c      ****     M2_IN2_Write(dir);
 2506              		.loc 1 684 0
 2507 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2508 000c 1846     		mov	r0, r3
 2509 000e FFF7FEFF 		bl	M2_IN2_Write
 685:.\main.c      **** }
 2510              		.loc 1 685 0
 2511 0012 0837     		adds	r7, r7, #8
 2512              		.cfi_def_cfa_offset 8
 2513 0014 BD46     		mov	sp, r7
 2514              		.cfi_def_cfa_register 13
 2515              		@ sp needed
 2516 0016 80BD     		pop	{r7, pc}
 2517              		.cfi_endproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 58


 2518              	.LFE73:
 2519              		.size	setLeftDir, .-setLeftDir
 2520              		.section	.text.setRightDir,"ax",%progbits
 2521              		.align	2
 2522              		.global	setRightDir
 2523              		.thumb
 2524              		.thumb_func
 2525              		.type	setRightDir, %function
 2526              	setRightDir:
 2527              	.LFB74:
 686:.\main.c      **** 
 687:.\main.c      **** void setRightDir(uint8 dir)
 688:.\main.c      **** {
 2528              		.loc 1 688 0
 2529              		.cfi_startproc
 2530              		@ args = 0, pretend = 0, frame = 8
 2531              		@ frame_needed = 1, uses_anonymous_args = 0
 2532 0000 80B5     		push	{r7, lr}
 2533              		.cfi_def_cfa_offset 8
 2534              		.cfi_offset 7, -8
 2535              		.cfi_offset 14, -4
 2536 0002 82B0     		sub	sp, sp, #8
 2537              		.cfi_def_cfa_offset 16
 2538 0004 00AF     		add	r7, sp, #0
 2539              		.cfi_def_cfa_register 7
 2540 0006 0346     		mov	r3, r0
 2541 0008 FB71     		strb	r3, [r7, #7]
 689:.\main.c      ****     M1_IN2_Write(dir);
 2542              		.loc 1 689 0
 2543 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2544 000c 1846     		mov	r0, r3
 2545 000e FFF7FEFF 		bl	M1_IN2_Write
 690:.\main.c      **** }
 2546              		.loc 1 690 0
 2547 0012 0837     		adds	r7, r7, #8
 2548              		.cfi_def_cfa_offset 8
 2549 0014 BD46     		mov	sp, r7
 2550              		.cfi_def_cfa_register 13
 2551              		@ sp needed
 2552 0016 80BD     		pop	{r7, pc}
 2553              		.cfi_endproc
 2554              	.LFE74:
 2555              		.size	setRightDir, .-setRightDir
 2556              		.section	.rodata
 2557 009b 00       		.align	2
 2558              	.LC8:
 2559 009c 6469723A 		.ascii	"dir: %d\015\012\000"
 2559      2025640D 
 2559      0A00
 2560              		.section	.text.reverseDirection,"ax",%progbits
 2561              		.align	2
 2562              		.global	reverseDirection
 2563              		.thumb
 2564              		.thumb_func
 2565              		.type	reverseDirection, %function
 2566              	reverseDirection:
 2567              	.LFB75:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 59


 691:.\main.c      **** 
 692:.\main.c      **** void reverseDirection()
 693:.\main.c      **** {
 2568              		.loc 1 693 0
 2569              		.cfi_startproc
 2570              		@ args = 0, pretend = 0, frame = 16
 2571              		@ frame_needed = 1, uses_anonymous_args = 0
 2572 0000 80B5     		push	{r7, lr}
 2573              		.cfi_def_cfa_offset 8
 2574              		.cfi_offset 7, -8
 2575              		.cfi_offset 14, -4
 2576 0002 84B0     		sub	sp, sp, #16
 2577              		.cfi_def_cfa_offset 24
 2578 0004 00AF     		add	r7, sp, #0
 2579              		.cfi_def_cfa_register 7
 694:.\main.c      ****     direction = !direction;
 2580              		.loc 1 694 0
 2581 0006 114B     		ldr	r3, .L127
 2582 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2583 000a 002B     		cmp	r3, #0
 2584 000c 0CBF     		ite	eq
 2585 000e 0123     		moveq	r3, #1
 2586 0010 0023     		movne	r3, #0
 2587 0012 DBB2     		uxtb	r3, r3
 2588 0014 1A46     		mov	r2, r3
 2589 0016 0D4B     		ldr	r3, .L127
 2590 0018 1A70     		strb	r2, [r3]
 695:.\main.c      ****     setLeftDir(direction);
 2591              		.loc 1 695 0
 2592 001a 0C4B     		ldr	r3, .L127
 2593 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2594 001e 1846     		mov	r0, r3
 2595 0020 FFF7FEFF 		bl	setLeftDir
 696:.\main.c      ****     setRightDir(direction);
 2596              		.loc 1 696 0
 2597 0024 094B     		ldr	r3, .L127
 2598 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2599 0028 1846     		mov	r0, r3
 2600 002a FFF7FEFF 		bl	setRightDir
 697:.\main.c      ****     char mes[16];
 698:.\main.c      ****      sprintf(mes, "dir: %d\r\n", direction);
 2601              		.loc 1 698 0
 2602 002e 074B     		ldr	r3, .L127
 2603 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2604 0032 1A46     		mov	r2, r3
 2605 0034 3B46     		mov	r3, r7
 2606 0036 1846     		mov	r0, r3
 2607 0038 0549     		ldr	r1, .L127+4
 2608 003a FFF7FEFF 		bl	sprintf
 699:.\main.c      ****     UART_PutString(mes);
 2609              		.loc 1 699 0
 2610 003e 3B46     		mov	r3, r7
 2611 0040 1846     		mov	r0, r3
 2612 0042 FFF7FEFF 		bl	UART_PutString
 700:.\main.c      **** }
 2613              		.loc 1 700 0
 2614 0046 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 60


 2615              		.cfi_def_cfa_offset 8
 2616 0048 BD46     		mov	sp, r7
 2617              		.cfi_def_cfa_register 13
 2618              		@ sp needed
 2619 004a 80BD     		pop	{r7, pc}
 2620              	.L128:
 2621              		.align	2
 2622              	.L127:
 2623 004c 00000000 		.word	direction
 2624 0050 9C000000 		.word	.LC8
 2625              		.cfi_endproc
 2626              	.LFE75:
 2627              		.size	reverseDirection, .-reverseDirection
 2628              		.global	__aeabi_dcmplt
 2629              		.global	__aeabi_ddiv
 2630              		.section	.text.setSpeed,"ax",%progbits
 2631              		.align	2
 2632              		.global	setSpeed
 2633              		.thumb
 2634              		.thumb_func
 2635              		.type	setSpeed, %function
 2636              	setSpeed:
 2637              	.LFB76:
 701:.\main.c      **** 
 702:.\main.c      **** void setSpeed(double left, double right){
 2638              		.loc 1 702 0
 2639              		.cfi_startproc
 2640              		@ args = 0, pretend = 0, frame = 24
 2641              		@ frame_needed = 1, uses_anonymous_args = 0
 2642 0000 80B5     		push	{r7, lr}
 2643              		.cfi_def_cfa_offset 8
 2644              		.cfi_offset 7, -8
 2645              		.cfi_offset 14, -4
 2646 0002 86B0     		sub	sp, sp, #24
 2647              		.cfi_def_cfa_offset 32
 2648 0004 00AF     		add	r7, sp, #0
 2649              		.cfi_def_cfa_register 7
 2650 0006 C7E90201 		strd	r0, [r7, #8]
 2651 000a C7E90023 		strd	r2, [r7]
 703:.\main.c      ****     if(right < 0.0)
 2652              		.loc 1 703 0
 2653 000e D7E90001 		ldrd	r0, [r7]
 2654 0012 4FF00002 		mov	r2, #0
 2655 0016 4FF00003 		mov	r3, #0
 2656 001a FFF7FEFF 		bl	__aeabi_dcmplt
 2657 001e 0346     		mov	r3, r0
 2658 0020 002B     		cmp	r3, #0
 2659 0022 10D0     		beq	.L138
 704:.\main.c      ****     {
 705:.\main.c      ****         //char mes[16];
 706:.\main.c      ****        // sprintf(mes, "right dir: %d\r\n", !direction);
 707:.\main.c      ****        // UART_PutString(mes);
 708:.\main.c      ****         setRightDir(!direction);
 2660              		.loc 1 708 0
 2661 0024 304B     		ldr	r3, .L140+8
 2662 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2663 0028 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 61


 2664 002a 0CBF     		ite	eq
 2665 002c 0123     		moveq	r3, #1
 2666 002e 0023     		movne	r3, #0
 2667 0030 DBB2     		uxtb	r3, r3
 2668 0032 1846     		mov	r0, r3
 2669 0034 FFF7FEFF 		bl	setRightDir
 709:.\main.c      ****         right = -right;
 2670              		.loc 1 709 0
 2671 0038 3B68     		ldr	r3, [r7]
 2672 003a 3B60     		str	r3, [r7]
 2673 003c 7B68     		ldr	r3, [r7, #4]
 2674 003e 83F00043 		eor	r3, r3, #-2147483648
 2675 0042 7B60     		str	r3, [r7, #4]
 2676 0044 04E0     		b	.L132
 2677              	.L138:
 710:.\main.c      ****     }
 711:.\main.c      ****     else setRightDir(direction);
 2678              		.loc 1 711 0
 2679 0046 284B     		ldr	r3, .L140+8
 2680 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2681 004a 1846     		mov	r0, r3
 2682 004c FFF7FEFF 		bl	setRightDir
 2683              	.L132:
 712:.\main.c      ****     
 713:.\main.c      ****     if(left < 0.0)
 2684              		.loc 1 713 0
 2685 0050 D7E90201 		ldrd	r0, [r7, #8]
 2686 0054 4FF00002 		mov	r2, #0
 2687 0058 4FF00003 		mov	r3, #0
 2688 005c FFF7FEFF 		bl	__aeabi_dcmplt
 2689 0060 0346     		mov	r3, r0
 2690 0062 002B     		cmp	r3, #0
 2691 0064 10D0     		beq	.L139
 714:.\main.c      ****     {
 715:.\main.c      ****        // char mes[16];
 716:.\main.c      ****         //sprintf(mes, "left dir: %d\r\n", !direction);
 717:.\main.c      ****         //UART_PutString(mes);
 718:.\main.c      ****         setLeftDir(!direction);
 2692              		.loc 1 718 0
 2693 0066 204B     		ldr	r3, .L140+8
 2694 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2695 006a 002B     		cmp	r3, #0
 2696 006c 0CBF     		ite	eq
 2697 006e 0123     		moveq	r3, #1
 2698 0070 0023     		movne	r3, #0
 2699 0072 DBB2     		uxtb	r3, r3
 2700 0074 1846     		mov	r0, r3
 2701 0076 FFF7FEFF 		bl	setLeftDir
 719:.\main.c      ****         left = -left;
 2702              		.loc 1 719 0
 2703 007a BB68     		ldr	r3, [r7, #8]
 2704 007c BB60     		str	r3, [r7, #8]
 2705 007e FB68     		ldr	r3, [r7, #12]
 2706 0080 83F00043 		eor	r3, r3, #-2147483648
 2707 0084 FB60     		str	r3, [r7, #12]
 2708 0086 04E0     		b	.L135
 2709              	.L139:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 62


 720:.\main.c      ****     }
 721:.\main.c      ****     else setLeftDir(direction);
 2710              		.loc 1 721 0
 2711 0088 174B     		ldr	r3, .L140+8
 2712 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2713 008c 1846     		mov	r0, r3
 2714 008e FFF7FEFF 		bl	setLeftDir
 2715              	.L135:
 722:.\main.c      ****     
 723:.\main.c      ****     int16 countsLeft = left/QUAD_RATIO;
 2716              		.loc 1 723 0
 2717 0092 D7E90201 		ldrd	r0, [r7, #8]
 2718 0096 12A3     		adr	r3, .L140
 2719 0098 D3E90023 		ldrd	r2, [r3]
 2720 009c FFF7FEFF 		bl	__aeabi_ddiv
 2721 00a0 0246     		mov	r2, r0
 2722 00a2 0B46     		mov	r3, r1
 2723 00a4 1046     		mov	r0, r2
 2724 00a6 1946     		mov	r1, r3
 2725 00a8 FFF7FEFF 		bl	__aeabi_d2iz
 2726 00ac 0346     		mov	r3, r0
 2727 00ae FB82     		strh	r3, [r7, #22]	@ movhi
 724:.\main.c      ****     int16 countsRight = right/QUAD_RATIO;
 2728              		.loc 1 724 0
 2729 00b0 D7E90001 		ldrd	r0, [r7]
 2730 00b4 0AA3     		adr	r3, .L140
 2731 00b6 D3E90023 		ldrd	r2, [r3]
 2732 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2733 00be 0246     		mov	r2, r0
 2734 00c0 0B46     		mov	r3, r1
 2735 00c2 1046     		mov	r0, r2
 2736 00c4 1946     		mov	r1, r3
 2737 00c6 FFF7FEFF 		bl	__aeabi_d2iz
 2738 00ca 0346     		mov	r3, r0
 2739 00cc BB82     		strh	r3, [r7, #20]	@ movhi
 725:.\main.c      ****     
 726:.\main.c      ****     leftSpeedLimit = countsRight;
 2740              		.loc 1 726 0
 2741 00ce 074A     		ldr	r2, .L140+12
 2742 00d0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2743 00d2 1380     		strh	r3, [r2]	@ movhi
 727:.\main.c      ****     rightSpeedLimit = countsLeft;
 2744              		.loc 1 727 0
 2745 00d4 064A     		ldr	r2, .L140+16
 2746 00d6 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2747 00d8 1380     		strh	r3, [r2]	@ movhi
 728:.\main.c      **** }
 2748              		.loc 1 728 0
 2749 00da 1837     		adds	r7, r7, #24
 2750              		.cfi_def_cfa_offset 8
 2751 00dc BD46     		mov	sp, r7
 2752              		.cfi_def_cfa_register 13
 2753              		@ sp needed
 2754 00de 80BD     		pop	{r7, pc}
 2755              	.L141:
 2756              		.align	3
 2757              	.L140:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 63


 2758 00e0 969526A5 		.word	-1524197994
 2759 00e4 A0DBEF3F 		.word	1072683936
 2760 00e8 00000000 		.word	direction
 2761 00ec 00000000 		.word	leftSpeedLimit
 2762 00f0 00000000 		.word	rightSpeedLimit
 2763              		.cfi_endproc
 2764              	.LFE76:
 2765              		.size	setSpeed, .-setSpeed
 2766 00f4 AFF30080 		.section	.text.brakeLeft,"ax",%progbits
 2767              		.align	2
 2768              		.global	brakeLeft
 2769              		.thumb
 2770              		.thumb_func
 2771              		.type	brakeLeft, %function
 2772              	brakeLeft:
 2773              	.LFB77:
 729:.\main.c      **** 
 730:.\main.c      **** void brakeLeft()
 731:.\main.c      **** {
 2774              		.loc 1 731 0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 0
 2777              		@ frame_needed = 1, uses_anonymous_args = 0
 2778 0000 80B5     		push	{r7, lr}
 2779              		.cfi_def_cfa_offset 8
 2780              		.cfi_offset 7, -8
 2781              		.cfi_offset 14, -4
 2782 0002 00AF     		add	r7, sp, #0
 2783              		.cfi_def_cfa_register 7
 732:.\main.c      ****     PWM_1_WriteCompare(0);
 2784              		.loc 1 732 0
 2785 0004 0020     		movs	r0, #0
 2786 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 733:.\main.c      ****     left_duty_cycle = 0;
 2787              		.loc 1 733 0
 2788 000a 024B     		ldr	r3, .L143
 2789 000c 0022     		movs	r2, #0
 2790 000e 1A80     		strh	r2, [r3]	@ movhi
 734:.\main.c      **** }
 2791              		.loc 1 734 0
 2792 0010 80BD     		pop	{r7, pc}
 2793              	.L144:
 2794 0012 00BF     		.align	2
 2795              	.L143:
 2796 0014 00000000 		.word	left_duty_cycle
 2797              		.cfi_endproc
 2798              	.LFE77:
 2799              		.size	brakeLeft, .-brakeLeft
 2800              		.section	.text.brakeRight,"ax",%progbits
 2801              		.align	2
 2802              		.global	brakeRight
 2803              		.thumb
 2804              		.thumb_func
 2805              		.type	brakeRight, %function
 2806              	brakeRight:
 2807              	.LFB78:
 735:.\main.c      **** 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 64


 736:.\main.c      **** void brakeRight()
 737:.\main.c      **** {
 2808              		.loc 1 737 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 0
 2811              		@ frame_needed = 1, uses_anonymous_args = 0
 2812 0000 80B5     		push	{r7, lr}
 2813              		.cfi_def_cfa_offset 8
 2814              		.cfi_offset 7, -8
 2815              		.cfi_offset 14, -4
 2816 0002 00AF     		add	r7, sp, #0
 2817              		.cfi_def_cfa_register 7
 738:.\main.c      ****      PWM_2_WriteCompare(0);
 2818              		.loc 1 738 0
 2819 0004 0020     		movs	r0, #0
 2820 0006 FFF7FEFF 		bl	PWM_2_WriteCompare
 739:.\main.c      ****      right_duty_cycle = 0;
 2821              		.loc 1 739 0
 2822 000a 024B     		ldr	r3, .L146
 2823 000c 0022     		movs	r2, #0
 2824 000e 1A80     		strh	r2, [r3]	@ movhi
 740:.\main.c      **** }
 2825              		.loc 1 740 0
 2826 0010 80BD     		pop	{r7, pc}
 2827              	.L147:
 2828 0012 00BF     		.align	2
 2829              	.L146:
 2830 0014 00000000 		.word	right_duty_cycle
 2831              		.cfi_endproc
 2832              	.LFE78:
 2833              		.size	brakeRight, .-brakeRight
 2834              		.section	.text.brakeMotor,"ax",%progbits
 2835              		.align	2
 2836              		.global	brakeMotor
 2837              		.thumb
 2838              		.thumb_func
 2839              		.type	brakeMotor, %function
 2840              	brakeMotor:
 2841              	.LFB79:
 741:.\main.c      **** 
 742:.\main.c      **** void brakeMotor(){
 2842              		.loc 1 742 0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 0
 2845              		@ frame_needed = 1, uses_anonymous_args = 0
 2846 0000 80B5     		push	{r7, lr}
 2847              		.cfi_def_cfa_offset 8
 2848              		.cfi_offset 7, -8
 2849              		.cfi_offset 14, -4
 2850 0002 00AF     		add	r7, sp, #0
 2851              		.cfi_def_cfa_register 7
 743:.\main.c      ****     setSpeed(0, 0);
 2852              		.loc 1 743 0
 2853 0004 4FF00000 		mov	r0, #0
 2854 0008 4FF00001 		mov	r1, #0
 2855 000c 4FF00002 		mov	r2, #0
 2856 0010 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 65


 2857 0014 FFF7FEFF 		bl	setSpeed
 744:.\main.c      ****     brakeLeft();
 2858              		.loc 1 744 0
 2859 0018 FFF7FEFF 		bl	brakeLeft
 745:.\main.c      ****     brakeRight();
 2860              		.loc 1 745 0
 2861 001c FFF7FEFF 		bl	brakeRight
 746:.\main.c      **** }
 2862              		.loc 1 746 0
 2863 0020 80BD     		pop	{r7, pc}
 2864              		.cfi_endproc
 2865              	.LFE79:
 2866              		.size	brakeMotor, .-brakeMotor
 2867 0022 00BF     		.section	.text.driveForwards,"ax",%progbits
 2868              		.align	2
 2869              		.global	driveForwards
 2870              		.thumb
 2871              		.thumb_func
 2872              		.type	driveForwards, %function
 2873              	driveForwards:
 2874              	.LFB80:
 747:.\main.c      **** 
 748:.\main.c      **** void driveForwards()
 749:.\main.c      **** {
 2875              		.loc 1 749 0
 2876              		.cfi_startproc
 2877              		@ args = 0, pretend = 0, frame = 0
 2878              		@ frame_needed = 1, uses_anonymous_args = 0
 2879 0000 80B5     		push	{r7, lr}
 2880              		.cfi_def_cfa_offset 8
 2881              		.cfi_offset 7, -8
 2882              		.cfi_offset 14, -4
 2883 0002 00AF     		add	r7, sp, #0
 2884              		.cfi_def_cfa_register 7
 750:.\main.c      ****     setSpeed(speed, speed);
 2885              		.loc 1 750 0
 2886 0004 044B     		ldr	r3, .L150
 2887 0006 D3E90001 		ldrd	r0, [r3]
 2888 000a 034B     		ldr	r3, .L150
 2889 000c D3E90023 		ldrd	r2, [r3]
 2890 0010 FFF7FEFF 		bl	setSpeed
 751:.\main.c      **** }
 2891              		.loc 1 751 0
 2892 0014 80BD     		pop	{r7, pc}
 2893              	.L151:
 2894 0016 00BF     		.align	2
 2895              	.L150:
 2896 0018 00000000 		.word	speed
 2897              		.cfi_endproc
 2898              	.LFE80:
 2899              		.size	driveForwards, .-driveForwards
 2900              		.global	__aeabi_dmul
 2901              		.section	.text.turnRight,"ax",%progbits
 2902              		.align	2
 2903              		.global	turnRight
 2904              		.thumb
 2905              		.thumb_func
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 66


 2906              		.type	turnRight, %function
 2907              	turnRight:
 2908              	.LFB81:
 752:.\main.c      **** 
 753:.\main.c      **** void turnRight()
 754:.\main.c      **** {
 2909              		.loc 1 754 0
 2910              		.cfi_startproc
 2911              		@ args = 0, pretend = 0, frame = 0
 2912              		@ frame_needed = 1, uses_anonymous_args = 0
 2913 0000 80B5     		push	{r7, lr}
 2914              		.cfi_def_cfa_offset 8
 2915              		.cfi_offset 7, -8
 2916              		.cfi_offset 14, -4
 2917 0002 00AF     		add	r7, sp, #0
 2918              		.cfi_def_cfa_register 7
 755:.\main.c      ****     setSpeed(0,speed * 1.5);
 2919              		.loc 1 755 0
 2920 0004 094B     		ldr	r3, .L153
 2921 0006 D3E90023 		ldrd	r2, [r3]
 2922 000a 1046     		mov	r0, r2
 2923 000c 1946     		mov	r1, r3
 2924 000e 4FF00002 		mov	r2, #0
 2925 0012 074B     		ldr	r3, .L153+4
 2926 0014 FFF7FEFF 		bl	__aeabi_dmul
 2927 0018 0246     		mov	r2, r0
 2928 001a 0B46     		mov	r3, r1
 2929 001c 4FF00000 		mov	r0, #0
 2930 0020 4FF00001 		mov	r1, #0
 2931 0024 FFF7FEFF 		bl	setSpeed
 756:.\main.c      **** }
 2932              		.loc 1 756 0
 2933 0028 80BD     		pop	{r7, pc}
 2934              	.L154:
 2935 002a 00BF     		.align	2
 2936              	.L153:
 2937 002c 00000000 		.word	speed
 2938 0030 0000F83F 		.word	1073217536
 2939              		.cfi_endproc
 2940              	.LFE81:
 2941              		.size	turnRight, .-turnRight
 2942              		.section	.text.turnLeft,"ax",%progbits
 2943              		.align	2
 2944              		.global	turnLeft
 2945              		.thumb
 2946              		.thumb_func
 2947              		.type	turnLeft, %function
 2948              	turnLeft:
 2949              	.LFB82:
 757:.\main.c      **** 
 758:.\main.c      **** void turnLeft()
 759:.\main.c      **** {
 2950              		.loc 1 759 0
 2951              		.cfi_startproc
 2952              		@ args = 0, pretend = 0, frame = 0
 2953              		@ frame_needed = 1, uses_anonymous_args = 0
 2954 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 67


 2955              		.cfi_def_cfa_offset 8
 2956              		.cfi_offset 7, -8
 2957              		.cfi_offset 14, -4
 2958 0002 00AF     		add	r7, sp, #0
 2959              		.cfi_def_cfa_register 7
 760:.\main.c      ****     setSpeed(speed * 1.5,0);
 2960              		.loc 1 760 0
 2961 0004 0A4B     		ldr	r3, .L156
 2962 0006 D3E90023 		ldrd	r2, [r3]
 2963 000a 1046     		mov	r0, r2
 2964 000c 1946     		mov	r1, r3
 2965 000e 4FF00002 		mov	r2, #0
 2966 0012 084B     		ldr	r3, .L156+4
 2967 0014 FFF7FEFF 		bl	__aeabi_dmul
 2968 0018 0246     		mov	r2, r0
 2969 001a 0B46     		mov	r3, r1
 2970 001c 1046     		mov	r0, r2
 2971 001e 1946     		mov	r1, r3
 2972 0020 4FF00002 		mov	r2, #0
 2973 0024 4FF00003 		mov	r3, #0
 2974 0028 FFF7FEFF 		bl	setSpeed
 761:.\main.c      **** }
 2975              		.loc 1 761 0
 2976 002c 80BD     		pop	{r7, pc}
 2977              	.L157:
 2978 002e 00BF     		.align	2
 2979              	.L156:
 2980 0030 00000000 		.word	speed
 2981 0034 0000F83F 		.word	1073217536
 2982              		.cfi_endproc
 2983              	.LFE82:
 2984              		.size	turnLeft, .-turnLeft
 2985              		.section	.text.turnU,"ax",%progbits
 2986              		.align	2
 2987              		.global	turnU
 2988              		.thumb
 2989              		.thumb_func
 2990              		.type	turnU, %function
 2991              	turnU:
 2992              	.LFB83:
 762:.\main.c      **** 
 763:.\main.c      **** void turnU()
 764:.\main.c      **** {
 2993              		.loc 1 764 0
 2994              		.cfi_startproc
 2995              		@ args = 0, pretend = 0, frame = 0
 2996              		@ frame_needed = 1, uses_anonymous_args = 0
 2997 0000 B0B5     		push	{r4, r5, r7, lr}
 2998              		.cfi_def_cfa_offset 16
 2999              		.cfi_offset 4, -16
 3000              		.cfi_offset 5, -12
 3001              		.cfi_offset 7, -8
 3002              		.cfi_offset 14, -4
 3003 0002 00AF     		add	r7, sp, #0
 3004              		.cfi_def_cfa_register 7
 765:.\main.c      ****     setSpeed(-speed*1.5,speed*1.5);
 3005              		.loc 1 765 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 68


 3006 0004 0F4B     		ldr	r3, .L159
 3007 0006 D3E90023 		ldrd	r2, [r3]
 3008 000a 1046     		mov	r0, r2
 3009 000c 83F00041 		eor	r1, r3, #-2147483648
 3010 0010 4FF00002 		mov	r2, #0
 3011 0014 0C4B     		ldr	r3, .L159+4
 3012 0016 FFF7FEFF 		bl	__aeabi_dmul
 3013 001a 0246     		mov	r2, r0
 3014 001c 0B46     		mov	r3, r1
 3015 001e 1446     		mov	r4, r2
 3016 0020 1D46     		mov	r5, r3
 3017 0022 084B     		ldr	r3, .L159
 3018 0024 D3E90023 		ldrd	r2, [r3]
 3019 0028 1046     		mov	r0, r2
 3020 002a 1946     		mov	r1, r3
 3021 002c 4FF00002 		mov	r2, #0
 3022 0030 054B     		ldr	r3, .L159+4
 3023 0032 FFF7FEFF 		bl	__aeabi_dmul
 3024 0036 0246     		mov	r2, r0
 3025 0038 0B46     		mov	r3, r1
 3026 003a 2046     		mov	r0, r4
 3027 003c 2946     		mov	r1, r5
 3028 003e FFF7FEFF 		bl	setSpeed
 766:.\main.c      **** }
 3029              		.loc 1 766 0
 3030 0042 B0BD     		pop	{r4, r5, r7, pc}
 3031              	.L160:
 3032              		.align	2
 3033              	.L159:
 3034 0044 00000000 		.word	speed
 3035 0048 0000F83F 		.word	1073217536
 3036              		.cfi_endproc
 3037              	.LFE83:
 3038              		.size	turnU, .-turnU
 3039              		.section	.text.initTurnLeft,"ax",%progbits
 3040              		.align	2
 3041              		.global	initTurnLeft
 3042              		.thumb
 3043              		.thumb_func
 3044              		.type	initTurnLeft, %function
 3045              	initTurnLeft:
 3046              	.LFB84:
 767:.\main.c      **** 
 768:.\main.c      **** void initTurnLeft(){
 3047              		.loc 1 768 0
 3048              		.cfi_startproc
 3049              		@ args = 0, pretend = 0, frame = 0
 3050              		@ frame_needed = 1, uses_anonymous_args = 0
 3051 0000 80B5     		push	{r7, lr}
 3052              		.cfi_def_cfa_offset 8
 3053              		.cfi_offset 7, -8
 3054              		.cfi_offset 14, -4
 3055 0002 00AF     		add	r7, sp, #0
 3056              		.cfi_def_cfa_register 7
 769:.\main.c      ****     Timer_2_Stop();
 3057              		.loc 1 769 0
 3058 0004 FFF7FEFF 		bl	Timer_2_Stop
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 69


 770:.\main.c      ****     prev_movement_state = movement_state;
 3059              		.loc 1 770 0
 3060 0008 084B     		ldr	r3, .L162
 3061 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3062 000c 084B     		ldr	r3, .L162+4
 3063 000e 1A70     		strb	r2, [r3]
 771:.\main.c      ****     movement_state = LTURN;
 3064              		.loc 1 771 0
 3065 0010 064B     		ldr	r3, .L162
 3066 0012 0122     		movs	r2, #1
 3067 0014 1A70     		strb	r2, [r3]
 772:.\main.c      ****     brakeLeft();
 3068              		.loc 1 772 0
 3069 0016 FFF7FEFF 		bl	brakeLeft
 773:.\main.c      ****     start_turn_count = QuadDec_M2_GetCounter();
 3070              		.loc 1 773 0
 3071 001a FFF7FEFF 		bl	QuadDec_M2_GetCounter
 3072 001e 0346     		mov	r3, r0
 3073 0020 1A46     		mov	r2, r3
 3074 0022 044B     		ldr	r3, .L162+8
 3075 0024 1A80     		strh	r2, [r3]	@ movhi
 774:.\main.c      ****     Timer_2_Start();
 3076              		.loc 1 774 0
 3077 0026 FFF7FEFF 		bl	Timer_2_Start
 775:.\main.c      **** }
 3078              		.loc 1 775 0
 3079 002a 80BD     		pop	{r7, pc}
 3080              	.L163:
 3081              		.align	2
 3082              	.L162:
 3083 002c 00000000 		.word	movement_state
 3084 0030 00000000 		.word	prev_movement_state
 3085 0034 00000000 		.word	start_turn_count
 3086              		.cfi_endproc
 3087              	.LFE84:
 3088              		.size	initTurnLeft, .-initTurnLeft
 3089              		.section	.text.initTurnRight,"ax",%progbits
 3090              		.align	2
 3091              		.global	initTurnRight
 3092              		.thumb
 3093              		.thumb_func
 3094              		.type	initTurnRight, %function
 3095              	initTurnRight:
 3096              	.LFB85:
 776:.\main.c      **** 
 777:.\main.c      **** void initTurnRight(){
 3097              		.loc 1 777 0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 0
 3100              		@ frame_needed = 1, uses_anonymous_args = 0
 3101 0000 80B5     		push	{r7, lr}
 3102              		.cfi_def_cfa_offset 8
 3103              		.cfi_offset 7, -8
 3104              		.cfi_offset 14, -4
 3105 0002 00AF     		add	r7, sp, #0
 3106              		.cfi_def_cfa_register 7
 778:.\main.c      ****     Timer_2_Stop();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 70


 3107              		.loc 1 778 0
 3108 0004 FFF7FEFF 		bl	Timer_2_Stop
 779:.\main.c      ****     prev_movement_state = movement_state;
 3109              		.loc 1 779 0
 3110 0008 084B     		ldr	r3, .L165
 3111 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3112 000c 084B     		ldr	r3, .L165+4
 3113 000e 1A70     		strb	r2, [r3]
 780:.\main.c      ****     movement_state = RTURN;
 3114              		.loc 1 780 0
 3115 0010 064B     		ldr	r3, .L165
 3116 0012 0222     		movs	r2, #2
 3117 0014 1A70     		strb	r2, [r3]
 781:.\main.c      ****     brakeRight();
 3118              		.loc 1 781 0
 3119 0016 FFF7FEFF 		bl	brakeRight
 782:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3120              		.loc 1 782 0
 3121 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3122 001e 0346     		mov	r3, r0
 3123 0020 1A46     		mov	r2, r3
 3124 0022 044B     		ldr	r3, .L165+8
 3125 0024 1A80     		strh	r2, [r3]	@ movhi
 783:.\main.c      ****     Timer_2_Start();
 3126              		.loc 1 783 0
 3127 0026 FFF7FEFF 		bl	Timer_2_Start
 784:.\main.c      **** }
 3128              		.loc 1 784 0
 3129 002a 80BD     		pop	{r7, pc}
 3130              	.L166:
 3131              		.align	2
 3132              	.L165:
 3133 002c 00000000 		.word	movement_state
 3134 0030 00000000 		.word	prev_movement_state
 3135 0034 00000000 		.word	start_turn_count
 3136              		.cfi_endproc
 3137              	.LFE85:
 3138              		.size	initTurnRight, .-initTurnRight
 3139              		.section	.text.initTurnU,"ax",%progbits
 3140              		.align	2
 3141              		.global	initTurnU
 3142              		.thumb
 3143              		.thumb_func
 3144              		.type	initTurnU, %function
 3145              	initTurnU:
 3146              	.LFB86:
 785:.\main.c      **** 
 786:.\main.c      **** void initTurnU(){
 3147              		.loc 1 786 0
 3148              		.cfi_startproc
 3149              		@ args = 0, pretend = 0, frame = 0
 3150              		@ frame_needed = 1, uses_anonymous_args = 0
 3151 0000 80B5     		push	{r7, lr}
 3152              		.cfi_def_cfa_offset 8
 3153              		.cfi_offset 7, -8
 3154              		.cfi_offset 14, -4
 3155 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 71


 3156              		.cfi_def_cfa_register 7
 787:.\main.c      ****     Timer_2_Stop();
 3157              		.loc 1 787 0
 3158 0004 FFF7FEFF 		bl	Timer_2_Stop
 788:.\main.c      ****     prev_movement_state = movement_state;
 3159              		.loc 1 788 0
 3160 0008 084B     		ldr	r3, .L168
 3161 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3162 000c 084B     		ldr	r3, .L168+4
 3163 000e 1A70     		strb	r2, [r3]
 789:.\main.c      ****     movement_state = UTURN;
 3164              		.loc 1 789 0
 3165 0010 064B     		ldr	r3, .L168
 3166 0012 0722     		movs	r2, #7
 3167 0014 1A70     		strb	r2, [r3]
 790:.\main.c      ****     brakeMotor();
 3168              		.loc 1 790 0
 3169 0016 FFF7FEFF 		bl	brakeMotor
 791:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3170              		.loc 1 791 0
 3171 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3172 001e 0346     		mov	r3, r0
 3173 0020 1A46     		mov	r2, r3
 3174 0022 044B     		ldr	r3, .L168+8
 3175 0024 1A80     		strh	r2, [r3]	@ movhi
 792:.\main.c      ****     Timer_2_Start();
 3176              		.loc 1 792 0
 3177 0026 FFF7FEFF 		bl	Timer_2_Start
 793:.\main.c      **** }
 3178              		.loc 1 793 0
 3179 002a 80BD     		pop	{r7, pc}
 3180              	.L169:
 3181              		.align	2
 3182              	.L168:
 3183 002c 00000000 		.word	movement_state
 3184 0030 00000000 		.word	prev_movement_state
 3185 0034 00000000 		.word	start_turn_count
 3186              		.cfi_endproc
 3187              	.LFE86:
 3188              		.size	initTurnU, .-initTurnU
 3189              		.section	.text.initForward,"ax",%progbits
 3190              		.align	2
 3191              		.global	initForward
 3192              		.thumb
 3193              		.thumb_func
 3194              		.type	initForward, %function
 3195              	initForward:
 3196              	.LFB87:
 794:.\main.c      **** 
 795:.\main.c      **** void initForward(){
 3197              		.loc 1 795 0
 3198              		.cfi_startproc
 3199              		@ args = 0, pretend = 0, frame = 0
 3200              		@ frame_needed = 1, uses_anonymous_args = 0
 3201 0000 80B5     		push	{r7, lr}
 3202              		.cfi_def_cfa_offset 8
 3203              		.cfi_offset 7, -8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 72


 3204              		.cfi_offset 14, -4
 3205 0002 00AF     		add	r7, sp, #0
 3206              		.cfi_def_cfa_register 7
 796:.\main.c      ****     brakeMotor();
 3207              		.loc 1 796 0
 3208 0004 FFF7FEFF 		bl	brakeMotor
 797:.\main.c      ****     movement_state = DRIVE;
 3209              		.loc 1 797 0
 3210 0008 014B     		ldr	r3, .L171
 3211 000a 0022     		movs	r2, #0
 3212 000c 1A70     		strb	r2, [r3]
 798:.\main.c      **** }
 3213              		.loc 1 798 0
 3214 000e 80BD     		pop	{r7, pc}
 3215              	.L172:
 3216              		.align	2
 3217              	.L171:
 3218 0010 00000000 		.word	movement_state
 3219              		.cfi_endproc
 3220              	.LFE87:
 3221              		.size	initForward, .-initForward
 3222              		.section	.text.initBrake,"ax",%progbits
 3223              		.align	2
 3224              		.global	initBrake
 3225              		.thumb
 3226              		.thumb_func
 3227              		.type	initBrake, %function
 3228              	initBrake:
 3229              	.LFB88:
 799:.\main.c      **** 
 800:.\main.c      **** void initBrake(){
 3230              		.loc 1 800 0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 0
 3233              		@ frame_needed = 1, uses_anonymous_args = 0
 3234              		@ link register save eliminated.
 3235 0000 80B4     		push	{r7}
 3236              		.cfi_def_cfa_offset 4
 3237              		.cfi_offset 7, -4
 3238 0002 00AF     		add	r7, sp, #0
 3239              		.cfi_def_cfa_register 7
 801:.\main.c      ****     movement_state = STOPPED;
 3240              		.loc 1 801 0
 3241 0004 034B     		ldr	r3, .L174
 3242 0006 0322     		movs	r2, #3
 3243 0008 1A70     		strb	r2, [r3]
 802:.\main.c      **** }
 3244              		.loc 1 802 0
 3245 000a BD46     		mov	sp, r7
 3246              		.cfi_def_cfa_register 13
 3247              		@ sp needed
 3248 000c 5DF8047B 		ldr	r7, [sp], #4
 3249              		.cfi_restore 7
 3250              		.cfi_def_cfa_offset 0
 3251 0010 7047     		bx	lr
 3252              	.L175:
 3253 0012 00BF     		.align	2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 73


 3254              	.L174:
 3255 0014 00000000 		.word	movement_state
 3256              		.cfi_endproc
 3257              	.LFE88:
 3258              		.size	initBrake, .-initBrake
 3259              		.section	.text.initTrack,"ax",%progbits
 3260              		.align	2
 3261              		.global	initTrack
 3262              		.thumb
 3263              		.thumb_func
 3264              		.type	initTrack, %function
 3265              	initTrack:
 3266              	.LFB89:
 803:.\main.c      **** 
 804:.\main.c      **** void initTrack()
 805:.\main.c      **** {
 3267              		.loc 1 805 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 1, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
 3272 0000 80B4     		push	{r7}
 3273              		.cfi_def_cfa_offset 4
 3274              		.cfi_offset 7, -4
 3275 0002 00AF     		add	r7, sp, #0
 3276              		.cfi_def_cfa_register 7
 806:.\main.c      ****     movement_state = TRACKING;
 3277              		.loc 1 806 0
 3278 0004 034B     		ldr	r3, .L177
 3279 0006 0422     		movs	r2, #4
 3280 0008 1A70     		strb	r2, [r3]
 807:.\main.c      **** }
 3281              		.loc 1 807 0
 3282 000a BD46     		mov	sp, r7
 3283              		.cfi_def_cfa_register 13
 3284              		@ sp needed
 3285 000c 5DF8047B 		ldr	r7, [sp], #4
 3286              		.cfi_restore 7
 3287              		.cfi_def_cfa_offset 0
 3288 0010 7047     		bx	lr
 3289              	.L178:
 3290 0012 00BF     		.align	2
 3291              	.L177:
 3292 0014 00000000 		.word	movement_state
 3293              		.cfi_endproc
 3294              	.LFE89:
 3295              		.size	initTrack, .-initTrack
 3296              		.section	.text.initTrackU,"ax",%progbits
 3297              		.align	2
 3298              		.global	initTrackU
 3299              		.thumb
 3300              		.thumb_func
 3301              		.type	initTrackU, %function
 3302              	initTrackU:
 3303              	.LFB90:
 808:.\main.c      **** 
 809:.\main.c      **** void initTrackU(){
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 74


 3304              		.loc 1 809 0
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 0
 3307              		@ frame_needed = 1, uses_anonymous_args = 0
 3308              		@ link register save eliminated.
 3309 0000 80B4     		push	{r7}
 3310              		.cfi_def_cfa_offset 4
 3311              		.cfi_offset 7, -4
 3312 0002 00AF     		add	r7, sp, #0
 3313              		.cfi_def_cfa_register 7
 810:.\main.c      ****     movement_state = TRACKING_U;
 3314              		.loc 1 810 0
 3315 0004 034B     		ldr	r3, .L180
 3316 0006 0522     		movs	r2, #5
 3317 0008 1A70     		strb	r2, [r3]
 811:.\main.c      **** }
 3318              		.loc 1 811 0
 3319 000a BD46     		mov	sp, r7
 3320              		.cfi_def_cfa_register 13
 3321              		@ sp needed
 3322 000c 5DF8047B 		ldr	r7, [sp], #4
 3323              		.cfi_restore 7
 3324              		.cfi_def_cfa_offset 0
 3325 0010 7047     		bx	lr
 3326              	.L181:
 3327 0012 00BF     		.align	2
 3328              	.L180:
 3329 0014 00000000 		.word	movement_state
 3330              		.cfi_endproc
 3331              	.LFE90:
 3332              		.size	initTrackU, .-initTrackU
 3333              		.section	.text.inittrackLineZ,"ax",%progbits
 3334              		.align	2
 3335              		.global	inittrackLineZ
 3336              		.thumb
 3337              		.thumb_func
 3338              		.type	inittrackLineZ, %function
 3339              	inittrackLineZ:
 3340              	.LFB91:
 812:.\main.c      **** 
 813:.\main.c      **** void inittrackLineZ(){
 3341              		.loc 1 813 0
 3342              		.cfi_startproc
 3343              		@ args = 0, pretend = 0, frame = 0
 3344              		@ frame_needed = 1, uses_anonymous_args = 0
 3345              		@ link register save eliminated.
 3346 0000 80B4     		push	{r7}
 3347              		.cfi_def_cfa_offset 4
 3348              		.cfi_offset 7, -4
 3349 0002 00AF     		add	r7, sp, #0
 3350              		.cfi_def_cfa_register 7
 814:.\main.c      ****     movement_state = TRACKING_SOFT;
 3351              		.loc 1 814 0
 3352 0004 034B     		ldr	r3, .L183
 3353 0006 0622     		movs	r2, #6
 3354 0008 1A70     		strb	r2, [r3]
 815:.\main.c      **** }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 75


 3355              		.loc 1 815 0
 3356 000a BD46     		mov	sp, r7
 3357              		.cfi_def_cfa_register 13
 3358              		@ sp needed
 3359 000c 5DF8047B 		ldr	r7, [sp], #4
 3360              		.cfi_restore 7
 3361              		.cfi_def_cfa_offset 0
 3362 0010 7047     		bx	lr
 3363              	.L184:
 3364 0012 00BF     		.align	2
 3365              	.L183:
 3366 0014 00000000 		.word	movement_state
 3367              		.cfi_endproc
 3368              	.LFE91:
 3369              		.size	inittrackLineZ, .-inittrackLineZ
 3370              		.section	.text.rxInt,"ax",%progbits
 3371              		.align	2
 3372              		.global	rxInt
 3373              		.thumb
 3374              		.thumb_func
 3375              		.type	rxInt, %function
 3376              	rxInt:
 3377              	.LFB92:
 816:.\main.c      **** 
 817:.\main.c      **** 
 818:.\main.c      **** 
 819:.\main.c      **** //Binary RF Data
 820:.\main.c      **** CY_ISR(rxInt){
 3378              		.loc 1 820 0
 3379              		.cfi_startproc
 3380              		@ args = 0, pretend = 0, frame = 8
 3381              		@ frame_needed = 1, uses_anonymous_args = 0
 3382 0000 B0B5     		push	{r4, r5, r7, lr}
 3383              		.cfi_def_cfa_offset 16
 3384              		.cfi_offset 4, -16
 3385              		.cfi_offset 5, -12
 3386              		.cfi_offset 7, -8
 3387              		.cfi_offset 14, -4
 3388 0002 82B0     		sub	sp, sp, #8
 3389              		.cfi_def_cfa_offset 24
 3390 0004 00AF     		add	r7, sp, #0
 3391              		.cfi_def_cfa_register 7
 821:.\main.c      ****     char rf_char = UART_GetChar();
 3392              		.loc 1 821 0
 3393 0006 FFF7FEFF 		bl	UART_GetChar
 3394 000a 0346     		mov	r3, r0
 3395 000c FB71     		strb	r3, [r7, #7]
 822:.\main.c      ****     if(rf_char == SOP){
 3396              		.loc 1 822 0
 3397 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3398 0010 AA2B     		cmp	r3, #170
 3399 0012 2BD1     		bne	.L186
 823:.\main.c      ****             //we should evalute whether the last packet was valid by measuring the length of data
 824:.\main.c      ****             if(byteCount == 34)
 3400              		.loc 1 824 0
 3401 0014 224B     		ldr	r3, .L190
 3402 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 76


 3403 0018 222B     		cmp	r3, #34
 3404 001a 20D1     		bne	.L187
 825:.\main.c      ****             {
 826:.\main.c      ****                 system_state = buffer_state;
 3405              		.loc 1 826 0
 3406 001c 214B     		ldr	r3, .L190+4
 3407 001e 224A     		ldr	r2, .L190+8
 3408 0020 1568     		ldr	r5, [r2]	@ unaligned
 3409 0022 5468     		ldr	r4, [r2, #4]	@ unaligned
 3410 0024 9068     		ldr	r0, [r2, #8]	@ unaligned
 3411 0026 D168     		ldr	r1, [r2, #12]	@ unaligned
 3412 0028 1D60     		str	r5, [r3]	@ unaligned
 3413 002a 5C60     		str	r4, [r3, #4]	@ unaligned
 3414 002c 9860     		str	r0, [r3, #8]	@ unaligned
 3415 002e D960     		str	r1, [r3, #12]	@ unaligned
 3416 0030 1569     		ldr	r5, [r2, #16]	@ unaligned
 3417 0032 5469     		ldr	r4, [r2, #20]	@ unaligned
 3418 0034 9069     		ldr	r0, [r2, #24]	@ unaligned
 3419 0036 D169     		ldr	r1, [r2, #28]	@ unaligned
 3420 0038 1D61     		str	r5, [r3, #16]	@ unaligned
 3421 003a 5C61     		str	r4, [r3, #20]	@ unaligned
 3422 003c 9861     		str	r0, [r3, #24]	@ unaligned
 3423 003e D961     		str	r1, [r3, #28]	@ unaligned
 827:.\main.c      ****                 if(initial_pos_valid == 0)
 3424              		.loc 1 827 0
 3425 0040 1A4B     		ldr	r3, .L190+12
 3426 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3427 0044 002B     		cmp	r3, #0
 3428 0046 0AD1     		bne	.L187
 828:.\main.c      ****                 {
 829:.\main.c      ****                     LED_Write(~LED_Read());
 3429              		.loc 1 829 0
 3430 0048 FFF7FEFF 		bl	LED_Read
 3431 004c 0346     		mov	r3, r0
 3432 004e DB43     		mvns	r3, r3
 3433 0050 DBB2     		uxtb	r3, r3
 3434 0052 1846     		mov	r0, r3
 3435 0054 FFF7FEFF 		bl	LED_Write
 830:.\main.c      ****                     initial_pos_valid = 1;
 3436              		.loc 1 830 0
 3437 0058 144B     		ldr	r3, .L190+12
 3438 005a 0122     		movs	r2, #1
 3439 005c 1A70     		strb	r2, [r3]
 3440              	.L187:
 831:.\main.c      ****                 }
 832:.\main.c      ****             }
 833:.\main.c      ****             byteCount = 2; //2 for legacy purposes - fix this
 3441              		.loc 1 833 0
 3442 005e 104B     		ldr	r3, .L190
 3443 0060 0222     		movs	r2, #2
 3444 0062 1A70     		strb	r2, [r3]
 834:.\main.c      ****             flag_rx = 0;
 3445              		.loc 1 834 0
 3446 0064 124B     		ldr	r3, .L190+16
 3447 0066 0022     		movs	r2, #0
 3448 0068 1A70     		strb	r2, [r3]
 3449 006a 16E0     		b	.L185
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 77


 3450              	.L186:
 835:.\main.c      ****              //LED_Write(~LED_Read()); //flash an LED so we know the interrupt is called
 836:.\main.c      ****         }
 837:.\main.c      ****         else
 838:.\main.c      ****         {
 839:.\main.c      ****             packet[byteCount % 2] = rf_char;
 3451              		.loc 1 839 0
 3452 006c 0C4B     		ldr	r3, .L190
 3453 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3454 0070 03F00103 		and	r3, r3, #1
 3455 0074 0F49     		ldr	r1, .L190+20
 3456 0076 FA79     		ldrb	r2, [r7, #7]
 3457 0078 CA54     		strb	r2, [r1, r3]
 840:.\main.c      ****            
 841:.\main.c      ****             if(byteCount % 2 == 1) //we have received a whole 16-bit packet
 3458              		.loc 1 841 0
 3459 007a 094B     		ldr	r3, .L190
 3460 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3461 007e 03F00103 		and	r3, r3, #1
 3462 0082 DBB2     		uxtb	r3, r3
 3463 0084 002B     		cmp	r3, #0
 3464 0086 02D0     		beq	.L189
 842:.\main.c      ****             {
 843:.\main.c      ****                 flag_rx = 1;
 3465              		.loc 1 843 0
 3466 0088 094B     		ldr	r3, .L190+16
 3467 008a 0122     		movs	r2, #1
 3468 008c 1A70     		strb	r2, [r3]
 3469              	.L189:
 844:.\main.c      ****             }
 845:.\main.c      ****             byteCount = (byteCount + 1);
 3470              		.loc 1 845 0
 3471 008e 044B     		ldr	r3, .L190
 3472 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3473 0092 0133     		adds	r3, r3, #1
 3474 0094 DAB2     		uxtb	r2, r3
 3475 0096 024B     		ldr	r3, .L190
 3476 0098 1A70     		strb	r2, [r3]
 3477              	.L185:
 846:.\main.c      ****         }
 847:.\main.c      **** }
 3478              		.loc 1 847 0
 3479 009a 0837     		adds	r7, r7, #8
 3480              		.cfi_def_cfa_offset 16
 3481 009c BD46     		mov	sp, r7
 3482              		.cfi_def_cfa_register 13
 3483              		@ sp needed
 3484 009e B0BD     		pop	{r4, r5, r7, pc}
 3485              	.L191:
 3486              		.align	2
 3487              	.L190:
 3488 00a0 00000000 		.word	byteCount
 3489 00a4 00000000 		.word	system_state
 3490 00a8 00000000 		.word	buffer_state
 3491 00ac 00000000 		.word	initial_pos_valid
 3492 00b0 00000000 		.word	flag_rx
 3493 00b4 00000000 		.word	packet
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 78


 3494              		.cfi_endproc
 3495              	.LFE92:
 3496              		.size	rxInt, .-rxInt
 3497              		.global	__aeabi_i2f
 3498              		.global	__aeabi_fmul
 3499              		.global	__aeabi_f2iz
 3500              		.section	.rodata
 3501 00a6 0000     		.align	2
 3502              	.LC9:
 3503 00a8 74617267 		.ascii	"target quad: %d\015\012\000"
 3503      65742071 
 3503      7561643A 
 3503      2025640D 
 3503      0A00
 3504 00ba 0000     		.align	2
 3505              	.LC10:
 3506 00bc 72656365 		.ascii	"received: \000"
 3506      69766564 
 3506      3A2000
 3507 00c7 00       		.align	2
 3508              	.LC11:
 3509 00c8 0D0A00   		.ascii	"\015\012\000"
 3510 00cb 00       		.align	2
 3511              	.LC12:
 3512 00cc 73746172 		.ascii	"starting from instruction %d\015\012\000"
 3512      74696E67 
 3512      2066726F 
 3512      6D20696E 
 3512      73747275 
 3513 00eb 00       		.align	2
 3514              	.LC13:
 3515 00ec 6E756D20 		.ascii	"num instruct:%d\015\012\000"
 3515      696E7374 
 3515      72756374 
 3515      3A25640D 
 3515      0A00
 3516              		.section	.text.BT_rxInt,"ax",%progbits
 3517              		.align	2
 3518              		.global	BT_rxInt
 3519              		.thumb
 3520              		.thumb_func
 3521              		.type	BT_rxInt, %function
 3522              	BT_rxInt:
 3523              	.LFB93:
 848:.\main.c      **** 
 849:.\main.c      **** CY_ISR(BT_rxInt)
 850:.\main.c      **** {
 3524              		.loc 1 850 0
 3525              		.cfi_startproc
 3526              		@ args = 0, pretend = 0, frame = 32
 3527              		@ frame_needed = 1, uses_anonymous_args = 0
 3528 0000 80B5     		push	{r7, lr}
 3529              		.cfi_def_cfa_offset 8
 3530              		.cfi_offset 7, -8
 3531              		.cfi_offset 14, -4
 3532 0002 88B0     		sub	sp, sp, #32
 3533              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 79


 3534 0004 00AF     		add	r7, sp, #0
 3535              		.cfi_def_cfa_register 7
 851:.\main.c      ****     char rf_char = UART_GetChar();
 3536              		.loc 1 851 0
 3537 0006 FFF7FEFF 		bl	UART_GetChar
 3538 000a 0346     		mov	r3, r0
 3539 000c FB77     		strb	r3, [r7, #31]
 852:.\main.c      ****     switch(rf_char){
 3540              		.loc 1 852 0
 3541 000e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3542 0010 313B     		subs	r3, r3, #49
 3543 0012 492B     		cmp	r3, #73
 3544 0014 00F28D82 		bhi	.L192
 3545 0018 01A2     		adr	r2, .L195
 3546 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3547 001e 00BF     		.p2align 2
 3548              	.L195:
 3549 0020 71030000 		.word	.L194+1
 3550 0024 15020000 		.word	.L196+1
 3551 0028 33050000 		.word	.L192+1
 3552 002c 33050000 		.word	.L192+1
 3553 0030 33050000 		.word	.L192+1
 3554 0034 33050000 		.word	.L192+1
 3555 0038 33050000 		.word	.L192+1
 3556 003c 33050000 		.word	.L192+1
 3557 0040 33050000 		.word	.L192+1
 3558 0044 33050000 		.word	.L192+1
 3559 0048 33050000 		.word	.L192+1
 3560 004c 33050000 		.word	.L192+1
 3561 0050 33050000 		.word	.L192+1
 3562 0054 33050000 		.word	.L192+1
 3563 0058 33050000 		.word	.L192+1
 3564 005c 33050000 		.word	.L192+1
 3565 0060 33050000 		.word	.L192+1
 3566 0064 33050000 		.word	.L192+1
 3567 0068 33050000 		.word	.L192+1
 3568 006c 33050000 		.word	.L192+1
 3569 0070 33050000 		.word	.L192+1
 3570 0074 33050000 		.word	.L192+1
 3571 0078 33050000 		.word	.L192+1
 3572 007c 33050000 		.word	.L192+1
 3573 0080 33050000 		.word	.L192+1
 3574 0084 33050000 		.word	.L192+1
 3575 0088 33050000 		.word	.L192+1
 3576 008c 33050000 		.word	.L192+1
 3577 0090 33050000 		.word	.L192+1
 3578 0094 33050000 		.word	.L192+1
 3579 0098 33050000 		.word	.L192+1
 3580 009c 33050000 		.word	.L192+1
 3581 00a0 33050000 		.word	.L192+1
 3582 00a4 33050000 		.word	.L192+1
 3583 00a8 33050000 		.word	.L192+1
 3584 00ac 33050000 		.word	.L192+1
 3585 00b0 33050000 		.word	.L192+1
 3586 00b4 33050000 		.word	.L192+1
 3587 00b8 33050000 		.word	.L192+1
 3588 00bc 33050000 		.word	.L192+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 80


 3589 00c0 33050000 		.word	.L192+1
 3590 00c4 33050000 		.word	.L192+1
 3591 00c8 33050000 		.word	.L192+1
 3592 00cc 33050000 		.word	.L192+1
 3593 00d0 33050000 		.word	.L192+1
 3594 00d4 33050000 		.word	.L192+1
 3595 00d8 33050000 		.word	.L192+1
 3596 00dc 33050000 		.word	.L192+1
 3597 00e0 49010000 		.word	.L197+1
 3598 00e4 33050000 		.word	.L192+1
 3599 00e8 33050000 		.word	.L192+1
 3600 00ec 6D010000 		.word	.L198+1
 3601 00f0 33050000 		.word	.L192+1
 3602 00f4 79010000 		.word	.L199+1
 3603 00f8 33050000 		.word	.L192+1
 3604 00fc 33050000 		.word	.L192+1
 3605 0100 33050000 		.word	.L192+1
 3606 0104 33050000 		.word	.L192+1
 3607 0108 33050000 		.word	.L192+1
 3608 010c 33050000 		.word	.L192+1
 3609 0110 33050000 		.word	.L192+1
 3610 0114 33050000 		.word	.L192+1
 3611 0118 33050000 		.word	.L192+1
 3612 011c 33050000 		.word	.L192+1
 3613 0120 A9010000 		.word	.L200+1
 3614 0124 FF010000 		.word	.L201+1
 3615 0128 61010000 		.word	.L202+1
 3616 012c 85010000 		.word	.L203+1
 3617 0130 91010000 		.word	.L204+1
 3618 0134 33050000 		.word	.L192+1
 3619 0138 55010000 		.word	.L205+1
 3620 013c 33050000 		.word	.L192+1
 3621 0140 33050000 		.word	.L192+1
 3622 0144 9D010000 		.word	.L206+1
 3623              		.p2align 1
 3624              	.L197:
 3625              	.LBB9:
 853:.\main.c      ****     case 'a':
 854:.\main.c      ****         initTurnLeft();
 3626              		.loc 1 854 0
 3627 0148 FFF7FEFF 		bl	initTurnLeft
 855:.\main.c      ****         track_mode = NO_TRACK;
 3628              		.loc 1 855 0
 3629 014c 9C4B     		ldr	r3, .L226
 3630 014e 0022     		movs	r2, #0
 3631 0150 1A70     		strb	r2, [r3]
 856:.\main.c      ****         break;
 3632              		.loc 1 856 0
 3633 0152 EEE1     		b	.L192
 3634              	.L205:
 857:.\main.c      ****     case 'w':
 858:.\main.c      ****         initForward();
 3635              		.loc 1 858 0
 3636 0154 FFF7FEFF 		bl	initForward
 859:.\main.c      ****         track_mode = NO_TRACK;
 3637              		.loc 1 859 0
 3638 0158 994B     		ldr	r3, .L226
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 81


 3639 015a 0022     		movs	r2, #0
 3640 015c 1A70     		strb	r2, [r3]
 860:.\main.c      ****         break;
 3641              		.loc 1 860 0
 3642 015e E8E1     		b	.L192
 3643              	.L202:
 861:.\main.c      ****     case 's': 
 862:.\main.c      ****         reverseDirection();
 3644              		.loc 1 862 0
 3645 0160 FFF7FEFF 		bl	reverseDirection
 863:.\main.c      ****         track_mode = NO_TRACK;
 3646              		.loc 1 863 0
 3647 0164 964B     		ldr	r3, .L226
 3648 0166 0022     		movs	r2, #0
 3649 0168 1A70     		strb	r2, [r3]
 864:.\main.c      ****         break;
 3650              		.loc 1 864 0
 3651 016a E2E1     		b	.L192
 3652              	.L198:
 865:.\main.c      ****     case 'd':
 866:.\main.c      ****         initTurnRight();
 3653              		.loc 1 866 0
 3654 016c FFF7FEFF 		bl	initTurnRight
 867:.\main.c      ****         track_mode = NO_TRACK;
 3655              		.loc 1 867 0
 3656 0170 934B     		ldr	r3, .L226
 3657 0172 0022     		movs	r2, #0
 3658 0174 1A70     		strb	r2, [r3]
 868:.\main.c      ****         break;
 3659              		.loc 1 868 0
 3660 0176 DCE1     		b	.L192
 3661              	.L199:
 869:.\main.c      ****     case 'f':
 870:.\main.c      ****         initBrake();
 3662              		.loc 1 870 0
 3663 0178 FFF7FEFF 		bl	initBrake
 871:.\main.c      ****         track_mode = NO_TRACK;
 3664              		.loc 1 871 0
 3665 017c 904B     		ldr	r3, .L226
 3666 017e 0022     		movs	r2, #0
 3667 0180 1A70     		strb	r2, [r3]
 872:.\main.c      ****         break;
 3668              		.loc 1 872 0
 3669 0182 D6E1     		b	.L192
 3670              	.L203:
 873:.\main.c      ****     case('t'):
 874:.\main.c      ****         track_mode = CURVE_TRACK;
 3671              		.loc 1 874 0
 3672 0184 8E4B     		ldr	r3, .L226
 3673 0186 0122     		movs	r2, #1
 3674 0188 1A70     		strb	r2, [r3]
 875:.\main.c      ****         initTrack();
 3675              		.loc 1 875 0
 3676 018a FFF7FEFF 		bl	initTrack
 876:.\main.c      ****         break;
 3677              		.loc 1 876 0
 3678 018e D0E1     		b	.L192
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 82


 3679              	.L204:
 877:.\main.c      ****     case('u'):
 878:.\main.c      ****         initTrackU();
 3680              		.loc 1 878 0
 3681 0190 FFF7FEFF 		bl	initTrackU
 879:.\main.c      ****         track_mode = U_TRACK;
 3682              		.loc 1 879 0
 3683 0194 8A4B     		ldr	r3, .L226
 3684 0196 0222     		movs	r2, #2
 3685 0198 1A70     		strb	r2, [r3]
 880:.\main.c      ****         break;
 3686              		.loc 1 880 0
 3687 019a CAE1     		b	.L192
 3688              	.L206:
 881:.\main.c      ****     case('z'):
 882:.\main.c      ****         track_mode = SQUARE_TRACK;
 3689              		.loc 1 882 0
 3690 019c 884B     		ldr	r3, .L226
 3691 019e 0322     		movs	r2, #3
 3692 01a0 1A70     		strb	r2, [r3]
 883:.\main.c      ****         inittrackLineZ();
 3693              		.loc 1 883 0
 3694 01a2 FFF7FEFF 		bl	inittrackLineZ
 884:.\main.c      ****         break;
 3695              		.loc 1 884 0
 3696 01a6 C4E1     		b	.L192
 3697              	.L200:
 885:.\main.c      ****     case('q'):
 886:.\main.c      ****         track_mode = QUAD_STOP;
 3698              		.loc 1 886 0
 3699 01a8 854B     		ldr	r3, .L226
 3700 01aa 0422     		movs	r2, #4
 3701 01ac 1A70     		strb	r2, [r3]
 887:.\main.c      ****         accum_dist = 0;
 3702              		.loc 1 887 0
 3703 01ae 854B     		ldr	r3, .L226+4
 3704 01b0 0022     		movs	r2, #0
 3705 01b2 1A80     		strh	r2, [r3]	@ movhi
 888:.\main.c      ****         target_distance_quad = target_distance_cm * quad_per_cm;
 3706              		.loc 1 888 0
 3707 01b4 844B     		ldr	r3, .L226+8
 3708 01b6 1B88     		ldrh	r3, [r3]
 3709 01b8 1BB2     		sxth	r3, r3
 3710 01ba 1846     		mov	r0, r3
 3711 01bc FFF7FEFF 		bl	__aeabi_i2f
 3712 01c0 0246     		mov	r2, r0
 3713 01c2 824B     		ldr	r3, .L226+12
 3714 01c4 1B68     		ldr	r3, [r3]	@ float
 3715 01c6 1046     		mov	r0, r2
 3716 01c8 1946     		mov	r1, r3
 3717 01ca FFF7FEFF 		bl	__aeabi_fmul
 3718 01ce 0346     		mov	r3, r0
 3719 01d0 1846     		mov	r0, r3
 3720 01d2 FFF7FEFF 		bl	__aeabi_f2iz
 3721 01d6 0346     		mov	r3, r0
 3722 01d8 9AB2     		uxth	r2, r3
 3723 01da 7D4B     		ldr	r3, .L226+16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 83


 3724 01dc 1A80     		strh	r2, [r3]	@ movhi
 889:.\main.c      ****         char mes[16];
 890:.\main.c      ****         sprintf(mes, "target quad: %d\r\n", target_distance_quad);
 3725              		.loc 1 890 0
 3726 01de 7C4B     		ldr	r3, .L226+16
 3727 01e0 1B88     		ldrh	r3, [r3]
 3728 01e2 1BB2     		sxth	r3, r3
 3729 01e4 3A46     		mov	r2, r7
 3730 01e6 1046     		mov	r0, r2
 3731 01e8 7A49     		ldr	r1, .L226+20
 3732 01ea 1A46     		mov	r2, r3
 3733 01ec FFF7FEFF 		bl	sprintf
 891:.\main.c      ****         UART_PutString(mes);
 3734              		.loc 1 891 0
 3735 01f0 3B46     		mov	r3, r7
 3736 01f2 1846     		mov	r0, r3
 3737 01f4 FFF7FEFF 		bl	UART_PutString
 892:.\main.c      ****         initForward();
 3738              		.loc 1 892 0
 3739 01f8 FFF7FEFF 		bl	initForward
 893:.\main.c      ****         break;
 3740              		.loc 1 893 0
 3741 01fc 99E1     		b	.L192
 3742              	.L201:
 894:.\main.c      ****     case ('r'):
 895:.\main.c      ****         track_mode = RF_STOP;
 3743              		.loc 1 895 0
 3744 01fe 704B     		ldr	r3, .L226
 3745 0200 0522     		movs	r2, #5
 3746 0202 1A70     		strb	r2, [r3]
 896:.\main.c      ****         changeToRF();
 3747              		.loc 1 896 0
 3748 0204 FFF7FEFF 		bl	changeToRF
 897:.\main.c      ****         // Make initial position
 898:.\main.c      ****         initial_pos_valid = 0;
 3749              		.loc 1 898 0
 3750 0208 734B     		ldr	r3, .L226+24
 3751 020a 0022     		movs	r2, #0
 3752 020c 1A70     		strb	r2, [r3]
 899:.\main.c      ****         initBrake();
 3753              		.loc 1 899 0
 3754 020e FFF7FEFF 		bl	initBrake
 900:.\main.c      ****         break;
 3755              		.loc 1 900 0
 3756 0212 8EE1     		b	.L192
 3757              	.L196:
 901:.\main.c      ****     case ('2'):
 902:.\main.c      ****         track_mode = DEST_TEST;
 3758              		.loc 1 902 0
 3759 0214 6A4B     		ldr	r3, .L226
 3760 0216 0622     		movs	r2, #6
 3761 0218 1A70     		strb	r2, [r3]
 903:.\main.c      ****         tracked_direction = robot_direction;
 3762              		.loc 1 903 0
 3763 021a 704B     		ldr	r3, .L226+28
 3764 021c 1B68     		ldr	r3, [r3]
 3765 021e 704A     		ldr	r2, .L226+32
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 84


 3766 0220 1360     		str	r3, [r2]
 904:.\main.c      ****         instructionLength = generateDirections();
 3767              		.loc 1 904 0
 3768 0222 FFF7FEFF 		bl	generateDirections
 3769 0226 0346     		mov	r3, r0
 3770 0228 9AB2     		uxth	r2, r3
 3771 022a 6E4B     		ldr	r3, .L226+36
 3772 022c 1A80     		strh	r2, [r3]	@ movhi
 905:.\main.c      ****         //instructionLength = generateEntireMapDirections();
 906:.\main.c      ****         //char message[128];
 907:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 908:.\main.c      ****         
 909:.\main.c      ****         last_quad_count1 = 0;
 3773              		.loc 1 909 0
 3774 022e 6E4B     		ldr	r3, .L226+40
 3775 0230 0022     		movs	r2, #0
 3776 0232 1A80     		strh	r2, [r3]	@ movhi
 910:.\main.c      ****         last_quad_count2 = 0;
 3777              		.loc 1 910 0
 3778 0234 6D4B     		ldr	r3, .L226+44
 3779 0236 0022     		movs	r2, #0
 3780 0238 1A80     		strh	r2, [r3]	@ movhi
 911:.\main.c      ****         QuadDec_M1_SetCounter(0);
 3781              		.loc 1 911 0
 3782 023a 0020     		movs	r0, #0
 3783 023c FFF7FEFF 		bl	QuadDec_M1_SetCounter
 912:.\main.c      ****         QuadDec_M2_SetCounter(0);
 3784              		.loc 1 912 0
 3785 0240 0020     		movs	r0, #0
 3786 0242 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 913:.\main.c      ****         instructionCount = 0;
 3787              		.loc 1 913 0
 3788 0246 6A4B     		ldr	r3, .L226+48
 3789 0248 0022     		movs	r2, #0
 3790 024a 1A80     		strh	r2, [r3]	@ movhi
 914:.\main.c      ****         isrRF_RX_Disable();
 3791              		.loc 1 914 0
 3792 024c FFF7FEFF 		bl	isrRF_RX_Disable
 915:.\main.c      ****         while(rf_char != 'F')
 3793              		.loc 1 915 0
 3794 0250 26E0     		b	.L208
 3795              	.L211:
 916:.\main.c      ****         {
 917:.\main.c      ****             rf_char = UART_GetChar();
 3796              		.loc 1 917 0
 3797 0252 FFF7FEFF 		bl	UART_GetChar
 3798 0256 0346     		mov	r3, r0
 3799 0258 FB77     		strb	r3, [r7, #31]
 918:.\main.c      ****             if(rf_char == 'F') break;
 3800              		.loc 1 918 0
 3801 025a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3802 025c 462B     		cmp	r3, #70
 3803 025e 00D1     		bne	.L209
 3804 0260 21E0     		b	.L210
 3805              	.L209:
 919:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 3806              		.loc 1 919 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 85


 3807 0262 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3808 0264 2F2B     		cmp	r3, #47
 3809 0266 1BD9     		bls	.L208
 3810              		.loc 1 919 0 is_stmt 0 discriminator 1
 3811 0268 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3812 026a 392B     		cmp	r3, #57
 3813 026c 18D8     		bhi	.L208
 920:.\main.c      ****             {
 921:.\main.c      ****                 UART_PutString("received: ");
 3814              		.loc 1 921 0 is_stmt 1
 3815 026e 6148     		ldr	r0, .L226+52
 3816 0270 FFF7FEFF 		bl	UART_PutString
 922:.\main.c      ****                 UART_PutChar(rf_char);
 3817              		.loc 1 922 0
 3818 0274 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3819 0276 1846     		mov	r0, r3
 3820 0278 FFF7FEFF 		bl	UART_PutChar
 923:.\main.c      ****                 UART_PutString("\r\n");
 3821              		.loc 1 923 0
 3822 027c 5E48     		ldr	r0, .L226+56
 3823 027e FFF7FEFF 		bl	UART_PutString
 924:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 3824              		.loc 1 924 0
 3825 0282 5B4B     		ldr	r3, .L226+48
 3826 0284 1B88     		ldrh	r3, [r3]
 3827 0286 1A46     		mov	r2, r3	@ movhi
 3828 0288 9200     		lsls	r2, r2, #2
 3829 028a 1344     		add	r3, r3, r2
 3830 028c 5B00     		lsls	r3, r3, #1
 3831 028e 9AB2     		uxth	r2, r3
 3832 0290 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3833 0292 9BB2     		uxth	r3, r3
 3834 0294 1344     		add	r3, r3, r2
 3835 0296 9BB2     		uxth	r3, r3
 3836 0298 303B     		subs	r3, r3, #48
 3837 029a 9AB2     		uxth	r2, r3
 3838 029c 544B     		ldr	r3, .L226+48
 3839 029e 1A80     		strh	r2, [r3]	@ movhi
 3840              	.L208:
 915:.\main.c      ****         {
 3841              		.loc 1 915 0
 3842 02a0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3843 02a2 462B     		cmp	r3, #70
 3844 02a4 D5D1     		bne	.L211
 3845              	.L210:
 925:.\main.c      ****             }
 926:.\main.c      ****             
 927:.\main.c      ****         }
 928:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 3846              		.loc 1 928 0
 3847 02a6 5548     		ldr	r0, .L226+60
 3848 02a8 FFF7FEFF 		bl	isrRF_RX_StartEx
 929:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 3849              		.loc 1 929 0
 3850 02ac 504B     		ldr	r3, .L226+48
 3851 02ae 1B88     		ldrh	r3, [r3]
 3852 02b0 1A46     		mov	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 86


 3853 02b2 3B46     		mov	r3, r7
 3854 02b4 1846     		mov	r0, r3
 3855 02b6 5249     		ldr	r1, .L226+64
 3856 02b8 FFF7FEFF 		bl	sprintf
 930:.\main.c      ****         UART_PutString(mes);
 3857              		.loc 1 930 0
 3858 02bc 3B46     		mov	r3, r7
 3859 02be 1846     		mov	r0, r3
 3860 02c0 FFF7FEFF 		bl	UART_PutString
 931:.\main.c      ****         
 932:.\main.c      ****         int i;
 933:.\main.c      ****         for(i = instructionCount;i < instructionLength; i++)
 3861              		.loc 1 933 0
 3862 02c4 4A4B     		ldr	r3, .L226+48
 3863 02c6 1B88     		ldrh	r3, [r3]
 3864 02c8 BB61     		str	r3, [r7, #24]
 3865 02ca 18E0     		b	.L212
 3866              	.L215:
 934:.\main.c      ****         {
 935:.\main.c      ****             if(i%2 == 0)
 3867              		.loc 1 935 0
 3868 02cc BB69     		ldr	r3, [r7, #24]
 3869 02ce 03F00103 		and	r3, r3, #1
 3870 02d2 002B     		cmp	r3, #0
 3871 02d4 07D1     		bne	.L213
 936:.\main.c      ****             {
 937:.\main.c      ****                 UART_PutChar(instructions[i]);
 3872              		.loc 1 937 0
 3873 02d6 4B4A     		ldr	r2, .L226+68
 3874 02d8 BB69     		ldr	r3, [r7, #24]
 3875 02da 1344     		add	r3, r3, r2
 3876 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3877 02de 1846     		mov	r0, r3
 3878 02e0 FFF7FEFF 		bl	UART_PutChar
 3879 02e4 08E0     		b	.L214
 3880              	.L213:
 938:.\main.c      ****             }
 939:.\main.c      ****             else UART_PutChar(instructions[i] + 48);
 3881              		.loc 1 939 0
 3882 02e6 474A     		ldr	r2, .L226+68
 3883 02e8 BB69     		ldr	r3, [r7, #24]
 3884 02ea 1344     		add	r3, r3, r2
 3885 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3886 02ee 3033     		adds	r3, r3, #48
 3887 02f0 DBB2     		uxtb	r3, r3
 3888 02f2 1846     		mov	r0, r3
 3889 02f4 FFF7FEFF 		bl	UART_PutChar
 3890              	.L214:
 933:.\main.c      ****         {
 3891              		.loc 1 933 0 discriminator 2
 3892 02f8 BB69     		ldr	r3, [r7, #24]
 3893 02fa 0133     		adds	r3, r3, #1
 3894 02fc BB61     		str	r3, [r7, #24]
 3895              	.L212:
 933:.\main.c      ****         {
 3896              		.loc 1 933 0 is_stmt 0 discriminator 1
 3897 02fe 394B     		ldr	r3, .L226+36
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 87


 3898 0300 1B88     		ldrh	r3, [r3]
 3899 0302 1A46     		mov	r2, r3
 3900 0304 BB69     		ldr	r3, [r7, #24]
 3901 0306 9A42     		cmp	r2, r3
 3902 0308 E0DC     		bgt	.L215
 940:.\main.c      **** 
 941:.\main.c      ****         }
 942:.\main.c      ****         
 943:.\main.c      ****         UART_PutString("\r\n");
 3903              		.loc 1 943 0 is_stmt 1
 3904 030a 3B48     		ldr	r0, .L226+56
 3905 030c FFF7FEFF 		bl	UART_PutString
 944:.\main.c      ****         
 945:.\main.c      ****         char nextStep = instructions[instructionCount];
 3906              		.loc 1 945 0
 3907 0310 374B     		ldr	r3, .L226+48
 3908 0312 1B88     		ldrh	r3, [r3]
 3909 0314 1A46     		mov	r2, r3
 3910 0316 3B4B     		ldr	r3, .L226+68
 3911 0318 9B5C     		ldrb	r3, [r3, r2]
 3912 031a FB74     		strb	r3, [r7, #19]
 946:.\main.c      ****         
 947:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1];
 3913              		.loc 1 947 0
 3914 031c 344B     		ldr	r3, .L226+48
 3915 031e 1B88     		ldrh	r3, [r3]
 3916 0320 0133     		adds	r3, r3, #1
 3917 0322 384A     		ldr	r2, .L226+68
 3918 0324 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3919 0326 9BB2     		uxth	r3, r3
 3920 0328 1A46     		mov	r2, r3	@ movhi
 3921 032a D200     		lsls	r2, r2, #3
 3922 032c 1344     		add	r3, r3, r2
 3923 032e 1B01     		lsls	r3, r3, #4
 3924 0330 9BB2     		uxth	r3, r3
 3925 0332 9AB2     		uxth	r2, r3
 3926 0334 264B     		ldr	r3, .L226+16
 3927 0336 1A80     		strh	r2, [r3]	@ movhi
 948:.\main.c      ****         if(instructionCount == 0) target_distance_quad -= QUAD_PER_UNIT; 
 3928              		.loc 1 948 0
 3929 0338 2D4B     		ldr	r3, .L226+48
 3930 033a 1B88     		ldrh	r3, [r3]
 3931 033c 002B     		cmp	r3, #0
 3932 033e 07D1     		bne	.L216
 3933              		.loc 1 948 0 is_stmt 0 discriminator 1
 3934 0340 234B     		ldr	r3, .L226+16
 3935 0342 1B88     		ldrh	r3, [r3]
 3936 0344 9BB2     		uxth	r3, r3
 3937 0346 903B     		subs	r3, r3, #144
 3938 0348 9BB2     		uxth	r3, r3
 3939 034a 9AB2     		uxth	r2, r3
 3940 034c 204B     		ldr	r3, .L226+16
 3941 034e 1A80     		strh	r2, [r3]	@ movhi
 3942              	.L216:
 949:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 3943              		.loc 1 949 0 is_stmt 1
 3944 0350 1F4B     		ldr	r3, .L226+16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 88


 3945 0352 1B88     		ldrh	r3, [r3]
 3946 0354 1BB2     		sxth	r3, r3
 3947 0356 3A46     		mov	r2, r7
 3948 0358 1046     		mov	r0, r2
 3949 035a 2B49     		ldr	r1, .L226+72
 3950 035c 1A46     		mov	r2, r3
 3951 035e FFF7FEFF 		bl	sprintf
 950:.\main.c      ****         UART_PutString(mes);
 3952              		.loc 1 950 0
 3953 0362 3B46     		mov	r3, r7
 3954 0364 1846     		mov	r0, r3
 3955 0366 FFF7FEFF 		bl	UART_PutString
 951:.\main.c      ****         inittrackLineZ();
 3956              		.loc 1 951 0
 3957 036a FFF7FEFF 		bl	inittrackLineZ
 952:.\main.c      ****         break;
 3958              		.loc 1 952 0
 3959 036e E0E0     		b	.L192
 3960              	.L194:
 953:.\main.c      ****     case ('1'):
 954:.\main.c      ****         track_mode = DEST_TEST;
 3961              		.loc 1 954 0
 3962 0370 134B     		ldr	r3, .L226
 3963 0372 0622     		movs	r2, #6
 3964 0374 1A70     		strb	r2, [r3]
 955:.\main.c      ****         tracked_direction = robot_direction;
 3965              		.loc 1 955 0
 3966 0376 194B     		ldr	r3, .L226+28
 3967 0378 1B68     		ldr	r3, [r3]
 3968 037a 194A     		ldr	r2, .L226+32
 3969 037c 1360     		str	r3, [r2]
 956:.\main.c      ****         //instructionLength = generateDirections();
 957:.\main.c      ****         instructionLength = generateEntireMapDirections();
 3970              		.loc 1 957 0
 3971 037e FFF7FEFF 		bl	generateEntireMapDirections
 3972 0382 0346     		mov	r3, r0
 3973 0384 9AB2     		uxth	r2, r3
 3974 0386 174B     		ldr	r3, .L226+36
 3975 0388 1A80     		strh	r2, [r3]	@ movhi
 958:.\main.c      ****         //char message[128];
 959:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 960:.\main.c      ****         instructionCount = 0;
 3976              		.loc 1 960 0
 3977 038a 194B     		ldr	r3, .L226+48
 3978 038c 0022     		movs	r2, #0
 3979 038e 1A80     		strh	r2, [r3]	@ movhi
 961:.\main.c      ****         QuadDec_M1_SetCounter(0);
 3980              		.loc 1 961 0
 3981 0390 0020     		movs	r0, #0
 3982 0392 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 962:.\main.c      ****         QuadDec_M2_SetCounter(0);
 3983              		.loc 1 962 0
 3984 0396 0020     		movs	r0, #0
 3985 0398 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 963:.\main.c      ****         last_quad_count1 = 0;
 3986              		.loc 1 963 0
 3987 039c 124B     		ldr	r3, .L226+40
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 89


 3988 039e 0022     		movs	r2, #0
 3989 03a0 1A80     		strh	r2, [r3]	@ movhi
 964:.\main.c      ****         last_quad_count2 = 0;
 3990              		.loc 1 964 0
 3991 03a2 124B     		ldr	r3, .L226+44
 3992 03a4 0022     		movs	r2, #0
 3993 03a6 1A80     		strh	r2, [r3]	@ movhi
 965:.\main.c      ****         isrRF_RX_Disable();
 3994              		.loc 1 965 0
 3995 03a8 FFF7FEFF 		bl	isrRF_RX_Disable
 966:.\main.c      ****         while(rf_char != 'F')
 3996              		.loc 1 966 0
 3997 03ac 4DE0     		b	.L217
 3998              	.L220:
 967:.\main.c      ****         {
 968:.\main.c      ****             rf_char = UART_GetChar();
 3999              		.loc 1 968 0
 4000 03ae FFF7FEFF 		bl	UART_GetChar
 4001 03b2 0346     		mov	r3, r0
 4002 03b4 FB77     		strb	r3, [r7, #31]
 969:.\main.c      ****             if(rf_char == 'F') break;
 4003              		.loc 1 969 0
 4004 03b6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4005 03b8 462B     		cmp	r3, #70
 4006 03ba 27D1     		bne	.L218
 4007 03bc 48E0     		b	.L219
 4008              	.L227:
 4009 03be 00BF     		.align	2
 4010              	.L226:
 4011 03c0 00000000 		.word	track_mode
 4012 03c4 00000000 		.word	accum_dist
 4013 03c8 00000000 		.word	target_distance_cm
 4014 03cc 00000000 		.word	quad_per_cm
 4015 03d0 00000000 		.word	target_distance_quad
 4016 03d4 A8000000 		.word	.LC9
 4017 03d8 00000000 		.word	initial_pos_valid
 4018 03dc 00000000 		.word	robot_direction
 4019 03e0 00000000 		.word	tracked_direction
 4020 03e4 00000000 		.word	instructionLength
 4021 03e8 00000000 		.word	last_quad_count1
 4022 03ec 00000000 		.word	last_quad_count2
 4023 03f0 00000000 		.word	instructionCount
 4024 03f4 BC000000 		.word	.LC10
 4025 03f8 C8000000 		.word	.LC11
 4026 03fc 00000000 		.word	BT_rxInt
 4027 0400 CC000000 		.word	.LC12
 4028 0404 00000000 		.word	instructions
 4029 0408 64000000 		.word	.LC5
 4030              	.L218:
 970:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 4031              		.loc 1 970 0
 4032 040c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4033 040e 2F2B     		cmp	r3, #47
 4034 0410 1BD9     		bls	.L217
 4035              		.loc 1 970 0 is_stmt 0 discriminator 1
 4036 0412 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4037 0414 392B     		cmp	r3, #57
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 90


 4038 0416 18D8     		bhi	.L217
 971:.\main.c      ****             {
 972:.\main.c      ****                 UART_PutString("received: ");
 4039              		.loc 1 972 0 is_stmt 1
 4040 0418 4748     		ldr	r0, .L228
 4041 041a FFF7FEFF 		bl	UART_PutString
 973:.\main.c      ****                 UART_PutChar(rf_char);
 4042              		.loc 1 973 0
 4043 041e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4044 0420 1846     		mov	r0, r3
 4045 0422 FFF7FEFF 		bl	UART_PutChar
 974:.\main.c      ****                 UART_PutString("\r\n");
 4046              		.loc 1 974 0
 4047 0426 4548     		ldr	r0, .L228+4
 4048 0428 FFF7FEFF 		bl	UART_PutString
 975:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 4049              		.loc 1 975 0
 4050 042c 444B     		ldr	r3, .L228+8
 4051 042e 1B88     		ldrh	r3, [r3]
 4052 0430 1A46     		mov	r2, r3	@ movhi
 4053 0432 9200     		lsls	r2, r2, #2
 4054 0434 1344     		add	r3, r3, r2
 4055 0436 5B00     		lsls	r3, r3, #1
 4056 0438 9AB2     		uxth	r2, r3
 4057 043a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4058 043c 9BB2     		uxth	r3, r3
 4059 043e 1344     		add	r3, r3, r2
 4060 0440 9BB2     		uxth	r3, r3
 4061 0442 303B     		subs	r3, r3, #48
 4062 0444 9AB2     		uxth	r2, r3
 4063 0446 3E4B     		ldr	r3, .L228+8
 4064 0448 1A80     		strh	r2, [r3]	@ movhi
 4065              	.L217:
 966:.\main.c      ****         {
 4066              		.loc 1 966 0
 4067 044a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4068 044c 462B     		cmp	r3, #70
 4069 044e AED1     		bne	.L220
 4070              	.L219:
 976:.\main.c      ****             }
 977:.\main.c      ****             
 978:.\main.c      ****         }
 979:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4071              		.loc 1 979 0
 4072 0450 3C48     		ldr	r0, .L228+12
 4073 0452 FFF7FEFF 		bl	isrRF_RX_StartEx
 980:.\main.c      ****         sprintf(mes, "num instruct:%d\r\n", instructionLength);
 4074              		.loc 1 980 0
 4075 0456 3C4B     		ldr	r3, .L228+16
 4076 0458 1B88     		ldrh	r3, [r3]
 4077 045a 1A46     		mov	r2, r3
 4078 045c 3B46     		mov	r3, r7
 4079 045e 1846     		mov	r0, r3
 4080 0460 3A49     		ldr	r1, .L228+20
 4081 0462 FFF7FEFF 		bl	sprintf
 981:.\main.c      ****         UART_PutString(mes);
 4082              		.loc 1 981 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 91


 4083 0466 3B46     		mov	r3, r7
 4084 0468 1846     		mov	r0, r3
 4085 046a FFF7FEFF 		bl	UART_PutString
 982:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4086              		.loc 1 982 0
 4087 046e 344B     		ldr	r3, .L228+8
 4088 0470 1B88     		ldrh	r3, [r3]
 4089 0472 1A46     		mov	r2, r3
 4090 0474 3B46     		mov	r3, r7
 4091 0476 1846     		mov	r0, r3
 4092 0478 3549     		ldr	r1, .L228+24
 4093 047a FFF7FEFF 		bl	sprintf
 983:.\main.c      ****         UART_PutString(mes);
 4094              		.loc 1 983 0
 4095 047e 3B46     		mov	r3, r7
 4096 0480 1846     		mov	r0, r3
 4097 0482 FFF7FEFF 		bl	UART_PutString
 984:.\main.c      ****         //instructionCount = instructionLength - 22;
 985:.\main.c      ****         int x;
 986:.\main.c      ****         
 987:.\main.c      **** //        for(x  = instructionCount; x < instructionLength; x+=2)
 988:.\main.c      **** //        {
 989:.\main.c      **** //            char step = instructions[x];
 990:.\main.c      **** //            uint8_t dist = instructions[x+1];
 991:.\main.c      **** //            
 992:.\main.c      **** //            if(step == 'D' && dist == 0)
 993:.\main.c      **** //            {
 994:.\main.c      **** //            }
 995:.\main.c      **** //            else
 996:.\main.c      **** //            {
 997:.\main.c      **** //                
 998:.\main.c      **** //            }
 999:.\main.c      **** //        }
1000:.\main.c      ****         for(x = instructionCount;x < instructionLength; x++)
 4098              		.loc 1 1000 0
 4099 0486 2E4B     		ldr	r3, .L228+8
 4100 0488 1B88     		ldrh	r3, [r3]
 4101 048a 7B61     		str	r3, [r7, #20]
 4102 048c 18E0     		b	.L221
 4103              	.L224:
1001:.\main.c      ****         {
1002:.\main.c      ****             
1003:.\main.c      ****             if(x%2 == 0)
 4104              		.loc 1 1003 0
 4105 048e 7B69     		ldr	r3, [r7, #20]
 4106 0490 03F00103 		and	r3, r3, #1
 4107 0494 002B     		cmp	r3, #0
 4108 0496 07D1     		bne	.L222
1004:.\main.c      ****             {
1005:.\main.c      ****                 UART_PutChar(instructions[x]);
 4109              		.loc 1 1005 0
 4110 0498 2E4A     		ldr	r2, .L228+28
 4111 049a 7B69     		ldr	r3, [r7, #20]
 4112 049c 1344     		add	r3, r3, r2
 4113 049e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4114 04a0 1846     		mov	r0, r3
 4115 04a2 FFF7FEFF 		bl	UART_PutChar
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 92


 4116 04a6 08E0     		b	.L223
 4117              	.L222:
1006:.\main.c      ****             }
1007:.\main.c      ****             else UART_PutChar(instructions[x] + 48);
 4118              		.loc 1 1007 0
 4119 04a8 2A4A     		ldr	r2, .L228+28
 4120 04aa 7B69     		ldr	r3, [r7, #20]
 4121 04ac 1344     		add	r3, r3, r2
 4122 04ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4123 04b0 3033     		adds	r3, r3, #48
 4124 04b2 DBB2     		uxtb	r3, r3
 4125 04b4 1846     		mov	r0, r3
 4126 04b6 FFF7FEFF 		bl	UART_PutChar
 4127              	.L223:
1000:.\main.c      ****         {
 4128              		.loc 1 1000 0 discriminator 2
 4129 04ba 7B69     		ldr	r3, [r7, #20]
 4130 04bc 0133     		adds	r3, r3, #1
 4131 04be 7B61     		str	r3, [r7, #20]
 4132              	.L221:
1000:.\main.c      ****         {
 4133              		.loc 1 1000 0 is_stmt 0 discriminator 1
 4134 04c0 214B     		ldr	r3, .L228+16
 4135 04c2 1B88     		ldrh	r3, [r3]
 4136 04c4 1A46     		mov	r2, r3
 4137 04c6 7B69     		ldr	r3, [r7, #20]
 4138 04c8 9A42     		cmp	r2, r3
 4139 04ca E0DC     		bgt	.L224
1008:.\main.c      **** 
1009:.\main.c      ****         }
1010:.\main.c      ****         
1011:.\main.c      ****         UART_PutString("\r\n");
 4140              		.loc 1 1011 0 is_stmt 1
 4141 04cc 1B48     		ldr	r0, .L228+4
 4142 04ce FFF7FEFF 		bl	UART_PutString
1012:.\main.c      **** 
1013:.\main.c      ****         nextStep = instructions[instructionCount];
 4143              		.loc 1 1013 0
 4144 04d2 1B4B     		ldr	r3, .L228+8
 4145 04d4 1B88     		ldrh	r3, [r3]
 4146 04d6 1A46     		mov	r2, r3
 4147 04d8 1E4B     		ldr	r3, .L228+28
 4148 04da 9B5C     		ldrb	r3, [r3, r2]
 4149 04dc FB74     		strb	r3, [r7, #19]
1014:.\main.c      ****         
1015:.\main.c      ****         
1016:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1]; 
 4150              		.loc 1 1016 0
 4151 04de 184B     		ldr	r3, .L228+8
 4152 04e0 1B88     		ldrh	r3, [r3]
 4153 04e2 0133     		adds	r3, r3, #1
 4154 04e4 1B4A     		ldr	r2, .L228+28
 4155 04e6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4156 04e8 9BB2     		uxth	r3, r3
 4157 04ea 1A46     		mov	r2, r3	@ movhi
 4158 04ec D200     		lsls	r2, r2, #3
 4159 04ee 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 93


 4160 04f0 1B01     		lsls	r3, r3, #4
 4161 04f2 9BB2     		uxth	r3, r3
 4162 04f4 9AB2     		uxth	r2, r3
 4163 04f6 184B     		ldr	r3, .L228+32
 4164 04f8 1A80     		strh	r2, [r3]	@ movhi
1017:.\main.c      ****         if(instructionCount == 0) target_distance_quad += QUAD_PER_UNIT; 
 4165              		.loc 1 1017 0
 4166 04fa 114B     		ldr	r3, .L228+8
 4167 04fc 1B88     		ldrh	r3, [r3]
 4168 04fe 002B     		cmp	r3, #0
 4169 0500 07D1     		bne	.L225
 4170              		.loc 1 1017 0 is_stmt 0 discriminator 1
 4171 0502 154B     		ldr	r3, .L228+32
 4172 0504 1B88     		ldrh	r3, [r3]
 4173 0506 9BB2     		uxth	r3, r3
 4174 0508 9033     		adds	r3, r3, #144
 4175 050a 9BB2     		uxth	r3, r3
 4176 050c 9AB2     		uxth	r2, r3
 4177 050e 124B     		ldr	r3, .L228+32
 4178 0510 1A80     		strh	r2, [r3]	@ movhi
 4179              	.L225:
1018:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4180              		.loc 1 1018 0 is_stmt 1
 4181 0512 114B     		ldr	r3, .L228+32
 4182 0514 1B88     		ldrh	r3, [r3]
 4183 0516 1BB2     		sxth	r3, r3
 4184 0518 3A46     		mov	r2, r7
 4185 051a 1046     		mov	r0, r2
 4186 051c 0F49     		ldr	r1, .L228+36
 4187 051e 1A46     		mov	r2, r3
 4188 0520 FFF7FEFF 		bl	sprintf
1019:.\main.c      ****         UART_PutString(mes);
 4189              		.loc 1 1019 0
 4190 0524 3B46     		mov	r3, r7
 4191 0526 1846     		mov	r0, r3
 4192 0528 FFF7FEFF 		bl	UART_PutString
1020:.\main.c      ****         inittrackLineZ();
 4193              		.loc 1 1020 0
 4194 052c FFF7FEFF 		bl	inittrackLineZ
1021:.\main.c      ****         break;
 4195              		.loc 1 1021 0
 4196 0530 00BF     		nop
 4197              	.L192:
 4198              	.LBE9:
1022:.\main.c      ****     }
1023:.\main.c      **** }
 4199              		.loc 1 1023 0
 4200 0532 2037     		adds	r7, r7, #32
 4201              		.cfi_def_cfa_offset 8
 4202 0534 BD46     		mov	sp, r7
 4203              		.cfi_def_cfa_register 13
 4204              		@ sp needed
 4205 0536 80BD     		pop	{r7, pc}
 4206              	.L229:
 4207              		.align	2
 4208              	.L228:
 4209 0538 BC000000 		.word	.LC10
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 94


 4210 053c C8000000 		.word	.LC11
 4211 0540 00000000 		.word	instructionCount
 4212 0544 00000000 		.word	BT_rxInt
 4213 0548 00000000 		.word	instructionLength
 4214 054c EC000000 		.word	.LC13
 4215 0550 CC000000 		.word	.LC12
 4216 0554 00000000 		.word	instructions
 4217 0558 00000000 		.word	target_distance_quad
 4218 055c 64000000 		.word	.LC5
 4219              		.cfi_endproc
 4220              	.LFE93:
 4221              		.size	BT_rxInt, .-BT_rxInt
 4222              		.section	.text.changeToRF,"ax",%progbits
 4223              		.align	2
 4224              		.global	changeToRF
 4225              		.thumb
 4226              		.thumb_func
 4227              		.type	changeToRF, %function
 4228              	changeToRF:
 4229              	.LFB94:
1024:.\main.c      **** 
1025:.\main.c      **** 
1026:.\main.c      **** void changeToRF()
1027:.\main.c      **** {
 4230              		.loc 1 1027 0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 0
 4233              		@ frame_needed = 1, uses_anonymous_args = 0
 4234 0000 80B5     		push	{r7, lr}
 4235              		.cfi_def_cfa_offset 8
 4236              		.cfi_offset 7, -8
 4237              		.cfi_offset 14, -4
 4238 0002 00AF     		add	r7, sp, #0
 4239              		.cfi_def_cfa_register 7
1028:.\main.c      ****         //disable BT
1029:.\main.c      ****         BT_ENABLED = 0;
 4240              		.loc 1 1029 0
 4241 0004 0B4B     		ldr	r3, .L231
 4242 0006 0022     		movs	r2, #0
 4243 0008 1A70     		strb	r2, [r3]
1030:.\main.c      ****         isrRF_RX_Stop();
 4244              		.loc 1 1030 0
 4245 000a FFF7FEFF 		bl	isrRF_RX_Stop
1031:.\main.c      ****         UART_Stop();
 4246              		.loc 1 1031 0
 4247 000e FFF7FEFF 		bl	UART_Stop
1032:.\main.c      ****         
1033:.\main.c      ****         //enable RF
1034:.\main.c      ****         BIN_ENABLED = 1;
 4248              		.loc 1 1034 0
 4249 0012 094B     		ldr	r3, .L231+4
 4250 0014 0122     		movs	r2, #1
 4251 0016 1A70     		strb	r2, [r3]
1035:.\main.c      ****         UART_clk_SetDividerValue(130);
 4252              		.loc 1 1035 0
 4253 0018 8120     		movs	r0, #129
 4254 001a 0121     		movs	r1, #1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 95


 4255 001c FFF7FEFF 		bl	UART_clk_SetDividerRegister
1036:.\main.c      ****         isrRF_RX_StartEx(rxInt);
 4256              		.loc 1 1036 0
 4257 0020 0648     		ldr	r0, .L231+8
 4258 0022 FFF7FEFF 		bl	isrRF_RX_StartEx
1037:.\main.c      ****         UART_Start();
 4259              		.loc 1 1037 0
 4260 0026 FFF7FEFF 		bl	UART_Start
1038:.\main.c      ****         RF_BT_SELECT_Write(0);
 4261              		.loc 1 1038 0
 4262 002a 0020     		movs	r0, #0
 4263 002c FFF7FEFF 		bl	RF_BT_SELECT_Write
1039:.\main.c      **** }
 4264              		.loc 1 1039 0
 4265 0030 80BD     		pop	{r7, pc}
 4266              	.L232:
 4267 0032 00BF     		.align	2
 4268              	.L231:
 4269 0034 00000000 		.word	BT_ENABLED
 4270 0038 00000000 		.word	BIN_ENABLED
 4271 003c 00000000 		.word	rxInt
 4272              		.cfi_endproc
 4273              	.LFE94:
 4274              		.size	changeToRF, .-changeToRF
 4275              		.section	.text.changeToBT,"ax",%progbits
 4276              		.align	2
 4277              		.global	changeToBT
 4278              		.thumb
 4279              		.thumb_func
 4280              		.type	changeToBT, %function
 4281              	changeToBT:
 4282              	.LFB95:
1040:.\main.c      **** 
1041:.\main.c      **** void changeToBT()
1042:.\main.c      **** {
 4283              		.loc 1 1042 0
 4284              		.cfi_startproc
 4285              		@ args = 0, pretend = 0, frame = 0
 4286              		@ frame_needed = 1, uses_anonymous_args = 0
 4287 0000 80B5     		push	{r7, lr}
 4288              		.cfi_def_cfa_offset 8
 4289              		.cfi_offset 7, -8
 4290              		.cfi_offset 14, -4
 4291 0002 00AF     		add	r7, sp, #0
 4292              		.cfi_def_cfa_register 7
1043:.\main.c      ****         //disable RF
1044:.\main.c      ****         BIN_ENABLED = 0;
 4293              		.loc 1 1044 0
 4294 0004 0B4B     		ldr	r3, .L234
 4295 0006 0022     		movs	r2, #0
 4296 0008 1A70     		strb	r2, [r3]
1045:.\main.c      ****         isrRF_RX_Stop();
 4297              		.loc 1 1045 0
 4298 000a FFF7FEFF 		bl	isrRF_RX_Stop
1046:.\main.c      ****         UART_Stop();
 4299              		.loc 1 1046 0
 4300 000e FFF7FEFF 		bl	UART_Stop
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 96


1047:.\main.c      ****         
1048:.\main.c      ****         //enable BT
1049:.\main.c      ****         BT_ENABLED = 1;
 4301              		.loc 1 1049 0
 4302 0012 094B     		ldr	r3, .L234+4
 4303 0014 0122     		movs	r2, #1
 4304 0016 1A70     		strb	r2, [r3]
1050:.\main.c      ****         UART_clk_SetDividerValue(781);
 4305              		.loc 1 1050 0
 4306 0018 4FF44370 		mov	r0, #780
 4307 001c 0121     		movs	r1, #1
 4308 001e FFF7FEFF 		bl	UART_clk_SetDividerRegister
1051:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4309              		.loc 1 1051 0
 4310 0022 0648     		ldr	r0, .L234+8
 4311 0024 FFF7FEFF 		bl	isrRF_RX_StartEx
1052:.\main.c      ****         UART_Start();
 4312              		.loc 1 1052 0
 4313 0028 FFF7FEFF 		bl	UART_Start
1053:.\main.c      ****         RF_BT_SELECT_Write(1);
 4314              		.loc 1 1053 0
 4315 002c 0120     		movs	r0, #1
 4316 002e FFF7FEFF 		bl	RF_BT_SELECT_Write
1054:.\main.c      **** }
 4317              		.loc 1 1054 0
 4318 0032 80BD     		pop	{r7, pc}
 4319              	.L235:
 4320              		.align	2
 4321              	.L234:
 4322 0034 00000000 		.word	BIN_ENABLED
 4323 0038 00000000 		.word	BT_ENABLED
 4324 003c 00000000 		.word	BT_rxInt
 4325              		.cfi_endproc
 4326              	.LFE95:
 4327              		.size	changeToBT, .-changeToBT
 4328              		.section	.text.Quad_Dec_response,"ax",%progbits
 4329              		.align	2
 4330              		.global	Quad_Dec_response
 4331              		.thumb
 4332              		.thumb_func
 4333              		.type	Quad_Dec_response, %function
 4334              	Quad_Dec_response:
 4335              	.LFB96:
1055:.\main.c      **** 
1056:.\main.c      **** 
1057:.\main.c      **** void Quad_Dec_response()
1058:.\main.c      **** {
 4336              		.loc 1 1058 0
 4337              		.cfi_startproc
 4338              		@ args = 0, pretend = 0, frame = 32
 4339              		@ frame_needed = 1, uses_anonymous_args = 0
 4340 0000 B0B5     		push	{r4, r5, r7, lr}
 4341              		.cfi_def_cfa_offset 16
 4342              		.cfi_offset 4, -16
 4343              		.cfi_offset 5, -12
 4344              		.cfi_offset 7, -8
 4345              		.cfi_offset 14, -4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 97


 4346 0002 88B0     		sub	sp, sp, #32
 4347              		.cfi_def_cfa_offset 48
 4348 0004 00AF     		add	r7, sp, #0
 4349              		.cfi_def_cfa_register 7
1059:.\main.c      ****     //Check if the flag has been set
1060:.\main.c      ****     if (!flag_calc_wheelspeed) return;
 4350              		.loc 1 1060 0
 4351 0006 824B     		ldr	r3, .L244
 4352 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4353 000a 002B     		cmp	r3, #0
 4354 000c 00D1     		bne	.L237
 4355 000e FCE0     		b	.L236
 4356              	.L237:
1061:.\main.c      ****     flag_calc_wheelspeed = 0;
 4357              		.loc 1 1061 0
 4358 0010 7F4B     		ldr	r3, .L244
 4359 0012 0022     		movs	r2, #0
 4360 0014 1A70     		strb	r2, [r3]
1062:.\main.c      ****     
1063:.\main.c      ****     //char wheel_1_str [64];
1064:.\main.c      ****     //char wheel_2_str [64];
1065:.\main.c      ****     //sprintf(wheel_1_str, "quad count 1 is: %d\n\r", quad_diff1);
1066:.\main.c      ****     //usbPutString(wheel_1_str);
1067:.\main.c      ****     //sprintf(wheel_2_str, "quad count 2 is: %d\n\r", quad_diff2);
1068:.\main.c      ****     
1069:.\main.c      ****     //usbPutString(wheel_2_str);
1070:.\main.c      ****     
1071:.\main.c      ****     int16 leftSpeed = quad_diff1;
 4361              		.loc 1 1071 0
 4362 0016 7F4B     		ldr	r3, .L244+4
 4363 0018 1B88     		ldrh	r3, [r3]	@ movhi
 4364 001a FB81     		strh	r3, [r7, #14]	@ movhi
1072:.\main.c      ****     int16 rightSpeed = quad_diff2;
 4365              		.loc 1 1072 0
 4366 001c 7E4B     		ldr	r3, .L244+8
 4367 001e 1B88     		ldrh	r3, [r3]	@ movhi
 4368 0020 BB81     		strh	r3, [r7, #12]	@ movhi
1073:.\main.c      ****     double scalingLeft = 1;
 4369              		.loc 1 1073 0
 4370 0022 4FF00002 		mov	r2, #0
 4371 0026 7D4B     		ldr	r3, .L244+12
 4372 0028 C7E90623 		strd	r2, [r7, #24]
1074:.\main.c      ****     double scalingRight = 1;
 4373              		.loc 1 1074 0
 4374 002c 4FF00002 		mov	r2, #0
 4375 0030 7A4B     		ldr	r3, .L244+12
 4376 0032 C7E90423 		strd	r2, [r7, #16]
1075:.\main.c      ****     
1076:.\main.c      ****     //there's an initial right tilt by default, so we want to decrease the initial left speed
1077:.\main.c      ****     if(leftSpeed == 0 && rightSpeed == 0){ 
 4377              		.loc 1 1077 0
 4378 0036 B7F90E30 		ldrsh	r3, [r7, #14]
 4379 003a 002B     		cmp	r3, #0
 4380 003c 0FD1     		bne	.L239
 4381              		.loc 1 1077 0 is_stmt 0 discriminator 1
 4382 003e B7F90C30 		ldrsh	r3, [r7, #12]
 4383 0042 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 98


 4384 0044 0BD1     		bne	.L239
1078:.\main.c      ****        //leftSpeed = 3;
1079:.\main.c      ****         scalingLeft = 2;
 4385              		.loc 1 1079 0 is_stmt 1
 4386 0046 4FF00002 		mov	r2, #0
 4387 004a 4FF08043 		mov	r3, #1073741824
 4388 004e C7E90623 		strd	r2, [r7, #24]
1080:.\main.c      ****         scalingRight = 2;
 4389              		.loc 1 1080 0
 4390 0052 4FF00002 		mov	r2, #0
 4391 0056 4FF08043 		mov	r3, #1073741824
 4392 005a C7E90423 		strd	r2, [r7, #16]
 4393              	.L239:
1081:.\main.c      ****     }
1082:.\main.c      **** 
1083:.\main.c      ****     int interCalc = leftSpeedLimit - abs(leftSpeed);
 4394              		.loc 1 1083 0
 4395 005e 704B     		ldr	r3, .L244+16
 4396 0060 1B88     		ldrh	r3, [r3]
 4397 0062 1AB2     		sxth	r2, r3
 4398 0064 B7F90E30 		ldrsh	r3, [r7, #14]
 4399 0068 002B     		cmp	r3, #0
 4400 006a B8BF     		it	lt
 4401 006c 5B42     		rsblt	r3, r3, #0
 4402 006e D31A     		subs	r3, r2, r3
 4403 0070 BB60     		str	r3, [r7, #8]
1084:.\main.c      ****     int nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs((int)(interCalc)));
 4404              		.loc 1 1084 0
 4405 0072 BB68     		ldr	r3, [r7, #8]
 4406 0074 83EAE372 		eor	r2, r3, r3, asr #31
 4407 0078 A2EBE372 		sub	r2, r2, r3, asr #31
 4408 007c BB68     		ldr	r3, [r7, #8]
 4409 007e 92FBF3F3 		sdiv	r3, r2, r3
 4410 0082 1846     		mov	r0, r3
 4411 0084 FFF7FEFF 		bl	__aeabi_i2d
 4412 0088 0446     		mov	r4, r0
 4413 008a 0D46     		mov	r5, r1
 4414 008c BB68     		ldr	r3, [r7, #8]
 4415 008e 002B     		cmp	r3, #0
 4416 0090 B8BF     		it	lt
 4417 0092 5B42     		rsblt	r3, r3, #0
 4418 0094 1846     		mov	r0, r3
 4419 0096 FFF7FEFF 		bl	__aeabi_i2d
 4420 009a 0246     		mov	r2, r0
 4421 009c 0B46     		mov	r3, r1
 4422 009e 1046     		mov	r0, r2
 4423 00a0 1946     		mov	r1, r3
 4424 00a2 FFF7FEFF 		bl	sqrt
 4425 00a6 0246     		mov	r2, r0
 4426 00a8 0B46     		mov	r3, r1
 4427 00aa 2046     		mov	r0, r4
 4428 00ac 2946     		mov	r1, r5
 4429 00ae FFF7FEFF 		bl	__aeabi_dmul
 4430 00b2 0246     		mov	r2, r0
 4431 00b4 0B46     		mov	r3, r1
 4432 00b6 1046     		mov	r0, r2
 4433 00b8 1946     		mov	r1, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 99


 4434 00ba FFF7FEFF 		bl	__aeabi_d2iz
 4435 00be 0346     		mov	r3, r0
 4436 00c0 7B60     		str	r3, [r7, #4]
1085:.\main.c      ****     left_duty_cycle = left_duty_cycle + scalingLeft*nextSpeed;
 4437              		.loc 1 1085 0
 4438 00c2 584B     		ldr	r3, .L244+20
 4439 00c4 1B88     		ldrh	r3, [r3]
 4440 00c6 1BB2     		sxth	r3, r3
 4441 00c8 1846     		mov	r0, r3
 4442 00ca FFF7FEFF 		bl	__aeabi_i2d
 4443 00ce 0446     		mov	r4, r0
 4444 00d0 0D46     		mov	r5, r1
 4445 00d2 7868     		ldr	r0, [r7, #4]
 4446 00d4 FFF7FEFF 		bl	__aeabi_i2d
 4447 00d8 0246     		mov	r2, r0
 4448 00da 0B46     		mov	r3, r1
 4449 00dc 1046     		mov	r0, r2
 4450 00de 1946     		mov	r1, r3
 4451 00e0 D7E90623 		ldrd	r2, [r7, #24]
 4452 00e4 FFF7FEFF 		bl	__aeabi_dmul
 4453 00e8 0246     		mov	r2, r0
 4454 00ea 0B46     		mov	r3, r1
 4455 00ec 2046     		mov	r0, r4
 4456 00ee 2946     		mov	r1, r5
 4457 00f0 FFF7FEFF 		bl	__aeabi_dadd
 4458 00f4 0246     		mov	r2, r0
 4459 00f6 0B46     		mov	r3, r1
 4460 00f8 1046     		mov	r0, r2
 4461 00fa 1946     		mov	r1, r3
 4462 00fc FFF7FEFF 		bl	__aeabi_d2iz
 4463 0100 0346     		mov	r3, r0
 4464 0102 9AB2     		uxth	r2, r3
 4465 0104 474B     		ldr	r3, .L244+20
 4466 0106 1A80     		strh	r2, [r3]	@ movhi
1086:.\main.c      ****     interCalc = rightSpeedLimit - abs(rightSpeed);
 4467              		.loc 1 1086 0
 4468 0108 474B     		ldr	r3, .L244+24
 4469 010a 1B88     		ldrh	r3, [r3]
 4470 010c 1AB2     		sxth	r2, r3
 4471 010e B7F90C30 		ldrsh	r3, [r7, #12]
 4472 0112 002B     		cmp	r3, #0
 4473 0114 B8BF     		it	lt
 4474 0116 5B42     		rsblt	r3, r3, #0
 4475 0118 D31A     		subs	r3, r2, r3
 4476 011a BB60     		str	r3, [r7, #8]
1087:.\main.c      ****     nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs(interCalc));
 4477              		.loc 1 1087 0
 4478 011c BB68     		ldr	r3, [r7, #8]
 4479 011e 83EAE372 		eor	r2, r3, r3, asr #31
 4480 0122 A2EBE372 		sub	r2, r2, r3, asr #31
 4481 0126 BB68     		ldr	r3, [r7, #8]
 4482 0128 92FBF3F3 		sdiv	r3, r2, r3
 4483 012c 1846     		mov	r0, r3
 4484 012e FFF7FEFF 		bl	__aeabi_i2d
 4485 0132 0446     		mov	r4, r0
 4486 0134 0D46     		mov	r5, r1
 4487 0136 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 100


 4488 0138 002B     		cmp	r3, #0
 4489 013a B8BF     		it	lt
 4490 013c 5B42     		rsblt	r3, r3, #0
 4491 013e 1846     		mov	r0, r3
 4492 0140 FFF7FEFF 		bl	__aeabi_i2d
 4493 0144 0246     		mov	r2, r0
 4494 0146 0B46     		mov	r3, r1
 4495 0148 1046     		mov	r0, r2
 4496 014a 1946     		mov	r1, r3
 4497 014c FFF7FEFF 		bl	sqrt
 4498 0150 0246     		mov	r2, r0
 4499 0152 0B46     		mov	r3, r1
 4500 0154 2046     		mov	r0, r4
 4501 0156 2946     		mov	r1, r5
 4502 0158 FFF7FEFF 		bl	__aeabi_dmul
 4503 015c 0246     		mov	r2, r0
 4504 015e 0B46     		mov	r3, r1
 4505 0160 1046     		mov	r0, r2
 4506 0162 1946     		mov	r1, r3
 4507 0164 FFF7FEFF 		bl	__aeabi_d2iz
 4508 0168 0346     		mov	r3, r0
 4509 016a 7B60     		str	r3, [r7, #4]
1088:.\main.c      ****     right_duty_cycle = right_duty_cycle + scalingRight*nextSpeed;
 4510              		.loc 1 1088 0
 4511 016c 2F4B     		ldr	r3, .L244+28
 4512 016e 1B88     		ldrh	r3, [r3]
 4513 0170 1BB2     		sxth	r3, r3
 4514 0172 1846     		mov	r0, r3
 4515 0174 FFF7FEFF 		bl	__aeabi_i2d
 4516 0178 0446     		mov	r4, r0
 4517 017a 0D46     		mov	r5, r1
 4518 017c 7868     		ldr	r0, [r7, #4]
 4519 017e FFF7FEFF 		bl	__aeabi_i2d
 4520 0182 0246     		mov	r2, r0
 4521 0184 0B46     		mov	r3, r1
 4522 0186 1046     		mov	r0, r2
 4523 0188 1946     		mov	r1, r3
 4524 018a D7E90423 		ldrd	r2, [r7, #16]
 4525 018e FFF7FEFF 		bl	__aeabi_dmul
 4526 0192 0246     		mov	r2, r0
 4527 0194 0B46     		mov	r3, r1
 4528 0196 2046     		mov	r0, r4
 4529 0198 2946     		mov	r1, r5
 4530 019a FFF7FEFF 		bl	__aeabi_dadd
 4531 019e 0246     		mov	r2, r0
 4532 01a0 0B46     		mov	r3, r1
 4533 01a2 1046     		mov	r0, r2
 4534 01a4 1946     		mov	r1, r3
 4535 01a6 FFF7FEFF 		bl	__aeabi_d2iz
 4536 01aa 0346     		mov	r3, r0
 4537 01ac 9AB2     		uxth	r2, r3
 4538 01ae 1F4B     		ldr	r3, .L244+28
 4539 01b0 1A80     		strh	r2, [r3]	@ movhi
1089:.\main.c      ****     
1090:.\main.c      ****     if(right_duty_cycle < 0) right_duty_cycle = 0;
 4540              		.loc 1 1090 0
 4541 01b2 1E4B     		ldr	r3, .L244+28
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 101


 4542 01b4 1B88     		ldrh	r3, [r3]
 4543 01b6 1BB2     		sxth	r3, r3
 4544 01b8 002B     		cmp	r3, #0
 4545 01ba 02DA     		bge	.L240
 4546              		.loc 1 1090 0 is_stmt 0 discriminator 1
 4547 01bc 1B4B     		ldr	r3, .L244+28
 4548 01be 0022     		movs	r2, #0
 4549 01c0 1A80     		strh	r2, [r3]	@ movhi
 4550              	.L240:
1091:.\main.c      ****     if(left_duty_cycle < 0) left_duty_cycle = 0;
 4551              		.loc 1 1091 0 is_stmt 1
 4552 01c2 184B     		ldr	r3, .L244+20
 4553 01c4 1B88     		ldrh	r3, [r3]
 4554 01c6 1BB2     		sxth	r3, r3
 4555 01c8 002B     		cmp	r3, #0
 4556 01ca 02DA     		bge	.L241
 4557              		.loc 1 1091 0 is_stmt 0 discriminator 1
 4558 01cc 154B     		ldr	r3, .L244+20
 4559 01ce 0022     		movs	r2, #0
 4560 01d0 1A80     		strh	r2, [r3]	@ movhi
 4561              	.L241:
1092:.\main.c      ****     if(right_duty_cycle > 100) right_duty_cycle = 100;
 4562              		.loc 1 1092 0 is_stmt 1
 4563 01d2 164B     		ldr	r3, .L244+28
 4564 01d4 1B88     		ldrh	r3, [r3]
 4565 01d6 1BB2     		sxth	r3, r3
 4566 01d8 642B     		cmp	r3, #100
 4567 01da 02DD     		ble	.L242
 4568              		.loc 1 1092 0 is_stmt 0 discriminator 1
 4569 01dc 134B     		ldr	r3, .L244+28
 4570 01de 6422     		movs	r2, #100
 4571 01e0 1A80     		strh	r2, [r3]	@ movhi
 4572              	.L242:
1093:.\main.c      ****     if(left_duty_cycle > 100) left_duty_cycle = 100;
 4573              		.loc 1 1093 0 is_stmt 1
 4574 01e2 104B     		ldr	r3, .L244+20
 4575 01e4 1B88     		ldrh	r3, [r3]
 4576 01e6 1BB2     		sxth	r3, r3
 4577 01e8 642B     		cmp	r3, #100
 4578 01ea 02DD     		ble	.L243
 4579              		.loc 1 1093 0 is_stmt 0 discriminator 1
 4580 01ec 0D4B     		ldr	r3, .L244+20
 4581 01ee 6422     		movs	r2, #100
 4582 01f0 1A80     		strh	r2, [r3]	@ movhi
 4583              	.L243:
1094:.\main.c      ****     PWM_1_WriteCompare(left_duty_cycle);
 4584              		.loc 1 1094 0 is_stmt 1
 4585 01f2 0C4B     		ldr	r3, .L244+20
 4586 01f4 1B88     		ldrh	r3, [r3]
 4587 01f6 DBB2     		uxtb	r3, r3
 4588 01f8 1846     		mov	r0, r3
 4589 01fa FFF7FEFF 		bl	PWM_1_WriteCompare
1095:.\main.c      ****     PWM_2_WriteCompare(right_duty_cycle);
 4590              		.loc 1 1095 0
 4591 01fe 0B4B     		ldr	r3, .L244+28
 4592 0200 1B88     		ldrh	r3, [r3]
 4593 0202 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 102


 4594 0204 1846     		mov	r0, r3
 4595 0206 FFF7FEFF 		bl	PWM_2_WriteCompare
 4596              	.L236:
1096:.\main.c      **** }
 4597              		.loc 1 1096 0
 4598 020a 2037     		adds	r7, r7, #32
 4599              		.cfi_def_cfa_offset 16
 4600 020c BD46     		mov	sp, r7
 4601              		.cfi_def_cfa_register 13
 4602              		@ sp needed
 4603 020e B0BD     		pop	{r4, r5, r7, pc}
 4604              	.L245:
 4605              		.align	2
 4606              	.L244:
 4607 0210 00000000 		.word	flag_calc_wheelspeed
 4608 0214 00000000 		.word	quad_diff1
 4609 0218 00000000 		.word	quad_diff2
 4610 021c 0000F03F 		.word	1072693248
 4611 0220 00000000 		.word	leftSpeedLimit
 4612 0224 00000000 		.word	left_duty_cycle
 4613 0228 00000000 		.word	rightSpeedLimit
 4614 022c 00000000 		.word	right_duty_cycle
 4615              		.cfi_endproc
 4616              	.LFE96:
 4617              		.size	Quad_Dec_response, .-Quad_Dec_response
 4618              		.section	.text.trackLine,"ax",%progbits
 4619              		.align	2
 4620              		.global	trackLine
 4621              		.thumb
 4622              		.thumb_func
 4623              		.type	trackLine, %function
 4624              	trackLine:
 4625              	.LFB97:
1097:.\main.c      **** 
1098:.\main.c      **** void trackLine()
1099:.\main.c      **** {
 4626              		.loc 1 1099 0
 4627              		.cfi_startproc
 4628              		@ args = 0, pretend = 0, frame = 0
 4629              		@ frame_needed = 1, uses_anonymous_args = 0
 4630              		@ link register save eliminated.
 4631 0000 80B4     		push	{r7}
 4632              		.cfi_def_cfa_offset 4
 4633              		.cfi_offset 7, -4
 4634 0002 00AF     		add	r7, sp, #0
 4635              		.cfi_def_cfa_register 7
1100:.\main.c      ****  //removed from implementation
1101:.\main.c      **** }
 4636              		.loc 1 1101 0
 4637 0004 BD46     		mov	sp, r7
 4638              		.cfi_def_cfa_register 13
 4639              		@ sp needed
 4640 0006 5DF8047B 		ldr	r7, [sp], #4
 4641              		.cfi_restore 7
 4642              		.cfi_def_cfa_offset 0
 4643 000a 7047     		bx	lr
 4644              		.cfi_endproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 103


 4645              	.LFE97:
 4646              		.size	trackLine, .-trackLine
 4647              		.global	leftTurnCount
 4648              		.bss
 4649              		.align	1
 4650              		.type	leftTurnCount, %object
 4651              		.size	leftTurnCount, 2
 4652              	leftTurnCount:
 4653 28e8 0000     		.space	2
 4654              		.global	rightTurnCount
 4655              		.align	1
 4656              		.type	rightTurnCount, %object
 4657              		.size	rightTurnCount, 2
 4658              	rightTurnCount:
 4659 28ea 0000     		.space	2
 4660              		.section	.text.trackLineZ,"ax",%progbits
 4661              		.align	2
 4662              		.global	trackLineZ
 4663              		.thumb
 4664              		.thumb_func
 4665              		.type	trackLineZ, %function
 4666              	trackLineZ:
 4667              	.LFB98:
1102:.\main.c      **** uint16 leftTurnCount = 0;
1103:.\main.c      **** uint16 rightTurnCount = 0;
1104:.\main.c      **** void trackLineZ()
1105:.\main.c      **** {
 4668              		.loc 1 1105 0
 4669              		.cfi_startproc
 4670              		@ args = 0, pretend = 0, frame = 8
 4671              		@ frame_needed = 1, uses_anonymous_args = 0
 4672 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 4673              		.cfi_def_cfa_offset 24
 4674              		.cfi_offset 4, -24
 4675              		.cfi_offset 5, -20
 4676              		.cfi_offset 7, -16
 4677              		.cfi_offset 8, -12
 4678              		.cfi_offset 9, -8
 4679              		.cfi_offset 14, -4
 4680 0004 82B0     		sub	sp, sp, #8
 4681              		.cfi_def_cfa_offset 32
 4682 0006 00AF     		add	r7, sp, #0
 4683              		.cfi_def_cfa_register 7
1106:.\main.c      ****     //read the value of the three central-front sensors
1107:.\main.c      ****     
1108:.\main.c      ****     uint8 nl = NLSens_out_Read();
 4684              		.loc 1 1108 0
 4685 0008 FFF7FEFF 		bl	NLSens_out_Read
 4686 000c 0346     		mov	r3, r0
 4687 000e FB71     		strb	r3, [r7, #7]
1109:.\main.c      ****     uint8 nr = NRSens_out_Read();
 4688              		.loc 1 1109 0
 4689 0010 FFF7FEFF 		bl	NRSens_out_Read
 4690 0014 0346     		mov	r3, r0
 4691 0016 BB71     		strb	r3, [r7, #6]
1110:.\main.c      ****     uint8 mid = MSens_out_Read();
 4692              		.loc 1 1110 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 104


 4693 0018 FFF7FEFF 		bl	MSens_out_Read
 4694 001c 0346     		mov	r3, r0
 4695 001e 7B71     		strb	r3, [r7, #5]
1111:.\main.c      ****     
1112:.\main.c      ****         //if only the left one, hard left
1113:.\main.c      ****     if(nl && !nr && !mid)// && trackTurnCount > 0)
 4696              		.loc 1 1113 0
 4697 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4698 0022 002B     		cmp	r3, #0
 4699 0024 27D0     		beq	.L248
 4700              		.loc 1 1113 0 is_stmt 0 discriminator 1
 4701 0026 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4702 0028 002B     		cmp	r3, #0
 4703 002a 24D1     		bne	.L248
 4704              		.loc 1 1113 0 discriminator 2
 4705 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4706 002e 002B     		cmp	r3, #0
 4707 0030 21D1     		bne	.L248
1114:.\main.c      ****     {
1115:.\main.c      ****         setSpeed(speed / 1.6,-speed / 1.6);
 4708              		.loc 1 1115 0 is_stmt 1
 4709 0032 454B     		ldr	r3, .L253+8
 4710 0034 D3E90023 		ldrd	r2, [r3]
 4711 0038 1046     		mov	r0, r2
 4712 003a 1946     		mov	r1, r3
 4713 003c 40A3     		adr	r3, .L253
 4714 003e D3E90023 		ldrd	r2, [r3]
 4715 0042 FFF7FEFF 		bl	__aeabi_ddiv
 4716 0046 0246     		mov	r2, r0
 4717 0048 0B46     		mov	r3, r1
 4718 004a 1446     		mov	r4, r2
 4719 004c 1D46     		mov	r5, r3
 4720 004e 3E4B     		ldr	r3, .L253+8
 4721 0050 D3E90023 		ldrd	r2, [r3]
 4722 0054 9046     		mov	r8, r2
 4723 0056 83F00049 		eor	r9, r3, #-2147483648
 4724 005a 4046     		mov	r0, r8
 4725 005c 4946     		mov	r1, r9
 4726 005e 38A3     		adr	r3, .L253
 4727 0060 D3E90023 		ldrd	r2, [r3]
 4728 0064 FFF7FEFF 		bl	__aeabi_ddiv
 4729 0068 0246     		mov	r2, r0
 4730 006a 0B46     		mov	r3, r1
 4731 006c 2046     		mov	r0, r4
 4732 006e 2946     		mov	r1, r5
 4733 0070 FFF7FEFF 		bl	setSpeed
 4734 0074 5FE0     		b	.L247
 4735              	.L248:
1116:.\main.c      ****     }
1117:.\main.c      ****     else if(nl && mid && !nr)   //if centre/middle, soft left
 4736              		.loc 1 1117 0
 4737 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4738 0078 002B     		cmp	r3, #0
 4739 007a 0ED0     		beq	.L250
 4740              		.loc 1 1117 0 is_stmt 0 discriminator 1
 4741 007c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4742 007e 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 105


 4743 0080 0BD0     		beq	.L250
 4744              		.loc 1 1117 0 discriminator 2
 4745 0082 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4746 0084 002B     		cmp	r3, #0
 4747 0086 08D1     		bne	.L250
1118:.\main.c      ****     {
1119:.\main.c      ****         setSpeed(speed,speed);
 4748              		.loc 1 1119 0 is_stmt 1
 4749 0088 2F4B     		ldr	r3, .L253+8
 4750 008a D3E90001 		ldrd	r0, [r3]
 4751 008e 2E4B     		ldr	r3, .L253+8
 4752 0090 D3E90023 		ldrd	r2, [r3]
 4753 0094 FFF7FEFF 		bl	setSpeed
 4754 0098 4DE0     		b	.L247
 4755              	.L250:
1120:.\main.c      ****     }
1121:.\main.c      ****     else if (nr && mid && !nl)//if centre/right, soft right
 4756              		.loc 1 1121 0
 4757 009a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4758 009c 002B     		cmp	r3, #0
 4759 009e 0ED0     		beq	.L251
 4760              		.loc 1 1121 0 is_stmt 0 discriminator 1
 4761 00a0 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4762 00a2 002B     		cmp	r3, #0
 4763 00a4 0BD0     		beq	.L251
 4764              		.loc 1 1121 0 discriminator 2
 4765 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4766 00a8 002B     		cmp	r3, #0
 4767 00aa 08D1     		bne	.L251
1122:.\main.c      ****     {
1123:.\main.c      ****         setSpeed(speed ,speed);
 4768              		.loc 1 1123 0 is_stmt 1
 4769 00ac 264B     		ldr	r3, .L253+8
 4770 00ae D3E90001 		ldrd	r0, [r3]
 4771 00b2 254B     		ldr	r3, .L253+8
 4772 00b4 D3E90023 		ldrd	r2, [r3]
 4773 00b8 FFF7FEFF 		bl	setSpeed
 4774 00bc 3BE0     		b	.L247
 4775              	.L251:
1124:.\main.c      ****     }
1125:.\main.c      ****    else if (nr && !mid && !nl)    //if only right, hard right
 4776              		.loc 1 1125 0
 4777 00be BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4778 00c0 002B     		cmp	r3, #0
 4779 00c2 27D0     		beq	.L252
 4780              		.loc 1 1125 0 is_stmt 0 discriminator 1
 4781 00c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4782 00c6 002B     		cmp	r3, #0
 4783 00c8 24D1     		bne	.L252
 4784              		.loc 1 1125 0 discriminator 2
 4785 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4786 00cc 002B     		cmp	r3, #0
 4787 00ce 21D1     		bne	.L252
1126:.\main.c      ****     {
1127:.\main.c      ****         setSpeed(-speed / 1.6,speed / 1.6);
 4788              		.loc 1 1127 0 is_stmt 1
 4789 00d0 1D4B     		ldr	r3, .L253+8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 106


 4790 00d2 D3E90023 		ldrd	r2, [r3]
 4791 00d6 1446     		mov	r4, r2
 4792 00d8 83F00045 		eor	r5, r3, #-2147483648
 4793 00dc 2046     		mov	r0, r4
 4794 00de 2946     		mov	r1, r5
 4795 00e0 17A3     		adr	r3, .L253
 4796 00e2 D3E90023 		ldrd	r2, [r3]
 4797 00e6 FFF7FEFF 		bl	__aeabi_ddiv
 4798 00ea 0246     		mov	r2, r0
 4799 00ec 0B46     		mov	r3, r1
 4800 00ee 1446     		mov	r4, r2
 4801 00f0 1D46     		mov	r5, r3
 4802 00f2 154B     		ldr	r3, .L253+8
 4803 00f4 D3E90023 		ldrd	r2, [r3]
 4804 00f8 1046     		mov	r0, r2
 4805 00fa 1946     		mov	r1, r3
 4806 00fc 10A3     		adr	r3, .L253
 4807 00fe D3E90023 		ldrd	r2, [r3]
 4808 0102 FFF7FEFF 		bl	__aeabi_ddiv
 4809 0106 0246     		mov	r2, r0
 4810 0108 0B46     		mov	r3, r1
 4811 010a 2046     		mov	r0, r4
 4812 010c 2946     		mov	r1, r5
 4813 010e FFF7FEFF 		bl	setSpeed
 4814 0112 10E0     		b	.L247
 4815              	.L252:
1128:.\main.c      ****     }
1129:.\main.c      ****     else if (mid && !nr && !nl)
 4816              		.loc 1 1129 0
 4817 0114 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4818 0116 002B     		cmp	r3, #0
 4819 0118 0DD0     		beq	.L247
 4820              		.loc 1 1129 0 is_stmt 0 discriminator 1
 4821 011a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4822 011c 002B     		cmp	r3, #0
 4823 011e 0AD1     		bne	.L247
 4824              		.loc 1 1129 0 discriminator 2
 4825 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4826 0122 002B     		cmp	r3, #0
 4827 0124 07D1     		bne	.L247
1130:.\main.c      ****     {
1131:.\main.c      ****         setSpeed(speed,speed);
 4828              		.loc 1 1131 0 is_stmt 1
 4829 0126 084B     		ldr	r3, .L253+8
 4830 0128 D3E90001 		ldrd	r0, [r3]
 4831 012c 064B     		ldr	r3, .L253+8
 4832 012e D3E90023 		ldrd	r2, [r3]
 4833 0132 FFF7FEFF 		bl	setSpeed
 4834              	.L247:
1132:.\main.c      ****     }
1133:.\main.c      **** }
 4835              		.loc 1 1133 0
 4836 0136 0837     		adds	r7, r7, #8
 4837              		.cfi_def_cfa_offset 24
 4838 0138 BD46     		mov	sp, r7
 4839              		.cfi_def_cfa_register 13
 4840              		@ sp needed
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 107


 4841 013a BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 4842              	.L254:
 4843 013e 00BF     		.align	3
 4844              	.L253:
 4845 0140 9A999999 		.word	-1717986918
 4846 0144 9999F93F 		.word	1073322393
 4847 0148 00000000 		.word	speed
 4848              		.cfi_endproc
 4849              	.LFE98:
 4850              		.size	trackLineZ, .-trackLineZ
 4851 014c AFF30080 		.section	.text.trackLineU,"ax",%progbits
 4852              		.align	2
 4853              		.global	trackLineU
 4854              		.thumb
 4855              		.thumb_func
 4856              		.type	trackLineU, %function
 4857              	trackLineU:
 4858              	.LFB99:
1134:.\main.c      **** 
1135:.\main.c      **** 
1136:.\main.c      **** void trackLineU()
1137:.\main.c      **** { 
 4859              		.loc 1 1137 0
 4860              		.cfi_startproc
 4861              		@ args = 0, pretend = 0, frame = 0
 4862              		@ frame_needed = 1, uses_anonymous_args = 0
 4863              		@ link register save eliminated.
 4864 0000 80B4     		push	{r7}
 4865              		.cfi_def_cfa_offset 4
 4866              		.cfi_offset 7, -4
 4867 0002 00AF     		add	r7, sp, #0
 4868              		.cfi_def_cfa_register 7
1138:.\main.c      **** //removed from final implementation
1139:.\main.c      **** }
 4869              		.loc 1 1139 0
 4870 0004 BD46     		mov	sp, r7
 4871              		.cfi_def_cfa_register 13
 4872              		@ sp needed
 4873 0006 5DF8047B 		ldr	r7, [sp], #4
 4874              		.cfi_restore 7
 4875              		.cfi_def_cfa_offset 0
 4876 000a 7047     		bx	lr
 4877              		.cfi_endproc
 4878              	.LFE99:
 4879              		.size	trackLineU, .-trackLineU
 4880              		.global	__aeabi_fadd
 4881              		.section	.rodata
 4882 00fe 0000     		.align	2
 4883              	.LC14:
 4884 0100 42617474 		.ascii	"Battery Voltage: %dmv\012\015\000"
 4884      65727920 
 4884      566F6C74 
 4884      6167653A 
 4884      2025646D 
 4885              		.section	.text.print_ADC,"ax",%progbits
 4886              		.align	2
 4887              		.global	print_ADC
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 108


 4888              		.thumb
 4889              		.thumb_func
 4890              		.type	print_ADC, %function
 4891              	print_ADC:
 4892              	.LFB100:
1140:.\main.c      **** 
1141:.\main.c      **** void print_ADC()
1142:.\main.c      **** {
 4893              		.loc 1 1142 0
 4894              		.cfi_startproc
 4895              		@ args = 0, pretend = 0, frame = 24
 4896              		@ frame_needed = 1, uses_anonymous_args = 0
 4897 0000 80B5     		push	{r7, lr}
 4898              		.cfi_def_cfa_offset 8
 4899              		.cfi_offset 7, -8
 4900              		.cfi_offset 14, -4
 4901 0002 86B0     		sub	sp, sp, #24
 4902              		.cfi_def_cfa_offset 32
 4903 0004 00AF     		add	r7, sp, #0
 4904              		.cfi_def_cfa_register 7
1143:.\main.c      ****    //usbPutString("HII\n");
1144:.\main.c      ****     if(flag_receive_ADC == 1)
 4905              		.loc 1 1144 0
 4906 0006 274B     		ldr	r3, .L259
 4907 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4908 000a 012B     		cmp	r3, #1
 4909 000c 46D1     		bne	.L256
 4910              	.LBB10:
1145:.\main.c      ****     {
1146:.\main.c      ****         //usbPutString("AAA\r\n");
1147:.\main.c      ****         flag_receive_ADC = 0;
 4911              		.loc 1 1147 0
 4912 000e 254B     		ldr	r3, .L259
 4913 0010 0022     		movs	r2, #0
 4914 0012 1A70     		strb	r2, [r3]
1148:.\main.c      ****         
1149:.\main.c      ****        // int8 channel = ADC_
1150:.\main.c      ****         float scalingFactor = 0.972;
 4915              		.loc 1 1150 0
 4916 0014 244B     		ldr	r3, .L259+4
 4917 0016 7B61     		str	r3, [r7, #20]	@ float
1151:.\main.c      ****         int16 converted_val = (5000 * adc_result) / 4096 * scalingFactor * 2;
 4918              		.loc 1 1151 0
 4919 0018 244B     		ldr	r3, .L259+8
 4920 001a 1B88     		ldrh	r3, [r3]
 4921 001c 1BB2     		sxth	r3, r3
 4922 001e 41F28832 		movw	r2, #5000
 4923 0022 02FB03F3 		mul	r3, r2, r3
 4924 0026 002B     		cmp	r3, #0
 4925 0028 01DA     		bge	.L258
 4926 002a 03F6FF73 		addw	r3, r3, #4095
 4927              	.L258:
 4928 002e 1B13     		asrs	r3, r3, #12
 4929 0030 1846     		mov	r0, r3
 4930 0032 FFF7FEFF 		bl	__aeabi_i2f
 4931 0036 0346     		mov	r3, r0
 4932 0038 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 109


 4933 003a 7969     		ldr	r1, [r7, #20]	@ float
 4934 003c FFF7FEFF 		bl	__aeabi_fmul
 4935 0040 0346     		mov	r3, r0
 4936 0042 1846     		mov	r0, r3
 4937 0044 1946     		mov	r1, r3
 4938 0046 FFF7FEFF 		bl	__aeabi_fadd
 4939 004a 0346     		mov	r3, r0
 4940 004c 1846     		mov	r0, r3
 4941 004e FFF7FEFF 		bl	__aeabi_f2iz
 4942 0052 0346     		mov	r3, r0
 4943 0054 7B82     		strh	r3, [r7, #18]	@ movhi
1152:.\main.c      ****         converted_val = (converted_val + prevVoltage + prevVoltage2) / 3; //smooth rapid changes in
 4944              		.loc 1 1152 0
 4945 0056 B7F91220 		ldrsh	r2, [r7, #18]
 4946 005a 154B     		ldr	r3, .L259+12
 4947 005c 1B88     		ldrh	r3, [r3]
 4948 005e 1BB2     		sxth	r3, r3
 4949 0060 1A44     		add	r2, r2, r3
 4950 0062 144B     		ldr	r3, .L259+16
 4951 0064 1B88     		ldrh	r3, [r3]
 4952 0066 1BB2     		sxth	r3, r3
 4953 0068 1344     		add	r3, r3, r2
 4954 006a 134A     		ldr	r2, .L259+20
 4955 006c 82FB0312 		smull	r1, r2, r2, r3
 4956 0070 DB17     		asrs	r3, r3, #31
 4957 0072 D31A     		subs	r3, r2, r3
 4958 0074 7B82     		strh	r3, [r7, #18]	@ movhi
1153:.\main.c      ****         prevVoltage2 = prevVoltage;
 4959              		.loc 1 1153 0
 4960 0076 0E4B     		ldr	r3, .L259+12
 4961 0078 1A88     		ldrh	r2, [r3]
 4962 007a 0E4B     		ldr	r3, .L259+16
 4963 007c 1A80     		strh	r2, [r3]	@ movhi
1154:.\main.c      ****         prevVoltage = converted_val;
 4964              		.loc 1 1154 0
 4965 007e 0C4A     		ldr	r2, .L259+12
 4966 0080 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 4967 0082 1380     		strh	r3, [r2]	@ movhi
1155:.\main.c      ****         
1156:.\main.c      ****         char result_str[16];
1157:.\main.c      ****         sprintf(result_str, "Battery Voltage: %dmv\n\r", converted_val);
 4968              		.loc 1 1157 0
 4969 0084 B7F91230 		ldrsh	r3, [r7, #18]
 4970 0088 3A46     		mov	r2, r7
 4971 008a 1046     		mov	r0, r2
 4972 008c 0B49     		ldr	r1, .L259+24
 4973 008e 1A46     		mov	r2, r3
 4974 0090 FFF7FEFF 		bl	sprintf
1158:.\main.c      ****         
1159:.\main.c      ****         usbPutString(result_str);
 4975              		.loc 1 1159 0
 4976 0094 3B46     		mov	r3, r7
 4977 0096 1846     		mov	r0, r3
 4978 0098 FFF7FEFF 		bl	usbPutString
 4979              	.L256:
 4980              	.LBE10:
1160:.\main.c      ****     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 110


1161:.\main.c      **** }
 4981              		.loc 1 1161 0
 4982 009c 1837     		adds	r7, r7, #24
 4983              		.cfi_def_cfa_offset 8
 4984 009e BD46     		mov	sp, r7
 4985              		.cfi_def_cfa_register 13
 4986              		@ sp needed
 4987 00a0 80BD     		pop	{r7, pc}
 4988              	.L260:
 4989 00a2 00BF     		.align	2
 4990              	.L259:
 4991 00a4 00000000 		.word	flag_receive_ADC
 4992 00a8 FED4783F 		.word	1064883454
 4993 00ac 00000000 		.word	adc_result
 4994 00b0 00000000 		.word	prevVoltage
 4995 00b4 00000000 		.word	prevVoltage2
 4996 00b8 56555555 		.word	1431655766
 4997 00bc 00010000 		.word	.LC14
 4998              		.cfi_endproc
 4999              	.LFE100:
 5000              		.size	print_ADC, .-print_ADC
 5001              		.section	.rodata
 5002              		.align	2
 5003              	.LC15:
 5004 0118 52535349 		.ascii	"RSSI:\000"
 5004      3A00
 5005 011e 0000     		.align	2
 5006              	.LC16:
 5007 0120 25640D0A 		.ascii	"%d\015\012\000"
 5007      00
 5008 0125 000000   		.align	2
 5009              	.LC17:
 5010 0128 726F626F 		.ascii	"robot_x:\000"
 5010      745F783A 
 5010      00
 5011 0131 000000   		.align	2
 5012              	.LC18:
 5013 0134 726F626F 		.ascii	"robot_y:\000"
 5013      745F793A 
 5013      00
 5014 013d 000000   		.align	2
 5015              	.LC19:
 5016 0140 726F626F 		.ascii	"robot_dir:\000"
 5016      745F6469 
 5016      723A00
 5017 014b 00       		.section	.text.print_RF,"ax",%progbits
 5018              		.align	2
 5019              		.global	print_RF
 5020              		.thumb
 5021              		.thumb_func
 5022              		.type	print_RF, %function
 5023              	print_RF:
 5024              	.LFB101:
1162:.\main.c      **** 
1163:.\main.c      **** void print_RF()
1164:.\main.c      **** {
 5025              		.loc 1 1164 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 111


 5026              		.cfi_startproc
 5027              		@ args = 0, pretend = 0, frame = 16
 5028              		@ frame_needed = 1, uses_anonymous_args = 0
 5029 0000 80B5     		push	{r7, lr}
 5030              		.cfi_def_cfa_offset 8
 5031              		.cfi_offset 7, -8
 5032              		.cfi_offset 14, -4
 5033 0002 84B0     		sub	sp, sp, #16
 5034              		.cfi_def_cfa_offset 24
 5035 0004 00AF     		add	r7, sp, #0
 5036              		.cfi_def_cfa_register 7
1165:.\main.c      ****     if(flag_print_rf == 1)
 5037              		.loc 1 1165 0
 5038 0006 254B     		ldr	r3, .L263
 5039 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5040 000a 012B     		cmp	r3, #1
 5041 000c 42D1     		bne	.L261
 5042              	.LBB11:
1166:.\main.c      ****     {
1167:.\main.c      ****         char printString[16];
1168:.\main.c      ****         flag_print_rf = 0;
 5043              		.loc 1 1168 0
 5044 000e 234B     		ldr	r3, .L263
 5045 0010 0022     		movs	r2, #0
 5046 0012 1A70     		strb	r2, [r3]
1169:.\main.c      ****         usbPutString("RSSI:");
 5047              		.loc 1 1169 0
 5048 0014 2248     		ldr	r0, .L263+4
 5049 0016 FFF7FEFF 		bl	usbPutString
1170:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.rssi);
 5050              		.loc 1 1170 0
 5051 001a 224B     		ldr	r3, .L263+8
 5052 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5053 001e 5BB2     		sxtb	r3, r3
 5054 0020 3A46     		mov	r2, r7
 5055 0022 1046     		mov	r0, r2
 5056 0024 2049     		ldr	r1, .L263+12
 5057 0026 1A46     		mov	r2, r3
 5058 0028 FFF7FEFF 		bl	sprintf
1171:.\main.c      ****         usbPutString(printString);
 5059              		.loc 1 1171 0
 5060 002c 3B46     		mov	r3, r7
 5061 002e 1846     		mov	r0, r3
 5062 0030 FFF7FEFF 		bl	usbPutString
1172:.\main.c      ****         usbPutString("robot_x:");
 5063              		.loc 1 1172 0
 5064 0034 1D48     		ldr	r0, .L263+16
 5065 0036 FFF7FEFF 		bl	usbPutString
1173:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_xpos);
 5066              		.loc 1 1173 0
 5067 003a 1A4B     		ldr	r3, .L263+8
 5068 003c 5B88     		ldrh	r3, [r3, #2]
 5069 003e 1BB2     		sxth	r3, r3
 5070 0040 3A46     		mov	r2, r7
 5071 0042 1046     		mov	r0, r2
 5072 0044 1849     		ldr	r1, .L263+12
 5073 0046 1A46     		mov	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 112


 5074 0048 FFF7FEFF 		bl	sprintf
1174:.\main.c      ****         usbPutString(printString);
 5075              		.loc 1 1174 0
 5076 004c 3B46     		mov	r3, r7
 5077 004e 1846     		mov	r0, r3
 5078 0050 FFF7FEFF 		bl	usbPutString
1175:.\main.c      ****         usbPutString("robot_y:");
 5079              		.loc 1 1175 0
 5080 0054 1648     		ldr	r0, .L263+20
 5081 0056 FFF7FEFF 		bl	usbPutString
1176:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_ypos);
 5082              		.loc 1 1176 0
 5083 005a 124B     		ldr	r3, .L263+8
 5084 005c 9B88     		ldrh	r3, [r3, #4]
 5085 005e 1BB2     		sxth	r3, r3
 5086 0060 3A46     		mov	r2, r7
 5087 0062 1046     		mov	r0, r2
 5088 0064 1049     		ldr	r1, .L263+12
 5089 0066 1A46     		mov	r2, r3
 5090 0068 FFF7FEFF 		bl	sprintf
1177:.\main.c      ****         usbPutString(printString);
 5091              		.loc 1 1177 0
 5092 006c 3B46     		mov	r3, r7
 5093 006e 1846     		mov	r0, r3
 5094 0070 FFF7FEFF 		bl	usbPutString
1178:.\main.c      ****         usbPutString("robot_dir:");
 5095              		.loc 1 1178 0
 5096 0074 0F48     		ldr	r0, .L263+24
 5097 0076 FFF7FEFF 		bl	usbPutString
1179:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_orientation);
 5098              		.loc 1 1179 0
 5099 007a 0A4B     		ldr	r3, .L263+8
 5100 007c DB88     		ldrh	r3, [r3, #6]
 5101 007e 1BB2     		sxth	r3, r3
 5102 0080 3A46     		mov	r2, r7
 5103 0082 1046     		mov	r0, r2
 5104 0084 0849     		ldr	r1, .L263+12
 5105 0086 1A46     		mov	r2, r3
 5106 0088 FFF7FEFF 		bl	sprintf
1180:.\main.c      ****         usbPutString(printString);
 5107              		.loc 1 1180 0
 5108 008c 3B46     		mov	r3, r7
 5109 008e 1846     		mov	r0, r3
 5110 0090 FFF7FEFF 		bl	usbPutString
 5111              	.L261:
 5112              	.LBE11:
1181:.\main.c      ****     }
1182:.\main.c      **** }
 5113              		.loc 1 1182 0
 5114 0094 1037     		adds	r7, r7, #16
 5115              		.cfi_def_cfa_offset 8
 5116 0096 BD46     		mov	sp, r7
 5117              		.cfi_def_cfa_register 13
 5118              		@ sp needed
 5119 0098 80BD     		pop	{r7, pc}
 5120              	.L264:
 5121 009a 00BF     		.align	2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 113


 5122              	.L263:
 5123 009c 00000000 		.word	flag_print_rf
 5124 00a0 18010000 		.word	.LC15
 5125 00a4 00000000 		.word	system_state
 5126 00a8 20010000 		.word	.LC16
 5127 00ac 28010000 		.word	.LC17
 5128 00b0 34010000 		.word	.LC18
 5129 00b4 40010000 		.word	.LC19
 5130              		.cfi_endproc
 5131              	.LFE101:
 5132              		.size	print_RF, .-print_RF
 5133              		.section	.text.readFrontSensors,"ax",%progbits
 5134              		.align	2
 5135              		.global	readFrontSensors
 5136              		.thumb
 5137              		.thumb_func
 5138              		.type	readFrontSensors, %function
 5139              	readFrontSensors:
 5140              	.LFB102:
1183:.\main.c      **** 
1184:.\main.c      **** void readFrontSensors(uint8 sensorVals[5])
1185:.\main.c      **** {
 5141              		.loc 1 1185 0
 5142              		.cfi_startproc
 5143              		@ args = 0, pretend = 0, frame = 8
 5144              		@ frame_needed = 1, uses_anonymous_args = 0
 5145 0000 90B5     		push	{r4, r7, lr}
 5146              		.cfi_def_cfa_offset 12
 5147              		.cfi_offset 4, -12
 5148              		.cfi_offset 7, -8
 5149              		.cfi_offset 14, -4
 5150 0002 83B0     		sub	sp, sp, #12
 5151              		.cfi_def_cfa_offset 24
 5152 0004 00AF     		add	r7, sp, #0
 5153              		.cfi_def_cfa_register 7
 5154 0006 7860     		str	r0, [r7, #4]
1186:.\main.c      ****     sensorVals[0] = FLSens_out_Read();
 5155              		.loc 1 1186 0
 5156 0008 FFF7FEFF 		bl	FLSens_out_Read
 5157 000c 0346     		mov	r3, r0
 5158 000e 1A46     		mov	r2, r3
 5159 0010 7B68     		ldr	r3, [r7, #4]
 5160 0012 1A70     		strb	r2, [r3]
1187:.\main.c      ****     sensorVals[1] = NLSens_out_Read();
 5161              		.loc 1 1187 0
 5162 0014 7B68     		ldr	r3, [r7, #4]
 5163 0016 5C1C     		adds	r4, r3, #1
 5164 0018 FFF7FEFF 		bl	NLSens_out_Read
 5165 001c 0346     		mov	r3, r0
 5166 001e 2370     		strb	r3, [r4]
1188:.\main.c      ****     sensorVals[2] = MSens_out_Read();
 5167              		.loc 1 1188 0
 5168 0020 7B68     		ldr	r3, [r7, #4]
 5169 0022 9C1C     		adds	r4, r3, #2
 5170 0024 FFF7FEFF 		bl	MSens_out_Read
 5171 0028 0346     		mov	r3, r0
 5172 002a 2370     		strb	r3, [r4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 114


1189:.\main.c      ****     sensorVals[3] = NRSens_out_Read();
 5173              		.loc 1 1189 0
 5174 002c 7B68     		ldr	r3, [r7, #4]
 5175 002e DC1C     		adds	r4, r3, #3
 5176 0030 FFF7FEFF 		bl	NRSens_out_Read
 5177 0034 0346     		mov	r3, r0
 5178 0036 2370     		strb	r3, [r4]
1190:.\main.c      ****     sensorVals[4] = FRSens_out_Read();
 5179              		.loc 1 1190 0
 5180 0038 7B68     		ldr	r3, [r7, #4]
 5181 003a 1C1D     		adds	r4, r3, #4
 5182 003c FFF7FEFF 		bl	FRSens_out_Read
 5183 0040 0346     		mov	r3, r0
 5184 0042 2370     		strb	r3, [r4]
1191:.\main.c      **** }
 5185              		.loc 1 1191 0
 5186 0044 0C37     		adds	r7, r7, #12
 5187              		.cfi_def_cfa_offset 12
 5188 0046 BD46     		mov	sp, r7
 5189              		.cfi_def_cfa_register 13
 5190              		@ sp needed
 5191 0048 90BD     		pop	{r4, r7, pc}
 5192              		.cfi_endproc
 5193              	.LFE102:
 5194              		.size	readFrontSensors, .-readFrontSensors
 5195 004a 00BF     		.section	.text.usbPutString,"ax",%progbits
 5196              		.align	2
 5197              		.global	usbPutString
 5198              		.thumb
 5199              		.thumb_func
 5200              		.type	usbPutString, %function
 5201              	usbPutString:
 5202              	.LFB103:
1192:.\main.c      **** 
1193:.\main.c      **** 
1194:.\main.c      **** //* ========================================
1195:.\main.c      **** void usbPutString(char *s)
1196:.\main.c      **** {
 5203              		.loc 1 1196 0
 5204              		.cfi_startproc
 5205              		@ args = 0, pretend = 0, frame = 16
 5206              		@ frame_needed = 1, uses_anonymous_args = 0
 5207 0000 80B5     		push	{r7, lr}
 5208              		.cfi_def_cfa_offset 8
 5209              		.cfi_offset 7, -8
 5210              		.cfi_offset 14, -4
 5211 0002 84B0     		sub	sp, sp, #16
 5212              		.cfi_def_cfa_offset 24
 5213 0004 00AF     		add	r7, sp, #0
 5214              		.cfi_def_cfa_register 7
 5215 0006 7860     		str	r0, [r7, #4]
1197:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
1198:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
1199:.\main.c      **** //  length to 62 char (63rd char is a '!')
1200:.\main.c      ****     if (USE_USB && portOpen)
 5216              		.loc 1 1200 0
 5217 0008 154B     		ldr	r3, .L270
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 115


 5218 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5219 000c 002B     		cmp	r3, #0
 5220 000e 23D0     		beq	.L266
 5221              	.LBB12:
1201:.\main.c      ****     {
1202:.\main.c      ****             uint32 cnt = 0;
 5222              		.loc 1 1202 0
 5223 0010 0023     		movs	r3, #0
 5224 0012 FB60     		str	r3, [r7, #12]
1203:.\main.c      ****             while (USBUART_CDCIsReady() == 0)
 5225              		.loc 1 1203 0
 5226 0014 0AE0     		b	.L268
 5227              	.L269:
1204:.\main.c      ****             {
1205:.\main.c      ****                 cnt++;
 5228              		.loc 1 1205 0
 5229 0016 FB68     		ldr	r3, [r7, #12]
 5230 0018 0133     		adds	r3, r3, #1
 5231 001a FB60     		str	r3, [r7, #12]
1206:.\main.c      ****                 if(cnt == 3000000){
 5232              		.loc 1 1206 0
 5233 001c FB68     		ldr	r3, [r7, #12]
 5234 001e 114A     		ldr	r2, .L270+4
 5235 0020 9342     		cmp	r3, r2
 5236 0022 03D1     		bne	.L268
1207:.\main.c      ****                     portOpen = 0;
 5237              		.loc 1 1207 0
 5238 0024 0E4B     		ldr	r3, .L270
 5239 0026 0022     		movs	r2, #0
 5240 0028 1A70     		strb	r2, [r3]
1208:.\main.c      ****                     return;
 5241              		.loc 1 1208 0
 5242 002a 15E0     		b	.L266
 5243              	.L268:
1203:.\main.c      ****             {
 5244              		.loc 1 1203 0
 5245 002c FFF7FEFF 		bl	USBUART_CDCIsReady
 5246 0030 0346     		mov	r3, r0
 5247 0032 002B     		cmp	r3, #0
 5248 0034 EFD0     		beq	.L269
1209:.\main.c      ****                 }
1210:.\main.c      ****             }
1211:.\main.c      ****             s[63]='\0';
 5249              		.loc 1 1211 0
 5250 0036 7B68     		ldr	r3, [r7, #4]
 5251 0038 3F33     		adds	r3, r3, #63
 5252 003a 0022     		movs	r2, #0
 5253 003c 1A70     		strb	r2, [r3]
1212:.\main.c      ****             s[62]='!';
 5254              		.loc 1 1212 0
 5255 003e 7B68     		ldr	r3, [r7, #4]
 5256 0040 3E33     		adds	r3, r3, #62
 5257 0042 2122     		movs	r2, #33
 5258 0044 1A70     		strb	r2, [r3]
1213:.\main.c      ****             USBUART_PutData((uint8*)s,strlen(s));
 5259              		.loc 1 1213 0
 5260 0046 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 116


 5261 0048 FFF7FEFF 		bl	strlen
 5262 004c 0346     		mov	r3, r0
 5263 004e 9BB2     		uxth	r3, r3
 5264 0050 7868     		ldr	r0, [r7, #4]
 5265 0052 1946     		mov	r1, r3
 5266 0054 FFF7FEFF 		bl	USBUART_PutData
 5267              	.L266:
 5268              	.LBE12:
1214:.\main.c      ****     }
1215:.\main.c      **** }
 5269              		.loc 1 1215 0
 5270 0058 1037     		adds	r7, r7, #16
 5271              		.cfi_def_cfa_offset 8
 5272 005a BD46     		mov	sp, r7
 5273              		.cfi_def_cfa_register 13
 5274              		@ sp needed
 5275 005c 80BD     		pop	{r7, pc}
 5276              	.L271:
 5277 005e 00BF     		.align	2
 5278              	.L270:
 5279 0060 00000000 		.word	portOpen
 5280 0064 C0C62D00 		.word	3000000
 5281              		.cfi_endproc
 5282              	.LFE103:
 5283              		.size	usbPutString, .-usbPutString
 5284              		.section	.text.usbPutChar,"ax",%progbits
 5285              		.align	2
 5286              		.global	usbPutChar
 5287              		.thumb
 5288              		.thumb_func
 5289              		.type	usbPutChar, %function
 5290              	usbPutChar:
 5291              	.LFB104:
1216:.\main.c      **** //* ========================================
1217:.\main.c      **** void usbPutChar(char c)
1218:.\main.c      **** {
 5292              		.loc 1 1218 0
 5293              		.cfi_startproc
 5294              		@ args = 0, pretend = 0, frame = 16
 5295              		@ frame_needed = 1, uses_anonymous_args = 0
 5296 0000 80B5     		push	{r7, lr}
 5297              		.cfi_def_cfa_offset 8
 5298              		.cfi_offset 7, -8
 5299              		.cfi_offset 14, -4
 5300 0002 84B0     		sub	sp, sp, #16
 5301              		.cfi_def_cfa_offset 24
 5302 0004 00AF     		add	r7, sp, #0
 5303              		.cfi_def_cfa_register 7
 5304 0006 0346     		mov	r3, r0
 5305 0008 FB71     		strb	r3, [r7, #7]
1219:.\main.c      ****     if (USE_USB && portOpen)    
 5306              		.loc 1 1219 0
 5307 000a 0F4B     		ldr	r3, .L276
 5308 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5309 000e 002B     		cmp	r3, #0
 5310 0010 16D0     		beq	.L272
 5311              	.LBB13:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 117


1220:.\main.c      ****     {    
1221:.\main.c      ****         uint32 cnt = 0;
 5312              		.loc 1 1221 0
 5313 0012 0023     		movs	r3, #0
 5314 0014 FB60     		str	r3, [r7, #12]
1222:.\main.c      ****         while (USBUART_CDCIsReady() == 0){
 5315              		.loc 1 1222 0
 5316 0016 0AE0     		b	.L274
 5317              	.L275:
1223:.\main.c      ****             cnt++;
 5318              		.loc 1 1223 0
 5319 0018 FB68     		ldr	r3, [r7, #12]
 5320 001a 0133     		adds	r3, r3, #1
 5321 001c FB60     		str	r3, [r7, #12]
1224:.\main.c      ****             if(cnt == 3000000){
 5322              		.loc 1 1224 0
 5323 001e FB68     		ldr	r3, [r7, #12]
 5324 0020 0A4A     		ldr	r2, .L276+4
 5325 0022 9342     		cmp	r3, r2
 5326 0024 03D1     		bne	.L274
1225:.\main.c      ****                 portOpen = 0;
 5327              		.loc 1 1225 0
 5328 0026 084B     		ldr	r3, .L276
 5329 0028 0022     		movs	r2, #0
 5330 002a 1A70     		strb	r2, [r3]
1226:.\main.c      ****                 return;
 5331              		.loc 1 1226 0
 5332 002c 08E0     		b	.L272
 5333              	.L274:
1222:.\main.c      ****             cnt++;
 5334              		.loc 1 1222 0
 5335 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 5336 0032 0346     		mov	r3, r0
 5337 0034 002B     		cmp	r3, #0
 5338 0036 EFD0     		beq	.L275
1227:.\main.c      ****             }
1228:.\main.c      ****         }
1229:.\main.c      ****         USBUART_PutChar(c);
 5339              		.loc 1 1229 0
 5340 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5341 003a 1846     		mov	r0, r3
 5342 003c FFF7FEFF 		bl	USBUART_PutChar
 5343              	.L272:
 5344              	.LBE13:
1230:.\main.c      ****     }    
1231:.\main.c      **** }
 5345              		.loc 1 1231 0
 5346 0040 1037     		adds	r7, r7, #16
 5347              		.cfi_def_cfa_offset 8
 5348 0042 BD46     		mov	sp, r7
 5349              		.cfi_def_cfa_register 13
 5350              		@ sp needed
 5351 0044 80BD     		pop	{r7, pc}
 5352              	.L277:
 5353 0046 00BF     		.align	2
 5354              	.L276:
 5355 0048 00000000 		.word	portOpen
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 118


 5356 004c C0C62D00 		.word	3000000
 5357              		.cfi_endproc
 5358              	.LFE104:
 5359              		.size	usbPutChar, .-usbPutChar
 5360              		.section	.text.uart_set_PWM,"ax",%progbits
 5361              		.align	2
 5362              		.global	uart_set_PWM
 5363              		.thumb
 5364              		.thumb_func
 5365              		.type	uart_set_PWM, %function
 5366              	uart_set_PWM:
 5367              	.LFB105:
1232:.\main.c      **** //* ========================================
1233:.\main.c      **** 
1234:.\main.c      **** void uart_set_PWM()
1235:.\main.c      **** {
 5368              		.loc 1 1235 0
 5369              		.cfi_startproc
 5370              		@ args = 0, pretend = 0, frame = 0
 5371              		@ frame_needed = 1, uses_anonymous_args = 0
 5372              		@ link register save eliminated.
 5373 0000 80B4     		push	{r7}
 5374              		.cfi_def_cfa_offset 4
 5375              		.cfi_offset 7, -4
 5376 0002 00AF     		add	r7, sp, #0
 5377              		.cfi_def_cfa_register 7
1236:.\main.c      ****     //removed from final implementation
1237:.\main.c      **** }
 5378              		.loc 1 1237 0
 5379 0004 BD46     		mov	sp, r7
 5380              		.cfi_def_cfa_register 13
 5381              		@ sp needed
 5382 0006 5DF8047B 		ldr	r7, [sp], #4
 5383              		.cfi_restore 7
 5384              		.cfi_def_cfa_offset 0
 5385 000a 7047     		bx	lr
 5386              		.cfi_endproc
 5387              	.LFE105:
 5388              		.size	uart_set_PWM, .-uart_set_PWM
 5389              		.text
 5390              	.Letext0:
 5391              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5392              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5393              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5394              		.file 5 ".\\vars.h"
 5395              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 5396              		.file 7 ".\\pathfinder.h"
 5397              		.section	.debug_info,"",%progbits
 5398              	.Ldebug_info0:
 5399 0000 5E0E0000 		.4byte	0xe5e
 5400 0004 0400     		.2byte	0x4
 5401 0006 00000000 		.4byte	.Ldebug_abbrev0
 5402 000a 04       		.byte	0x4
 5403 000b 01       		.uleb128 0x1
 5404 000c AE040000 		.4byte	.LASF198
 5405 0010 01       		.byte	0x1
 5406 0011 93090000 		.4byte	.LASF199
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 119


 5407 0015 1C000000 		.4byte	.LASF200
 5408 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5409 001d 00000000 		.4byte	0
 5410 0021 00000000 		.4byte	.Ldebug_line0
 5411 0025 02       		.uleb128 0x2
 5412 0026 01       		.byte	0x1
 5413 0027 06       		.byte	0x6
 5414 0028 CD080000 		.4byte	.LASF0
 5415 002c 02       		.uleb128 0x2
 5416 002d 01       		.byte	0x1
 5417 002e 08       		.byte	0x8
 5418 002f 0A080000 		.4byte	.LASF1
 5419 0033 02       		.uleb128 0x2
 5420 0034 02       		.byte	0x2
 5421 0035 05       		.byte	0x5
 5422 0036 64060000 		.4byte	.LASF2
 5423 003a 02       		.uleb128 0x2
 5424 003b 02       		.byte	0x2
 5425 003c 07       		.byte	0x7
 5426 003d D9080000 		.4byte	.LASF3
 5427 0041 03       		.uleb128 0x3
 5428 0042 DF000000 		.4byte	.LASF5
 5429 0046 02       		.byte	0x2
 5430 0047 3F       		.byte	0x3f
 5431 0048 4C000000 		.4byte	0x4c
 5432 004c 02       		.uleb128 0x2
 5433 004d 04       		.byte	0x4
 5434 004e 05       		.byte	0x5
 5435 004f 98060000 		.4byte	.LASF4
 5436 0053 03       		.uleb128 0x3
 5437 0054 18080000 		.4byte	.LASF6
 5438 0058 02       		.byte	0x2
 5439 0059 41       		.byte	0x41
 5440 005a 5E000000 		.4byte	0x5e
 5441 005e 02       		.uleb128 0x2
 5442 005f 04       		.byte	0x4
 5443 0060 07       		.byte	0x7
 5444 0061 9C070000 		.4byte	.LASF7
 5445 0065 02       		.uleb128 0x2
 5446 0066 08       		.byte	0x8
 5447 0067 05       		.byte	0x5
 5448 0068 78040000 		.4byte	.LASF8
 5449 006c 02       		.uleb128 0x2
 5450 006d 08       		.byte	0x8
 5451 006e 07       		.byte	0x7
 5452 006f 86020000 		.4byte	.LASF9
 5453 0073 04       		.uleb128 0x4
 5454 0074 04       		.byte	0x4
 5455 0075 05       		.byte	0x5
 5456 0076 696E7400 		.ascii	"int\000"
 5457 007a 02       		.uleb128 0x2
 5458 007b 04       		.byte	0x4
 5459 007c 07       		.byte	0x7
 5460 007d C7000000 		.4byte	.LASF10
 5461 0081 02       		.uleb128 0x2
 5462 0082 04       		.byte	0x4
 5463 0083 07       		.byte	0x7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 120


 5464 0084 93070000 		.4byte	.LASF11
 5465 0088 05       		.uleb128 0x5
 5466 0089 04       		.byte	0x4
 5467 008a 8E000000 		.4byte	0x8e
 5468 008e 02       		.uleb128 0x2
 5469 008f 01       		.byte	0x1
 5470 0090 08       		.byte	0x8
 5471 0091 B5030000 		.4byte	.LASF12
 5472 0095 03       		.uleb128 0x3
 5473 0096 BA070000 		.4byte	.LASF13
 5474 009a 03       		.byte	0x3
 5475 009b 2C       		.byte	0x2c
 5476 009c 41000000 		.4byte	0x41
 5477 00a0 03       		.uleb128 0x3
 5478 00a1 06020000 		.4byte	.LASF14
 5479 00a5 03       		.byte	0x3
 5480 00a6 2D       		.byte	0x2d
 5481 00a7 53000000 		.4byte	0x53
 5482 00ab 06       		.uleb128 0x6
 5483 00ac 20090000 		.4byte	.LASF15
 5484 00b0 04       		.byte	0x4
 5485 00b1 9201     		.2byte	0x192
 5486 00b3 2C000000 		.4byte	0x2c
 5487 00b7 06       		.uleb128 0x6
 5488 00b8 08040000 		.4byte	.LASF16
 5489 00bc 04       		.byte	0x4
 5490 00bd 9301     		.2byte	0x193
 5491 00bf 3A000000 		.4byte	0x3a
 5492 00c3 06       		.uleb128 0x6
 5493 00c4 7F050000 		.4byte	.LASF17
 5494 00c8 04       		.byte	0x4
 5495 00c9 9401     		.2byte	0x194
 5496 00cb 5E000000 		.4byte	0x5e
 5497 00cf 06       		.uleb128 0x6
 5498 00d0 0F040000 		.4byte	.LASF18
 5499 00d4 04       		.byte	0x4
 5500 00d5 9501     		.2byte	0x195
 5501 00d7 25000000 		.4byte	0x25
 5502 00db 06       		.uleb128 0x6
 5503 00dc E9000000 		.4byte	.LASF19
 5504 00e0 04       		.byte	0x4
 5505 00e1 9601     		.2byte	0x196
 5506 00e3 33000000 		.4byte	0x33
 5507 00e7 02       		.uleb128 0x2
 5508 00e8 04       		.byte	0x4
 5509 00e9 04       		.byte	0x4
 5510 00ea 26020000 		.4byte	.LASF20
 5511 00ee 02       		.uleb128 0x2
 5512 00ef 08       		.byte	0x8
 5513 00f0 04       		.byte	0x4
 5514 00f1 26090000 		.4byte	.LASF21
 5515 00f5 07       		.uleb128 0x7
 5516 00f6 A0000000 		.4byte	0xa0
 5517 00fa 05010000 		.4byte	0x105
 5518 00fe 08       		.uleb128 0x8
 5519 00ff 81000000 		.4byte	0x81
 5520 0103 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 121


 5521 0104 00       		.byte	0
 5522 0105 02       		.uleb128 0x2
 5523 0106 08       		.byte	0x8
 5524 0107 04       		.byte	0x4
 5525 0108 FB050000 		.4byte	.LASF22
 5526 010c 09       		.uleb128 0x9
 5527 010d 65080000 		.4byte	.LASF31
 5528 0111 01       		.byte	0x1
 5529 0112 05       		.byte	0x5
 5530 0113 63       		.byte	0x63
 5531 0114 49010000 		.4byte	0x149
 5532 0118 0A       		.uleb128 0xa
 5533 0119 45020000 		.4byte	.LASF23
 5534 011d 00       		.sleb128 0
 5535 011e 0A       		.uleb128 0xa
 5536 011f FC000000 		.4byte	.LASF24
 5537 0123 01       		.sleb128 1
 5538 0124 0A       		.uleb128 0xa
 5539 0125 5B000000 		.4byte	.LASF25
 5540 0129 02       		.sleb128 2
 5541 012a 0A       		.uleb128 0xa
 5542 012b EA050000 		.4byte	.LASF26
 5543 012f 03       		.sleb128 3
 5544 0130 0A       		.uleb128 0xa
 5545 0131 17010000 		.4byte	.LASF27
 5546 0135 04       		.sleb128 4
 5547 0136 0A       		.uleb128 0xa
 5548 0137 EF010000 		.4byte	.LASF28
 5549 013b 05       		.sleb128 5
 5550 013c 0A       		.uleb128 0xa
 5551 013d 0E070000 		.4byte	.LASF29
 5552 0141 06       		.sleb128 6
 5553 0142 0A       		.uleb128 0xa
 5554 0143 60090000 		.4byte	.LASF30
 5555 0147 07       		.sleb128 7
 5556 0148 00       		.byte	0
 5557 0149 09       		.uleb128 0x9
 5558 014a 52010000 		.4byte	.LASF32
 5559 014e 01       		.byte	0x1
 5560 014f 05       		.byte	0x5
 5561 0150 64       		.byte	0x64
 5562 0151 86010000 		.4byte	0x186
 5563 0155 0A       		.uleb128 0xa
 5564 0156 E0060000 		.4byte	.LASF33
 5565 015a 00       		.sleb128 0
 5566 015b 0A       		.uleb128 0xa
 5567 015c 3F040000 		.4byte	.LASF34
 5568 0160 01       		.sleb128 1
 5569 0161 0A       		.uleb128 0xa
 5570 0162 AF060000 		.4byte	.LASF35
 5571 0166 02       		.sleb128 2
 5572 0167 0A       		.uleb128 0xa
 5573 0168 A9010000 		.4byte	.LASF36
 5574 016c 03       		.sleb128 3
 5575 016d 0A       		.uleb128 0xa
 5576 016e FE080000 		.4byte	.LASF37
 5577 0172 04       		.sleb128 4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 122


 5578 0173 0A       		.uleb128 0xa
 5579 0174 3E090000 		.4byte	.LASF38
 5580 0178 05       		.sleb128 5
 5581 0179 0A       		.uleb128 0xa
 5582 017a 78000000 		.4byte	.LASF39
 5583 017e 06       		.sleb128 6
 5584 017f 0A       		.uleb128 0xa
 5585 0180 01070000 		.4byte	.LASF40
 5586 0184 07       		.sleb128 7
 5587 0185 00       		.byte	0
 5588 0186 0B       		.uleb128 0xb
 5589 0187 9F050000 		.4byte	.LASF201
 5590 018b 20       		.byte	0x20
 5591 018c 05       		.byte	0x5
 5592 018d 6A       		.byte	0x6a
 5593 018e 5F020000 		.4byte	0x25f
 5594 0192 0C       		.uleb128 0xc
 5595 0193 BD050000 		.4byte	.LASF41
 5596 0197 05       		.byte	0x5
 5597 0198 6B       		.byte	0x6b
 5598 0199 CF000000 		.4byte	0xcf
 5599 019d 00       		.byte	0
 5600 019e 0C       		.uleb128 0xc
 5601 019f 3F020000 		.4byte	.LASF42
 5602 01a3 05       		.byte	0x5
 5603 01a4 6C       		.byte	0x6c
 5604 01a5 AB000000 		.4byte	0xab
 5605 01a9 01       		.byte	0x1
 5606 01aa 0C       		.uleb128 0xc
 5607 01ab E2070000 		.4byte	.LASF43
 5608 01af 05       		.byte	0x5
 5609 01b0 6D       		.byte	0x6d
 5610 01b1 DB000000 		.4byte	0xdb
 5611 01b5 02       		.byte	0x2
 5612 01b6 0C       		.uleb128 0xc
 5613 01b7 89030000 		.4byte	.LASF44
 5614 01bb 05       		.byte	0x5
 5615 01bc 6E       		.byte	0x6e
 5616 01bd DB000000 		.4byte	0xdb
 5617 01c1 04       		.byte	0x4
 5618 01c2 0C       		.uleb128 0xc
 5619 01c3 EC080000 		.4byte	.LASF45
 5620 01c7 05       		.byte	0x5
 5621 01c8 6F       		.byte	0x6f
 5622 01c9 DB000000 		.4byte	0xdb
 5623 01cd 06       		.byte	0x6
 5624 01ce 0C       		.uleb128 0xc
 5625 01cf 66090000 		.4byte	.LASF46
 5626 01d3 05       		.byte	0x5
 5627 01d4 70       		.byte	0x70
 5628 01d5 DB000000 		.4byte	0xdb
 5629 01d9 08       		.byte	0x8
 5630 01da 0C       		.uleb128 0xc
 5631 01db 45050000 		.4byte	.LASF47
 5632 01df 05       		.byte	0x5
 5633 01e0 71       		.byte	0x71
 5634 01e1 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 123


 5635 01e5 0A       		.byte	0xa
 5636 01e6 0C       		.uleb128 0xc
 5637 01e7 BA030000 		.4byte	.LASF48
 5638 01eb 05       		.byte	0x5
 5639 01ec 72       		.byte	0x72
 5640 01ed DB000000 		.4byte	0xdb
 5641 01f1 0C       		.byte	0xc
 5642 01f2 0C       		.uleb128 0xc
 5643 01f3 CC050000 		.4byte	.LASF49
 5644 01f7 05       		.byte	0x5
 5645 01f8 73       		.byte	0x73
 5646 01f9 DB000000 		.4byte	0xdb
 5647 01fd 0E       		.byte	0xe
 5648 01fe 0C       		.uleb128 0xc
 5649 01ff 93040000 		.4byte	.LASF50
 5650 0203 05       		.byte	0x5
 5651 0204 74       		.byte	0x74
 5652 0205 DB000000 		.4byte	0xdb
 5653 0209 10       		.byte	0x10
 5654 020a 0C       		.uleb128 0xc
 5655 020b 53070000 		.4byte	.LASF51
 5656 020f 05       		.byte	0x5
 5657 0210 75       		.byte	0x75
 5658 0211 DB000000 		.4byte	0xdb
 5659 0215 12       		.byte	0x12
 5660 0216 0C       		.uleb128 0xc
 5661 0217 8A090000 		.4byte	.LASF52
 5662 021b 05       		.byte	0x5
 5663 021c 76       		.byte	0x76
 5664 021d DB000000 		.4byte	0xdb
 5665 0221 14       		.byte	0x14
 5666 0222 0C       		.uleb128 0xc
 5667 0223 21040000 		.4byte	.LASF53
 5668 0227 05       		.byte	0x5
 5669 0228 77       		.byte	0x77
 5670 0229 DB000000 		.4byte	0xdb
 5671 022d 16       		.byte	0x16
 5672 022e 0C       		.uleb128 0xc
 5673 022f 4A010000 		.4byte	.LASF54
 5674 0233 05       		.byte	0x5
 5675 0234 78       		.byte	0x78
 5676 0235 DB000000 		.4byte	0xdb
 5677 0239 18       		.byte	0x18
 5678 023a 0C       		.uleb128 0xc
 5679 023b F5030000 		.4byte	.LASF55
 5680 023f 05       		.byte	0x5
 5681 0240 79       		.byte	0x79
 5682 0241 DB000000 		.4byte	0xdb
 5683 0245 1A       		.byte	0x1a
 5684 0246 0C       		.uleb128 0xc
 5685 0247 3C050000 		.4byte	.LASF56
 5686 024b 05       		.byte	0x5
 5687 024c 7A       		.byte	0x7a
 5688 024d DB000000 		.4byte	0xdb
 5689 0251 1C       		.byte	0x1c
 5690 0252 0C       		.uleb128 0xc
 5691 0253 0F020000 		.4byte	.LASF57
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 124


 5692 0257 05       		.byte	0x5
 5693 0258 7B       		.byte	0x7b
 5694 0259 DB000000 		.4byte	0xdb
 5695 025d 1E       		.byte	0x1e
 5696 025e 00       		.byte	0
 5697 025f 0D       		.uleb128 0xd
 5698 0260 0D090000 		.4byte	.LASF58
 5699 0264 01       		.byte	0x1
 5700 0265 84       		.byte	0x84
 5701 0266 00000000 		.4byte	.LFB63
 5702 026a 0C000000 		.4byte	.LFE63-.LFB63
 5703 026e 01       		.uleb128 0x1
 5704 026f 9C       		.byte	0x9c
 5705 0270 0E       		.uleb128 0xe
 5706 0271 5B070000 		.4byte	.LASF59
 5707 0275 01       		.byte	0x1
 5708 0276 8A       		.byte	0x8a
 5709 0277 00000000 		.4byte	.LFB64
 5710 027b 2C000000 		.4byte	.LFE64-.LFB64
 5711 027f 01       		.uleb128 0x1
 5712 0280 9C       		.byte	0x9c
 5713 0281 0E       		.uleb128 0xe
 5714 0282 1C020000 		.4byte	.LASF60
 5715 0286 01       		.byte	0x1
 5716 0287 93       		.byte	0x93
 5717 0288 00000000 		.4byte	.LFB65
 5718 028c 98010000 		.4byte	.LFE65-.LFB65
 5719 0290 01       		.uleb128 0x1
 5720 0291 9C       		.byte	0x9c
 5721 0292 0F       		.uleb128 0xf
 5722 0293 B6020000 		.4byte	.LASF66
 5723 0297 01       		.byte	0x1
 5724 0298 B8       		.byte	0xb8
 5725 0299 00000000 		.4byte	.LFB66
 5726 029d 34010000 		.4byte	.LFE66-.LFB66
 5727 02a1 01       		.uleb128 0x1
 5728 02a2 9C       		.byte	0x9c
 5729 02a3 DC020000 		.4byte	0x2dc
 5730 02a7 10       		.uleb128 0x10
 5731 02a8 0E000000 		.4byte	.LBB2
 5732 02ac 64000000 		.4byte	.LBE2-.LBB2
 5733 02b0 C3020000 		.4byte	0x2c3
 5734 02b4 11       		.uleb128 0x11
 5735 02b5 FD030000 		.4byte	.LASF61
 5736 02b9 01       		.byte	0x1
 5737 02ba BC       		.byte	0xbc
 5738 02bb B7000000 		.4byte	0xb7
 5739 02bf 02       		.uleb128 0x2
 5740 02c0 91       		.byte	0x91
 5741 02c1 76       		.sleb128 -10
 5742 02c2 00       		.byte	0
 5743 02c3 12       		.uleb128 0x12
 5744 02c4 7E000000 		.4byte	.LBB3
 5745 02c8 64000000 		.4byte	.LBE3-.LBB3
 5746 02cc 11       		.uleb128 0x11
 5747 02cd FD030000 		.4byte	.LASF61
 5748 02d1 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 125


 5749 02d2 C8       		.byte	0xc8
 5750 02d3 B7000000 		.4byte	0xb7
 5751 02d7 02       		.uleb128 0x2
 5752 02d8 91       		.byte	0x91
 5753 02d9 74       		.sleb128 -12
 5754 02da 00       		.byte	0
 5755 02db 00       		.byte	0
 5756 02dc 0D       		.uleb128 0xd
 5757 02dd 37080000 		.4byte	.LASF62
 5758 02e1 01       		.byte	0x1
 5759 02e2 DE       		.byte	0xde
 5760 02e3 00000000 		.4byte	.LFB67
 5761 02e7 20000000 		.4byte	.LFE67-.LFB67
 5762 02eb 01       		.uleb128 0x1
 5763 02ec 9C       		.byte	0x9c
 5764 02ed 0E       		.uleb128 0xe
 5765 02ee 3C030000 		.4byte	.LASF63
 5766 02f2 01       		.byte	0x1
 5767 02f3 E5       		.byte	0xe5
 5768 02f4 00000000 		.4byte	.LFB68
 5769 02f8 28000000 		.4byte	.LFE68-.LFB68
 5770 02fc 01       		.uleb128 0x1
 5771 02fd 9C       		.byte	0x9c
 5772 02fe 0E       		.uleb128 0xe
 5773 02ff 07060000 		.4byte	.LASF64
 5774 0303 01       		.byte	0x1
 5775 0304 EE       		.byte	0xee
 5776 0305 00000000 		.4byte	.LFB69
 5777 0309 0A000000 		.4byte	.LFE69-.LFB69
 5778 030d 01       		.uleb128 0x1
 5779 030e 9C       		.byte	0x9c
 5780 030f 0E       		.uleb128 0xe
 5781 0310 24060000 		.4byte	.LASF65
 5782 0314 01       		.byte	0x1
 5783 0315 F3       		.byte	0xf3
 5784 0316 00000000 		.4byte	.LFB70
 5785 031a 28000000 		.4byte	.LFE70-.LFB70
 5786 031e 01       		.uleb128 0x1
 5787 031f 9C       		.byte	0x9c
 5788 0320 13       		.uleb128 0x13
 5789 0321 08090000 		.4byte	.LASF67
 5790 0325 01       		.byte	0x1
 5791 0326 FE       		.byte	0xfe
 5792 0327 73000000 		.4byte	0x73
 5793 032b 00000000 		.4byte	.LFB71
 5794 032f A2060000 		.4byte	.LFE71-.LFB71
 5795 0333 01       		.uleb128 0x1
 5796 0334 9C       		.byte	0x9c
 5797 0335 C0030000 		.4byte	0x3c0
 5798 0339 14       		.uleb128 0x14
 5799 033a 2D030000 		.4byte	.LASF68
 5800 033e 01       		.byte	0x1
 5801 033f 3701     		.2byte	0x137
 5802 0341 B7000000 		.4byte	0xb7
 5803 0345 02       		.uleb128 0x2
 5804 0346 91       		.byte	0x91
 5805 0347 76       		.sleb128 -10
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 126


 5806 0348 12       		.uleb128 0x12
 5807 0349 38010000 		.4byte	.LBB4
 5808 034d C2040000 		.4byte	.LBE4-.LBB4
 5809 0351 14       		.uleb128 0x14
 5810 0352 A5040000 		.4byte	.LASF69
 5811 0356 01       		.byte	0x1
 5812 0357 6E01     		.2byte	0x16e
 5813 0359 8E000000 		.4byte	0x8e
 5814 035d 02       		.uleb128 0x2
 5815 035e 91       		.byte	0x91
 5816 035f 73       		.sleb128 -13
 5817 0360 10       		.uleb128 0x10
 5818 0361 BC010000 		.4byte	.LBB5
 5819 0365 F8010000 		.4byte	.LBE5-.LBB5
 5820 0369 96030000 		.4byte	0x396
 5821 036d 15       		.uleb128 0x15
 5822 036e 6D657300 		.ascii	"mes\000"
 5823 0372 01       		.byte	0x1
 5824 0373 7E01     		.2byte	0x17e
 5825 0375 C0030000 		.4byte	0x3c0
 5826 0379 02       		.uleb128 0x2
 5827 037a 91       		.byte	0x91
 5828 037b 60       		.sleb128 -32
 5829 037c 12       		.uleb128 0x12
 5830 037d E4010000 		.4byte	.LBB6
 5831 0381 D0010000 		.4byte	.LBE6-.LBB6
 5832 0385 14       		.uleb128 0x14
 5833 0386 14040000 		.4byte	.LASF70
 5834 038a 01       		.byte	0x1
 5835 038b 8F01     		.2byte	0x18f
 5836 038d AB000000 		.4byte	0xab
 5837 0391 02       		.uleb128 0x2
 5838 0392 91       		.byte	0x91
 5839 0393 75       		.sleb128 -11
 5840 0394 00       		.byte	0
 5841 0395 00       		.byte	0
 5842 0396 12       		.uleb128 0x12
 5843 0397 C2030000 		.4byte	.LBB7
 5844 039b 2E020000 		.4byte	.LBE7-.LBB7
 5845 039f 15       		.uleb128 0x15
 5846 03a0 6D657300 		.ascii	"mes\000"
 5847 03a4 01       		.byte	0x1
 5848 03a5 0302     		.2byte	0x203
 5849 03a7 C0030000 		.4byte	0x3c0
 5850 03ab 02       		.uleb128 0x2
 5851 03ac 91       		.byte	0x91
 5852 03ad 50       		.sleb128 -48
 5853 03ae 14       		.uleb128 0x14
 5854 03af 14040000 		.4byte	.LASF70
 5855 03b3 01       		.byte	0x1
 5856 03b4 0702     		.2byte	0x207
 5857 03b6 AB000000 		.4byte	0xab
 5858 03ba 02       		.uleb128 0x2
 5859 03bb 91       		.byte	0x91
 5860 03bc 74       		.sleb128 -12
 5861 03bd 00       		.byte	0
 5862 03be 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 127


 5863 03bf 00       		.byte	0
 5864 03c0 07       		.uleb128 0x7
 5865 03c1 8E000000 		.4byte	0x8e
 5866 03c5 D0030000 		.4byte	0x3d0
 5867 03c9 08       		.uleb128 0x8
 5868 03ca 81000000 		.4byte	0x81
 5869 03ce 0F       		.byte	0xf
 5870 03cf 00       		.byte	0
 5871 03d0 16       		.uleb128 0x16
 5872 03d1 46090000 		.4byte	.LASF76
 5873 03d5 01       		.byte	0x1
 5874 03d6 6902     		.2byte	0x269
 5875 03d8 00000000 		.4byte	.LFB72
 5876 03dc 60010000 		.4byte	.LFE72-.LFB72
 5877 03e0 01       		.uleb128 0x1
 5878 03e1 9C       		.byte	0x9c
 5879 03e2 1E040000 		.4byte	0x41e
 5880 03e6 12       		.uleb128 0x12
 5881 03e7 10000000 		.4byte	.LBB8
 5882 03eb 34010000 		.4byte	.LBE8-.LBB8
 5883 03ef 14       		.uleb128 0x14
 5884 03f0 3D010000 		.4byte	.LASF71
 5885 03f4 01       		.byte	0x1
 5886 03f5 6F02     		.2byte	0x26f
 5887 03f7 B7000000 		.4byte	0xb7
 5888 03fb 02       		.uleb128 0x2
 5889 03fc 91       		.byte	0x91
 5890 03fd 76       		.sleb128 -10
 5891 03fe 14       		.uleb128 0x14
 5892 03ff AE070000 		.4byte	.LASF72
 5893 0403 01       		.byte	0x1
 5894 0404 7002     		.2byte	0x270
 5895 0406 1E040000 		.4byte	0x41e
 5896 040a 02       		.uleb128 0x2
 5897 040b 91       		.byte	0x91
 5898 040c 68       		.sleb128 -24
 5899 040d 14       		.uleb128 0x14
 5900 040e 4B020000 		.4byte	.LASF73
 5901 0412 01       		.byte	0x1
 5902 0413 7102     		.2byte	0x271
 5903 0415 1E040000 		.4byte	0x41e
 5904 0419 02       		.uleb128 0x2
 5905 041a 91       		.byte	0x91
 5906 041b 5C       		.sleb128 -36
 5907 041c 00       		.byte	0
 5908 041d 00       		.byte	0
 5909 041e 07       		.uleb128 0x7
 5910 041f 8E000000 		.4byte	0x8e
 5911 0423 2E040000 		.4byte	0x42e
 5912 0427 08       		.uleb128 0x8
 5913 0428 81000000 		.4byte	0x81
 5914 042c 0B       		.byte	0xb
 5915 042d 00       		.byte	0
 5916 042e 17       		.uleb128 0x17
 5917 042f D3030000 		.4byte	.LASF74
 5918 0433 01       		.byte	0x1
 5919 0434 AA02     		.2byte	0x2aa
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 128


 5920 0436 00000000 		.4byte	.LFB73
 5921 043a 18000000 		.4byte	.LFE73-.LFB73
 5922 043e 01       		.uleb128 0x1
 5923 043f 9C       		.byte	0x9c
 5924 0440 54040000 		.4byte	0x454
 5925 0444 18       		.uleb128 0x18
 5926 0445 64697200 		.ascii	"dir\000"
 5927 0449 01       		.byte	0x1
 5928 044a AA02     		.2byte	0x2aa
 5929 044c AB000000 		.4byte	0xab
 5930 0450 02       		.uleb128 0x2
 5931 0451 91       		.byte	0x91
 5932 0452 77       		.sleb128 -9
 5933 0453 00       		.byte	0
 5934 0454 17       		.uleb128 0x17
 5935 0455 33040000 		.4byte	.LASF75
 5936 0459 01       		.byte	0x1
 5937 045a AF02     		.2byte	0x2af
 5938 045c 00000000 		.4byte	.LFB74
 5939 0460 18000000 		.4byte	.LFE74-.LFB74
 5940 0464 01       		.uleb128 0x1
 5941 0465 9C       		.byte	0x9c
 5942 0466 7A040000 		.4byte	0x47a
 5943 046a 18       		.uleb128 0x18
 5944 046b 64697200 		.ascii	"dir\000"
 5945 046f 01       		.byte	0x1
 5946 0470 AF02     		.2byte	0x2af
 5947 0472 AB000000 		.4byte	0xab
 5948 0476 02       		.uleb128 0x2
 5949 0477 91       		.byte	0x91
 5950 0478 77       		.sleb128 -9
 5951 0479 00       		.byte	0
 5952 047a 19       		.uleb128 0x19
 5953 047b 6B080000 		.4byte	.LASF77
 5954 047f 01       		.byte	0x1
 5955 0480 B402     		.2byte	0x2b4
 5956 0482 00000000 		.4byte	.LFB75
 5957 0486 54000000 		.4byte	.LFE75-.LFB75
 5958 048a 01       		.uleb128 0x1
 5959 048b 9C       		.byte	0x9c
 5960 048c A0040000 		.4byte	0x4a0
 5961 0490 15       		.uleb128 0x15
 5962 0491 6D657300 		.ascii	"mes\000"
 5963 0495 01       		.byte	0x1
 5964 0496 B902     		.2byte	0x2b9
 5965 0498 C0030000 		.4byte	0x3c0
 5966 049c 02       		.uleb128 0x2
 5967 049d 91       		.byte	0x91
 5968 049e 68       		.sleb128 -24
 5969 049f 00       		.byte	0
 5970 04a0 17       		.uleb128 0x17
 5971 04a1 2C020000 		.4byte	.LASF78
 5972 04a5 01       		.byte	0x1
 5973 04a6 BE02     		.2byte	0x2be
 5974 04a8 00000000 		.4byte	.LFB76
 5975 04ac F4000000 		.4byte	.LFE76-.LFB76
 5976 04b0 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 129


 5977 04b1 9C       		.byte	0x9c
 5978 04b2 F3040000 		.4byte	0x4f3
 5979 04b6 1A       		.uleb128 0x1a
 5980 04b7 2C070000 		.4byte	.LASF79
 5981 04bb 01       		.byte	0x1
 5982 04bc BE02     		.2byte	0x2be
 5983 04be EE000000 		.4byte	0xee
 5984 04c2 02       		.uleb128 0x2
 5985 04c3 91       		.byte	0x91
 5986 04c4 68       		.sleb128 -24
 5987 04c5 1A       		.uleb128 0x1a
 5988 04c6 60040000 		.4byte	.LASF80
 5989 04ca 01       		.byte	0x1
 5990 04cb BE02     		.2byte	0x2be
 5991 04cd EE000000 		.4byte	0xee
 5992 04d1 02       		.uleb128 0x2
 5993 04d2 91       		.byte	0x91
 5994 04d3 60       		.sleb128 -32
 5995 04d4 14       		.uleb128 0x14
 5996 04d5 64020000 		.4byte	.LASF81
 5997 04d9 01       		.byte	0x1
 5998 04da D302     		.2byte	0x2d3
 5999 04dc DB000000 		.4byte	0xdb
 6000 04e0 02       		.uleb128 0x2
 6001 04e1 91       		.byte	0x91
 6002 04e2 76       		.sleb128 -10
 6003 04e3 14       		.uleb128 0x14
 6004 04e4 93050000 		.4byte	.LASF82
 6005 04e8 01       		.byte	0x1
 6006 04e9 D402     		.2byte	0x2d4
 6007 04eb DB000000 		.4byte	0xdb
 6008 04ef 02       		.uleb128 0x2
 6009 04f0 91       		.byte	0x91
 6010 04f1 74       		.sleb128 -12
 6011 04f2 00       		.byte	0
 6012 04f3 1B       		.uleb128 0x1b
 6013 04f4 7C080000 		.4byte	.LASF83
 6014 04f8 01       		.byte	0x1
 6015 04f9 DA02     		.2byte	0x2da
 6016 04fb 00000000 		.4byte	.LFB77
 6017 04ff 18000000 		.4byte	.LFE77-.LFB77
 6018 0503 01       		.uleb128 0x1
 6019 0504 9C       		.byte	0x9c
 6020 0505 1B       		.uleb128 0x1b
 6021 0506 AA090000 		.4byte	.LASF84
 6022 050a 01       		.byte	0x1
 6023 050b E002     		.2byte	0x2e0
 6024 050d 00000000 		.4byte	.LFB78
 6025 0511 18000000 		.4byte	.LFE78-.LFB78
 6026 0515 01       		.uleb128 0x1
 6027 0516 9C       		.byte	0x9c
 6028 0517 1B       		.uleb128 0x1b
 6029 0518 ED070000 		.4byte	.LASF85
 6030 051c 01       		.byte	0x1
 6031 051d E602     		.2byte	0x2e6
 6032 051f 00000000 		.4byte	.LFB79
 6033 0523 22000000 		.4byte	.LFE79-.LFB79
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 130


 6034 0527 01       		.uleb128 0x1
 6035 0528 9C       		.byte	0x9c
 6036 0529 1B       		.uleb128 0x1b
 6037 052a 6F020000 		.4byte	.LASF86
 6038 052e 01       		.byte	0x1
 6039 052f EC02     		.2byte	0x2ec
 6040 0531 00000000 		.4byte	.LFB80
 6041 0535 1C000000 		.4byte	.LFE80-.LFB80
 6042 0539 01       		.uleb128 0x1
 6043 053a 9C       		.byte	0x9c
 6044 053b 1B       		.uleb128 0x1b
 6045 053c 49070000 		.4byte	.LASF87
 6046 0540 01       		.byte	0x1
 6047 0541 F102     		.2byte	0x2f1
 6048 0543 00000000 		.4byte	.LFB81
 6049 0547 34000000 		.4byte	.LFE81-.LFB81
 6050 054b 01       		.uleb128 0x1
 6051 054c 9C       		.byte	0x9c
 6052 054d 1B       		.uleb128 0x1b
 6053 054e 7D020000 		.4byte	.LASF88
 6054 0552 01       		.byte	0x1
 6055 0553 F602     		.2byte	0x2f6
 6056 0555 00000000 		.4byte	.LFB82
 6057 0559 38000000 		.4byte	.LFE82-.LFB82
 6058 055d 01       		.uleb128 0x1
 6059 055e 9C       		.byte	0x9c
 6060 055f 1B       		.uleb128 0x1b
 6061 0560 EF030000 		.4byte	.LASF89
 6062 0564 01       		.byte	0x1
 6063 0565 FB02     		.2byte	0x2fb
 6064 0567 00000000 		.4byte	.LFB83
 6065 056b 4C000000 		.4byte	.LFE83-.LFB83
 6066 056f 01       		.uleb128 0x1
 6067 0570 9C       		.byte	0x9c
 6068 0571 1B       		.uleb128 0x1b
 6069 0572 D0020000 		.4byte	.LASF90
 6070 0576 01       		.byte	0x1
 6071 0577 0003     		.2byte	0x300
 6072 0579 00000000 		.4byte	.LFB84
 6073 057d 38000000 		.4byte	.LFE84-.LFB84
 6074 0581 01       		.uleb128 0x1
 6075 0582 9C       		.byte	0x9c
 6076 0583 1B       		.uleb128 0x1b
 6077 0584 A1060000 		.4byte	.LASF91
 6078 0588 01       		.byte	0x1
 6079 0589 0903     		.2byte	0x309
 6080 058b 00000000 		.4byte	.LFB85
 6081 058f 38000000 		.4byte	.LFE85-.LFB85
 6082 0593 01       		.uleb128 0x1
 6083 0594 9C       		.byte	0x9c
 6084 0595 1B       		.uleb128 0x1b
 6085 0596 79060000 		.4byte	.LASF92
 6086 059a 01       		.byte	0x1
 6087 059b 1203     		.2byte	0x312
 6088 059d 00000000 		.4byte	.LFB86
 6089 05a1 38000000 		.4byte	.LFE86-.LFB86
 6090 05a5 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 131


 6091 05a6 9C       		.byte	0x9c
 6092 05a7 1B       		.uleb128 0x1b
 6093 05a8 FA010000 		.4byte	.LASF93
 6094 05ac 01       		.byte	0x1
 6095 05ad 1B03     		.2byte	0x31b
 6096 05af 00000000 		.4byte	.LFB87
 6097 05b3 14000000 		.4byte	.LFE87-.LFB87
 6098 05b7 01       		.uleb128 0x1
 6099 05b8 9C       		.byte	0x9c
 6100 05b9 1C       		.uleb128 0x1c
 6101 05ba E6020000 		.4byte	.LASF94
 6102 05be 01       		.byte	0x1
 6103 05bf 2003     		.2byte	0x320
 6104 05c1 00000000 		.4byte	.LFB88
 6105 05c5 18000000 		.4byte	.LFE88-.LFB88
 6106 05c9 01       		.uleb128 0x1
 6107 05ca 9C       		.byte	0x9c
 6108 05cb 1C       		.uleb128 0x1c
 6109 05cc 9B040000 		.4byte	.LASF95
 6110 05d0 01       		.byte	0x1
 6111 05d1 2403     		.2byte	0x324
 6112 05d3 00000000 		.4byte	.LFB89
 6113 05d7 18000000 		.4byte	.LFE89-.LFB89
 6114 05db 01       		.uleb128 0x1
 6115 05dc 9C       		.byte	0x9c
 6116 05dd 1C       		.uleb128 0x1c
 6117 05de B5090000 		.4byte	.LASF96
 6118 05e2 01       		.byte	0x1
 6119 05e3 2903     		.2byte	0x329
 6120 05e5 00000000 		.4byte	.LFB90
 6121 05e9 18000000 		.4byte	.LFE90-.LFB90
 6122 05ed 01       		.uleb128 0x1
 6123 05ee 9C       		.byte	0x9c
 6124 05ef 1C       		.uleb128 0x1c
 6125 05f0 7A030000 		.4byte	.LASF97
 6126 05f4 01       		.byte	0x1
 6127 05f5 2D03     		.2byte	0x32d
 6128 05f7 00000000 		.4byte	.LFB91
 6129 05fb 18000000 		.4byte	.LFE91-.LFB91
 6130 05ff 01       		.uleb128 0x1
 6131 0600 9C       		.byte	0x9c
 6132 0601 17       		.uleb128 0x17
 6133 0602 D0060000 		.4byte	.LASF98
 6134 0606 01       		.byte	0x1
 6135 0607 3403     		.2byte	0x334
 6136 0609 00000000 		.4byte	.LFB92
 6137 060d B8000000 		.4byte	.LFE92-.LFB92
 6138 0611 01       		.uleb128 0x1
 6139 0612 9C       		.byte	0x9c
 6140 0613 27060000 		.4byte	0x627
 6141 0617 14       		.uleb128 0x14
 6142 0618 4D050000 		.4byte	.LASF99
 6143 061c 01       		.byte	0x1
 6144 061d 3503     		.2byte	0x335
 6145 061f 8E000000 		.4byte	0x8e
 6146 0623 02       		.uleb128 0x2
 6147 0624 91       		.byte	0x91
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 132


 6148 0625 6F       		.sleb128 -17
 6149 0626 00       		.byte	0
 6150 0627 17       		.uleb128 0x17
 6151 0628 F2050000 		.4byte	.LASF100
 6152 062c 01       		.byte	0x1
 6153 062d 5103     		.2byte	0x351
 6154 062f 00000000 		.4byte	.LFB93
 6155 0633 60050000 		.4byte	.LFE93-.LFB93
 6156 0637 01       		.uleb128 0x1
 6157 0638 9C       		.byte	0x9c
 6158 0639 8F060000 		.4byte	0x68f
 6159 063d 14       		.uleb128 0x14
 6160 063e 4D050000 		.4byte	.LASF99
 6161 0642 01       		.byte	0x1
 6162 0643 5303     		.2byte	0x353
 6163 0645 8E000000 		.4byte	0x8e
 6164 0649 02       		.uleb128 0x2
 6165 064a 91       		.byte	0x91
 6166 064b 77       		.sleb128 -9
 6167 064c 12       		.uleb128 0x12
 6168 064d 48010000 		.4byte	.LBB9
 6169 0651 EA030000 		.4byte	.LBE9-.LBB9
 6170 0655 15       		.uleb128 0x15
 6171 0656 6D657300 		.ascii	"mes\000"
 6172 065a 01       		.byte	0x1
 6173 065b 7903     		.2byte	0x379
 6174 065d C0030000 		.4byte	0x3c0
 6175 0661 02       		.uleb128 0x2
 6176 0662 91       		.byte	0x91
 6177 0663 58       		.sleb128 -40
 6178 0664 15       		.uleb128 0x15
 6179 0665 6900     		.ascii	"i\000"
 6180 0667 01       		.byte	0x1
 6181 0668 A403     		.2byte	0x3a4
 6182 066a 73000000 		.4byte	0x73
 6183 066e 02       		.uleb128 0x2
 6184 066f 91       		.byte	0x91
 6185 0670 70       		.sleb128 -16
 6186 0671 14       		.uleb128 0x14
 6187 0672 A5040000 		.4byte	.LASF69
 6188 0676 01       		.byte	0x1
 6189 0677 B103     		.2byte	0x3b1
 6190 0679 8E000000 		.4byte	0x8e
 6191 067d 02       		.uleb128 0x2
 6192 067e 91       		.byte	0x91
 6193 067f 6B       		.sleb128 -21
 6194 0680 15       		.uleb128 0x15
 6195 0681 7800     		.ascii	"x\000"
 6196 0683 01       		.byte	0x1
 6197 0684 D903     		.2byte	0x3d9
 6198 0686 73000000 		.4byte	0x73
 6199 068a 02       		.uleb128 0x2
 6200 068b 91       		.byte	0x91
 6201 068c 6C       		.sleb128 -20
 6202 068d 00       		.byte	0
 6203 068e 00       		.byte	0
 6204 068f 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 133


 6205 0690 C5020000 		.4byte	.LASF101
 6206 0694 01       		.byte	0x1
 6207 0695 0204     		.2byte	0x402
 6208 0697 00000000 		.4byte	.LFB94
 6209 069b 40000000 		.4byte	.LFE94-.LFB94
 6210 069f 01       		.uleb128 0x1
 6211 06a0 9C       		.byte	0x9c
 6212 06a1 1B       		.uleb128 0x1b
 6213 06a2 59020000 		.4byte	.LASF102
 6214 06a6 01       		.byte	0x1
 6215 06a7 1104     		.2byte	0x411
 6216 06a9 00000000 		.4byte	.LFB95
 6217 06ad 40000000 		.4byte	.LFE95-.LFB95
 6218 06b1 01       		.uleb128 0x1
 6219 06b2 9C       		.byte	0x9c
 6220 06b3 19       		.uleb128 0x19
 6221 06b4 98000000 		.4byte	.LASF103
 6222 06b8 01       		.byte	0x1
 6223 06b9 2104     		.2byte	0x421
 6224 06bb 00000000 		.4byte	.LFB96
 6225 06bf 30020000 		.4byte	.LFE96-.LFB96
 6226 06c3 01       		.uleb128 0x1
 6227 06c4 9C       		.byte	0x9c
 6228 06c5 24070000 		.4byte	0x724
 6229 06c9 14       		.uleb128 0x14
 6230 06ca 0D030000 		.4byte	.LASF104
 6231 06ce 01       		.byte	0x1
 6232 06cf 2F04     		.2byte	0x42f
 6233 06d1 DB000000 		.4byte	0xdb
 6234 06d5 02       		.uleb128 0x2
 6235 06d6 91       		.byte	0x91
 6236 06d7 5E       		.sleb128 -34
 6237 06d8 14       		.uleb128 0x14
 6238 06d9 6B050000 		.4byte	.LASF105
 6239 06dd 01       		.byte	0x1
 6240 06de 3004     		.2byte	0x430
 6241 06e0 DB000000 		.4byte	0xdb
 6242 06e4 02       		.uleb128 0x2
 6243 06e5 91       		.byte	0x91
 6244 06e6 5C       		.sleb128 -36
 6245 06e7 14       		.uleb128 0x14
 6246 06e8 A9030000 		.4byte	.LASF106
 6247 06ec 01       		.byte	0x1
 6248 06ed 3104     		.2byte	0x431
 6249 06ef EE000000 		.4byte	0xee
 6250 06f3 02       		.uleb128 0x2
 6251 06f4 91       		.byte	0x91
 6252 06f5 68       		.sleb128 -24
 6253 06f6 14       		.uleb128 0x14
 6254 06f7 6E090000 		.4byte	.LASF107
 6255 06fb 01       		.byte	0x1
 6256 06fc 3204     		.2byte	0x432
 6257 06fe EE000000 		.4byte	0xee
 6258 0702 02       		.uleb128 0x2
 6259 0703 91       		.byte	0x91
 6260 0704 60       		.sleb128 -32
 6261 0705 14       		.uleb128 0x14
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 134


 6262 0706 4B040000 		.4byte	.LASF108
 6263 070a 01       		.byte	0x1
 6264 070b 3B04     		.2byte	0x43b
 6265 070d 73000000 		.4byte	0x73
 6266 0711 02       		.uleb128 0x2
 6267 0712 91       		.byte	0x91
 6268 0713 58       		.sleb128 -40
 6269 0714 14       		.uleb128 0x14
 6270 0715 16090000 		.4byte	.LASF109
 6271 0719 01       		.byte	0x1
 6272 071a 3C04     		.2byte	0x43c
 6273 071c 73000000 		.4byte	0x73
 6274 0720 02       		.uleb128 0x2
 6275 0721 91       		.byte	0x91
 6276 0722 54       		.sleb128 -44
 6277 0723 00       		.byte	0
 6278 0724 1C       		.uleb128 0x1c
 6279 0725 C2050000 		.4byte	.LASF110
 6280 0729 01       		.byte	0x1
 6281 072a 4A04     		.2byte	0x44a
 6282 072c 00000000 		.4byte	.LFB97
 6283 0730 0C000000 		.4byte	.LFE97-.LFB97
 6284 0734 01       		.uleb128 0x1
 6285 0735 9C       		.byte	0x9c
 6286 0736 19       		.uleb128 0x19
 6287 0737 8A010000 		.4byte	.LASF111
 6288 073b 01       		.byte	0x1
 6289 073c 5004     		.2byte	0x450
 6290 073e 00000000 		.4byte	.LFB98
 6291 0742 4C010000 		.4byte	.LFE98-.LFB98
 6292 0746 01       		.uleb128 0x1
 6293 0747 9C       		.byte	0x9c
 6294 0748 78070000 		.4byte	0x778
 6295 074c 15       		.uleb128 0x15
 6296 074d 6E6C00   		.ascii	"nl\000"
 6297 0750 01       		.byte	0x1
 6298 0751 5404     		.2byte	0x454
 6299 0753 AB000000 		.4byte	0xab
 6300 0757 02       		.uleb128 0x2
 6301 0758 91       		.byte	0x91
 6302 0759 67       		.sleb128 -25
 6303 075a 15       		.uleb128 0x15
 6304 075b 6E7200   		.ascii	"nr\000"
 6305 075e 01       		.byte	0x1
 6306 075f 5504     		.2byte	0x455
 6307 0761 AB000000 		.4byte	0xab
 6308 0765 02       		.uleb128 0x2
 6309 0766 91       		.byte	0x91
 6310 0767 66       		.sleb128 -26
 6311 0768 15       		.uleb128 0x15
 6312 0769 6D696400 		.ascii	"mid\000"
 6313 076d 01       		.byte	0x1
 6314 076e 5604     		.2byte	0x456
 6315 0770 AB000000 		.4byte	0xab
 6316 0774 02       		.uleb128 0x2
 6317 0775 91       		.byte	0x91
 6318 0776 65       		.sleb128 -27
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 135


 6319 0777 00       		.byte	0
 6320 0778 1C       		.uleb128 0x1c
 6321 0779 6F010000 		.4byte	.LASF112
 6322 077d 01       		.byte	0x1
 6323 077e 7004     		.2byte	0x470
 6324 0780 00000000 		.4byte	.LFB99
 6325 0784 0C000000 		.4byte	.LFE99-.LFB99
 6326 0788 01       		.uleb128 0x1
 6327 0789 9C       		.byte	0x9c
 6328 078a 19       		.uleb128 0x19
 6329 078b 9F030000 		.4byte	.LASF113
 6330 078f 01       		.byte	0x1
 6331 0790 7504     		.2byte	0x475
 6332 0792 00000000 		.4byte	.LFB100
 6333 0796 C0000000 		.4byte	.LFE100-.LFB100
 6334 079a 01       		.uleb128 0x1
 6335 079b 9C       		.byte	0x9c
 6336 079c D8070000 		.4byte	0x7d8
 6337 07a0 12       		.uleb128 0x12
 6338 07a1 0E000000 		.4byte	.LBB10
 6339 07a5 8E000000 		.4byte	.LBE10-.LBB10
 6340 07a9 14       		.uleb128 0x14
 6341 07aa FF020000 		.4byte	.LASF114
 6342 07ae 01       		.byte	0x1
 6343 07af 7E04     		.2byte	0x47e
 6344 07b1 E7000000 		.4byte	0xe7
 6345 07b5 02       		.uleb128 0x2
 6346 07b6 91       		.byte	0x91
 6347 07b7 74       		.sleb128 -12
 6348 07b8 14       		.uleb128 0x14
 6349 07b9 A9050000 		.4byte	.LASF115
 6350 07bd 01       		.byte	0x1
 6351 07be 7F04     		.2byte	0x47f
 6352 07c0 DB000000 		.4byte	0xdb
 6353 07c4 02       		.uleb128 0x2
 6354 07c5 91       		.byte	0x91
 6355 07c6 72       		.sleb128 -14
 6356 07c7 14       		.uleb128 0x14
 6357 07c8 62030000 		.4byte	.LASF116
 6358 07cc 01       		.byte	0x1
 6359 07cd 8404     		.2byte	0x484
 6360 07cf C0030000 		.4byte	0x3c0
 6361 07d3 02       		.uleb128 0x2
 6362 07d4 91       		.byte	0x91
 6363 07d5 60       		.sleb128 -32
 6364 07d6 00       		.byte	0
 6365 07d7 00       		.byte	0
 6366 07d8 19       		.uleb128 0x19
 6367 07d9 57090000 		.4byte	.LASF117
 6368 07dd 01       		.byte	0x1
 6369 07de 8B04     		.2byte	0x48b
 6370 07e0 00000000 		.4byte	.LFB101
 6371 07e4 B8000000 		.4byte	.LFE101-.LFB101
 6372 07e8 01       		.uleb128 0x1
 6373 07e9 9C       		.byte	0x9c
 6374 07ea 08080000 		.4byte	0x808
 6375 07ee 12       		.uleb128 0x12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 136


 6376 07ef 0E000000 		.4byte	.LBB11
 6377 07f3 86000000 		.4byte	.LBE11-.LBB11
 6378 07f7 14       		.uleb128 0x14
 6379 07f8 C4060000 		.4byte	.LASF118
 6380 07fc 01       		.byte	0x1
 6381 07fd 8F04     		.2byte	0x48f
 6382 07ff C0030000 		.4byte	0x3c0
 6383 0803 02       		.uleb128 0x2
 6384 0804 91       		.byte	0x91
 6385 0805 68       		.sleb128 -24
 6386 0806 00       		.byte	0
 6387 0807 00       		.byte	0
 6388 0808 17       		.uleb128 0x17
 6389 0809 63070000 		.4byte	.LASF119
 6390 080d 01       		.byte	0x1
 6391 080e A004     		.2byte	0x4a0
 6392 0810 00000000 		.4byte	.LFB102
 6393 0814 4A000000 		.4byte	.LFE102-.LFB102
 6394 0818 01       		.uleb128 0x1
 6395 0819 9C       		.byte	0x9c
 6396 081a 2E080000 		.4byte	0x82e
 6397 081e 1A       		.uleb128 0x1a
 6398 081f 57030000 		.4byte	.LASF120
 6399 0823 01       		.byte	0x1
 6400 0824 A004     		.2byte	0x4a0
 6401 0826 2E080000 		.4byte	0x82e
 6402 082a 02       		.uleb128 0x2
 6403 082b 91       		.byte	0x91
 6404 082c 6C       		.sleb128 -20
 6405 082d 00       		.byte	0
 6406 082e 05       		.uleb128 0x5
 6407 082f 04       		.byte	0x4
 6408 0830 AB000000 		.4byte	0xab
 6409 0834 17       		.uleb128 0x17
 6410 0835 3C070000 		.4byte	.LASF121
 6411 0839 01       		.byte	0x1
 6412 083a AB04     		.2byte	0x4ab
 6413 083c 00000000 		.4byte	.LFB103
 6414 0840 68000000 		.4byte	.LFE103-.LFB103
 6415 0844 01       		.uleb128 0x1
 6416 0845 9C       		.byte	0x9c
 6417 0846 71080000 		.4byte	0x871
 6418 084a 18       		.uleb128 0x18
 6419 084b 7300     		.ascii	"s\000"
 6420 084d 01       		.byte	0x1
 6421 084e AB04     		.2byte	0x4ab
 6422 0850 88000000 		.4byte	0x88
 6423 0854 02       		.uleb128 0x2
 6424 0855 91       		.byte	0x91
 6425 0856 6C       		.sleb128 -20
 6426 0857 12       		.uleb128 0x12
 6427 0858 10000000 		.4byte	.LBB12
 6428 085c 48000000 		.4byte	.LBE12-.LBB12
 6429 0860 15       		.uleb128 0x15
 6430 0861 636E7400 		.ascii	"cnt\000"
 6431 0865 01       		.byte	0x1
 6432 0866 B204     		.2byte	0x4b2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 137


 6433 0868 C3000000 		.4byte	0xc3
 6434 086c 02       		.uleb128 0x2
 6435 086d 91       		.byte	0x91
 6436 086e 74       		.sleb128 -12
 6437 086f 00       		.byte	0
 6438 0870 00       		.byte	0
 6439 0871 17       		.uleb128 0x17
 6440 0872 C2080000 		.4byte	.LASF122
 6441 0876 01       		.byte	0x1
 6442 0877 C104     		.2byte	0x4c1
 6443 0879 00000000 		.4byte	.LFB104
 6444 087d 50000000 		.4byte	.LFE104-.LFB104
 6445 0881 01       		.uleb128 0x1
 6446 0882 9C       		.byte	0x9c
 6447 0883 AE080000 		.4byte	0x8ae
 6448 0887 18       		.uleb128 0x18
 6449 0888 6300     		.ascii	"c\000"
 6450 088a 01       		.byte	0x1
 6451 088b C104     		.2byte	0x4c1
 6452 088d 8E000000 		.4byte	0x8e
 6453 0891 02       		.uleb128 0x2
 6454 0892 91       		.byte	0x91
 6455 0893 6F       		.sleb128 -17
 6456 0894 12       		.uleb128 0x12
 6457 0895 12000000 		.4byte	.LBB13
 6458 0899 2E000000 		.4byte	.LBE13-.LBB13
 6459 089d 15       		.uleb128 0x15
 6460 089e 636E7400 		.ascii	"cnt\000"
 6461 08a2 01       		.byte	0x1
 6462 08a3 C504     		.2byte	0x4c5
 6463 08a5 C3000000 		.4byte	0xc3
 6464 08a9 02       		.uleb128 0x2
 6465 08aa 91       		.byte	0x91
 6466 08ab 74       		.sleb128 -12
 6467 08ac 00       		.byte	0
 6468 08ad 00       		.byte	0
 6469 08ae 1C       		.uleb128 0x1c
 6470 08af 6D030000 		.4byte	.LASF123
 6471 08b3 01       		.byte	0x1
 6472 08b4 D204     		.2byte	0x4d2
 6473 08b6 00000000 		.4byte	.LFB105
 6474 08ba 0C000000 		.4byte	.LFE105-.LFB105
 6475 08be 01       		.uleb128 0x1
 6476 08bf 9C       		.byte	0x9c
 6477 08c0 1D       		.uleb128 0x1d
 6478 08c1 B7060000 		.4byte	.LASF124
 6479 08c5 06       		.byte	0x6
 6480 08c6 9606     		.2byte	0x696
 6481 08c8 CC080000 		.4byte	0x8cc
 6482 08cc 1E       		.uleb128 0x1e
 6483 08cd 95000000 		.4byte	0x95
 6484 08d1 1F       		.uleb128 0x1f
 6485 08d2 747300   		.ascii	"ts\000"
 6486 08d5 05       		.byte	0x5
 6487 08d6 10       		.byte	0x10
 6488 08d7 AB000000 		.4byte	0xab
 6489 08db 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 138


 6490 08dc 03       		.byte	0x3
 6491 08dd 00000000 		.4byte	ts
 6492 08e1 20       		.uleb128 0x20
 6493 08e2 44080000 		.4byte	.LASF125
 6494 08e6 05       		.byte	0x5
 6495 08e7 11       		.byte	0x11
 6496 08e8 B7000000 		.4byte	0xb7
 6497 08ec 05       		.uleb128 0x5
 6498 08ed 03       		.byte	0x3
 6499 08ee 00000000 		.4byte	ts_enc
 6500 08f2 20       		.uleb128 0x20
 6501 08f3 D6060000 		.4byte	.LASF126
 6502 08f7 05       		.byte	0x5
 6503 08f8 12       		.byte	0x12
 6504 08f9 B7000000 		.4byte	0xb7
 6505 08fd 05       		.uleb128 0x5
 6506 08fe 03       		.byte	0x3
 6507 08ff 00000000 		.4byte	ts_update
 6508 0903 20       		.uleb128 0x20
 6509 0904 76050000 		.4byte	.LASF127
 6510 0908 05       		.byte	0x5
 6511 0909 13       		.byte	0x13
 6512 090a B7000000 		.4byte	0xb7
 6513 090e 05       		.uleb128 0x5
 6514 090f 03       		.byte	0x3
 6515 0910 00000000 		.4byte	ts_speed
 6516 0914 20       		.uleb128 0x20
 6517 0915 94030000 		.4byte	.LASF128
 6518 0919 05       		.byte	0x5
 6519 091a 14       		.byte	0x14
 6520 091b B7000000 		.4byte	0xb7
 6521 091f 05       		.uleb128 0x5
 6522 0920 03       		.byte	0x3
 6523 0921 00000000 		.4byte	ts_display
 6524 0925 20       		.uleb128 0x20
 6525 0926 17030000 		.4byte	.LASF129
 6526 092a 05       		.byte	0x5
 6527 092b 16       		.byte	0x16
 6528 092c AB000000 		.4byte	0xab
 6529 0930 05       		.uleb128 0x5
 6530 0931 03       		.byte	0x3
 6531 0932 00000000 		.4byte	flag_ts_enc
 6532 0936 20       		.uleb128 0x20
 6533 0937 F0020000 		.4byte	.LASF130
 6534 093b 05       		.byte	0x5
 6535 093c 17       		.byte	0x17
 6536 093d AB000000 		.4byte	0xab
 6537 0941 05       		.uleb128 0x5
 6538 0942 03       		.byte	0x3
 6539 0943 00000000 		.4byte	flag_ts_update
 6540 0947 20       		.uleb128 0x20
 6541 0948 31060000 		.4byte	.LASF131
 6542 094c 05       		.byte	0x5
 6543 094d 18       		.byte	0x18
 6544 094e AB000000 		.4byte	0xab
 6545 0952 05       		.uleb128 0x5
 6546 0953 03       		.byte	0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 139


 6547 0954 00000000 		.4byte	flag_ts_speed
 6548 0958 20       		.uleb128 0x20
 6549 0959 55080000 		.4byte	.LASF132
 6550 095d 05       		.byte	0x5
 6551 095e 19       		.byte	0x19
 6552 095f AB000000 		.4byte	0xab
 6553 0963 05       		.uleb128 0x5
 6554 0964 03       		.byte	0x3
 6555 0965 00000000 		.4byte	flag_ts_display
 6556 0969 20       		.uleb128 0x20
 6557 096a 5C060000 		.4byte	.LASF133
 6558 096e 05       		.byte	0x5
 6559 096f 1C       		.byte	0x1c
 6560 0970 AB000000 		.4byte	0xab
 6561 0974 05       		.uleb128 0x5
 6562 0975 03       		.byte	0x3
 6563 0976 00000000 		.4byte	flag_rx
 6564 097a 20       		.uleb128 0x20
 6565 097b 9D020000 		.4byte	.LASF134
 6566 097f 05       		.byte	0x5
 6567 0980 1D       		.byte	0x1d
 6568 0981 AB000000 		.4byte	0xab
 6569 0985 05       		.uleb128 0x5
 6570 0986 03       		.byte	0x3
 6571 0987 00000000 		.4byte	flag_packet
 6572 098b 20       		.uleb128 0x20
 6573 098c 7B090000 		.4byte	.LASF135
 6574 0990 05       		.byte	0x5
 6575 0991 1E       		.byte	0x1e
 6576 0992 AB000000 		.4byte	0xab
 6577 0996 05       		.uleb128 0x5
 6578 0997 03       		.byte	0x3
 6579 0998 00000000 		.4byte	flag_KB_string
 6580 099c 20       		.uleb128 0x20
 6581 099d 3F060000 		.4byte	.LASF136
 6582 09a1 05       		.byte	0x5
 6583 09a2 20       		.byte	0x20
 6584 09a3 AB000000 		.4byte	0xab
 6585 09a7 05       		.uleb128 0x5
 6586 09a8 03       		.byte	0x3
 6587 09a9 00000000 		.4byte	dataready_flag
 6588 09ad 20       		.uleb128 0x20
 6589 09ae B6010000 		.4byte	.LASF137
 6590 09b2 05       		.byte	0x5
 6591 09b3 22       		.byte	0x22
 6592 09b4 AB000000 		.4byte	0xab
 6593 09b8 05       		.uleb128 0x5
 6594 09b9 03       		.byte	0x3
 6595 09ba 00000000 		.4byte	flag_rf_transmission_active
 6596 09be 20       		.uleb128 0x20
 6597 09bf D2010000 		.4byte	.LASF138
 6598 09c3 05       		.byte	0x5
 6599 09c4 23       		.byte	0x23
 6600 09c5 AB000000 		.4byte	0xab
 6601 09c9 05       		.uleb128 0x5
 6602 09ca 03       		.byte	0x3
 6603 09cb 00000000 		.4byte	flag_print_rf
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 140


 6604 09cf 20       		.uleb128 0x20
 6605 09d0 D9050000 		.4byte	.LASF139
 6606 09d4 05       		.byte	0x5
 6607 09d5 25       		.byte	0x25
 6608 09d6 AB000000 		.4byte	0xab
 6609 09da 05       		.uleb128 0x5
 6610 09db 03       		.byte	0x3
 6611 09dc 00000000 		.4byte	flag_receive_ADC
 6612 09e0 20       		.uleb128 0x20
 6613 09e1 6E060000 		.4byte	.LASF140
 6614 09e5 05       		.byte	0x5
 6615 09e6 26       		.byte	0x26
 6616 09e7 DB000000 		.4byte	0xdb
 6617 09eb 05       		.uleb128 0x5
 6618 09ec 03       		.byte	0x3
 6619 09ed 00000000 		.4byte	adc_result
 6620 09f1 20       		.uleb128 0x20
 6621 09f2 00000000 		.4byte	.LASF141
 6622 09f6 05       		.byte	0x5
 6623 09f7 28       		.byte	0x28
 6624 09f8 AB000000 		.4byte	0xab
 6625 09fc 05       		.uleb128 0x5
 6626 09fd 03       		.byte	0x3
 6627 09fe 00000000 		.4byte	direction
 6628 0a02 20       		.uleb128 0x20
 6629 0a03 5F050000 		.4byte	.LASF142
 6630 0a07 05       		.byte	0x5
 6631 0a08 2B       		.byte	0x2b
 6632 0a09 AB000000 		.4byte	0xab
 6633 0a0d 05       		.uleb128 0x5
 6634 0a0e 03       		.byte	0x3
 6635 0a0f 00000000 		.4byte	BIN_ENABLED
 6636 0a13 20       		.uleb128 0x20
 6637 0a14 55040000 		.4byte	.LASF143
 6638 0a18 05       		.byte	0x5
 6639 0a19 2D       		.byte	0x2d
 6640 0a1a AB000000 		.4byte	0xab
 6641 0a1e 05       		.uleb128 0x5
 6642 0a1f 03       		.byte	0x3
 6643 0a20 00000000 		.4byte	BT_ENABLED
 6644 0a24 20       		.uleb128 0x20
 6645 0a25 83060000 		.4byte	.LASF144
 6646 0a29 05       		.byte	0x5
 6647 0a2a 32       		.byte	0x32
 6648 0a2b AB000000 		.4byte	0xab
 6649 0a2f 05       		.uleb128 0x5
 6650 0a30 03       		.byte	0x3
 6651 0a31 00000000 		.4byte	flag_calc_wheelspeed
 6652 0a35 20       		.uleb128 0x20
 6653 0a36 57010000 		.4byte	.LASF145
 6654 0a3a 05       		.byte	0x5
 6655 0a3b 33       		.byte	0x33
 6656 0a3c DB000000 		.4byte	0xdb
 6657 0a40 05       		.uleb128 0x5
 6658 0a41 03       		.byte	0x3
 6659 0a42 00000000 		.4byte	quad_count1
 6660 0a46 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 141


 6661 0a47 63010000 		.4byte	.LASF146
 6662 0a4b 05       		.byte	0x5
 6663 0a4c 34       		.byte	0x34
 6664 0a4d DB000000 		.4byte	0xdb
 6665 0a51 05       		.uleb128 0x5
 6666 0a52 03       		.byte	0x3
 6667 0a53 00000000 		.4byte	quad_count2
 6668 0a57 20       		.uleb128 0x20
 6669 0a58 94080000 		.4byte	.LASF147
 6670 0a5c 05       		.byte	0x5
 6671 0a5d 35       		.byte	0x35
 6672 0a5e DB000000 		.4byte	0xdb
 6673 0a62 05       		.uleb128 0x5
 6674 0a63 03       		.byte	0x3
 6675 0a64 00000000 		.4byte	last_quad_count1
 6676 0a68 20       		.uleb128 0x20
 6677 0a69 A5080000 		.4byte	.LASF148
 6678 0a6d 05       		.byte	0x5
 6679 0a6e 36       		.byte	0x36
 6680 0a6f DB000000 		.4byte	0xdb
 6681 0a73 05       		.uleb128 0x5
 6682 0a74 03       		.byte	0x3
 6683 0a75 00000000 		.4byte	last_quad_count2
 6684 0a79 20       		.uleb128 0x20
 6685 0a7a 82000000 		.4byte	.LASF149
 6686 0a7e 05       		.byte	0x5
 6687 0a7f 37       		.byte	0x37
 6688 0a80 DB000000 		.4byte	0xdb
 6689 0a84 05       		.uleb128 0x5
 6690 0a85 03       		.byte	0x3
 6691 0a86 00000000 		.4byte	quad_diff1
 6692 0a8a 20       		.uleb128 0x20
 6693 0a8b 8D000000 		.4byte	.LASF150
 6694 0a8f 05       		.byte	0x5
 6695 0a90 38       		.byte	0x38
 6696 0a91 DB000000 		.4byte	0xdb
 6697 0a95 05       		.uleb128 0x5
 6698 0a96 03       		.byte	0x3
 6699 0a97 00000000 		.4byte	quad_diff2
 6700 0a9b 20       		.uleb128 0x20
 6701 0a9c E9060000 		.4byte	.LASF151
 6702 0aa0 05       		.byte	0x5
 6703 0aa1 39       		.byte	0x39
 6704 0aa2 AB000000 		.4byte	0xab
 6705 0aa6 05       		.uleb128 0x5
 6706 0aa7 03       		.byte	0x3
 6707 0aa8 00000000 		.4byte	deadzone
 6708 0aac 20       		.uleb128 0x20
 6709 0aad B6000000 		.4byte	.LASF152
 6710 0ab1 05       		.byte	0x5
 6711 0ab2 3C       		.byte	0x3c
 6712 0ab3 DB000000 		.4byte	0xdb
 6713 0ab7 05       		.uleb128 0x5
 6714 0ab8 03       		.byte	0x3
 6715 0ab9 00000000 		.4byte	start_turn_count
 6716 0abd 20       		.uleb128 0x20
 6717 0abe 14060000 		.4byte	.LASF153
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 142


 6718 0ac2 05       		.byte	0x5
 6719 0ac3 3F       		.byte	0x3f
 6720 0ac4 DB000000 		.4byte	0xdb
 6721 0ac8 05       		.uleb128 0x5
 6722 0ac9 03       		.byte	0x3
 6723 0aca 00000000 		.4byte	left_duty_cycle
 6724 0ace 20       		.uleb128 0x20
 6725 0acf 2D090000 		.4byte	.LASF154
 6726 0ad3 05       		.byte	0x5
 6727 0ad4 40       		.byte	0x40
 6728 0ad5 DB000000 		.4byte	0xdb
 6729 0ad9 05       		.uleb128 0x5
 6730 0ada 03       		.byte	0x3
 6731 0adb 00000000 		.4byte	right_duty_cycle
 6732 0adf 20       		.uleb128 0x20
 6733 0ae0 F2060000 		.4byte	.LASF155
 6734 0ae4 05       		.byte	0x5
 6735 0ae5 43       		.byte	0x43
 6736 0ae6 DB000000 		.4byte	0xdb
 6737 0aea 05       		.uleb128 0x5
 6738 0aeb 03       		.byte	0x3
 6739 0aec 00000000 		.4byte	leftSpeedLimit
 6740 0af0 20       		.uleb128 0x20
 6741 0af1 C3030000 		.4byte	.LASF156
 6742 0af5 05       		.byte	0x5
 6743 0af6 44       		.byte	0x44
 6744 0af7 DB000000 		.4byte	0xdb
 6745 0afb 05       		.uleb128 0x5
 6746 0afc 03       		.byte	0x3
 6747 0afd 00000000 		.4byte	rightSpeedLimit
 6748 0b01 20       		.uleb128 0x20
 6749 0b02 80070000 		.4byte	.LASF157
 6750 0b06 05       		.byte	0x5
 6751 0b07 47       		.byte	0x47
 6752 0b08 DB000000 		.4byte	0xdb
 6753 0b0c 05       		.uleb128 0x5
 6754 0b0d 03       		.byte	0x3
 6755 0b0e 00000000 		.4byte	target_distance_cm
 6756 0b12 20       		.uleb128 0x20
 6757 0b13 31070000 		.4byte	.LASF158
 6758 0b17 05       		.byte	0x5
 6759 0b18 49       		.byte	0x49
 6760 0b19 DB000000 		.4byte	0xdb
 6761 0b1d 05       		.uleb128 0x5
 6762 0b1e 03       		.byte	0x3
 6763 0b1f 00000000 		.4byte	accum_dist
 6764 0b23 20       		.uleb128 0x20
 6765 0b24 02010000 		.4byte	.LASF159
 6766 0b28 05       		.byte	0x5
 6767 0b29 4A       		.byte	0x4a
 6768 0b2a DB000000 		.4byte	0xdb
 6769 0b2e 05       		.uleb128 0x5
 6770 0b2f 03       		.byte	0x3
 6771 0b30 00000000 		.4byte	target_distance_quad
 6772 0b34 20       		.uleb128 0x20
 6773 0b35 28080000 		.4byte	.LASF160
 6774 0b39 05       		.byte	0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 143


 6775 0b3a 4B       		.byte	0x4b
 6776 0b3b AB000000 		.4byte	0xab
 6777 0b3f 05       		.uleb128 0x5
 6778 0b40 03       		.byte	0x3
 6779 0b41 00000000 		.4byte	reached_target
 6780 0b45 20       		.uleb128 0x20
 6781 0b46 1C070000 		.4byte	.LASF161
 6782 0b4a 05       		.byte	0x5
 6783 0b4b 4C       		.byte	0x4c
 6784 0b4c AB000000 		.4byte	0xab
 6785 0b50 05       		.uleb128 0x5
 6786 0b51 03       		.byte	0x3
 6787 0b52 00000000 		.4byte	overshot_target
 6788 0b56 20       		.uleb128 0x20
 6789 0b57 74070000 		.4byte	.LASF162
 6790 0b5b 05       		.byte	0x5
 6791 0b5c 4D       		.byte	0x4d
 6792 0b5d E7000000 		.4byte	0xe7
 6793 0b61 05       		.uleb128 0x5
 6794 0b62 03       		.byte	0x3
 6795 0b63 00000000 		.4byte	quad_per_cm
 6796 0b67 20       		.uleb128 0x20
 6797 0b68 66040000 		.4byte	.LASF163
 6798 0b6c 05       		.byte	0x5
 6799 0b6d 50       		.byte	0x50
 6800 0b6e AB000000 		.4byte	0xab
 6801 0b72 05       		.uleb128 0x5
 6802 0b73 03       		.byte	0x3
 6803 0b74 00000000 		.4byte	initial_pos_valid
 6804 0b78 20       		.uleb128 0x20
 6805 0b79 9C090000 		.4byte	.LASF164
 6806 0b7d 05       		.byte	0x5
 6807 0b7e 51       		.byte	0x51
 6808 0b7f DB000000 		.4byte	0xdb
 6809 0b83 05       		.uleb128 0x5
 6810 0b84 03       		.byte	0x3
 6811 0b85 00000000 		.4byte	initial_x_pos
 6812 0b89 20       		.uleb128 0x20
 6813 0b8a 4E060000 		.4byte	.LASF165
 6814 0b8e 05       		.byte	0x5
 6815 0b8f 52       		.byte	0x52
 6816 0b90 DB000000 		.4byte	0xdb
 6817 0b94 05       		.uleb128 0x5
 6818 0b95 03       		.byte	0x3
 6819 0b96 00000000 		.4byte	initial_y_pos
 6820 0b9a 20       		.uleb128 0x20
 6821 0b9b 4B080000 		.4byte	.LASF166
 6822 0b9f 05       		.byte	0x5
 6823 0ba0 55       		.byte	0x55
 6824 0ba1 AB000000 		.4byte	0xab
 6825 0ba5 05       		.uleb128 0x5
 6826 0ba6 03       		.byte	0x3
 6827 0ba7 00000000 		.4byte	brakeFlag
 6828 0bab 20       		.uleb128 0x20
 6829 0bac DD020000 		.4byte	.LASF167
 6830 0bb0 05       		.byte	0x5
 6831 0bb1 56       		.byte	0x56
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 144


 6832 0bb2 AB000000 		.4byte	0xab
 6833 0bb6 05       		.uleb128 0x5
 6834 0bb7 03       		.byte	0x3
 6835 0bb8 00000000 		.4byte	portOpen
 6836 0bbc 07       		.uleb128 0x7
 6837 0bbd AB000000 		.4byte	0xab
 6838 0bc1 CC0B0000 		.4byte	0xbcc
 6839 0bc5 08       		.uleb128 0x8
 6840 0bc6 81000000 		.4byte	0x81
 6841 0bca 04       		.byte	0x4
 6842 0bcb 00       		.byte	0
 6843 0bcc 20       		.uleb128 0x20
 6844 0bcd A9020000 		.4byte	.LASF168
 6845 0bd1 05       		.byte	0x5
 6846 0bd2 59       		.byte	0x59
 6847 0bd3 BC0B0000 		.4byte	0xbbc
 6848 0bd7 05       		.uleb128 0x5
 6849 0bd8 03       		.byte	0x3
 6850 0bd9 00000000 		.4byte	frontSensors
 6851 0bdd 20       		.uleb128 0x20
 6852 0bde DB070000 		.4byte	.LASF169
 6853 0be2 05       		.byte	0x5
 6854 0be3 5A       		.byte	0x5a
 6855 0be4 AB000000 		.4byte	0xab
 6856 0be8 05       		.uleb128 0x5
 6857 0be9 03       		.byte	0x3
 6858 0bea 00000000 		.4byte	leftOn
 6859 0bee 20       		.uleb128 0x20
 6860 0bef 70000000 		.4byte	.LASF170
 6861 0bf3 05       		.byte	0x5
 6862 0bf4 5B       		.byte	0x5b
 6863 0bf5 AB000000 		.4byte	0xab
 6864 0bf9 05       		.uleb128 0x5
 6865 0bfa 03       		.byte	0x3
 6866 0bfb 00000000 		.4byte	rightOn
 6867 0bff 20       		.uleb128 0x20
 6868 0c00 AA000000 		.4byte	.LASF171
 6869 0c04 05       		.byte	0x5
 6870 0c05 5F       		.byte	0x5f
 6871 0c06 DB000000 		.4byte	0xdb
 6872 0c0a 05       		.uleb128 0x5
 6873 0c0b 03       		.byte	0x3
 6874 0c0c 00000000 		.4byte	prevVoltage
 6875 0c10 20       		.uleb128 0x20
 6876 0c11 20010000 		.4byte	.LASF172
 6877 0c15 05       		.byte	0x5
 6878 0c16 60       		.byte	0x60
 6879 0c17 DB000000 		.4byte	0xdb
 6880 0c1b 05       		.uleb128 0x5
 6881 0c1c 03       		.byte	0x3
 6882 0c1d 00000000 		.4byte	prevVoltage2
 6883 0c21 07       		.uleb128 0x7
 6884 0c22 8E000000 		.4byte	0x8e
 6885 0c26 310C0000 		.4byte	0xc31
 6886 0c2a 08       		.uleb128 0x8
 6887 0c2b 81000000 		.4byte	0x81
 6888 0c2f 3F       		.byte	0x3f
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 145


 6889 0c30 00       		.byte	0
 6890 0c31 20       		.uleb128 0x20
 6891 0c32 86080000 		.4byte	.LASF173
 6892 0c36 05       		.byte	0x5
 6893 0c37 66       		.byte	0x66
 6894 0c38 210C0000 		.4byte	0xc21
 6895 0c3c 05       		.uleb128 0x5
 6896 0c3d 03       		.byte	0x3
 6897 0c3e 00000000 		.4byte	displaystring
 6898 0c42 20       		.uleb128 0x20
 6899 0c43 23080000 		.4byte	.LASF174
 6900 0c47 05       		.byte	0x5
 6901 0c48 67       		.byte	0x67
 6902 0c49 210C0000 		.4byte	0xc21
 6903 0c4d 05       		.uleb128 0x5
 6904 0c4e 03       		.byte	0x3
 6905 0c4f 00000000 		.4byte	line
 6906 0c53 20       		.uleb128 0x20
 6907 0c54 04080000 		.4byte	.LASF175
 6908 0c58 05       		.byte	0x5
 6909 0c59 67       		.byte	0x67
 6910 0c5a 210C0000 		.4byte	0xc21
 6911 0c5e 05       		.uleb128 0x5
 6912 0c5f 03       		.byte	0x3
 6913 0c60 00000000 		.4byte	entry
 6914 0c64 07       		.uleb128 0x7
 6915 0c65 AB000000 		.4byte	0xab
 6916 0c69 740C0000 		.4byte	0xc74
 6917 0c6d 08       		.uleb128 0x8
 6918 0c6e 81000000 		.4byte	0x81
 6919 0c72 3F       		.byte	0x3f
 6920 0c73 00       		.byte	0
 6921 0c74 20       		.uleb128 0x20
 6922 0c75 35020000 		.4byte	.LASF176
 6923 0c79 05       		.byte	0x5
 6924 0c7a 68       		.byte	0x68
 6925 0c7b 640C0000 		.4byte	0xc64
 6926 0c7f 05       		.uleb128 0x5
 6927 0c80 03       		.byte	0x3
 6928 0c81 00000000 		.4byte	usbBuffer
 6929 0c85 20       		.uleb128 0x20
 6930 0c86 86040000 		.4byte	.LASF177
 6931 0c8a 05       		.byte	0x5
 6932 0c8b 7D       		.byte	0x7d
 6933 0c8c 86010000 		.4byte	0x186
 6934 0c90 05       		.uleb128 0x5
 6935 0c91 03       		.byte	0x3
 6936 0c92 00000000 		.4byte	buffer_state
 6937 0c96 20       		.uleb128 0x20
 6938 0c97 EF000000 		.4byte	.LASF178
 6939 0c9b 05       		.byte	0x5
 6940 0c9c 7E       		.byte	0x7e
 6941 0c9d 86010000 		.4byte	0x186
 6942 0ca1 05       		.uleb128 0x5
 6943 0ca2 03       		.byte	0x3
 6944 0ca3 00000000 		.4byte	system_state
 6945 0ca7 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 146


 6946 0ca8 43030000 		.4byte	.LASF179
 6947 0cac 05       		.byte	0x5
 6948 0cad 80       		.byte	0x80
 6949 0cae 0C010000 		.4byte	0x10c
 6950 0cb2 05       		.uleb128 0x5
 6951 0cb3 03       		.byte	0x3
 6952 0cb4 00000000 		.4byte	prev_movement_state
 6953 0cb8 20       		.uleb128 0x20
 6954 0cb9 E0010000 		.4byte	.LASF180
 6955 0cbd 05       		.byte	0x5
 6956 0cbe 81       		.byte	0x81
 6957 0cbf 0C010000 		.4byte	0x10c
 6958 0cc3 05       		.uleb128 0x5
 6959 0cc4 03       		.byte	0x3
 6960 0cc5 00000000 		.4byte	movement_state
 6961 0cc9 20       		.uleb128 0x20
 6962 0cca D4000000 		.4byte	.LASF181
 6963 0cce 05       		.byte	0x5
 6964 0ccf 82       		.byte	0x82
 6965 0cd0 49010000 		.4byte	0x149
 6966 0cd4 05       		.uleb128 0x5
 6967 0cd5 03       		.byte	0x3
 6968 0cd6 00000000 		.4byte	track_mode
 6969 0cda 20       		.uleb128 0x20
 6970 0cdb 23030000 		.4byte	.LASF182
 6971 0cdf 05       		.byte	0x5
 6972 0ce0 84       		.byte	0x84
 6973 0ce1 AB000000 		.4byte	0xab
 6974 0ce5 05       		.uleb128 0x5
 6975 0ce6 03       		.byte	0x3
 6976 0ce7 00000000 		.4byte	byteCount
 6977 0ceb 07       		.uleb128 0x7
 6978 0cec 8E000000 		.4byte	0x8e
 6979 0cf0 FB0C0000 		.4byte	0xcfb
 6980 0cf4 08       		.uleb128 0x8
 6981 0cf5 81000000 		.4byte	0x81
 6982 0cf9 01       		.byte	0x1
 6983 0cfa 00       		.byte	0
 6984 0cfb 20       		.uleb128 0x20
 6985 0cfc C2070000 		.4byte	.LASF183
 6986 0d00 05       		.byte	0x5
 6987 0d01 85       		.byte	0x85
 6988 0d02 EB0C0000 		.4byte	0xceb
 6989 0d06 05       		.uleb128 0x5
 6990 0d07 03       		.byte	0x3
 6991 0d08 00000000 		.4byte	packet
 6992 0d0c 20       		.uleb128 0x20
 6993 0d0d A3010000 		.4byte	.LASF184
 6994 0d11 05       		.byte	0x5
 6995 0d12 89       		.byte	0x89
 6996 0d13 EE000000 		.4byte	0xee
 6997 0d17 05       		.uleb128 0x5
 6998 0d18 03       		.byte	0x3
 6999 0d19 00000000 		.4byte	speed
 7000 0d1d 20       		.uleb128 0x20
 7001 0d1e DE030000 		.4byte	.LASF185
 7002 0d22 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 147


 7003 0d23 25       		.byte	0x25
 7004 0d24 B7000000 		.4byte	0xb7
 7005 0d28 05       		.uleb128 0x5
 7006 0d29 03       		.byte	0x3
 7007 0d2a 00000000 		.4byte	instructionCount
 7008 0d2e 20       		.uleb128 0x20
 7009 0d2f 2D010000 		.4byte	.LASF186
 7010 0d33 01       		.byte	0x1
 7011 0d34 27       		.byte	0x27
 7012 0d35 A0000000 		.4byte	0xa0
 7013 0d39 05       		.uleb128 0x5
 7014 0d3a 03       		.byte	0x3
 7015 0d3b 00000000 		.4byte	sensorsDisabled
 7016 0d3f 07       		.uleb128 0x7
 7017 0d40 A0000000 		.4byte	0xa0
 7018 0d44 550D0000 		.4byte	0xd55
 7019 0d48 08       		.uleb128 0x8
 7020 0d49 81000000 		.4byte	0x81
 7021 0d4d 0E       		.byte	0xe
 7022 0d4e 08       		.uleb128 0x8
 7023 0d4f 81000000 		.4byte	0x81
 7024 0d53 12       		.byte	0x12
 7025 0d54 00       		.byte	0
 7026 0d55 1F       		.uleb128 0x1f
 7027 0d56 6D617000 		.ascii	"map\000"
 7028 0d5a 01       		.byte	0x1
 7029 0d5b 43       		.byte	0x43
 7030 0d5c 3F0D0000 		.4byte	0xd3f
 7031 0d60 05       		.uleb128 0x5
 7032 0d61 03       		.byte	0x3
 7033 0d62 00000000 		.4byte	map
 7034 0d66 07       		.uleb128 0x7
 7035 0d67 A0000000 		.4byte	0xa0
 7036 0d6b 7C0D0000 		.4byte	0xd7c
 7037 0d6f 08       		.uleb128 0x8
 7038 0d70 81000000 		.4byte	0x81
 7039 0d74 05       		.byte	0x5
 7040 0d75 08       		.uleb128 0x8
 7041 0d76 81000000 		.4byte	0x81
 7042 0d7a 01       		.byte	0x1
 7043 0d7b 00       		.byte	0
 7044 0d7c 20       		.uleb128 0x20
 7045 0d7d 55050000 		.4byte	.LASF187
 7046 0d81 01       		.byte	0x1
 7047 0d82 64       		.byte	0x64
 7048 0d83 660D0000 		.4byte	0xd66
 7049 0d87 05       		.uleb128 0x5
 7050 0d88 03       		.byte	0x3
 7051 0d89 00000000 		.4byte	food_list
 7052 0d8d 07       		.uleb128 0x7
 7053 0d8e A0000000 		.4byte	0xa0
 7054 0d92 A40D0000 		.4byte	0xda4
 7055 0d96 21       		.uleb128 0x21
 7056 0d97 81000000 		.4byte	0x81
 7057 0d9b 1F03     		.2byte	0x31f
 7058 0d9d 08       		.uleb128 0x8
 7059 0d9e 81000000 		.4byte	0x81
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 148


 7060 0da2 02       		.byte	0x2
 7061 0da3 00       		.byte	0
 7062 0da4 20       		.uleb128 0x20
 7063 0da5 2E040000 		.4byte	.LASF188
 7064 0da9 01       		.byte	0x1
 7065 0daa 2B       		.byte	0x2b
 7066 0dab 8D0D0000 		.4byte	0xd8d
 7067 0daf 05       		.uleb128 0x5
 7068 0db0 03       		.byte	0x3
 7069 0db1 00000000 		.4byte	path
 7070 0db5 20       		.uleb128 0x20
 7071 0db6 B7050000 		.4byte	.LASF189
 7072 0dba 01       		.byte	0x1
 7073 0dbb 2C       		.byte	0x2c
 7074 0dbc F5000000 		.4byte	0xf5
 7075 0dc0 05       		.uleb128 0x5
 7076 0dc1 03       		.byte	0x3
 7077 0dc2 00000000 		.4byte	start
 7078 0dc6 20       		.uleb128 0x20
 7079 0dc7 B6080000 		.4byte	.LASF190
 7080 0dcb 01       		.byte	0x1
 7081 0dcc 2D       		.byte	0x2d
 7082 0dcd F5000000 		.4byte	0xf5
 7083 0dd1 05       		.uleb128 0x5
 7084 0dd2 03       		.byte	0x3
 7085 0dd3 00000000 		.4byte	destination
 7086 0dd7 20       		.uleb128 0x20
 7087 0dd8 7A010000 		.4byte	.LASF191
 7088 0ddc 01       		.byte	0x1
 7089 0ddd 29       		.byte	0x29
 7090 0dde A0000000 		.4byte	0xa0
 7091 0de2 05       		.uleb128 0x5
 7092 0de3 03       		.byte	0x3
 7093 0de4 00000000 		.4byte	robot_direction
 7094 0de8 20       		.uleb128 0x20
 7095 0de9 0A000000 		.4byte	.LASF192
 7096 0ded 07       		.byte	0x7
 7097 0dee 22       		.byte	0x22
 7098 0def A0000000 		.4byte	0xa0
 7099 0df3 05       		.uleb128 0x5
 7100 0df4 03       		.byte	0x3
 7101 0df5 00000000 		.4byte	tracked_direction
 7102 0df9 20       		.uleb128 0x20
 7103 0dfa F8070000 		.4byte	.LASF193
 7104 0dfe 01       		.byte	0x1
 7105 0dff 69       		.byte	0x69
 7106 0e00 A0000000 		.4byte	0xa0
 7107 0e04 05       		.uleb128 0x5
 7108 0e05 03       		.byte	0x3
 7109 0e06 00000000 		.4byte	food_length
 7110 0e0a 07       		.uleb128 0x7
 7111 0e0b 8E000000 		.4byte	0x8e
 7112 0e0f 1B0E0000 		.4byte	0xe1b
 7113 0e13 21       		.uleb128 0x21
 7114 0e14 81000000 		.4byte	0x81
 7115 0e18 1F03     		.2byte	0x31f
 7116 0e1a 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 149


 7117 0e1b 20       		.uleb128 0x20
 7118 0e1c 86050000 		.4byte	.LASF194
 7119 0e20 01       		.byte	0x1
 7120 0e21 24       		.byte	0x24
 7121 0e22 0A0E0000 		.4byte	0xe0a
 7122 0e26 05       		.uleb128 0x5
 7123 0e27 03       		.byte	0x3
 7124 0e28 00000000 		.4byte	instructions
 7125 0e2c 20       		.uleb128 0x20
 7126 0e2d C9070000 		.4byte	.LASF195
 7127 0e31 01       		.byte	0x1
 7128 0e32 26       		.byte	0x26
 7129 0e33 B7000000 		.4byte	0xb7
 7130 0e37 05       		.uleb128 0x5
 7131 0e38 03       		.byte	0x3
 7132 0e39 00000000 		.4byte	instructionLength
 7133 0e3d 22       		.uleb128 0x22
 7134 0e3e 95010000 		.4byte	.LASF196
 7135 0e42 01       		.byte	0x1
 7136 0e43 4E04     		.2byte	0x44e
 7137 0e45 B7000000 		.4byte	0xb7
 7138 0e49 05       		.uleb128 0x5
 7139 0e4a 03       		.byte	0x3
 7140 0e4b 00000000 		.4byte	leftTurnCount
 7141 0e4f 22       		.uleb128 0x22
 7142 0e50 61000000 		.4byte	.LASF197
 7143 0e54 01       		.byte	0x1
 7144 0e55 4F04     		.2byte	0x44f
 7145 0e57 B7000000 		.4byte	0xb7
 7146 0e5b 05       		.uleb128 0x5
 7147 0e5c 03       		.byte	0x3
 7148 0e5d 00000000 		.4byte	rightTurnCount
 7149 0e61 00       		.byte	0
 7150              		.section	.debug_abbrev,"",%progbits
 7151              	.Ldebug_abbrev0:
 7152 0000 01       		.uleb128 0x1
 7153 0001 11       		.uleb128 0x11
 7154 0002 01       		.byte	0x1
 7155 0003 25       		.uleb128 0x25
 7156 0004 0E       		.uleb128 0xe
 7157 0005 13       		.uleb128 0x13
 7158 0006 0B       		.uleb128 0xb
 7159 0007 03       		.uleb128 0x3
 7160 0008 0E       		.uleb128 0xe
 7161 0009 1B       		.uleb128 0x1b
 7162 000a 0E       		.uleb128 0xe
 7163 000b 55       		.uleb128 0x55
 7164 000c 17       		.uleb128 0x17
 7165 000d 11       		.uleb128 0x11
 7166 000e 01       		.uleb128 0x1
 7167 000f 10       		.uleb128 0x10
 7168 0010 17       		.uleb128 0x17
 7169 0011 00       		.byte	0
 7170 0012 00       		.byte	0
 7171 0013 02       		.uleb128 0x2
 7172 0014 24       		.uleb128 0x24
 7173 0015 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 150


 7174 0016 0B       		.uleb128 0xb
 7175 0017 0B       		.uleb128 0xb
 7176 0018 3E       		.uleb128 0x3e
 7177 0019 0B       		.uleb128 0xb
 7178 001a 03       		.uleb128 0x3
 7179 001b 0E       		.uleb128 0xe
 7180 001c 00       		.byte	0
 7181 001d 00       		.byte	0
 7182 001e 03       		.uleb128 0x3
 7183 001f 16       		.uleb128 0x16
 7184 0020 00       		.byte	0
 7185 0021 03       		.uleb128 0x3
 7186 0022 0E       		.uleb128 0xe
 7187 0023 3A       		.uleb128 0x3a
 7188 0024 0B       		.uleb128 0xb
 7189 0025 3B       		.uleb128 0x3b
 7190 0026 0B       		.uleb128 0xb
 7191 0027 49       		.uleb128 0x49
 7192 0028 13       		.uleb128 0x13
 7193 0029 00       		.byte	0
 7194 002a 00       		.byte	0
 7195 002b 04       		.uleb128 0x4
 7196 002c 24       		.uleb128 0x24
 7197 002d 00       		.byte	0
 7198 002e 0B       		.uleb128 0xb
 7199 002f 0B       		.uleb128 0xb
 7200 0030 3E       		.uleb128 0x3e
 7201 0031 0B       		.uleb128 0xb
 7202 0032 03       		.uleb128 0x3
 7203 0033 08       		.uleb128 0x8
 7204 0034 00       		.byte	0
 7205 0035 00       		.byte	0
 7206 0036 05       		.uleb128 0x5
 7207 0037 0F       		.uleb128 0xf
 7208 0038 00       		.byte	0
 7209 0039 0B       		.uleb128 0xb
 7210 003a 0B       		.uleb128 0xb
 7211 003b 49       		.uleb128 0x49
 7212 003c 13       		.uleb128 0x13
 7213 003d 00       		.byte	0
 7214 003e 00       		.byte	0
 7215 003f 06       		.uleb128 0x6
 7216 0040 16       		.uleb128 0x16
 7217 0041 00       		.byte	0
 7218 0042 03       		.uleb128 0x3
 7219 0043 0E       		.uleb128 0xe
 7220 0044 3A       		.uleb128 0x3a
 7221 0045 0B       		.uleb128 0xb
 7222 0046 3B       		.uleb128 0x3b
 7223 0047 05       		.uleb128 0x5
 7224 0048 49       		.uleb128 0x49
 7225 0049 13       		.uleb128 0x13
 7226 004a 00       		.byte	0
 7227 004b 00       		.byte	0
 7228 004c 07       		.uleb128 0x7
 7229 004d 01       		.uleb128 0x1
 7230 004e 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 151


 7231 004f 49       		.uleb128 0x49
 7232 0050 13       		.uleb128 0x13
 7233 0051 01       		.uleb128 0x1
 7234 0052 13       		.uleb128 0x13
 7235 0053 00       		.byte	0
 7236 0054 00       		.byte	0
 7237 0055 08       		.uleb128 0x8
 7238 0056 21       		.uleb128 0x21
 7239 0057 00       		.byte	0
 7240 0058 49       		.uleb128 0x49
 7241 0059 13       		.uleb128 0x13
 7242 005a 2F       		.uleb128 0x2f
 7243 005b 0B       		.uleb128 0xb
 7244 005c 00       		.byte	0
 7245 005d 00       		.byte	0
 7246 005e 09       		.uleb128 0x9
 7247 005f 04       		.uleb128 0x4
 7248 0060 01       		.byte	0x1
 7249 0061 03       		.uleb128 0x3
 7250 0062 0E       		.uleb128 0xe
 7251 0063 0B       		.uleb128 0xb
 7252 0064 0B       		.uleb128 0xb
 7253 0065 3A       		.uleb128 0x3a
 7254 0066 0B       		.uleb128 0xb
 7255 0067 3B       		.uleb128 0x3b
 7256 0068 0B       		.uleb128 0xb
 7257 0069 01       		.uleb128 0x1
 7258 006a 13       		.uleb128 0x13
 7259 006b 00       		.byte	0
 7260 006c 00       		.byte	0
 7261 006d 0A       		.uleb128 0xa
 7262 006e 28       		.uleb128 0x28
 7263 006f 00       		.byte	0
 7264 0070 03       		.uleb128 0x3
 7265 0071 0E       		.uleb128 0xe
 7266 0072 1C       		.uleb128 0x1c
 7267 0073 0D       		.uleb128 0xd
 7268 0074 00       		.byte	0
 7269 0075 00       		.byte	0
 7270 0076 0B       		.uleb128 0xb
 7271 0077 13       		.uleb128 0x13
 7272 0078 01       		.byte	0x1
 7273 0079 03       		.uleb128 0x3
 7274 007a 0E       		.uleb128 0xe
 7275 007b 0B       		.uleb128 0xb
 7276 007c 0B       		.uleb128 0xb
 7277 007d 3A       		.uleb128 0x3a
 7278 007e 0B       		.uleb128 0xb
 7279 007f 3B       		.uleb128 0x3b
 7280 0080 0B       		.uleb128 0xb
 7281 0081 01       		.uleb128 0x1
 7282 0082 13       		.uleb128 0x13
 7283 0083 00       		.byte	0
 7284 0084 00       		.byte	0
 7285 0085 0C       		.uleb128 0xc
 7286 0086 0D       		.uleb128 0xd
 7287 0087 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 152


 7288 0088 03       		.uleb128 0x3
 7289 0089 0E       		.uleb128 0xe
 7290 008a 3A       		.uleb128 0x3a
 7291 008b 0B       		.uleb128 0xb
 7292 008c 3B       		.uleb128 0x3b
 7293 008d 0B       		.uleb128 0xb
 7294 008e 49       		.uleb128 0x49
 7295 008f 13       		.uleb128 0x13
 7296 0090 38       		.uleb128 0x38
 7297 0091 0B       		.uleb128 0xb
 7298 0092 00       		.byte	0
 7299 0093 00       		.byte	0
 7300 0094 0D       		.uleb128 0xd
 7301 0095 2E       		.uleb128 0x2e
 7302 0096 00       		.byte	0
 7303 0097 3F       		.uleb128 0x3f
 7304 0098 19       		.uleb128 0x19
 7305 0099 03       		.uleb128 0x3
 7306 009a 0E       		.uleb128 0xe
 7307 009b 3A       		.uleb128 0x3a
 7308 009c 0B       		.uleb128 0xb
 7309 009d 3B       		.uleb128 0x3b
 7310 009e 0B       		.uleb128 0xb
 7311 009f 27       		.uleb128 0x27
 7312 00a0 19       		.uleb128 0x19
 7313 00a1 11       		.uleb128 0x11
 7314 00a2 01       		.uleb128 0x1
 7315 00a3 12       		.uleb128 0x12
 7316 00a4 06       		.uleb128 0x6
 7317 00a5 40       		.uleb128 0x40
 7318 00a6 18       		.uleb128 0x18
 7319 00a7 9742     		.uleb128 0x2117
 7320 00a9 19       		.uleb128 0x19
 7321 00aa 00       		.byte	0
 7322 00ab 00       		.byte	0
 7323 00ac 0E       		.uleb128 0xe
 7324 00ad 2E       		.uleb128 0x2e
 7325 00ae 00       		.byte	0
 7326 00af 3F       		.uleb128 0x3f
 7327 00b0 19       		.uleb128 0x19
 7328 00b1 03       		.uleb128 0x3
 7329 00b2 0E       		.uleb128 0xe
 7330 00b3 3A       		.uleb128 0x3a
 7331 00b4 0B       		.uleb128 0xb
 7332 00b5 3B       		.uleb128 0x3b
 7333 00b6 0B       		.uleb128 0xb
 7334 00b7 27       		.uleb128 0x27
 7335 00b8 19       		.uleb128 0x19
 7336 00b9 11       		.uleb128 0x11
 7337 00ba 01       		.uleb128 0x1
 7338 00bb 12       		.uleb128 0x12
 7339 00bc 06       		.uleb128 0x6
 7340 00bd 40       		.uleb128 0x40
 7341 00be 18       		.uleb128 0x18
 7342 00bf 9642     		.uleb128 0x2116
 7343 00c1 19       		.uleb128 0x19
 7344 00c2 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 153


 7345 00c3 00       		.byte	0
 7346 00c4 0F       		.uleb128 0xf
 7347 00c5 2E       		.uleb128 0x2e
 7348 00c6 01       		.byte	0x1
 7349 00c7 3F       		.uleb128 0x3f
 7350 00c8 19       		.uleb128 0x19
 7351 00c9 03       		.uleb128 0x3
 7352 00ca 0E       		.uleb128 0xe
 7353 00cb 3A       		.uleb128 0x3a
 7354 00cc 0B       		.uleb128 0xb
 7355 00cd 3B       		.uleb128 0x3b
 7356 00ce 0B       		.uleb128 0xb
 7357 00cf 27       		.uleb128 0x27
 7358 00d0 19       		.uleb128 0x19
 7359 00d1 11       		.uleb128 0x11
 7360 00d2 01       		.uleb128 0x1
 7361 00d3 12       		.uleb128 0x12
 7362 00d4 06       		.uleb128 0x6
 7363 00d5 40       		.uleb128 0x40
 7364 00d6 18       		.uleb128 0x18
 7365 00d7 9642     		.uleb128 0x2116
 7366 00d9 19       		.uleb128 0x19
 7367 00da 01       		.uleb128 0x1
 7368 00db 13       		.uleb128 0x13
 7369 00dc 00       		.byte	0
 7370 00dd 00       		.byte	0
 7371 00de 10       		.uleb128 0x10
 7372 00df 0B       		.uleb128 0xb
 7373 00e0 01       		.byte	0x1
 7374 00e1 11       		.uleb128 0x11
 7375 00e2 01       		.uleb128 0x1
 7376 00e3 12       		.uleb128 0x12
 7377 00e4 06       		.uleb128 0x6
 7378 00e5 01       		.uleb128 0x1
 7379 00e6 13       		.uleb128 0x13
 7380 00e7 00       		.byte	0
 7381 00e8 00       		.byte	0
 7382 00e9 11       		.uleb128 0x11
 7383 00ea 34       		.uleb128 0x34
 7384 00eb 00       		.byte	0
 7385 00ec 03       		.uleb128 0x3
 7386 00ed 0E       		.uleb128 0xe
 7387 00ee 3A       		.uleb128 0x3a
 7388 00ef 0B       		.uleb128 0xb
 7389 00f0 3B       		.uleb128 0x3b
 7390 00f1 0B       		.uleb128 0xb
 7391 00f2 49       		.uleb128 0x49
 7392 00f3 13       		.uleb128 0x13
 7393 00f4 02       		.uleb128 0x2
 7394 00f5 18       		.uleb128 0x18
 7395 00f6 00       		.byte	0
 7396 00f7 00       		.byte	0
 7397 00f8 12       		.uleb128 0x12
 7398 00f9 0B       		.uleb128 0xb
 7399 00fa 01       		.byte	0x1
 7400 00fb 11       		.uleb128 0x11
 7401 00fc 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 154


 7402 00fd 12       		.uleb128 0x12
 7403 00fe 06       		.uleb128 0x6
 7404 00ff 00       		.byte	0
 7405 0100 00       		.byte	0
 7406 0101 13       		.uleb128 0x13
 7407 0102 2E       		.uleb128 0x2e
 7408 0103 01       		.byte	0x1
 7409 0104 3F       		.uleb128 0x3f
 7410 0105 19       		.uleb128 0x19
 7411 0106 03       		.uleb128 0x3
 7412 0107 0E       		.uleb128 0xe
 7413 0108 3A       		.uleb128 0x3a
 7414 0109 0B       		.uleb128 0xb
 7415 010a 3B       		.uleb128 0x3b
 7416 010b 0B       		.uleb128 0xb
 7417 010c 49       		.uleb128 0x49
 7418 010d 13       		.uleb128 0x13
 7419 010e 11       		.uleb128 0x11
 7420 010f 01       		.uleb128 0x1
 7421 0110 12       		.uleb128 0x12
 7422 0111 06       		.uleb128 0x6
 7423 0112 40       		.uleb128 0x40
 7424 0113 18       		.uleb128 0x18
 7425 0114 9642     		.uleb128 0x2116
 7426 0116 19       		.uleb128 0x19
 7427 0117 01       		.uleb128 0x1
 7428 0118 13       		.uleb128 0x13
 7429 0119 00       		.byte	0
 7430 011a 00       		.byte	0
 7431 011b 14       		.uleb128 0x14
 7432 011c 34       		.uleb128 0x34
 7433 011d 00       		.byte	0
 7434 011e 03       		.uleb128 0x3
 7435 011f 0E       		.uleb128 0xe
 7436 0120 3A       		.uleb128 0x3a
 7437 0121 0B       		.uleb128 0xb
 7438 0122 3B       		.uleb128 0x3b
 7439 0123 05       		.uleb128 0x5
 7440 0124 49       		.uleb128 0x49
 7441 0125 13       		.uleb128 0x13
 7442 0126 02       		.uleb128 0x2
 7443 0127 18       		.uleb128 0x18
 7444 0128 00       		.byte	0
 7445 0129 00       		.byte	0
 7446 012a 15       		.uleb128 0x15
 7447 012b 34       		.uleb128 0x34
 7448 012c 00       		.byte	0
 7449 012d 03       		.uleb128 0x3
 7450 012e 08       		.uleb128 0x8
 7451 012f 3A       		.uleb128 0x3a
 7452 0130 0B       		.uleb128 0xb
 7453 0131 3B       		.uleb128 0x3b
 7454 0132 05       		.uleb128 0x5
 7455 0133 49       		.uleb128 0x49
 7456 0134 13       		.uleb128 0x13
 7457 0135 02       		.uleb128 0x2
 7458 0136 18       		.uleb128 0x18
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 155


 7459 0137 00       		.byte	0
 7460 0138 00       		.byte	0
 7461 0139 16       		.uleb128 0x16
 7462 013a 2E       		.uleb128 0x2e
 7463 013b 01       		.byte	0x1
 7464 013c 3F       		.uleb128 0x3f
 7465 013d 19       		.uleb128 0x19
 7466 013e 03       		.uleb128 0x3
 7467 013f 0E       		.uleb128 0xe
 7468 0140 3A       		.uleb128 0x3a
 7469 0141 0B       		.uleb128 0xb
 7470 0142 3B       		.uleb128 0x3b
 7471 0143 05       		.uleb128 0x5
 7472 0144 11       		.uleb128 0x11
 7473 0145 01       		.uleb128 0x1
 7474 0146 12       		.uleb128 0x12
 7475 0147 06       		.uleb128 0x6
 7476 0148 40       		.uleb128 0x40
 7477 0149 18       		.uleb128 0x18
 7478 014a 9742     		.uleb128 0x2117
 7479 014c 19       		.uleb128 0x19
 7480 014d 01       		.uleb128 0x1
 7481 014e 13       		.uleb128 0x13
 7482 014f 00       		.byte	0
 7483 0150 00       		.byte	0
 7484 0151 17       		.uleb128 0x17
 7485 0152 2E       		.uleb128 0x2e
 7486 0153 01       		.byte	0x1
 7487 0154 3F       		.uleb128 0x3f
 7488 0155 19       		.uleb128 0x19
 7489 0156 03       		.uleb128 0x3
 7490 0157 0E       		.uleb128 0xe
 7491 0158 3A       		.uleb128 0x3a
 7492 0159 0B       		.uleb128 0xb
 7493 015a 3B       		.uleb128 0x3b
 7494 015b 05       		.uleb128 0x5
 7495 015c 27       		.uleb128 0x27
 7496 015d 19       		.uleb128 0x19
 7497 015e 11       		.uleb128 0x11
 7498 015f 01       		.uleb128 0x1
 7499 0160 12       		.uleb128 0x12
 7500 0161 06       		.uleb128 0x6
 7501 0162 40       		.uleb128 0x40
 7502 0163 18       		.uleb128 0x18
 7503 0164 9642     		.uleb128 0x2116
 7504 0166 19       		.uleb128 0x19
 7505 0167 01       		.uleb128 0x1
 7506 0168 13       		.uleb128 0x13
 7507 0169 00       		.byte	0
 7508 016a 00       		.byte	0
 7509 016b 18       		.uleb128 0x18
 7510 016c 05       		.uleb128 0x5
 7511 016d 00       		.byte	0
 7512 016e 03       		.uleb128 0x3
 7513 016f 08       		.uleb128 0x8
 7514 0170 3A       		.uleb128 0x3a
 7515 0171 0B       		.uleb128 0xb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 156


 7516 0172 3B       		.uleb128 0x3b
 7517 0173 05       		.uleb128 0x5
 7518 0174 49       		.uleb128 0x49
 7519 0175 13       		.uleb128 0x13
 7520 0176 02       		.uleb128 0x2
 7521 0177 18       		.uleb128 0x18
 7522 0178 00       		.byte	0
 7523 0179 00       		.byte	0
 7524 017a 19       		.uleb128 0x19
 7525 017b 2E       		.uleb128 0x2e
 7526 017c 01       		.byte	0x1
 7527 017d 3F       		.uleb128 0x3f
 7528 017e 19       		.uleb128 0x19
 7529 017f 03       		.uleb128 0x3
 7530 0180 0E       		.uleb128 0xe
 7531 0181 3A       		.uleb128 0x3a
 7532 0182 0B       		.uleb128 0xb
 7533 0183 3B       		.uleb128 0x3b
 7534 0184 05       		.uleb128 0x5
 7535 0185 11       		.uleb128 0x11
 7536 0186 01       		.uleb128 0x1
 7537 0187 12       		.uleb128 0x12
 7538 0188 06       		.uleb128 0x6
 7539 0189 40       		.uleb128 0x40
 7540 018a 18       		.uleb128 0x18
 7541 018b 9642     		.uleb128 0x2116
 7542 018d 19       		.uleb128 0x19
 7543 018e 01       		.uleb128 0x1
 7544 018f 13       		.uleb128 0x13
 7545 0190 00       		.byte	0
 7546 0191 00       		.byte	0
 7547 0192 1A       		.uleb128 0x1a
 7548 0193 05       		.uleb128 0x5
 7549 0194 00       		.byte	0
 7550 0195 03       		.uleb128 0x3
 7551 0196 0E       		.uleb128 0xe
 7552 0197 3A       		.uleb128 0x3a
 7553 0198 0B       		.uleb128 0xb
 7554 0199 3B       		.uleb128 0x3b
 7555 019a 05       		.uleb128 0x5
 7556 019b 49       		.uleb128 0x49
 7557 019c 13       		.uleb128 0x13
 7558 019d 02       		.uleb128 0x2
 7559 019e 18       		.uleb128 0x18
 7560 019f 00       		.byte	0
 7561 01a0 00       		.byte	0
 7562 01a1 1B       		.uleb128 0x1b
 7563 01a2 2E       		.uleb128 0x2e
 7564 01a3 00       		.byte	0
 7565 01a4 3F       		.uleb128 0x3f
 7566 01a5 19       		.uleb128 0x19
 7567 01a6 03       		.uleb128 0x3
 7568 01a7 0E       		.uleb128 0xe
 7569 01a8 3A       		.uleb128 0x3a
 7570 01a9 0B       		.uleb128 0xb
 7571 01aa 3B       		.uleb128 0x3b
 7572 01ab 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 157


 7573 01ac 11       		.uleb128 0x11
 7574 01ad 01       		.uleb128 0x1
 7575 01ae 12       		.uleb128 0x12
 7576 01af 06       		.uleb128 0x6
 7577 01b0 40       		.uleb128 0x40
 7578 01b1 18       		.uleb128 0x18
 7579 01b2 9642     		.uleb128 0x2116
 7580 01b4 19       		.uleb128 0x19
 7581 01b5 00       		.byte	0
 7582 01b6 00       		.byte	0
 7583 01b7 1C       		.uleb128 0x1c
 7584 01b8 2E       		.uleb128 0x2e
 7585 01b9 00       		.byte	0
 7586 01ba 3F       		.uleb128 0x3f
 7587 01bb 19       		.uleb128 0x19
 7588 01bc 03       		.uleb128 0x3
 7589 01bd 0E       		.uleb128 0xe
 7590 01be 3A       		.uleb128 0x3a
 7591 01bf 0B       		.uleb128 0xb
 7592 01c0 3B       		.uleb128 0x3b
 7593 01c1 05       		.uleb128 0x5
 7594 01c2 11       		.uleb128 0x11
 7595 01c3 01       		.uleb128 0x1
 7596 01c4 12       		.uleb128 0x12
 7597 01c5 06       		.uleb128 0x6
 7598 01c6 40       		.uleb128 0x40
 7599 01c7 18       		.uleb128 0x18
 7600 01c8 9742     		.uleb128 0x2117
 7601 01ca 19       		.uleb128 0x19
 7602 01cb 00       		.byte	0
 7603 01cc 00       		.byte	0
 7604 01cd 1D       		.uleb128 0x1d
 7605 01ce 34       		.uleb128 0x34
 7606 01cf 00       		.byte	0
 7607 01d0 03       		.uleb128 0x3
 7608 01d1 0E       		.uleb128 0xe
 7609 01d2 3A       		.uleb128 0x3a
 7610 01d3 0B       		.uleb128 0xb
 7611 01d4 3B       		.uleb128 0x3b
 7612 01d5 05       		.uleb128 0x5
 7613 01d6 49       		.uleb128 0x49
 7614 01d7 13       		.uleb128 0x13
 7615 01d8 3F       		.uleb128 0x3f
 7616 01d9 19       		.uleb128 0x19
 7617 01da 3C       		.uleb128 0x3c
 7618 01db 19       		.uleb128 0x19
 7619 01dc 00       		.byte	0
 7620 01dd 00       		.byte	0
 7621 01de 1E       		.uleb128 0x1e
 7622 01df 35       		.uleb128 0x35
 7623 01e0 00       		.byte	0
 7624 01e1 49       		.uleb128 0x49
 7625 01e2 13       		.uleb128 0x13
 7626 01e3 00       		.byte	0
 7627 01e4 00       		.byte	0
 7628 01e5 1F       		.uleb128 0x1f
 7629 01e6 34       		.uleb128 0x34
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 158


 7630 01e7 00       		.byte	0
 7631 01e8 03       		.uleb128 0x3
 7632 01e9 08       		.uleb128 0x8
 7633 01ea 3A       		.uleb128 0x3a
 7634 01eb 0B       		.uleb128 0xb
 7635 01ec 3B       		.uleb128 0x3b
 7636 01ed 0B       		.uleb128 0xb
 7637 01ee 49       		.uleb128 0x49
 7638 01ef 13       		.uleb128 0x13
 7639 01f0 3F       		.uleb128 0x3f
 7640 01f1 19       		.uleb128 0x19
 7641 01f2 02       		.uleb128 0x2
 7642 01f3 18       		.uleb128 0x18
 7643 01f4 00       		.byte	0
 7644 01f5 00       		.byte	0
 7645 01f6 20       		.uleb128 0x20
 7646 01f7 34       		.uleb128 0x34
 7647 01f8 00       		.byte	0
 7648 01f9 03       		.uleb128 0x3
 7649 01fa 0E       		.uleb128 0xe
 7650 01fb 3A       		.uleb128 0x3a
 7651 01fc 0B       		.uleb128 0xb
 7652 01fd 3B       		.uleb128 0x3b
 7653 01fe 0B       		.uleb128 0xb
 7654 01ff 49       		.uleb128 0x49
 7655 0200 13       		.uleb128 0x13
 7656 0201 3F       		.uleb128 0x3f
 7657 0202 19       		.uleb128 0x19
 7658 0203 02       		.uleb128 0x2
 7659 0204 18       		.uleb128 0x18
 7660 0205 00       		.byte	0
 7661 0206 00       		.byte	0
 7662 0207 21       		.uleb128 0x21
 7663 0208 21       		.uleb128 0x21
 7664 0209 00       		.byte	0
 7665 020a 49       		.uleb128 0x49
 7666 020b 13       		.uleb128 0x13
 7667 020c 2F       		.uleb128 0x2f
 7668 020d 05       		.uleb128 0x5
 7669 020e 00       		.byte	0
 7670 020f 00       		.byte	0
 7671 0210 22       		.uleb128 0x22
 7672 0211 34       		.uleb128 0x34
 7673 0212 00       		.byte	0
 7674 0213 03       		.uleb128 0x3
 7675 0214 0E       		.uleb128 0xe
 7676 0215 3A       		.uleb128 0x3a
 7677 0216 0B       		.uleb128 0xb
 7678 0217 3B       		.uleb128 0x3b
 7679 0218 05       		.uleb128 0x5
 7680 0219 49       		.uleb128 0x49
 7681 021a 13       		.uleb128 0x13
 7682 021b 3F       		.uleb128 0x3f
 7683 021c 19       		.uleb128 0x19
 7684 021d 02       		.uleb128 0x2
 7685 021e 18       		.uleb128 0x18
 7686 021f 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 159


 7687 0220 00       		.byte	0
 7688 0221 00       		.byte	0
 7689              		.section	.debug_aranges,"",%progbits
 7690 0000 6C010000 		.4byte	0x16c
 7691 0004 0200     		.2byte	0x2
 7692 0006 00000000 		.4byte	.Ldebug_info0
 7693 000a 04       		.byte	0x4
 7694 000b 00       		.byte	0
 7695 000c 0000     		.2byte	0
 7696 000e 0000     		.2byte	0
 7697 0010 00000000 		.4byte	.LFB63
 7698 0014 0C000000 		.4byte	.LFE63-.LFB63
 7699 0018 00000000 		.4byte	.LFB64
 7700 001c 2C000000 		.4byte	.LFE64-.LFB64
 7701 0020 00000000 		.4byte	.LFB65
 7702 0024 98010000 		.4byte	.LFE65-.LFB65
 7703 0028 00000000 		.4byte	.LFB66
 7704 002c 34010000 		.4byte	.LFE66-.LFB66
 7705 0030 00000000 		.4byte	.LFB67
 7706 0034 20000000 		.4byte	.LFE67-.LFB67
 7707 0038 00000000 		.4byte	.LFB68
 7708 003c 28000000 		.4byte	.LFE68-.LFB68
 7709 0040 00000000 		.4byte	.LFB69
 7710 0044 0A000000 		.4byte	.LFE69-.LFB69
 7711 0048 00000000 		.4byte	.LFB70
 7712 004c 28000000 		.4byte	.LFE70-.LFB70
 7713 0050 00000000 		.4byte	.LFB71
 7714 0054 A2060000 		.4byte	.LFE71-.LFB71
 7715 0058 00000000 		.4byte	.LFB72
 7716 005c 60010000 		.4byte	.LFE72-.LFB72
 7717 0060 00000000 		.4byte	.LFB73
 7718 0064 18000000 		.4byte	.LFE73-.LFB73
 7719 0068 00000000 		.4byte	.LFB74
 7720 006c 18000000 		.4byte	.LFE74-.LFB74
 7721 0070 00000000 		.4byte	.LFB75
 7722 0074 54000000 		.4byte	.LFE75-.LFB75
 7723 0078 00000000 		.4byte	.LFB76
 7724 007c F4000000 		.4byte	.LFE76-.LFB76
 7725 0080 00000000 		.4byte	.LFB77
 7726 0084 18000000 		.4byte	.LFE77-.LFB77
 7727 0088 00000000 		.4byte	.LFB78
 7728 008c 18000000 		.4byte	.LFE78-.LFB78
 7729 0090 00000000 		.4byte	.LFB79
 7730 0094 22000000 		.4byte	.LFE79-.LFB79
 7731 0098 00000000 		.4byte	.LFB80
 7732 009c 1C000000 		.4byte	.LFE80-.LFB80
 7733 00a0 00000000 		.4byte	.LFB81
 7734 00a4 34000000 		.4byte	.LFE81-.LFB81
 7735 00a8 00000000 		.4byte	.LFB82
 7736 00ac 38000000 		.4byte	.LFE82-.LFB82
 7737 00b0 00000000 		.4byte	.LFB83
 7738 00b4 4C000000 		.4byte	.LFE83-.LFB83
 7739 00b8 00000000 		.4byte	.LFB84
 7740 00bc 38000000 		.4byte	.LFE84-.LFB84
 7741 00c0 00000000 		.4byte	.LFB85
 7742 00c4 38000000 		.4byte	.LFE85-.LFB85
 7743 00c8 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 160


 7744 00cc 38000000 		.4byte	.LFE86-.LFB86
 7745 00d0 00000000 		.4byte	.LFB87
 7746 00d4 14000000 		.4byte	.LFE87-.LFB87
 7747 00d8 00000000 		.4byte	.LFB88
 7748 00dc 18000000 		.4byte	.LFE88-.LFB88
 7749 00e0 00000000 		.4byte	.LFB89
 7750 00e4 18000000 		.4byte	.LFE89-.LFB89
 7751 00e8 00000000 		.4byte	.LFB90
 7752 00ec 18000000 		.4byte	.LFE90-.LFB90
 7753 00f0 00000000 		.4byte	.LFB91
 7754 00f4 18000000 		.4byte	.LFE91-.LFB91
 7755 00f8 00000000 		.4byte	.LFB92
 7756 00fc B8000000 		.4byte	.LFE92-.LFB92
 7757 0100 00000000 		.4byte	.LFB93
 7758 0104 60050000 		.4byte	.LFE93-.LFB93
 7759 0108 00000000 		.4byte	.LFB94
 7760 010c 40000000 		.4byte	.LFE94-.LFB94
 7761 0110 00000000 		.4byte	.LFB95
 7762 0114 40000000 		.4byte	.LFE95-.LFB95
 7763 0118 00000000 		.4byte	.LFB96
 7764 011c 30020000 		.4byte	.LFE96-.LFB96
 7765 0120 00000000 		.4byte	.LFB97
 7766 0124 0C000000 		.4byte	.LFE97-.LFB97
 7767 0128 00000000 		.4byte	.LFB98
 7768 012c 4C010000 		.4byte	.LFE98-.LFB98
 7769 0130 00000000 		.4byte	.LFB99
 7770 0134 0C000000 		.4byte	.LFE99-.LFB99
 7771 0138 00000000 		.4byte	.LFB100
 7772 013c C0000000 		.4byte	.LFE100-.LFB100
 7773 0140 00000000 		.4byte	.LFB101
 7774 0144 B8000000 		.4byte	.LFE101-.LFB101
 7775 0148 00000000 		.4byte	.LFB102
 7776 014c 4A000000 		.4byte	.LFE102-.LFB102
 7777 0150 00000000 		.4byte	.LFB103
 7778 0154 68000000 		.4byte	.LFE103-.LFB103
 7779 0158 00000000 		.4byte	.LFB104
 7780 015c 50000000 		.4byte	.LFE104-.LFB104
 7781 0160 00000000 		.4byte	.LFB105
 7782 0164 0C000000 		.4byte	.LFE105-.LFB105
 7783 0168 00000000 		.4byte	0
 7784 016c 00000000 		.4byte	0
 7785              		.section	.debug_ranges,"",%progbits
 7786              	.Ldebug_ranges0:
 7787 0000 00000000 		.4byte	.LFB63
 7788 0004 0C000000 		.4byte	.LFE63
 7789 0008 00000000 		.4byte	.LFB64
 7790 000c 2C000000 		.4byte	.LFE64
 7791 0010 00000000 		.4byte	.LFB65
 7792 0014 98010000 		.4byte	.LFE65
 7793 0018 00000000 		.4byte	.LFB66
 7794 001c 34010000 		.4byte	.LFE66
 7795 0020 00000000 		.4byte	.LFB67
 7796 0024 20000000 		.4byte	.LFE67
 7797 0028 00000000 		.4byte	.LFB68
 7798 002c 28000000 		.4byte	.LFE68
 7799 0030 00000000 		.4byte	.LFB69
 7800 0034 0A000000 		.4byte	.LFE69
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 161


 7801 0038 00000000 		.4byte	.LFB70
 7802 003c 28000000 		.4byte	.LFE70
 7803 0040 00000000 		.4byte	.LFB71
 7804 0044 A2060000 		.4byte	.LFE71
 7805 0048 00000000 		.4byte	.LFB72
 7806 004c 60010000 		.4byte	.LFE72
 7807 0050 00000000 		.4byte	.LFB73
 7808 0054 18000000 		.4byte	.LFE73
 7809 0058 00000000 		.4byte	.LFB74
 7810 005c 18000000 		.4byte	.LFE74
 7811 0060 00000000 		.4byte	.LFB75
 7812 0064 54000000 		.4byte	.LFE75
 7813 0068 00000000 		.4byte	.LFB76
 7814 006c F4000000 		.4byte	.LFE76
 7815 0070 00000000 		.4byte	.LFB77
 7816 0074 18000000 		.4byte	.LFE77
 7817 0078 00000000 		.4byte	.LFB78
 7818 007c 18000000 		.4byte	.LFE78
 7819 0080 00000000 		.4byte	.LFB79
 7820 0084 22000000 		.4byte	.LFE79
 7821 0088 00000000 		.4byte	.LFB80
 7822 008c 1C000000 		.4byte	.LFE80
 7823 0090 00000000 		.4byte	.LFB81
 7824 0094 34000000 		.4byte	.LFE81
 7825 0098 00000000 		.4byte	.LFB82
 7826 009c 38000000 		.4byte	.LFE82
 7827 00a0 00000000 		.4byte	.LFB83
 7828 00a4 4C000000 		.4byte	.LFE83
 7829 00a8 00000000 		.4byte	.LFB84
 7830 00ac 38000000 		.4byte	.LFE84
 7831 00b0 00000000 		.4byte	.LFB85
 7832 00b4 38000000 		.4byte	.LFE85
 7833 00b8 00000000 		.4byte	.LFB86
 7834 00bc 38000000 		.4byte	.LFE86
 7835 00c0 00000000 		.4byte	.LFB87
 7836 00c4 14000000 		.4byte	.LFE87
 7837 00c8 00000000 		.4byte	.LFB88
 7838 00cc 18000000 		.4byte	.LFE88
 7839 00d0 00000000 		.4byte	.LFB89
 7840 00d4 18000000 		.4byte	.LFE89
 7841 00d8 00000000 		.4byte	.LFB90
 7842 00dc 18000000 		.4byte	.LFE90
 7843 00e0 00000000 		.4byte	.LFB91
 7844 00e4 18000000 		.4byte	.LFE91
 7845 00e8 00000000 		.4byte	.LFB92
 7846 00ec B8000000 		.4byte	.LFE92
 7847 00f0 00000000 		.4byte	.LFB93
 7848 00f4 60050000 		.4byte	.LFE93
 7849 00f8 00000000 		.4byte	.LFB94
 7850 00fc 40000000 		.4byte	.LFE94
 7851 0100 00000000 		.4byte	.LFB95
 7852 0104 40000000 		.4byte	.LFE95
 7853 0108 00000000 		.4byte	.LFB96
 7854 010c 30020000 		.4byte	.LFE96
 7855 0110 00000000 		.4byte	.LFB97
 7856 0114 0C000000 		.4byte	.LFE97
 7857 0118 00000000 		.4byte	.LFB98
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 162


 7858 011c 4C010000 		.4byte	.LFE98
 7859 0120 00000000 		.4byte	.LFB99
 7860 0124 0C000000 		.4byte	.LFE99
 7861 0128 00000000 		.4byte	.LFB100
 7862 012c C0000000 		.4byte	.LFE100
 7863 0130 00000000 		.4byte	.LFB101
 7864 0134 B8000000 		.4byte	.LFE101
 7865 0138 00000000 		.4byte	.LFB102
 7866 013c 4A000000 		.4byte	.LFE102
 7867 0140 00000000 		.4byte	.LFB103
 7868 0144 68000000 		.4byte	.LFE103
 7869 0148 00000000 		.4byte	.LFB104
 7870 014c 50000000 		.4byte	.LFE104
 7871 0150 00000000 		.4byte	.LFB105
 7872 0154 0C000000 		.4byte	.LFE105
 7873 0158 00000000 		.4byte	0
 7874 015c 00000000 		.4byte	0
 7875              		.section	.debug_line,"",%progbits
 7876              	.Ldebug_line0:
 7877 0000 FB070000 		.section	.debug_str,"MS",%progbits,1
 7877      02006701 
 7877      00000201 
 7877      FB0E0D00 
 7877      01010101 
 7878              	.LASF141:
 7879 0000 64697265 		.ascii	"direction\000"
 7879      6374696F 
 7879      6E00
 7880              	.LASF192:
 7881 000a 74726163 		.ascii	"tracked_direction\000"
 7881      6B65645F 
 7881      64697265 
 7881      6374696F 
 7881      6E00
 7882              	.LASF200:
 7883 001c 433A5C55 		.ascii	"C:\\Users\\Logan\\Desktop\\repos\\CS301-Team-Repo\\"
 7883      73657273 
 7883      5C4C6F67 
 7883      616E5C44 
 7883      65736B74 
 7884 0049 43533330 		.ascii	"CS301_Class.cydsn\000"
 7884      315F436C 
 7884      6173732E 
 7884      63796473 
 7884      6E00
 7885              	.LASF25:
 7886 005b 52545552 		.ascii	"RTURN\000"
 7886      4E00
 7887              	.LASF197:
 7888 0061 72696768 		.ascii	"rightTurnCount\000"
 7888      74547572 
 7888      6E436F75 
 7888      6E7400
 7889              	.LASF170:
 7890 0070 72696768 		.ascii	"rightOn\000"
 7890      744F6E00 
 7891              	.LASF39:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 163


 7892 0078 44455354 		.ascii	"DEST_TEST\000"
 7892      5F544553 
 7892      5400
 7893              	.LASF149:
 7894 0082 71756164 		.ascii	"quad_diff1\000"
 7894      5F646966 
 7894      663100
 7895              	.LASF150:
 7896 008d 71756164 		.ascii	"quad_diff2\000"
 7896      5F646966 
 7896      663200
 7897              	.LASF103:
 7898 0098 51756164 		.ascii	"Quad_Dec_response\000"
 7898      5F446563 
 7898      5F726573 
 7898      706F6E73 
 7898      6500
 7899              	.LASF171:
 7900 00aa 70726576 		.ascii	"prevVoltage\000"
 7900      566F6C74 
 7900      61676500 
 7901              	.LASF152:
 7902 00b6 73746172 		.ascii	"start_turn_count\000"
 7902      745F7475 
 7902      726E5F63 
 7902      6F756E74 
 7902      00
 7903              	.LASF10:
 7904 00c7 756E7369 		.ascii	"unsigned int\000"
 7904      676E6564 
 7904      20696E74 
 7904      00
 7905              	.LASF181:
 7906 00d4 74726163 		.ascii	"track_mode\000"
 7906      6B5F6D6F 
 7906      646500
 7907              	.LASF5:
 7908 00df 5F5F696E 		.ascii	"__int32_t\000"
 7908      7433325F 
 7908      7400
 7909              	.LASF19:
 7910 00e9 696E7431 		.ascii	"int16\000"
 7910      3600
 7911              	.LASF178:
 7912 00ef 73797374 		.ascii	"system_state\000"
 7912      656D5F73 
 7912      74617465 
 7912      00
 7913              	.LASF24:
 7914 00fc 4C545552 		.ascii	"LTURN\000"
 7914      4E00
 7915              	.LASF159:
 7916 0102 74617267 		.ascii	"target_distance_quad\000"
 7916      65745F64 
 7916      69737461 
 7916      6E63655F 
 7916      71756164 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 164


 7917              	.LASF27:
 7918 0117 54524143 		.ascii	"TRACKING\000"
 7918      4B494E47 
 7918      00
 7919              	.LASF172:
 7920 0120 70726576 		.ascii	"prevVoltage2\000"
 7920      566F6C74 
 7920      61676532 
 7920      00
 7921              	.LASF186:
 7922 012d 73656E73 		.ascii	"sensorsDisabled\000"
 7922      6F727344 
 7922      69736162 
 7922      6C656400 
 7923              	.LASF71:
 7924 013d 7061636B 		.ascii	"packet_bytes\000"
 7924      65745F62 
 7924      79746573 
 7924      00
 7925              	.LASF54:
 7926 014a 67325F78 		.ascii	"g2_xpos\000"
 7926      706F7300 
 7927              	.LASF32:
 7928 0152 6D6F6465 		.ascii	"mode\000"
 7928      00
 7929              	.LASF145:
 7930 0157 71756164 		.ascii	"quad_count1\000"
 7930      5F636F75 
 7930      6E743100 
 7931              	.LASF146:
 7932 0163 71756164 		.ascii	"quad_count2\000"
 7932      5F636F75 
 7932      6E743200 
 7933              	.LASF112:
 7934 016f 74726163 		.ascii	"trackLineU\000"
 7934      6B4C696E 
 7934      655500
 7935              	.LASF191:
 7936 017a 726F626F 		.ascii	"robot_direction\000"
 7936      745F6469 
 7936      72656374 
 7936      696F6E00 
 7937              	.LASF111:
 7938 018a 74726163 		.ascii	"trackLineZ\000"
 7938      6B4C696E 
 7938      655A00
 7939              	.LASF196:
 7940 0195 6C656674 		.ascii	"leftTurnCount\000"
 7940      5475726E 
 7940      436F756E 
 7940      7400
 7941              	.LASF184:
 7942 01a3 73706565 		.ascii	"speed\000"
 7942      6400
 7943              	.LASF36:
 7944 01a9 53515541 		.ascii	"SQUARE_TRACK\000"
 7944      52455F54 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 165


 7944      5241434B 
 7944      00
 7945              	.LASF137:
 7946 01b6 666C6167 		.ascii	"flag_rf_transmission_active\000"
 7946      5F72665F 
 7946      7472616E 
 7946      736D6973 
 7946      73696F6E 
 7947              	.LASF138:
 7948 01d2 666C6167 		.ascii	"flag_print_rf\000"
 7948      5F707269 
 7948      6E745F72 
 7948      6600
 7949              	.LASF180:
 7950 01e0 6D6F7665 		.ascii	"movement_state\000"
 7950      6D656E74 
 7950      5F737461 
 7950      746500
 7951              	.LASF28:
 7952 01ef 54524143 		.ascii	"TRACKING_U\000"
 7952      4B494E47 
 7952      5F5500
 7953              	.LASF93:
 7954 01fa 696E6974 		.ascii	"initForward\000"
 7954      466F7277 
 7954      61726400 
 7955              	.LASF14:
 7956 0206 75696E74 		.ascii	"uint32_t\000"
 7956      33325F74 
 7956      00
 7957              	.LASF57:
 7958 020f 67325F64 		.ascii	"g2_direction\000"
 7958      69726563 
 7958      74696F6E 
 7958      00
 7959              	.LASF60:
 7960 021c 6973725F 		.ascii	"isr_quad1\000"
 7960      71756164 
 7960      3100
 7961              	.LASF20:
 7962 0226 666C6F61 		.ascii	"float\000"
 7962      7400
 7963              	.LASF78:
 7964 022c 73657453 		.ascii	"setSpeed\000"
 7964      70656564 
 7964      00
 7965              	.LASF176:
 7966 0235 75736242 		.ascii	"usbBuffer\000"
 7966      75666665 
 7966      7200
 7967              	.LASF42:
 7968 023f 696E6465 		.ascii	"index\000"
 7968      7800
 7969              	.LASF23:
 7970 0245 44524956 		.ascii	"DRIVE\000"
 7970      4500
 7971              	.LASF73:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 166


 7972 024b 73747269 		.ascii	"string_packet\000"
 7972      6E675F70 
 7972      61636B65 
 7972      7400
 7973              	.LASF102:
 7974 0259 6368616E 		.ascii	"changeToBT\000"
 7974      6765546F 
 7974      425400
 7975              	.LASF81:
 7976 0264 636F756E 		.ascii	"countsLeft\000"
 7976      74734C65 
 7976      667400
 7977              	.LASF86:
 7978 026f 64726976 		.ascii	"driveForwards\000"
 7978      65466F72 
 7978      77617264 
 7978      7300
 7979              	.LASF88:
 7980 027d 7475726E 		.ascii	"turnLeft\000"
 7980      4C656674 
 7980      00
 7981              	.LASF9:
 7982 0286 6C6F6E67 		.ascii	"long long unsigned int\000"
 7982      206C6F6E 
 7982      6720756E 
 7982      7369676E 
 7982      65642069 
 7983              	.LASF134:
 7984 029d 666C6167 		.ascii	"flag_packet\000"
 7984      5F706163 
 7984      6B657400 
 7985              	.LASF168:
 7986 02a9 66726F6E 		.ascii	"frontSensors\000"
 7986      7453656E 
 7986      736F7273 
 7986      00
 7987              	.LASF66:
 7988 02b6 6973725F 		.ascii	"isr_turn_timer\000"
 7988      7475726E 
 7988      5F74696D 
 7988      657200
 7989              	.LASF101:
 7990 02c5 6368616E 		.ascii	"changeToRF\000"
 7990      6765546F 
 7990      524600
 7991              	.LASF90:
 7992 02d0 696E6974 		.ascii	"initTurnLeft\000"
 7992      5475726E 
 7992      4C656674 
 7992      00
 7993              	.LASF167:
 7994 02dd 706F7274 		.ascii	"portOpen\000"
 7994      4F70656E 
 7994      00
 7995              	.LASF94:
 7996 02e6 696E6974 		.ascii	"initBrake\000"
 7996      4272616B 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 167


 7996      6500
 7997              	.LASF130:
 7998 02f0 666C6167 		.ascii	"flag_ts_update\000"
 7998      5F74735F 
 7998      75706461 
 7998      746500
 7999              	.LASF114:
 8000 02ff 7363616C 		.ascii	"scalingFactor\000"
 8000      696E6746 
 8000      6163746F 
 8000      7200
 8001              	.LASF104:
 8002 030d 6C656674 		.ascii	"leftSpeed\000"
 8002      53706565 
 8002      6400
 8003              	.LASF129:
 8004 0317 666C6167 		.ascii	"flag_ts_enc\000"
 8004      5F74735F 
 8004      656E6300 
 8005              	.LASF182:
 8006 0323 62797465 		.ascii	"byteCount\000"
 8006      436F756E 
 8006      7400
 8007              	.LASF68:
 8008 032d 61637469 		.ascii	"actionDebounce\000"
 8008      6F6E4465 
 8008      626F756E 
 8008      636500
 8009              	.LASF63:
 8010 033c 62757474 		.ascii	"button\000"
 8010      6F6E00
 8011              	.LASF179:
 8012 0343 70726576 		.ascii	"prev_movement_state\000"
 8012      5F6D6F76 
 8012      656D656E 
 8012      745F7374 
 8012      61746500 
 8013              	.LASF120:
 8014 0357 73656E73 		.ascii	"sensorVals\000"
 8014      6F725661 
 8014      6C7300
 8015              	.LASF116:
 8016 0362 72657375 		.ascii	"result_str\000"
 8016      6C745F73 
 8016      747200
 8017              	.LASF123:
 8018 036d 75617274 		.ascii	"uart_set_PWM\000"
 8018      5F736574 
 8018      5F50574D 
 8018      00
 8019              	.LASF97:
 8020 037a 696E6974 		.ascii	"inittrackLineZ\000"
 8020      74726163 
 8020      6B4C696E 
 8020      655A00
 8021              	.LASF44:
 8022 0389 726F626F 		.ascii	"robot_ypos\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 168


 8022      745F7970 
 8022      6F7300
 8023              	.LASF128:
 8024 0394 74735F64 		.ascii	"ts_display\000"
 8024      6973706C 
 8024      617900
 8025              	.LASF113:
 8026 039f 7072696E 		.ascii	"print_ADC\000"
 8026      745F4144 
 8026      4300
 8027              	.LASF106:
 8028 03a9 7363616C 		.ascii	"scalingLeft\000"
 8028      696E674C 
 8028      65667400 
 8029              	.LASF12:
 8030 03b5 63686172 		.ascii	"char\000"
 8030      00
 8031              	.LASF48:
 8032 03ba 67305F73 		.ascii	"g0_speed\000"
 8032      70656564 
 8032      00
 8033              	.LASF156:
 8034 03c3 72696768 		.ascii	"rightSpeedLimit\000"
 8034      74537065 
 8034      65644C69 
 8034      6D697400 
 8035              	.LASF74:
 8036 03d3 7365744C 		.ascii	"setLeftDir\000"
 8036      65667444 
 8036      697200
 8037              	.LASF185:
 8038 03de 696E7374 		.ascii	"instructionCount\000"
 8038      72756374 
 8038      696F6E43 
 8038      6F756E74 
 8038      00
 8039              	.LASF89:
 8040 03ef 7475726E 		.ascii	"turnU\000"
 8040      5500
 8041              	.LASF55:
 8042 03f5 67325F79 		.ascii	"g2_ypos\000"
 8042      706F7300 
 8043              	.LASF61:
 8044 03fd 64697374 		.ascii	"distTurned\000"
 8044      5475726E 
 8044      656400
 8045              	.LASF16:
 8046 0408 75696E74 		.ascii	"uint16\000"
 8046      313600
 8047              	.LASF18:
 8048 040f 696E7438 		.ascii	"int8\000"
 8048      00
 8049              	.LASF70:
 8050 0414 6E657874 		.ascii	"nextStepDist\000"
 8050      53746570 
 8050      44697374 
 8050      00
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 169


 8051              	.LASF53:
 8052 0421 67315F64 		.ascii	"g1_direction\000"
 8052      69726563 
 8052      74696F6E 
 8052      00
 8053              	.LASF188:
 8054 042e 70617468 		.ascii	"path\000"
 8054      00
 8055              	.LASF75:
 8056 0433 73657452 		.ascii	"setRightDir\000"
 8056      69676874 
 8056      44697200 
 8057              	.LASF34:
 8058 043f 43555256 		.ascii	"CURVE_TRACK\000"
 8058      455F5452 
 8058      41434B00 
 8059              	.LASF108:
 8060 044b 696E7465 		.ascii	"interCalc\000"
 8060      7243616C 
 8060      6300
 8061              	.LASF143:
 8062 0455 42545F45 		.ascii	"BT_ENABLED\000"
 8062      4E41424C 
 8062      454400
 8063              	.LASF80:
 8064 0460 72696768 		.ascii	"right\000"
 8064      7400
 8065              	.LASF163:
 8066 0466 696E6974 		.ascii	"initial_pos_valid\000"
 8066      69616C5F 
 8066      706F735F 
 8066      76616C69 
 8066      6400
 8067              	.LASF8:
 8068 0478 6C6F6E67 		.ascii	"long long int\000"
 8068      206C6F6E 
 8068      6720696E 
 8068      7400
 8069              	.LASF177:
 8070 0486 62756666 		.ascii	"buffer_state\000"
 8070      65725F73 
 8070      74617465 
 8070      00
 8071              	.LASF50:
 8072 0493 67315F78 		.ascii	"g1_xpos\000"
 8072      706F7300 
 8073              	.LASF95:
 8074 049b 696E6974 		.ascii	"initTrack\000"
 8074      54726163 
 8074      6B00
 8075              	.LASF69:
 8076 04a5 6E657874 		.ascii	"nextStep\000"
 8076      53746570 
 8076      00
 8077              	.LASF198:
 8078 04ae 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 8078      4320342E 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 170


 8078      392E3320 
 8078      32303135 
 8078      30333033 
 8079 04e1 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 8079      20726576 
 8079      6973696F 
 8079      6E203232 
 8079      31323230 
 8080 0514 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8080      66756E63 
 8080      74696F6E 
 8080      2D736563 
 8080      74696F6E 
 8081              	.LASF56:
 8082 053c 67325F73 		.ascii	"g2_speed\000"
 8082      70656564 
 8082      00
 8083              	.LASF47:
 8084 0545 67305F79 		.ascii	"g0_ypos\000"
 8084      706F7300 
 8085              	.LASF99:
 8086 054d 72665F63 		.ascii	"rf_char\000"
 8086      68617200 
 8087              	.LASF187:
 8088 0555 666F6F64 		.ascii	"food_list\000"
 8088      5F6C6973 
 8088      7400
 8089              	.LASF142:
 8090 055f 42494E5F 		.ascii	"BIN_ENABLED\000"
 8090      454E4142 
 8090      4C454400 
 8091              	.LASF105:
 8092 056b 72696768 		.ascii	"rightSpeed\000"
 8092      74537065 
 8092      656400
 8093              	.LASF127:
 8094 0576 74735F73 		.ascii	"ts_speed\000"
 8094      70656564 
 8094      00
 8095              	.LASF17:
 8096 057f 75696E74 		.ascii	"uint32\000"
 8096      333200
 8097              	.LASF194:
 8098 0586 696E7374 		.ascii	"instructions\000"
 8098      72756374 
 8098      696F6E73 
 8098      00
 8099              	.LASF82:
 8100 0593 636F756E 		.ascii	"countsRight\000"
 8100      74735269 
 8100      67687400 
 8101              	.LASF201:
 8102 059f 64617461 		.ascii	"data_main\000"
 8102      5F6D6169 
 8102      6E00
 8103              	.LASF115:
 8104 05a9 636F6E76 		.ascii	"converted_val\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 171


 8104      65727465 
 8104      645F7661 
 8104      6C00
 8105              	.LASF189:
 8106 05b7 73746172 		.ascii	"start\000"
 8106      7400
 8107              	.LASF41:
 8108 05bd 72737369 		.ascii	"rssi\000"
 8108      00
 8109              	.LASF110:
 8110 05c2 74726163 		.ascii	"trackLine\000"
 8110      6B4C696E 
 8110      6500
 8111              	.LASF49:
 8112 05cc 67305F64 		.ascii	"g0_direction\000"
 8112      69726563 
 8112      74696F6E 
 8112      00
 8113              	.LASF139:
 8114 05d9 666C6167 		.ascii	"flag_receive_ADC\000"
 8114      5F726563 
 8114      65697665 
 8114      5F414443 
 8114      00
 8115              	.LASF26:
 8116 05ea 53544F50 		.ascii	"STOPPED\000"
 8116      50454400 
 8117              	.LASF100:
 8118 05f2 42545F72 		.ascii	"BT_rxInt\000"
 8118      78496E74 
 8118      00
 8119              	.LASF22:
 8120 05fb 6C6F6E67 		.ascii	"long double\000"
 8120      20646F75 
 8120      626C6500 
 8121              	.LASF64:
 8122 0607 6973725F 		.ascii	"isr_adcTimer\000"
 8122      61646354 
 8122      696D6572 
 8122      00
 8123              	.LASF153:
 8124 0614 6C656674 		.ascii	"left_duty_cycle\000"
 8124      5F647574 
 8124      795F6379 
 8124      636C6500 
 8125              	.LASF65:
 8126 0624 6973725F 		.ascii	"isr_deadzone\000"
 8126      64656164 
 8126      7A6F6E65 
 8126      00
 8127              	.LASF131:
 8128 0631 666C6167 		.ascii	"flag_ts_speed\000"
 8128      5F74735F 
 8128      73706565 
 8128      6400
 8129              	.LASF136:
 8130 063f 64617461 		.ascii	"dataready_flag\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 172


 8130      72656164 
 8130      795F666C 
 8130      616700
 8131              	.LASF165:
 8132 064e 696E6974 		.ascii	"initial_y_pos\000"
 8132      69616C5F 
 8132      795F706F 
 8132      7300
 8133              	.LASF133:
 8134 065c 666C6167 		.ascii	"flag_rx\000"
 8134      5F727800 
 8135              	.LASF2:
 8136 0664 73686F72 		.ascii	"short int\000"
 8136      7420696E 
 8136      7400
 8137              	.LASF140:
 8138 066e 6164635F 		.ascii	"adc_result\000"
 8138      72657375 
 8138      6C7400
 8139              	.LASF92:
 8140 0679 696E6974 		.ascii	"initTurnU\000"
 8140      5475726E 
 8140      5500
 8141              	.LASF144:
 8142 0683 666C6167 		.ascii	"flag_calc_wheelspeed\000"
 8142      5F63616C 
 8142      635F7768 
 8142      65656C73 
 8142      70656564 
 8143              	.LASF4:
 8144 0698 6C6F6E67 		.ascii	"long int\000"
 8144      20696E74 
 8144      00
 8145              	.LASF91:
 8146 06a1 696E6974 		.ascii	"initTurnRight\000"
 8146      5475726E 
 8146      52696768 
 8146      7400
 8147              	.LASF35:
 8148 06af 555F5452 		.ascii	"U_TRACK\000"
 8148      41434B00 
 8149              	.LASF124:
 8150 06b7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8150      52784275 
 8150      66666572 
 8150      00
 8151              	.LASF118:
 8152 06c4 7072696E 		.ascii	"printString\000"
 8152      74537472 
 8152      696E6700 
 8153              	.LASF98:
 8154 06d0 7278496E 		.ascii	"rxInt\000"
 8154      7400
 8155              	.LASF126:
 8156 06d6 74735F75 		.ascii	"ts_update\000"
 8156      70646174 
 8156      6500
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 173


 8157              	.LASF33:
 8158 06e0 4E4F5F54 		.ascii	"NO_TRACK\000"
 8158      5241434B 
 8158      00
 8159              	.LASF151:
 8160 06e9 64656164 		.ascii	"deadzone\000"
 8160      7A6F6E65 
 8160      00
 8161              	.LASF155:
 8162 06f2 6C656674 		.ascii	"leftSpeedLimit\000"
 8162      53706565 
 8162      644C696D 
 8162      697400
 8163              	.LASF40:
 8164 0701 4D41505F 		.ascii	"MAP_TRAVERSE\000"
 8164      54524156 
 8164      45525345 
 8164      00
 8165              	.LASF29:
 8166 070e 54524143 		.ascii	"TRACKING_SOFT\000"
 8166      4B494E47 
 8166      5F534F46 
 8166      5400
 8167              	.LASF161:
 8168 071c 6F766572 		.ascii	"overshot_target\000"
 8168      73686F74 
 8168      5F746172 
 8168      67657400 
 8169              	.LASF79:
 8170 072c 6C656674 		.ascii	"left\000"
 8170      00
 8171              	.LASF158:
 8172 0731 61636375 		.ascii	"accum_dist\000"
 8172      6D5F6469 
 8172      737400
 8173              	.LASF121:
 8174 073c 75736250 		.ascii	"usbPutString\000"
 8174      75745374 
 8174      72696E67 
 8174      00
 8175              	.LASF87:
 8176 0749 7475726E 		.ascii	"turnRight\000"
 8176      52696768 
 8176      7400
 8177              	.LASF51:
 8178 0753 67315F79 		.ascii	"g1_ypos\000"
 8178      706F7300 
 8179              	.LASF59:
 8180 075b 6164635F 		.ascii	"adc_isr\000"
 8180      69737200 
 8181              	.LASF119:
 8182 0763 72656164 		.ascii	"readFrontSensors\000"
 8182      46726F6E 
 8182      7453656E 
 8182      736F7273 
 8182      00
 8183              	.LASF162:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 174


 8184 0774 71756164 		.ascii	"quad_per_cm\000"
 8184      5F706572 
 8184      5F636D00 
 8185              	.LASF157:
 8186 0780 74617267 		.ascii	"target_distance_cm\000"
 8186      65745F64 
 8186      69737461 
 8186      6E63655F 
 8186      636D00
 8187              	.LASF11:
 8188 0793 73697A65 		.ascii	"sizetype\000"
 8188      74797065 
 8188      00
 8189              	.LASF7:
 8190 079c 6C6F6E67 		.ascii	"long unsigned int\000"
 8190      20756E73 
 8190      69676E65 
 8190      6420696E 
 8190      7400
 8191              	.LASF72:
 8192 07ae 62797465 		.ascii	"byte_packet\000"
 8192      5F706163 
 8192      6B657400 
 8193              	.LASF13:
 8194 07ba 696E7433 		.ascii	"int32_t\000"
 8194      325F7400 
 8195              	.LASF183:
 8196 07c2 7061636B 		.ascii	"packet\000"
 8196      657400
 8197              	.LASF195:
 8198 07c9 696E7374 		.ascii	"instructionLength\000"
 8198      72756374 
 8198      696F6E4C 
 8198      656E6774 
 8198      6800
 8199              	.LASF169:
 8200 07db 6C656674 		.ascii	"leftOn\000"
 8200      4F6E00
 8201              	.LASF43:
 8202 07e2 726F626F 		.ascii	"robot_xpos\000"
 8202      745F7870 
 8202      6F7300
 8203              	.LASF85:
 8204 07ed 6272616B 		.ascii	"brakeMotor\000"
 8204      654D6F74 
 8204      6F7200
 8205              	.LASF193:
 8206 07f8 666F6F64 		.ascii	"food_length\000"
 8206      5F6C656E 
 8206      67746800 
 8207              	.LASF175:
 8208 0804 656E7472 		.ascii	"entry\000"
 8208      7900
 8209              	.LASF1:
 8210 080a 756E7369 		.ascii	"unsigned char\000"
 8210      676E6564 
 8210      20636861 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 175


 8210      7200
 8211              	.LASF6:
 8212 0818 5F5F7569 		.ascii	"__uint32_t\000"
 8212      6E743332 
 8212      5F7400
 8213              	.LASF174:
 8214 0823 6C696E65 		.ascii	"line\000"
 8214      00
 8215              	.LASF160:
 8216 0828 72656163 		.ascii	"reached_target\000"
 8216      6865645F 
 8216      74617267 
 8216      657400
 8217              	.LASF62:
 8218 0837 53746F70 		.ascii	"Stop_on_line\000"
 8218      5F6F6E5F 
 8218      6C696E65 
 8218      00
 8219              	.LASF125:
 8220 0844 74735F65 		.ascii	"ts_enc\000"
 8220      6E6300
 8221              	.LASF166:
 8222 084b 6272616B 		.ascii	"brakeFlag\000"
 8222      65466C61 
 8222      6700
 8223              	.LASF132:
 8224 0855 666C6167 		.ascii	"flag_ts_display\000"
 8224      5F74735F 
 8224      64697370 
 8224      6C617900 
 8225              	.LASF31:
 8226 0865 73746174 		.ascii	"state\000"
 8226      6500
 8227              	.LASF77:
 8228 086b 72657665 		.ascii	"reverseDirection\000"
 8228      72736544 
 8228      69726563 
 8228      74696F6E 
 8228      00
 8229              	.LASF83:
 8230 087c 6272616B 		.ascii	"brakeLeft\000"
 8230      654C6566 
 8230      7400
 8231              	.LASF173:
 8232 0886 64697370 		.ascii	"displaystring\000"
 8232      6C617973 
 8232      7472696E 
 8232      6700
 8233              	.LASF147:
 8234 0894 6C617374 		.ascii	"last_quad_count1\000"
 8234      5F717561 
 8234      645F636F 
 8234      756E7431 
 8234      00
 8235              	.LASF148:
 8236 08a5 6C617374 		.ascii	"last_quad_count2\000"
 8236      5F717561 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 176


 8236      645F636F 
 8236      756E7432 
 8236      00
 8237              	.LASF190:
 8238 08b6 64657374 		.ascii	"destination\000"
 8238      696E6174 
 8238      696F6E00 
 8239              	.LASF122:
 8240 08c2 75736250 		.ascii	"usbPutChar\000"
 8240      75744368 
 8240      617200
 8241              	.LASF0:
 8242 08cd 7369676E 		.ascii	"signed char\000"
 8242      65642063 
 8242      68617200 
 8243              	.LASF3:
 8244 08d9 73686F72 		.ascii	"short unsigned int\000"
 8244      7420756E 
 8244      7369676E 
 8244      65642069 
 8244      6E7400
 8245              	.LASF45:
 8246 08ec 726F626F 		.ascii	"robot_orientation\000"
 8246      745F6F72 
 8246      69656E74 
 8246      6174696F 
 8246      6E00
 8247              	.LASF37:
 8248 08fe 51554144 		.ascii	"QUAD_STOP\000"
 8248      5F53544F 
 8248      5000
 8249              	.LASF67:
 8250 0908 6D61696E 		.ascii	"main\000"
 8250      00
 8251              	.LASF58:
 8252 090d 42545F74 		.ascii	"BT_txInt\000"
 8252      78496E74 
 8252      00
 8253              	.LASF109:
 8254 0916 6E657874 		.ascii	"nextSpeed\000"
 8254      53706565 
 8254      6400
 8255              	.LASF15:
 8256 0920 75696E74 		.ascii	"uint8\000"
 8256      3800
 8257              	.LASF21:
 8258 0926 646F7562 		.ascii	"double\000"
 8258      6C6500
 8259              	.LASF154:
 8260 092d 72696768 		.ascii	"right_duty_cycle\000"
 8260      745F6475 
 8260      74795F63 
 8260      79636C65 
 8260      00
 8261              	.LASF38:
 8262 093e 52465F53 		.ascii	"RF_STOP\000"
 8262      544F5000 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccgRaFRq.s 			page 177


 8263              	.LASF76:
 8264 0946 68616E64 		.ascii	"handle_rx_binary\000"
 8264      6C655F72 
 8264      785F6269 
 8264      6E617279 
 8264      00
 8265              	.LASF117:
 8266 0957 7072696E 		.ascii	"print_RF\000"
 8266      745F5246 
 8266      00
 8267              	.LASF30:
 8268 0960 55545552 		.ascii	"UTURN\000"
 8268      4E00
 8269              	.LASF46:
 8270 0966 67305F78 		.ascii	"g0_xpos\000"
 8270      706F7300 
 8271              	.LASF107:
 8272 096e 7363616C 		.ascii	"scalingRight\000"
 8272      696E6752 
 8272      69676874 
 8272      00
 8273              	.LASF135:
 8274 097b 666C6167 		.ascii	"flag_KB_string\000"
 8274      5F4B425F 
 8274      73747269 
 8274      6E6700
 8275              	.LASF52:
 8276 098a 67315F73 		.ascii	"g1_speed\000"
 8276      70656564 
 8276      00
 8277              	.LASF199:
 8278 0993 2E5C6D61 		.ascii	".\\main.c\000"
 8278      696E2E63 
 8278      00
 8279              	.LASF164:
 8280 099c 696E6974 		.ascii	"initial_x_pos\000"
 8280      69616C5F 
 8280      785F706F 
 8280      7300
 8281              	.LASF84:
 8282 09aa 6272616B 		.ascii	"brakeRight\000"
 8282      65526967 
 8282      687400
 8283              	.LASF96:
 8284 09b5 696E6974 		.ascii	"initTrackU\000"
 8284      54726163 
 8284      6B5500
 8285              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
