ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	flag_print_rf
  95              		.bss
  96              		.type	flag_print_rf, %object
  97              		.size	flag_print_rf, 1
  98              	flag_print_rf:
  99 0012 00       		.space	1
 100              		.global	flag_receive_ADC
 101              		.type	flag_receive_ADC, %object
 102              		.size	flag_receive_ADC, 1
 103              	flag_receive_ADC:
 104 0013 00       		.space	1
 105              		.comm	adc_result,2,2
 106              		.global	direction
 107              		.type	direction, %object
 108              		.size	direction, 1
 109              	direction:
 110 0014 00       		.space	1
 111              		.global	BIN_ENABLED
 112              		.type	BIN_ENABLED, %object
 113              		.size	BIN_ENABLED, 1
 114              	BIN_ENABLED:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 3


 115 0015 00       		.space	1
 116              		.global	BT_ENABLED
 117              		.data
 118              		.type	BT_ENABLED, %object
 119              		.size	BT_ENABLED, 1
 120              	BT_ENABLED:
 121 0001 01       		.byte	1
 122              		.global	flag_calc_wheelspeed
 123              		.bss
 124              		.type	flag_calc_wheelspeed, %object
 125              		.size	flag_calc_wheelspeed, 1
 126              	flag_calc_wheelspeed:
 127 0016 00       		.space	1
 128              		.global	quad_count1
 129 0017 00       		.align	1
 130              		.type	quad_count1, %object
 131              		.size	quad_count1, 2
 132              	quad_count1:
 133 0018 0000     		.space	2
 134              		.global	quad_count2
 135              		.align	1
 136              		.type	quad_count2, %object
 137              		.size	quad_count2, 2
 138              	quad_count2:
 139 001a 0000     		.space	2
 140              		.global	last_quad_count1
 141              		.align	1
 142              		.type	last_quad_count1, %object
 143              		.size	last_quad_count1, 2
 144              	last_quad_count1:
 145 001c 0000     		.space	2
 146              		.global	last_quad_count2
 147              		.align	1
 148              		.type	last_quad_count2, %object
 149              		.size	last_quad_count2, 2
 150              	last_quad_count2:
 151 001e 0000     		.space	2
 152              		.global	quad_diff1
 153              		.align	1
 154              		.type	quad_diff1, %object
 155              		.size	quad_diff1, 2
 156              	quad_diff1:
 157 0020 0000     		.space	2
 158              		.global	quad_diff2
 159              		.align	1
 160              		.type	quad_diff2, %object
 161              		.size	quad_diff2, 2
 162              	quad_diff2:
 163 0022 0000     		.space	2
 164              		.global	deadzone
 165              		.type	deadzone, %object
 166              		.size	deadzone, 1
 167              	deadzone:
 168 0024 00       		.space	1
 169              		.global	start_turn_count
 170 0025 00       		.align	1
 171              		.type	start_turn_count, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 4


 172              		.size	start_turn_count, 2
 173              	start_turn_count:
 174 0026 0000     		.space	2
 175              		.global	left_duty_cycle
 176              		.align	1
 177              		.type	left_duty_cycle, %object
 178              		.size	left_duty_cycle, 2
 179              	left_duty_cycle:
 180 0028 0000     		.space	2
 181              		.global	right_duty_cycle
 182              		.align	1
 183              		.type	right_duty_cycle, %object
 184              		.size	right_duty_cycle, 2
 185              	right_duty_cycle:
 186 002a 0000     		.space	2
 187              		.global	leftSpeedLimit
 188              		.align	1
 189              		.type	leftSpeedLimit, %object
 190              		.size	leftSpeedLimit, 2
 191              	leftSpeedLimit:
 192 002c 0000     		.space	2
 193              		.global	rightSpeedLimit
 194              		.align	1
 195              		.type	rightSpeedLimit, %object
 196              		.size	rightSpeedLimit, 2
 197              	rightSpeedLimit:
 198 002e 0000     		.space	2
 199              		.global	target_distance_cm
 200              		.data
 201              		.align	1
 202              		.type	target_distance_cm, %object
 203              		.size	target_distance_cm, 2
 204              	target_distance_cm:
 205 0002 6400     		.short	100
 206              		.global	accum_dist
 207              		.bss
 208              		.align	1
 209              		.type	accum_dist, %object
 210              		.size	accum_dist, 2
 211              	accum_dist:
 212 0030 0000     		.space	2
 213              		.global	target_distance_quad
 214              		.align	1
 215              		.type	target_distance_quad, %object
 216              		.size	target_distance_quad, 2
 217              	target_distance_quad:
 218 0032 0000     		.space	2
 219              		.global	reached_target
 220              		.type	reached_target, %object
 221              		.size	reached_target, 1
 222              	reached_target:
 223 0034 00       		.space	1
 224              		.global	overshot_target
 225              		.type	overshot_target, %object
 226              		.size	overshot_target, 1
 227              	overshot_target:
 228 0035 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 5


 229              		.global	quad_per_cm
 230              		.data
 231              		.align	2
 232              		.type	quad_per_cm, %object
 233              		.size	quad_per_cm, 4
 234              	quad_per_cm:
 235 0004 F0A73241 		.word	1093838832
 236              		.global	initial_pos_valid
 237              		.bss
 238              		.type	initial_pos_valid, %object
 239              		.size	initial_pos_valid, 1
 240              	initial_pos_valid:
 241 0036 00       		.space	1
 242              		.global	initial_x_pos
 243 0037 00       		.align	1
 244              		.type	initial_x_pos, %object
 245              		.size	initial_x_pos, 2
 246              	initial_x_pos:
 247 0038 0000     		.space	2
 248              		.global	initial_y_pos
 249              		.align	1
 250              		.type	initial_y_pos, %object
 251              		.size	initial_y_pos, 2
 252              	initial_y_pos:
 253 003a 0000     		.space	2
 254              		.comm	brakeFlag,1,1
 255              		.global	portOpen
 256              		.data
 257              		.type	portOpen, %object
 258              		.size	portOpen, 1
 259              	portOpen:
 260 0008 01       		.byte	1
 261              		.comm	frontSensors,5,4
 262              		.comm	leftOn,1,1
 263              		.comm	rightOn,1,1
 264              		.comm	prevVoltage,2,2
 265              		.comm	prevVoltage2,2,2
 266              		.global	displaystring
 267 0009 000000   		.align	2
 268              		.type	displaystring, %object
 269              		.size	displaystring, 64
 270              	displaystring:
 271 000c 43533330 		.ascii	"CS301 2016\012\000"
 271      31203230 
 271      31360A00 
 272 0018 00000000 		.space	52
 272      00000000 
 272      00000000 
 272      00000000 
 272      00000000 
 273              		.comm	line,64,4
 274              		.comm	entry,64,4
 275              		.comm	usbBuffer,64,4
 276              		.comm	buffer_state,32,4
 277              		.comm	system_state,32,4
 278              		.global	prev_movement_state
 279              		.type	prev_movement_state, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 6


 280              		.size	prev_movement_state, 1
 281              	prev_movement_state:
 282 004c 03       		.byte	3
 283              		.global	movement_state
 284              		.type	movement_state, %object
 285              		.size	movement_state, 1
 286              	movement_state:
 287 004d 03       		.byte	3
 288              		.global	track_mode
 289              		.bss
 290              		.type	track_mode, %object
 291              		.size	track_mode, 1
 292              	track_mode:
 293 003c 00       		.space	1
 294              		.global	byteCount
 295              		.type	byteCount, %object
 296              		.size	byteCount, 1
 297              	byteCount:
 298 003d 00       		.space	1
 299              		.comm	packet,2,4
 300              		.global	speed
 301              		.data
 302 004e 0000     		.align	3
 303              		.type	speed, %object
 304              		.size	speed, 8
 305              	speed:
 306 0050 00000000 		.word	0
 307 0054 00002E40 		.word	1076756480
 308              		.comm	tracked_direction,4,4
 309              		.global	instructions
 310              		.bss
 311 003e 0000     		.align	2
 312              		.type	instructions, %object
 313              		.size	instructions, 800
 314              	instructions:
 315 0040 00000000 		.space	800
 315      00000000 
 315      00000000 
 315      00000000 
 315      00000000 
 316              		.global	instructionCount
 317              		.align	1
 318              		.type	instructionCount, %object
 319              		.size	instructionCount, 2
 320              	instructionCount:
 321 0360 0000     		.space	2
 322              		.global	instructionLength
 323              		.align	1
 324              		.type	instructionLength, %object
 325              		.size	instructionLength, 2
 326              	instructionLength:
 327 0362 0000     		.space	2
 328              		.global	sensorsDisabled
 329              		.align	2
 330              		.type	sensorsDisabled, %object
 331              		.size	sensorsDisabled, 4
 332              	sensorsDisabled:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 7


 333 0364 00000000 		.space	4
 334              		.global	robot_direction
 335              		.data
 336              		.align	2
 337              		.type	robot_direction, %object
 338              		.size	robot_direction, 4
 339              	robot_direction:
 340 0058 02000000 		.word	2
 341              		.global	path
 342              		.bss
 343              		.align	2
 344              		.type	path, %object
 345              		.size	path, 9600
 346              	path:
 347 0368 00000000 		.space	9600
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.global	start
 349              		.data
 350              		.align	2
 351              		.type	start, %object
 352              		.size	start, 8
 353              	start:
 354 005c 01000000 		.word	1
 355 0060 01000000 		.word	1
 356              		.global	destination
 357              		.align	2
 358              		.type	destination, %object
 359              		.size	destination, 8
 360              	destination:
 361 0064 0E000000 		.word	14
 362 0068 12000000 		.word	18
 363              		.global	map
 364              		.align	2
 365              		.type	map, %object
 366              		.size	map, 1140
 367              	map:
 368 006c 01000000 		.word	1
 369 0070 01000000 		.word	1
 370 0074 01000000 		.word	1
 371 0078 01000000 		.word	1
 372 007c 01000000 		.word	1
 373 0080 01000000 		.word	1
 374 0084 01000000 		.word	1
 375 0088 01000000 		.word	1
 376 008c 01000000 		.word	1
 377 0090 01000000 		.word	1
 378 0094 01000000 		.word	1
 379 0098 01000000 		.word	1
 380 009c 01000000 		.word	1
 381 00a0 01000000 		.word	1
 382 00a4 01000000 		.word	1
 383 00a8 01000000 		.word	1
 384 00ac 01000000 		.word	1
 385 00b0 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 8


 386 00b4 01000000 		.word	1
 387 00b8 01000000 		.word	1
 388 00bc 00000000 		.word	0
 389 00c0 00000000 		.word	0
 390 00c4 00000000 		.word	0
 391 00c8 00000000 		.word	0
 392 00cc 00000000 		.word	0
 393 00d0 00000000 		.word	0
 394 00d4 00000000 		.word	0
 395 00d8 00000000 		.word	0
 396 00dc 00000000 		.word	0
 397 00e0 00000000 		.word	0
 398 00e4 00000000 		.word	0
 399 00e8 00000000 		.word	0
 400 00ec 00000000 		.word	0
 401 00f0 00000000 		.word	0
 402 00f4 00000000 		.word	0
 403 00f8 00000000 		.word	0
 404 00fc 00000000 		.word	0
 405 0100 01000000 		.word	1
 406 0104 01000000 		.word	1
 407 0108 01000000 		.word	1
 408 010c 00000000 		.word	0
 409 0110 01000000 		.word	1
 410 0114 01000000 		.word	1
 411 0118 01000000 		.word	1
 412 011c 01000000 		.word	1
 413 0120 01000000 		.word	1
 414 0124 01000000 		.word	1
 415 0128 01000000 		.word	1
 416 012c 01000000 		.word	1
 417 0130 01000000 		.word	1
 418 0134 01000000 		.word	1
 419 0138 00000000 		.word	0
 420 013c 01000000 		.word	1
 421 0140 01000000 		.word	1
 422 0144 00000000 		.word	0
 423 0148 01000000 		.word	1
 424 014c 01000000 		.word	1
 425 0150 01000000 		.word	1
 426 0154 01000000 		.word	1
 427 0158 00000000 		.word	0
 428 015c 01000000 		.word	1
 429 0160 00000000 		.word	0
 430 0164 00000000 		.word	0
 431 0168 00000000 		.word	0
 432 016c 00000000 		.word	0
 433 0170 01000000 		.word	1
 434 0174 01000000 		.word	1
 435 0178 00000000 		.word	0
 436 017c 00000000 		.word	0
 437 0180 00000000 		.word	0
 438 0184 00000000 		.word	0
 439 0188 01000000 		.word	1
 440 018c 01000000 		.word	1
 441 0190 00000000 		.word	0
 442 0194 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 9


 443 0198 01000000 		.word	1
 444 019c 01000000 		.word	1
 445 01a0 01000000 		.word	1
 446 01a4 00000000 		.word	0
 447 01a8 01000000 		.word	1
 448 01ac 00000000 		.word	0
 449 01b0 01000000 		.word	1
 450 01b4 01000000 		.word	1
 451 01b8 00000000 		.word	0
 452 01bc 01000000 		.word	1
 453 01c0 01000000 		.word	1
 454 01c4 01000000 		.word	1
 455 01c8 01000000 		.word	1
 456 01cc 01000000 		.word	1
 457 01d0 00000000 		.word	0
 458 01d4 01000000 		.word	1
 459 01d8 01000000 		.word	1
 460 01dc 00000000 		.word	0
 461 01e0 01000000 		.word	1
 462 01e4 01000000 		.word	1
 463 01e8 01000000 		.word	1
 464 01ec 01000000 		.word	1
 465 01f0 00000000 		.word	0
 466 01f4 01000000 		.word	1
 467 01f8 00000000 		.word	0
 468 01fc 01000000 		.word	1
 469 0200 01000000 		.word	1
 470 0204 00000000 		.word	0
 471 0208 00000000 		.word	0
 472 020c 00000000 		.word	0
 473 0210 00000000 		.word	0
 474 0214 00000000 		.word	0
 475 0218 00000000 		.word	0
 476 021c 00000000 		.word	0
 477 0220 01000000 		.word	1
 478 0224 01000000 		.word	1
 479 0228 00000000 		.word	0
 480 022c 01000000 		.word	1
 481 0230 01000000 		.word	1
 482 0234 01000000 		.word	1
 483 0238 01000000 		.word	1
 484 023c 00000000 		.word	0
 485 0240 00000000 		.word	0
 486 0244 00000000 		.word	0
 487 0248 00000000 		.word	0
 488 024c 00000000 		.word	0
 489 0250 00000000 		.word	0
 490 0254 01000000 		.word	1
 491 0258 01000000 		.word	1
 492 025c 01000000 		.word	1
 493 0260 01000000 		.word	1
 494 0264 01000000 		.word	1
 495 0268 00000000 		.word	0
 496 026c 01000000 		.word	1
 497 0270 01000000 		.word	1
 498 0274 00000000 		.word	0
 499 0278 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 10


 500 027c 01000000 		.word	1
 501 0280 01000000 		.word	1
 502 0284 01000000 		.word	1
 503 0288 01000000 		.word	1
 504 028c 01000000 		.word	1
 505 0290 01000000 		.word	1
 506 0294 01000000 		.word	1
 507 0298 01000000 		.word	1
 508 029c 00000000 		.word	0
 509 02a0 01000000 		.word	1
 510 02a4 01000000 		.word	1
 511 02a8 01000000 		.word	1
 512 02ac 00000000 		.word	0
 513 02b0 00000000 		.word	0
 514 02b4 00000000 		.word	0
 515 02b8 01000000 		.word	1
 516 02bc 01000000 		.word	1
 517 02c0 00000000 		.word	0
 518 02c4 01000000 		.word	1
 519 02c8 01000000 		.word	1
 520 02cc 01000000 		.word	1
 521 02d0 01000000 		.word	1
 522 02d4 00000000 		.word	0
 523 02d8 00000000 		.word	0
 524 02dc 00000000 		.word	0
 525 02e0 00000000 		.word	0
 526 02e4 00000000 		.word	0
 527 02e8 00000000 		.word	0
 528 02ec 01000000 		.word	1
 529 02f0 01000000 		.word	1
 530 02f4 01000000 		.word	1
 531 02f8 00000000 		.word	0
 532 02fc 01000000 		.word	1
 533 0300 00000000 		.word	0
 534 0304 01000000 		.word	1
 535 0308 01000000 		.word	1
 536 030c 00000000 		.word	0
 537 0310 01000000 		.word	1
 538 0314 01000000 		.word	1
 539 0318 01000000 		.word	1
 540 031c 01000000 		.word	1
 541 0320 00000000 		.word	0
 542 0324 01000000 		.word	1
 543 0328 00000000 		.word	0
 544 032c 01000000 		.word	1
 545 0330 01000000 		.word	1
 546 0334 00000000 		.word	0
 547 0338 01000000 		.word	1
 548 033c 01000000 		.word	1
 549 0340 01000000 		.word	1
 550 0344 00000000 		.word	0
 551 0348 01000000 		.word	1
 552 034c 00000000 		.word	0
 553 0350 01000000 		.word	1
 554 0354 01000000 		.word	1
 555 0358 00000000 		.word	0
 556 035c 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 11


 557 0360 01000000 		.word	1
 558 0364 01000000 		.word	1
 559 0368 01000000 		.word	1
 560 036c 00000000 		.word	0
 561 0370 01000000 		.word	1
 562 0374 00000000 		.word	0
 563 0378 01000000 		.word	1
 564 037c 01000000 		.word	1
 565 0380 00000000 		.word	0
 566 0384 01000000 		.word	1
 567 0388 01000000 		.word	1
 568 038c 01000000 		.word	1
 569 0390 00000000 		.word	0
 570 0394 01000000 		.word	1
 571 0398 00000000 		.word	0
 572 039c 01000000 		.word	1
 573 03a0 01000000 		.word	1
 574 03a4 00000000 		.word	0
 575 03a8 01000000 		.word	1
 576 03ac 01000000 		.word	1
 577 03b0 01000000 		.word	1
 578 03b4 01000000 		.word	1
 579 03b8 00000000 		.word	0
 580 03bc 01000000 		.word	1
 581 03c0 00000000 		.word	0
 582 03c4 00000000 		.word	0
 583 03c8 00000000 		.word	0
 584 03cc 00000000 		.word	0
 585 03d0 00000000 		.word	0
 586 03d4 00000000 		.word	0
 587 03d8 00000000 		.word	0
 588 03dc 00000000 		.word	0
 589 03e0 01000000 		.word	1
 590 03e4 00000000 		.word	0
 591 03e8 00000000 		.word	0
 592 03ec 00000000 		.word	0
 593 03f0 00000000 		.word	0
 594 03f4 01000000 		.word	1
 595 03f8 01000000 		.word	1
 596 03fc 01000000 		.word	1
 597 0400 01000000 		.word	1
 598 0404 00000000 		.word	0
 599 0408 01000000 		.word	1
 600 040c 01000000 		.word	1
 601 0410 01000000 		.word	1
 602 0414 01000000 		.word	1
 603 0418 01000000 		.word	1
 604 041c 01000000 		.word	1
 605 0420 01000000 		.word	1
 606 0424 01000000 		.word	1
 607 0428 01000000 		.word	1
 608 042c 01000000 		.word	1
 609 0430 00000000 		.word	0
 610 0434 01000000 		.word	1
 611 0438 01000000 		.word	1
 612 043c 00000000 		.word	0
 613 0440 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 12


 614 0444 01000000 		.word	1
 615 0448 01000000 		.word	1
 616 044c 00000000 		.word	0
 617 0450 00000000 		.word	0
 618 0454 00000000 		.word	0
 619 0458 00000000 		.word	0
 620 045c 00000000 		.word	0
 621 0460 00000000 		.word	0
 622 0464 00000000 		.word	0
 623 0468 00000000 		.word	0
 624 046c 00000000 		.word	0
 625 0470 00000000 		.word	0
 626 0474 00000000 		.word	0
 627 0478 00000000 		.word	0
 628 047c 00000000 		.word	0
 629 0480 00000000 		.word	0
 630 0484 00000000 		.word	0
 631 0488 00000000 		.word	0
 632 048c 00000000 		.word	0
 633 0490 01000000 		.word	1
 634 0494 01000000 		.word	1
 635 0498 01000000 		.word	1
 636 049c 01000000 		.word	1
 637 04a0 01000000 		.word	1
 638 04a4 01000000 		.word	1
 639 04a8 01000000 		.word	1
 640 04ac 01000000 		.word	1
 641 04b0 01000000 		.word	1
 642 04b4 01000000 		.word	1
 643 04b8 01000000 		.word	1
 644 04bc 01000000 		.word	1
 645 04c0 01000000 		.word	1
 646 04c4 01000000 		.word	1
 647 04c8 01000000 		.word	1
 648 04cc 01000000 		.word	1
 649 04d0 01000000 		.word	1
 650 04d4 01000000 		.word	1
 651 04d8 01000000 		.word	1
 652 04dc 01000000 		.word	1
 653              		.global	food_list
 654              		.align	2
 655              		.type	food_list, %object
 656              		.size	food_list, 48
 657              	food_list:
 658 04e0 03000000 		.word	3
 659 04e4 06000000 		.word	6
 660 04e8 05000000 		.word	5
 661 04ec 0A000000 		.word	10
 662 04f0 0D000000 		.word	13
 663 04f4 09000000 		.word	9
 664 04f8 0D000000 		.word	13
 665 04fc 10000000 		.word	16
 666 0500 01000000 		.word	1
 667 0504 11000000 		.word	17
 668 0508 00000000 		.space	8
 668      00000000 
 669              		.global	food_length
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 13


 670              		.align	2
 671              		.type	food_length, %object
 672              		.size	food_length, 4
 673              	food_length:
 674 0510 05000000 		.word	5
 675 0514 00000000 		.section	.text.BT_txInt,"ax",%progbits
 676              		.align	2
 677              		.global	BT_txInt
 678              		.thumb
 679              		.thumb_func
 680              		.type	BT_txInt, %function
 681              	BT_txInt:
 682              	.LFB63:
 683              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *
   3:.\main.c      ****  * Copyright Univ of Auckland, 2016
   4:.\main.c      ****  * All Rights Reserved
   5:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\main.c      ****  *
   7:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   9:.\main.c      ****  *
  10:.\main.c      ****  * ========================================
  11:.\main.c      **** */
  12:.\main.c      **** #include <stdio.h>
  13:.\main.c      **** #include <string.h>
  14:.\main.c      **** #include <stdlib.h>
  15:.\main.c      **** #include <project.h>
  16:.\main.c      **** #include <math.h>
  17:.\main.c      **** //* ========================================
  18:.\main.c      **** #include "defines.h"
  19:.\main.c      **** #include "vars.h"
  20:.\main.c      **** #include "pathfinder.h"
  21:.\main.c      **** //* ========================================
  22:.\main.c      **** void usbPutString(char *s);
  23:.\main.c      **** void usbPutChar(char c);
  24:.\main.c      **** //void handle_usb();
  25:.\main.c      **** //* ========================================
  26:.\main.c      **** 
  27:.\main.c      **** #define QUAD_RATIO 0.99556
  28:.\main.c      **** #define TURN_OFFSET 138
  29:.\main.c      **** #define U_OFFSET 120
  30:.\main.c      **** 
  31:.\main.c      **** #define U_DEADZONE 90000
  32:.\main.c      **** #define TURN_DEADZONE 50000
  33:.\main.c      **** #define S_DEADZONE 10000
  34:.\main.c      **** #define QUAD_PER_UNIT 144
  35:.\main.c      **** 
  36:.\main.c      **** char instructions[DEFAULT_ARRAY_SIZE] = {0};
  37:.\main.c      **** uint16 instructionCount = 0;
  38:.\main.c      **** uint16 instructionLength = 0;
  39:.\main.c      **** uint32_t sensorsDisabled = 0;
  40:.\main.c      **** 
  41:.\main.c      **** uint32_t robot_direction = 2;
  42:.\main.c      **** 
  43:.\main.c      **** uint32_t path[DEFAULT_ARRAY_SIZE][3] = {0};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 14


  44:.\main.c      **** uint32_t start[2] = {1, 1};//(y, x) array starts at 0
  45:.\main.c      **** uint32_t destination[2] = {14, 18};//(y, x) DON'T HARDCODE THIS
  46:.\main.c      **** 
  47:.\main.c      **** // map default
  48:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  49:.\main.c      **** //                    {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1},
  50:.\main.c      **** //                    {1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1},
  51:.\main.c      **** //                    {1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
  52:.\main.c      **** //                    {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
  53:.\main.c      **** //                    {1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
  54:.\main.c      **** //                    {1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1},
  55:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
  56:.\main.c      **** //                    {1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
  57:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
  58:.\main.c      **** //                    {1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1},
  59:.\main.c      **** //                    {1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
  60:.\main.c      **** //                    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
  61:.\main.c      **** //                    {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
  62:.\main.c      **** //                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  63:.\main.c      **** 
  64:.\main.c      **** //practice map 1
  65:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,
  66:.\main.c      **** ////practice map 2
  67:.\main.c      **** uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  68:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  69:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  70:.\main.c      ****                         {1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1},
  71:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1},
  72:.\main.c      ****                         {1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1},
  73:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1},
  74:.\main.c      ****                         {1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1},
  75:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1},
  76:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  77:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  78:.\main.c      ****                         {1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1},
  79:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  80:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  81:.\main.c      ****                         {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  82:.\main.c      **** 
  83:.\main.c      **** //practice map 3
  84:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  85:.\main.c      **** 
  86:.\main.c      **** //first number is the y coord, second is x
  87:.\main.c      **** //first number is row, second column
  88:.\main.c      **** 
  89:.\main.c      **** //uint32_t food_list[6][2]= {{4,5},{7,1},{11,5},{10,11},{5,8},{17,2}};//???
  90:.\main.c      **** //uint32_t food_list[6][2] = {{5, 9},{5,3}, {13, 2}}; //???
  91:.\main.c      **** //uint32_t food_list[6][2] ={ //default
  92:.\main.c      **** //{5, 7},
  93:.\main.c      **** //{5, 17},
  94:.\main.c      **** //{12, 13},
  95:.\main.c      **** //{5, 17},
  96:.\main.c      **** //{9, 3}
  97:.\main.c      **** //};
  98:.\main.c      **** //uint32_t food_list[6][2]= {{1,10},{1,17},{13,16},{7,9},{13,1}}; //practice map 1
  99:.\main.c      **** //practice map 2
 100:.\main.c      **** uint32_t food_list[6][2]= {{3,6},{5,10},{13,9},{13,16},{1,17}};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 15


 101:.\main.c      **** 
 102:.\main.c      **** //practice map 3
 103:.\main.c      **** //uint32_t food_list[6][2]= {{16,11},{3,12},{3,5},{9,7},{5,9}};
 104:.\main.c      **** 
 105:.\main.c      **** uint32_t food_length = 5;
 106:.\main.c      **** 
 107:.\main.c      **** void changeToRF();
 108:.\main.c      **** void changeToBT();
 109:.\main.c      **** void brakeMotor();
 110:.\main.c      **** void driveForwards();
 111:.\main.c      **** void initTurnLeft();
 112:.\main.c      **** void initTurnRight();
 113:.\main.c      **** void inittrackLineZ();
 114:.\main.c      **** void trackLineU();
 115:.\main.c      **** void trackLine();
 116:.\main.c      **** void trackLineZ();
 117:.\main.c      **** void initTrackU();
 118:.\main.c      **** void turnLeft();
 119:.\main.c      **** void turnRight();
 120:.\main.c      **** void initForward();
 121:.\main.c      **** void initTurnU();
 122:.\main.c      **** void turnU();
 123:.\main.c      **** void initBrake();
 124:.\main.c      **** void print_ADC();
 125:.\main.c      **** void Quad_Dec_response();
 126:.\main.c      **** void handle_rx_binary();
 127:.\main.c      **** void readFrontSensors();
 128:.\main.c      **** void print_RF();
 129:.\main.c      **** 
 130:.\main.c      **** /*--------------------------------------------ISRs-----------------------------------------------*/
 131:.\main.c      **** //BT
 132:.\main.c      **** CY_ISR(BT_txInt)
 133:.\main.c      **** {
 684              		.loc 1 133 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689 0000 80B4     		push	{r7}
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 00AF     		add	r7, sp, #0
 693              		.cfi_def_cfa_register 7
 134:.\main.c      ****     
 135:.\main.c      **** }
 694              		.loc 1 135 0
 695 0004 BD46     		mov	sp, r7
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 0006 5DF8047B 		ldr	r7, [sp], #4
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 000a 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE63:
 704              		.size	BT_txInt, .-BT_txInt
 705              		.section	.text.adc_isr,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 16


 706              		.align	2
 707              		.global	adc_isr
 708              		.thumb
 709              		.thumb_func
 710              		.type	adc_isr, %function
 711              	adc_isr:
 712              	.LFB64:
 136:.\main.c      **** 
 137:.\main.c      **** //ADC:
 138:.\main.c      **** CY_ISR (adc_isr)
 139:.\main.c      **** {
 713              		.loc 1 139 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 140:.\main.c      ****     //adc_result = ADC_GetResult16(0);
 141:.\main.c      ****     adc_result = ADC_GetResult16();
 723              		.loc 1 141 0
 724 0004 FFF7FEFF 		bl	ADC_GetResult16
 725 0008 0346     		mov	r3, r0
 726 000a 1A46     		mov	r2, r3
 727 000c 044B     		ldr	r3, .L3
 728 000e 1A80     		strh	r2, [r3]	@ movhi
 142:.\main.c      ****     flag_receive_ADC = 1;
 729              		.loc 1 142 0
 730 0010 044B     		ldr	r3, .L3+4
 731 0012 0122     		movs	r2, #1
 732 0014 1A70     		strb	r2, [r3]
 143:.\main.c      ****     flag_print_rf = 1;
 733              		.loc 1 143 0
 734 0016 044B     		ldr	r3, .L3+8
 735 0018 0122     		movs	r2, #1
 736 001a 1A70     		strb	r2, [r3]
 144:.\main.c      ****     //LED_Write(~LED_Read());
 145:.\main.c      **** }
 737              		.loc 1 145 0
 738 001c 80BD     		pop	{r7, pc}
 739              	.L4:
 740 001e 00BF     		.align	2
 741              	.L3:
 742 0020 00000000 		.word	adc_result
 743 0024 00000000 		.word	flag_receive_ADC
 744 0028 00000000 		.word	flag_print_rf
 745              		.cfi_endproc
 746              	.LFE64:
 747              		.size	adc_isr, .-adc_isr
 748              		.global	__aeabi_i2d
 749              		.global	__aeabi_dsub
 750              		.global	__aeabi_dcmpge
 751              		.global	__aeabi_dadd
 752              		.section	.text.isr_quad1,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 17


 753              		.align	2
 754              		.global	isr_quad1
 755              		.thumb
 756              		.thumb_func
 757              		.type	isr_quad1, %function
 758              	isr_quad1:
 759              	.LFB65:
 146:.\main.c      **** 
 147:.\main.c      **** CY_ISR (isr_quad1)
 148:.\main.c      **** {
 760              		.loc 1 148 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 0000 B0B5     		push	{r4, r5, r7, lr}
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 4, -16
 767              		.cfi_offset 5, -12
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 149:.\main.c      ****     
 150:.\main.c      ****     //LED_Write(~LED_Read());
 151:.\main.c      ****     last_quad_count1 = quad_count1;
 772              		.loc 1 151 0
 773 0004 594B     		ldr	r3, .L12
 774 0006 1A88     		ldrh	r2, [r3]
 775 0008 594B     		ldr	r3, .L12+4
 776 000a 1A80     		strh	r2, [r3]	@ movhi
 152:.\main.c      ****     last_quad_count2 = quad_count2;
 777              		.loc 1 152 0
 778 000c 594B     		ldr	r3, .L12+8
 779 000e 1A88     		ldrh	r2, [r3]
 780 0010 594B     		ldr	r3, .L12+12
 781 0012 1A80     		strh	r2, [r3]	@ movhi
 153:.\main.c      ****     quad_count1 = QuadDec_M1_GetCounter();
 782              		.loc 1 153 0
 783 0014 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 784 0018 0346     		mov	r3, r0
 785 001a 1A46     		mov	r2, r3
 786 001c 534B     		ldr	r3, .L12
 787 001e 1A80     		strh	r2, [r3]	@ movhi
 154:.\main.c      ****     quad_count2 = QuadDec_M2_GetCounter();
 788              		.loc 1 154 0
 789 0020 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 790 0024 0346     		mov	r3, r0
 791 0026 1A46     		mov	r2, r3
 792 0028 524B     		ldr	r3, .L12+8
 793 002a 1A80     		strh	r2, [r3]	@ movhi
 155:.\main.c      ****     quad_diff1 = quad_count1 - last_quad_count1;
 794              		.loc 1 155 0
 795 002c 4F4B     		ldr	r3, .L12
 796 002e 1B88     		ldrh	r3, [r3]
 797 0030 9AB2     		uxth	r2, r3
 798 0032 4F4B     		ldr	r3, .L12+4
 799 0034 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 18


 800 0036 9BB2     		uxth	r3, r3
 801 0038 D31A     		subs	r3, r2, r3
 802 003a 9BB2     		uxth	r3, r3
 803 003c 9AB2     		uxth	r2, r3
 804 003e 4F4B     		ldr	r3, .L12+16
 805 0040 1A80     		strh	r2, [r3]	@ movhi
 156:.\main.c      ****     quad_diff2 = quad_count2 - last_quad_count2;
 806              		.loc 1 156 0
 807 0042 4C4B     		ldr	r3, .L12+8
 808 0044 1B88     		ldrh	r3, [r3]
 809 0046 9AB2     		uxth	r2, r3
 810 0048 4B4B     		ldr	r3, .L12+12
 811 004a 1B88     		ldrh	r3, [r3]
 812 004c 9BB2     		uxth	r3, r3
 813 004e D31A     		subs	r3, r2, r3
 814 0050 9BB2     		uxth	r3, r3
 815 0052 9AB2     		uxth	r2, r3
 816 0054 4A4B     		ldr	r3, .L12+20
 817 0056 1A80     		strh	r2, [r3]	@ movhi
 157:.\main.c      ****     
 158:.\main.c      ****     if(abs(quad_count1) > 3000 && movement_state != LTURN && movement_state != RTURN && movement_st
 818              		.loc 1 158 0
 819 0058 444B     		ldr	r3, .L12
 820 005a 1B88     		ldrh	r3, [r3]
 821 005c 1BB2     		sxth	r3, r3
 822 005e 002B     		cmp	r3, #0
 823 0060 B8BF     		it	lt
 824 0062 5B42     		rsblt	r3, r3, #0
 825 0064 40F6B832 		movw	r2, #3000
 826 0068 9342     		cmp	r3, r2
 827 006a 17DD     		ble	.L6
 828              		.loc 1 158 0 is_stmt 0 discriminator 1
 829 006c 454B     		ldr	r3, .L12+24
 830 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 831 0070 012B     		cmp	r3, #1
 832 0072 13D0     		beq	.L6
 833              		.loc 1 158 0 discriminator 2
 834 0074 434B     		ldr	r3, .L12+24
 835 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 836 0078 022B     		cmp	r3, #2
 837 007a 0FD0     		beq	.L6
 838              		.loc 1 158 0 discriminator 3
 839 007c 414B     		ldr	r3, .L12+24
 840 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0080 072B     		cmp	r3, #7
 842 0082 0BD0     		beq	.L6
 159:.\main.c      ****     {
 160:.\main.c      ****         QuadDec_M1_SetCounter(0);
 843              		.loc 1 160 0 is_stmt 1
 844 0084 0020     		movs	r0, #0
 845 0086 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 161:.\main.c      ****         QuadDec_M2_SetCounter(0);
 846              		.loc 1 161 0
 847 008a 0020     		movs	r0, #0
 848 008c FFF7FEFF 		bl	QuadDec_M2_SetCounter
 162:.\main.c      ****         quad_count1 = 0;
 849              		.loc 1 162 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 19


 850 0090 364B     		ldr	r3, .L12
 851 0092 0022     		movs	r2, #0
 852 0094 1A80     		strh	r2, [r3]	@ movhi
 163:.\main.c      ****         quad_count2 = 0;
 853              		.loc 1 163 0
 854 0096 374B     		ldr	r3, .L12+8
 855 0098 0022     		movs	r2, #0
 856 009a 1A80     		strh	r2, [r3]	@ movhi
 857              	.L6:
 164:.\main.c      ****     }
 165:.\main.c      **** 
 166:.\main.c      ****     flag_calc_wheelspeed = 1;
 858              		.loc 1 166 0
 859 009c 3A4B     		ldr	r3, .L12+28
 860 009e 0122     		movs	r2, #1
 861 00a0 1A70     		strb	r2, [r3]
 167:.\main.c      ****     
 168:.\main.c      ****     
 169:.\main.c      ****     if(track_mode == DEST_TEST && movement_state == TRACKING_SOFT)
 862              		.loc 1 169 0
 863 00a2 3A4B     		ldr	r3, .L12+32
 864 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 00a6 062B     		cmp	r3, #6
 866 00a8 5ED1     		bne	.L5
 867              		.loc 1 169 0 is_stmt 0 discriminator 1
 868 00aa 364B     		ldr	r3, .L12+24
 869 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 00ae 062B     		cmp	r3, #6
 871 00b0 5AD1     		bne	.L5
 170:.\main.c      ****     {
 171:.\main.c      ****         //track the distance
 172:.\main.c      ****         accum_dist += quad_diff1;
 872              		.loc 1 172 0 is_stmt 1
 873 00b2 374B     		ldr	r3, .L12+36
 874 00b4 1B88     		ldrh	r3, [r3]
 875 00b6 9AB2     		uxth	r2, r3
 876 00b8 304B     		ldr	r3, .L12+16
 877 00ba 1B88     		ldrh	r3, [r3]
 878 00bc 9BB2     		uxth	r3, r3
 879 00be 1344     		add	r3, r3, r2
 880 00c0 9BB2     		uxth	r3, r3
 881 00c2 9AB2     		uxth	r2, r3
 882 00c4 324B     		ldr	r3, .L12+36
 883 00c6 1A80     		strh	r2, [r3]	@ movhi
 173:.\main.c      ****         if(abs(accum_dist) >= (target_distance_quad - QUAD_PER_UNIT*0.5))
 884              		.loc 1 173 0
 885 00c8 314B     		ldr	r3, .L12+36
 886 00ca 1B88     		ldrh	r3, [r3]
 887 00cc 1BB2     		sxth	r3, r3
 888 00ce 002B     		cmp	r3, #0
 889 00d0 B8BF     		it	lt
 890 00d2 5B42     		rsblt	r3, r3, #0
 891 00d4 1846     		mov	r0, r3
 892 00d6 FFF7FEFF 		bl	__aeabi_i2d
 893 00da 0446     		mov	r4, r0
 894 00dc 0D46     		mov	r5, r1
 895 00de 2D4B     		ldr	r3, .L12+40
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 20


 896 00e0 1B88     		ldrh	r3, [r3]
 897 00e2 1BB2     		sxth	r3, r3
 898 00e4 1846     		mov	r0, r3
 899 00e6 FFF7FEFF 		bl	__aeabi_i2d
 900 00ea 0246     		mov	r2, r0
 901 00ec 0B46     		mov	r3, r1
 902 00ee 1046     		mov	r0, r2
 903 00f0 1946     		mov	r1, r3
 904 00f2 4FF00002 		mov	r2, #0
 905 00f6 284B     		ldr	r3, .L12+44
 906 00f8 FFF7FEFF 		bl	__aeabi_dsub
 907 00fc 0246     		mov	r2, r0
 908 00fe 0B46     		mov	r3, r1
 909 0100 2046     		mov	r0, r4
 910 0102 2946     		mov	r1, r5
 911 0104 FFF7FEFF 		bl	__aeabi_dcmpge
 912 0108 0346     		mov	r3, r0
 913 010a 002B     		cmp	r3, #0
 914 010c 02D0     		beq	.L8
 174:.\main.c      ****         {
 175:.\main.c      ****             reached_target = 1;
 915              		.loc 1 175 0
 916 010e 234B     		ldr	r3, .L12+48
 917 0110 0122     		movs	r2, #1
 918 0112 1A70     		strb	r2, [r3]
 919              	.L8:
 176:.\main.c      ****         }
 177:.\main.c      ****         if((abs(accum_dist) >= (target_distance_quad + QUAD_PER_UNIT * 0.5)) || target_distance_qua
 920              		.loc 1 177 0
 921 0114 1E4B     		ldr	r3, .L12+36
 922 0116 1B88     		ldrh	r3, [r3]
 923 0118 1BB2     		sxth	r3, r3
 924 011a 002B     		cmp	r3, #0
 925 011c B8BF     		it	lt
 926 011e 5B42     		rsblt	r3, r3, #0
 927 0120 1846     		mov	r0, r3
 928 0122 FFF7FEFF 		bl	__aeabi_i2d
 929 0126 0446     		mov	r4, r0
 930 0128 0D46     		mov	r5, r1
 931 012a 1A4B     		ldr	r3, .L12+40
 932 012c 1B88     		ldrh	r3, [r3]
 933 012e 1BB2     		sxth	r3, r3
 934 0130 1846     		mov	r0, r3
 935 0132 FFF7FEFF 		bl	__aeabi_i2d
 936 0136 0246     		mov	r2, r0
 937 0138 0B46     		mov	r3, r1
 938 013a 1046     		mov	r0, r2
 939 013c 1946     		mov	r1, r3
 940 013e 4FF00002 		mov	r2, #0
 941 0142 154B     		ldr	r3, .L12+44
 942 0144 FFF7FEFF 		bl	__aeabi_dadd
 943 0148 0246     		mov	r2, r0
 944 014a 0B46     		mov	r3, r1
 945 014c 2046     		mov	r0, r4
 946 014e 2946     		mov	r1, r5
 947 0150 FFF7FEFF 		bl	__aeabi_dcmpge
 948 0154 0346     		mov	r3, r0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 21


 949 0156 002B     		cmp	r3, #0
 950 0158 03D1     		bne	.L10
 951              		.loc 1 177 0 is_stmt 0 discriminator 1
 952 015a 0E4B     		ldr	r3, .L12+40
 953 015c 1B88     		ldrh	r3, [r3]
 954 015e 002B     		cmp	r3, #0
 955 0160 02D1     		bne	.L5
 956              	.L10:
 178:.\main.c      ****         {
 179:.\main.c      ****             overshot_target = 1;
 957              		.loc 1 179 0 is_stmt 1
 958 0162 0F4B     		ldr	r3, .L12+52
 959 0164 0122     		movs	r2, #1
 960 0166 1A70     		strb	r2, [r3]
 961              	.L5:
 180:.\main.c      ****         }
 181:.\main.c      ****     }
 182:.\main.c      **** }
 962              		.loc 1 182 0
 963 0168 B0BD     		pop	{r4, r5, r7, pc}
 964              	.L13:
 965 016a 00BF     		.align	2
 966              	.L12:
 967 016c 00000000 		.word	quad_count1
 968 0170 00000000 		.word	last_quad_count1
 969 0174 00000000 		.word	quad_count2
 970 0178 00000000 		.word	last_quad_count2
 971 017c 00000000 		.word	quad_diff1
 972 0180 00000000 		.word	quad_diff2
 973 0184 00000000 		.word	movement_state
 974 0188 00000000 		.word	flag_calc_wheelspeed
 975 018c 00000000 		.word	track_mode
 976 0190 00000000 		.word	accum_dist
 977 0194 00000000 		.word	target_distance_quad
 978 0198 00005240 		.word	1079115776
 979 019c 00000000 		.word	reached_target
 980 01a0 00000000 		.word	overshot_target
 981              		.cfi_endproc
 982              	.LFE65:
 983              		.size	isr_quad1, .-isr_quad1
 984              		.section	.text.isr_turn_timer,"ax",%progbits
 985              		.align	2
 986              		.global	isr_turn_timer
 987              		.thumb
 988              		.thumb_func
 989              		.type	isr_turn_timer, %function
 990              	isr_turn_timer:
 991              	.LFB66:
 183:.\main.c      **** 
 184:.\main.c      **** CY_ISR(isr_turn_timer)
 185:.\main.c      **** {
 992              		.loc 1 185 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 1, uses_anonymous_args = 0
 996 0000 80B5     		push	{r7, lr}
 997              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 22


 998              		.cfi_offset 7, -8
 999              		.cfi_offset 14, -4
 1000 0002 82B0     		sub	sp, sp, #8
 1001              		.cfi_def_cfa_offset 16
 1002 0004 00AF     		add	r7, sp, #0
 1003              		.cfi_def_cfa_register 7
 186:.\main.c      ****     if(movement_state == LTURN)
 1004              		.loc 1 186 0
 1005 0006 464B     		ldr	r3, .L22
 1006 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1007 000a 012B     		cmp	r3, #1
 1008 000c 33D1     		bne	.L15
 1009              	.LBB2:
 187:.\main.c      ****     {
 188:.\main.c      ****         uint16 distTurned = (abs(QuadDec_M2_GetCounter() - start_turn_count) % 832);
 1010              		.loc 1 188 0
 1011 000e FFF7FEFF 		bl	QuadDec_M2_GetCounter
 1012 0012 0346     		mov	r3, r0
 1013 0014 1A46     		mov	r2, r3
 1014 0016 434B     		ldr	r3, .L22+4
 1015 0018 1B88     		ldrh	r3, [r3]
 1016 001a 1BB2     		sxth	r3, r3
 1017 001c D31A     		subs	r3, r2, r3
 1018 001e 002B     		cmp	r3, #0
 1019 0020 B8BF     		it	lt
 1020 0022 5B42     		rsblt	r3, r3, #0
 1021 0024 404A     		ldr	r2, .L22+8
 1022 0026 82FB0312 		smull	r1, r2, r2, r3
 1023 002a 1112     		asrs	r1, r2, #8
 1024 002c DA17     		asrs	r2, r3, #31
 1025 002e 8A1A     		subs	r2, r1, r2
 1026 0030 4FF45071 		mov	r1, #832
 1027 0034 01FB02F2 		mul	r2, r1, r2
 1028 0038 9A1A     		subs	r2, r3, r2
 1029 003a 1346     		mov	r3, r2	@ movhi
 1030 003c FB80     		strh	r3, [r7, #6]	@ movhi
 189:.\main.c      ****   
 190:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1031              		.loc 1 190 0
 1032 003e FB88     		ldrh	r3, [r7, #6]
 1033 0040 B82B     		cmp	r3, #184
 1034 0042 17D9     		bls	.L16
 1035              		.loc 1 190 0 is_stmt 0 discriminator 1
 1036 0044 FB88     		ldrh	r3, [r7, #6]
 1037 0046 E02B     		cmp	r3, #224
 1038 0048 14D8     		bhi	.L16
 1039              		.loc 1 190 0 discriminator 2
 1040 004a 384B     		ldr	r3, .L22+12
 1041 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1042 004e 012B     		cmp	r3, #1
 1043 0050 07D0     		beq	.L17
 1044              		.loc 1 190 0 discriminator 3
 1045 0052 364B     		ldr	r3, .L22+12
 1046 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1047 0056 012B     		cmp	r3, #1
 1048 0058 03D0     		beq	.L17
 1049              		.loc 1 190 0 discriminator 4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 23


 1050 005a 344B     		ldr	r3, .L22+12
 1051 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1052 005e 012B     		cmp	r3, #1
 1053 0060 08D1     		bne	.L16
 1054              	.L17:
 191:.\main.c      ****         {
 192:.\main.c      ****             //movement_state = STOPPED;
 193:.\main.c      ****             brakeMotor();
 1055              		.loc 1 193 0 is_stmt 1
 1056 0062 FFF7FEFF 		bl	brakeMotor
 194:.\main.c      ****             movement_state = prev_movement_state;
 1057              		.loc 1 194 0
 1058 0066 324B     		ldr	r3, .L22+16
 1059 0068 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1060 006a 2D4B     		ldr	r3, .L22
 1061 006c 1A70     		strb	r2, [r3]
 195:.\main.c      ****             Timer_2_Stop();
 1062              		.loc 1 195 0
 1063 006e FFF7FEFF 		bl	Timer_2_Stop
 1064              	.LBE2:
 1065 0072 51E0     		b	.L14
 1066              	.L16:
 1067 0074 50E0     		b	.L14
 1068              	.L15:
 196:.\main.c      ****         }
 197:.\main.c      ****     }
 198:.\main.c      ****     else if (movement_state == RTURN)
 1069              		.loc 1 198 0
 1070 0076 2A4B     		ldr	r3, .L22
 1071 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 007a 022B     		cmp	r3, #2
 1073 007c 33D1     		bne	.L19
 1074              	.LBB3:
 199:.\main.c      ****     {
 200:.\main.c      ****         uint16 distTurned = abs(QuadDec_M1_GetCounter() - start_turn_count) % 832;
 1075              		.loc 1 200 0
 1076 007e FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1077 0082 0346     		mov	r3, r0
 1078 0084 1A46     		mov	r2, r3
 1079 0086 274B     		ldr	r3, .L22+4
 1080 0088 1B88     		ldrh	r3, [r3]
 1081 008a 1BB2     		sxth	r3, r3
 1082 008c D31A     		subs	r3, r2, r3
 1083 008e 002B     		cmp	r3, #0
 1084 0090 B8BF     		it	lt
 1085 0092 5B42     		rsblt	r3, r3, #0
 1086 0094 244A     		ldr	r2, .L22+8
 1087 0096 82FB0312 		smull	r1, r2, r2, r3
 1088 009a 1112     		asrs	r1, r2, #8
 1089 009c DA17     		asrs	r2, r3, #31
 1090 009e 8A1A     		subs	r2, r1, r2
 1091 00a0 4FF45071 		mov	r1, #832
 1092 00a4 01FB02F2 		mul	r2, r1, r2
 1093 00a8 9A1A     		subs	r2, r3, r2
 1094 00aa 1346     		mov	r3, r2	@ movhi
 1095 00ac BB80     		strh	r3, [r7, #4]	@ movhi
 201:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 24


 1096              		.loc 1 201 0
 1097 00ae BB88     		ldrh	r3, [r7, #4]
 1098 00b0 B82B     		cmp	r3, #184
 1099 00b2 17D9     		bls	.L20
 1100              		.loc 1 201 0 is_stmt 0 discriminator 1
 1101 00b4 BB88     		ldrh	r3, [r7, #4]
 1102 00b6 E02B     		cmp	r3, #224
 1103 00b8 14D8     		bhi	.L20
 1104              		.loc 1 201 0 discriminator 2
 1105 00ba 1C4B     		ldr	r3, .L22+12
 1106 00bc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1107 00be 012B     		cmp	r3, #1
 1108 00c0 07D0     		beq	.L21
 1109              		.loc 1 201 0 discriminator 3
 1110 00c2 1A4B     		ldr	r3, .L22+12
 1111 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1112 00c6 012B     		cmp	r3, #1
 1113 00c8 03D0     		beq	.L21
 1114              		.loc 1 201 0 discriminator 4
 1115 00ca 184B     		ldr	r3, .L22+12
 1116 00cc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1117 00ce 012B     		cmp	r3, #1
 1118 00d0 08D1     		bne	.L20
 1119              	.L21:
 202:.\main.c      ****         {
 203:.\main.c      ****             //movement_state = STOPPED;
 204:.\main.c      ****             brakeMotor();
 1120              		.loc 1 204 0 is_stmt 1
 1121 00d2 FFF7FEFF 		bl	brakeMotor
 205:.\main.c      ****             movement_state = prev_movement_state;
 1122              		.loc 1 205 0
 1123 00d6 164B     		ldr	r3, .L22+16
 1124 00d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1125 00da 114B     		ldr	r3, .L22
 1126 00dc 1A70     		strb	r2, [r3]
 206:.\main.c      ****             Timer_2_Stop();
 1127              		.loc 1 206 0
 1128 00de FFF7FEFF 		bl	Timer_2_Stop
 1129              	.LBE3:
 1130 00e2 19E0     		b	.L14
 1131              	.L20:
 1132 00e4 18E0     		b	.L14
 1133              	.L19:
 207:.\main.c      ****         }
 208:.\main.c      ****     }
 209:.\main.c      ****     else if (movement_state == UTURN)
 1134              		.loc 1 209 0
 1135 00e6 0E4B     		ldr	r3, .L22
 1136 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1137 00ea 072B     		cmp	r3, #7
 1138 00ec 14D1     		bne	.L14
 210:.\main.c      ****     {
 211:.\main.c      ****         if(abs(QuadDec_M1_GetCounter() - start_turn_count) >= 208)
 1139              		.loc 1 211 0
 1140 00ee FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1141 00f2 0346     		mov	r3, r0
 1142 00f4 1A46     		mov	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 25


 1143 00f6 0B4B     		ldr	r3, .L22+4
 1144 00f8 1B88     		ldrh	r3, [r3]
 1145 00fa 1BB2     		sxth	r3, r3
 1146 00fc D31A     		subs	r3, r2, r3
 1147 00fe 002B     		cmp	r3, #0
 1148 0100 B8BF     		it	lt
 1149 0102 5B42     		rsblt	r3, r3, #0
 1150 0104 CF2B     		cmp	r3, #207
 1151 0106 07DD     		ble	.L14
 212:.\main.c      ****         {
 213:.\main.c      ****             //movement_state = STOPPED;
 214:.\main.c      ****             brakeMotor();
 1152              		.loc 1 214 0
 1153 0108 FFF7FEFF 		bl	brakeMotor
 215:.\main.c      ****             movement_state = prev_movement_state;
 1154              		.loc 1 215 0
 1155 010c 084B     		ldr	r3, .L22+16
 1156 010e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1157 0110 034B     		ldr	r3, .L22
 1158 0112 1A70     		strb	r2, [r3]
 216:.\main.c      ****             Timer_2_Stop();
 1159              		.loc 1 216 0
 1160 0114 FFF7FEFF 		bl	Timer_2_Stop
 1161              	.L14:
 217:.\main.c      ****         }
 218:.\main.c      ****     }
 219:.\main.c      **** }
 1162              		.loc 1 219 0
 1163 0118 0837     		adds	r7, r7, #8
 1164              		.cfi_def_cfa_offset 8
 1165 011a BD46     		mov	sp, r7
 1166              		.cfi_def_cfa_register 13
 1167              		@ sp needed
 1168 011c 80BD     		pop	{r7, pc}
 1169              	.L23:
 1170 011e 00BF     		.align	2
 1171              	.L22:
 1172 0120 00000000 		.word	movement_state
 1173 0124 00000000 		.word	start_turn_count
 1174 0128 4FECC44E 		.word	1321528399
 1175 012c 00000000 		.word	frontSensors
 1176 0130 00000000 		.word	prev_movement_state
 1177              		.cfi_endproc
 1178              	.LFE66:
 1179              		.size	isr_turn_timer, .-isr_turn_timer
 1180              		.section	.text.Stop_on_line,"ax",%progbits
 1181              		.align	2
 1182              		.global	Stop_on_line
 1183              		.thumb
 1184              		.thumb_func
 1185              		.type	Stop_on_line, %function
 1186              	Stop_on_line:
 1187              	.LFB67:
 220:.\main.c      **** 
 221:.\main.c      **** 
 222:.\main.c      **** CY_ISR (Stop_on_line)
 223:.\main.c      **** {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 26


 1188              		.loc 1 223 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 1, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193 0000 80B4     		push	{r7}
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 7, -4
 1196 0002 00AF     		add	r7, sp, #0
 1197              		.cfi_def_cfa_register 7
 224:.\main.c      ****     movement_state = STOPPED;
 1198              		.loc 1 224 0
 1199 0004 054B     		ldr	r3, .L26
 1200 0006 0322     		movs	r2, #3
 1201 0008 1A70     		strb	r2, [r3]
 225:.\main.c      ****     if(movement_state != DRIVE) return;
 1202              		.loc 1 225 0
 1203 000a 044B     		ldr	r3, .L26
 1204 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1205 000e 002B     		cmp	r3, #0
 1206 0010 00D0     		beq	.L24
 1207 0012 00BF     		nop
 1208              	.L24:
 226:.\main.c      ****     //initTurnLeft();
 227:.\main.c      **** }
 1209              		.loc 1 227 0
 1210 0014 BD46     		mov	sp, r7
 1211              		.cfi_def_cfa_register 13
 1212              		@ sp needed
 1213 0016 5DF8047B 		ldr	r7, [sp], #4
 1214              		.cfi_restore 7
 1215              		.cfi_def_cfa_offset 0
 1216 001a 7047     		bx	lr
 1217              	.L27:
 1218              		.align	2
 1219              	.L26:
 1220 001c 00000000 		.word	movement_state
 1221              		.cfi_endproc
 1222              	.LFE67:
 1223              		.size	Stop_on_line, .-Stop_on_line
 1224              		.section	.rodata
 1225              		.align	2
 1226              	.LC0:
 1227 0000 53746172 		.ascii	"Starting robot!\015\012\000"
 1227      74696E67 
 1227      20726F62 
 1227      6F74210D 
 1227      0A00
 1228              		.section	.text.button,"ax",%progbits
 1229              		.align	2
 1230              		.global	button
 1231              		.thumb
 1232              		.thumb_func
 1233              		.type	button, %function
 1234              	button:
 1235              	.LFB68:
 228:.\main.c      **** 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 27


 229:.\main.c      **** CY_ISR (button)
 230:.\main.c      **** {
 1236              		.loc 1 230 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240 0000 80B5     		push	{r7, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 7, -8
 1243              		.cfi_offset 14, -4
 1244 0002 00AF     		add	r7, sp, #0
 1245              		.cfi_def_cfa_register 7
 231:.\main.c      ****     if(BT_ENABLED)
 1246              		.loc 1 231 0
 1247 0004 054B     		ldr	r3, .L30
 1248 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1249 0008 002B     		cmp	r3, #0
 1250 000a 02D0     		beq	.L29
 232:.\main.c      ****     {
 233:.\main.c      ****         UART_PutString("Starting robot!\r\n");
 1251              		.loc 1 233 0
 1252 000c 0448     		ldr	r0, .L30+4
 1253 000e FFF7FEFF 		bl	UART_PutString
 1254              	.L29:
 234:.\main.c      ****     }
 235:.\main.c      ****     movement_state = DRIVE;
 1255              		.loc 1 235 0
 1256 0012 044B     		ldr	r3, .L30+8
 1257 0014 0022     		movs	r2, #0
 1258 0016 1A70     		strb	r2, [r3]
 236:.\main.c      **** }
 1259              		.loc 1 236 0
 1260 0018 80BD     		pop	{r7, pc}
 1261              	.L31:
 1262 001a 00BF     		.align	2
 1263              	.L30:
 1264 001c 00000000 		.word	BT_ENABLED
 1265 0020 00000000 		.word	.LC0
 1266 0024 00000000 		.word	movement_state
 1267              		.cfi_endproc
 1268              	.LFE68:
 1269              		.size	button, .-button
 1270              		.section	.text.isr_adcTimer,"ax",%progbits
 1271              		.align	2
 1272              		.global	isr_adcTimer
 1273              		.thumb
 1274              		.thumb_func
 1275              		.type	isr_adcTimer, %function
 1276              	isr_adcTimer:
 1277              	.LFB69:
 237:.\main.c      **** 
 238:.\main.c      **** CY_ISR(isr_adcTimer)
 239:.\main.c      **** {
 1278              		.loc 1 239 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 28


 1282 0000 80B5     		push	{r7, lr}
 1283              		.cfi_def_cfa_offset 8
 1284              		.cfi_offset 7, -8
 1285              		.cfi_offset 14, -4
 1286 0002 00AF     		add	r7, sp, #0
 1287              		.cfi_def_cfa_register 7
 240:.\main.c      ****     ADC_StartConvert();
 1288              		.loc 1 240 0
 1289 0004 FFF7FEFF 		bl	ADC_StartConvert
 241:.\main.c      **** }
 1290              		.loc 1 241 0
 1291 0008 80BD     		pop	{r7, pc}
 1292              		.cfi_endproc
 1293              	.LFE69:
 1294              		.size	isr_adcTimer, .-isr_adcTimer
 1295 000a 00BF     		.section	.rodata
 1296 0012 0000     		.align	2
 1297              	.LC1:
 1298 0014 44656164 		.ascii	"Deadzone left\015\012\000"
 1298      7A6F6E65 
 1298      206C6566 
 1298      740D0A00 
 1299              		.section	.text.isr_deadzone,"ax",%progbits
 1300              		.align	2
 1301              		.global	isr_deadzone
 1302              		.thumb
 1303              		.thumb_func
 1304              		.type	isr_deadzone, %function
 1305              	isr_deadzone:
 1306              	.LFB70:
 242:.\main.c      **** 
 243:.\main.c      **** CY_ISR(isr_deadzone)
 244:.\main.c      **** {
 1307              		.loc 1 244 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311 0000 80B5     		push	{r7, lr}
 1312              		.cfi_def_cfa_offset 8
 1313              		.cfi_offset 7, -8
 1314              		.cfi_offset 14, -4
 1315 0002 00AF     		add	r7, sp, #0
 1316              		.cfi_def_cfa_register 7
 245:.\main.c      ****     sensorsDisabled = 0;
 1317              		.loc 1 245 0
 1318 0004 054B     		ldr	r3, .L34
 1319 0006 0022     		movs	r2, #0
 1320 0008 1A60     		str	r2, [r3]
 246:.\main.c      ****     deadzone = 0;
 1321              		.loc 1 246 0
 1322 000a 054B     		ldr	r3, .L34+4
 1323 000c 0022     		movs	r2, #0
 1324 000e 1A70     		strb	r2, [r3]
 247:.\main.c      ****     Timer_Deadzone_Stop();
 1325              		.loc 1 247 0
 1326 0010 FFF7FEFF 		bl	Timer_Deadzone_Stop
 248:.\main.c      ****     UART_PutString("Deadzone left\r\n");
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 29


 1327              		.loc 1 248 0
 1328 0014 0348     		ldr	r0, .L34+8
 1329 0016 FFF7FEFF 		bl	UART_PutString
 249:.\main.c      **** }
 1330              		.loc 1 249 0
 1331 001a 80BD     		pop	{r7, pc}
 1332              	.L35:
 1333              		.align	2
 1334              	.L34:
 1335 001c 00000000 		.word	sensorsDisabled
 1336 0020 00000000 		.word	deadzone
 1337 0024 14000000 		.word	.LC1
 1338              		.cfi_endproc
 1339              	.LFE70:
 1340              		.size	isr_deadzone, .-isr_deadzone
 1341              		.section	.rodata
 1342              		.align	2
 1343              	.LC2:
 1344 0024 44697374 		.ascii	"Dist travel: %d\015\012\000"
 1344      20747261 
 1344      76656C3A 
 1344      2025640D 
 1344      0A00
 1345 0036 0000     		.align	2
 1346              	.LC3:
 1347 0038 54726967 		.ascii	"Trigger intersection\015\012\000"
 1347      67657220 
 1347      696E7465 
 1347      72736563 
 1347      74696F6E 
 1348 004f 00       		.align	2
 1349              	.LC4:
 1350 0050 44656164 		.ascii	"Deadzone enter\015\012\000"
 1350      7A6F6E65 
 1350      20656E74 
 1350      65720D0A 
 1350      00
 1351 0061 000000   		.align	2
 1352              	.LC5:
 1353 0064 54617267 		.ascii	"Target dist: %d\015\012\000"
 1353      65742064 
 1353      6973743A 
 1353      2025640D 
 1353      0A00
 1354 0076 0000     		.align	2
 1355              	.LC6:
 1356 0078 696E7374 		.ascii	"instr count:%d\015\012\000"
 1356      7220636F 
 1356      756E743A 
 1356      25640D0A 
 1356      00
 1357 0089 000000   		.align	2
 1358              	.LC7:
 1359 008c 54726967 		.ascii	"Trigger white light\015\012\000"
 1359      67657220 
 1359      77686974 
 1359      65206C69 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 30


 1359      6768740D 
 1360 00a2 0000     		.align	2
 1361              	.LC8:
 1362 00a4 54726967 		.ascii	"Trigger quad\015\012\000"
 1362      67657220 
 1362      71756164 
 1362      0D0A00
 1363              		.global	__aeabi_d2iz
 1364              		.section	.text.main,"ax",%progbits
 1365              		.align	2
 1366              		.global	main
 1367              		.thumb
 1368              		.thumb_func
 1369              		.type	main, %function
 1370              	main:
 1371              	.LFB71:
 250:.\main.c      **** 
 251:.\main.c      **** /*-------------------------------------------------------------------------------------------*/
 252:.\main.c      **** 
 253:.\main.c      **** /* -----------------------------------------MAIN-----------------------------MAIN------------------
 254:.\main.c      **** int main()
 255:.\main.c      **** {  
 1372              		.loc 1 255 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 56
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376 0000 80B5     		push	{r7, lr}
 1377              		.cfi_def_cfa_offset 8
 1378              		.cfi_offset 7, -8
 1379              		.cfi_offset 14, -4
 1380 0002 8EB0     		sub	sp, sp, #56
 1381              		.cfi_def_cfa_offset 64
 1382 0004 00AF     		add	r7, sp, #0
 1383              		.cfi_def_cfa_register 7
 256:.\main.c      **** 
 257:.\main.c      **** // ----- INITIALIZATIONS ----------
 258:.\main.c      ****     CYGlobalIntEnable;
 1384              		.loc 1 258 0
 1385              	@ 258 ".\main.c" 1
 1386 0006 62B6     		CPSIE   i
 1387              	@ 0 "" 2
 259:.\main.c      ****     if(ENABLE_PWM)
 260:.\main.c      ****     {
 261:.\main.c      ****         PWM_1_Start();// starting the pwm
 1388              		.loc 1 261 0
 1389              		.thumb
 1390 0008 FFF7FEFF 		bl	PWM_1_Start
 262:.\main.c      ****         PWM_2_Start();// starting the pwm
 1391              		.loc 1 262 0
 1392 000c FFF7FEFF 		bl	PWM_2_Start
 263:.\main.c      ****     }
 264:.\main.c      ****     
 265:.\main.c      ****     if(ENABLE_ADC)
 266:.\main.c      ****     {
 267:.\main.c      ****         ADC_Start();
 268:.\main.c      ****         isr_eoc_StartEx(adc_isr);
 269:.\main.c      ****         //ADC_StartConvert();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 31


 270:.\main.c      ****         
 271:.\main.c      ****         //start the ADC timer for software trigger mode
 272:.\main.c      ****         Timer_TS_Start();
 273:.\main.c      ****         isr_TS_StartEx(isr_adcTimer);
 274:.\main.c      ****     }
 275:.\main.c      ****     
 276:.\main.c      ****     if (ENABLE_QUAD)
 277:.\main.c      ****     {
 278:.\main.c      ****         QuadDec_M1_Start();
 1393              		.loc 1 278 0
 1394 0010 FFF7FEFF 		bl	QuadDec_M1_Start
 279:.\main.c      ****         QuadDec_M2_Start();
 1395              		.loc 1 279 0
 1396 0014 FFF7FEFF 		bl	QuadDec_M2_Start
 280:.\main.c      ****         
 281:.\main.c      ****         isr_quad1_StartEx(isr_quad1);
 1397              		.loc 1 281 0
 1398 0018 B148     		ldr	r0, .L103
 1399 001a FFF7FEFF 		bl	isr_quad1_StartEx
 282:.\main.c      ****         isr_turn_count_StartEx(isr_turn_timer);
 1400              		.loc 1 282 0
 1401 001e B148     		ldr	r0, .L103+4
 1402 0020 FFF7FEFF 		bl	isr_turn_count_StartEx
 283:.\main.c      ****         
 284:.\main.c      ****         Timer_1_Start();
 1403              		.loc 1 284 0
 1404 0024 FFF7FEFF 		bl	Timer_1_Start
 285:.\main.c      ****     }
 286:.\main.c      ****     
 287:.\main.c      ****     if(ENABLE_STOP){
 288:.\main.c      ****         isr_OnLine_StartEx(Stop_on_line);
 289:.\main.c      ****         
 290:.\main.c      ****     }
 291:.\main.c      ****     isr_button_StartEx(button);
 1405              		.loc 1 291 0
 1406 0028 AF48     		ldr	r0, .L103+8
 1407 002a FFF7FEFF 		bl	isr_button_StartEx
 292:.\main.c      ****     isr_action_deadzone_StartEx(isr_deadzone);
 1408              		.loc 1 292 0
 1409 002e AF48     		ldr	r0, .L103+12
 1410 0030 FFF7FEFF 		bl	isr_action_deadzone_StartEx
 293:.\main.c      **** 
 294:.\main.c      ****     // ------USB SETUP ----------------    
 295:.\main.c      ****     if (USE_USB){    
 296:.\main.c      ****         USBUART_Start(0,USBUART_5V_OPERATION);
 1411              		.loc 1 296 0
 1412 0034 0020     		movs	r0, #0
 1413 0036 0121     		movs	r1, #1
 1414 0038 FFF7FEFF 		bl	USBUART_Start
 297:.\main.c      ****         if (USBUART_GetConfiguration())
 1415              		.loc 1 297 0
 1416 003c FFF7FEFF 		bl	USBUART_GetConfiguration
 1417 0040 0346     		mov	r3, r0
 1418 0042 002B     		cmp	r3, #0
 1419 0044 01D0     		beq	.L37
 298:.\main.c      ****             {
 299:.\main.c      ****                  USBUART_CDC_Init();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 32


 1420              		.loc 1 299 0
 1421 0046 FFF7FEFF 		bl	USBUART_CDC_Init
 1422              	.L37:
 300:.\main.c      ****             }
 301:.\main.c      ****     }
 302:.\main.c      ****     
 303:.\main.c      ****     if(BIN_ENABLED){
 1423              		.loc 1 303 0
 1424 004a A94B     		ldr	r3, .L103+16
 1425 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1426 004e 002B     		cmp	r3, #0
 1427 0050 01D0     		beq	.L38
 304:.\main.c      ****         changeToRF();
 1428              		.loc 1 304 0
 1429 0052 FFF7FEFF 		bl	changeToRF
 1430              	.L38:
 305:.\main.c      ****     }
 306:.\main.c      ****     
 307:.\main.c      ****     if(BT_ENABLED){
 1431              		.loc 1 307 0
 1432 0056 A74B     		ldr	r3, .L103+20
 1433 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1434 005a 002B     		cmp	r3, #0
 1435 005c 01D0     		beq	.L39
 308:.\main.c      ****         changeToBT();
 1436              		.loc 1 308 0
 1437 005e FFF7FEFF 		bl	changeToBT
 1438              	.L39:
 309:.\main.c      ****     }
 310:.\main.c      ****     
 311:.\main.c      ****     uint16 actionDebounce = 0;
 1439              		.loc 1 311 0
 1440 0062 0023     		movs	r3, #0
 1441 0064 FB86     		strh	r3, [r7, #54]	@ movhi
 1442              	.L100:
 312:.\main.c      ****     
 313:.\main.c      ****     //usbPutString("Started");
 314:.\main.c      ****     for(;;)
 315:.\main.c      ****     {
 316:.\main.c      ****         if(ENABLE_ADC) print_ADC();
 317:.\main.c      ****         if(ENABLE_QUAD) Quad_Dec_response();
 1443              		.loc 1 317 0
 1444 0066 FFF7FEFF 		bl	Quad_Dec_response
 318:.\main.c      ****         if(BIN_ENABLED == 1)
 1445              		.loc 1 318 0
 1446 006a A14B     		ldr	r3, .L103+16
 1447 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 006e 012B     		cmp	r3, #1
 1449 0070 03D1     		bne	.L40
 319:.\main.c      ****         {
 320:.\main.c      ****             handle_rx_binary();
 1450              		.loc 1 320 0
 1451 0072 FFF7FEFF 		bl	handle_rx_binary
 321:.\main.c      ****             print_RF();
 1452              		.loc 1 321 0
 1453 0076 FFF7FEFF 		bl	print_RF
 1454              	.L40:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 33


 322:.\main.c      ****         }
 323:.\main.c      ****         // NO_TRACK, CURVE_TRACK, U_TRACK, SQUARE_TRACK
 324:.\main.c      ****        
 325:.\main.c      ****         readFrontSensors(frontSensors);
 1455              		.loc 1 325 0
 1456 007a 9F48     		ldr	r0, .L103+24
 1457 007c FFF7FEFF 		bl	readFrontSensors
 326:.\main.c      ****         
 327:.\main.c      ****         switch(track_mode)
 1458              		.loc 1 327 0
 1459 0080 9E4B     		ldr	r3, .L103+28
 1460 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1461 0084 072B     		cmp	r3, #7
 1462 0086 00F24483 		bhi	.L41
 1463 008a 01A2     		adr	r2, .L43
 1464 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1465              		.p2align 2
 1466              	.L43:
 1467 0090 13070000 		.word	.L41+1
 1468 0094 13070000 		.word	.L41+1
 1469 0098 13070000 		.word	.L41+1
 1470 009c B1000000 		.word	.L46+1
 1471 00a0 13070000 		.word	.L41+1
 1472 00a4 F5000000 		.word	.L48+1
 1473 00a8 1B010000 		.word	.L49+1
 1474 00ac 1B010000 		.word	.L49+1
 1475              		.p2align 1
 1476              	.L46:
 328:.\main.c      ****         {
 329:.\main.c      ****             case SQUARE_TRACK:
 330:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN)
 1477              		.loc 1 330 0
 1478 00b0 934B     		ldr	r3, .L103+32
 1479 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1480 00b4 012B     		cmp	r3, #1
 1481 00b6 1CD0     		beq	.L50
 1482              		.loc 1 330 0 is_stmt 0 discriminator 1
 1483 00b8 914B     		ldr	r3, .L103+32
 1484 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 00bc 022B     		cmp	r3, #2
 1486 00be 18D0     		beq	.L50
 331:.\main.c      ****                 {
 332:.\main.c      ****                     if(frontSensors[0] == 1 && frontSensors[2] == 1){ //left turn
 1487              		.loc 1 332 0 is_stmt 1
 1488 00c0 8D4B     		ldr	r3, .L103+24
 1489 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1490 00c4 012B     		cmp	r3, #1
 1491 00c6 06D1     		bne	.L51
 1492              		.loc 1 332 0 is_stmt 0 discriminator 1
 1493 00c8 8B4B     		ldr	r3, .L103+24
 1494 00ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1495 00cc 012B     		cmp	r3, #1
 1496 00ce 02D1     		bne	.L51
 333:.\main.c      ****                         initTurnLeft();
 1497              		.loc 1 333 0 is_stmt 1
 1498 00d0 FFF7FEFF 		bl	initTurnLeft
 1499 00d4 0DE0     		b	.L50
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 34


 1500              	.L51:
 334:.\main.c      ****                     }
 335:.\main.c      ****                     else if (frontSensors[4] == 1 && frontSensors[2] == 1) //right turn
 1501              		.loc 1 335 0
 1502 00d6 884B     		ldr	r3, .L103+24
 1503 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1504 00da 012B     		cmp	r3, #1
 1505 00dc 06D1     		bne	.L52
 1506              		.loc 1 335 0 is_stmt 0 discriminator 1
 1507 00de 864B     		ldr	r3, .L103+24
 1508 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1509 00e2 012B     		cmp	r3, #1
 1510 00e4 02D1     		bne	.L52
 336:.\main.c      ****                     {
 337:.\main.c      ****                         initTurnRight();
 1511              		.loc 1 337 0 is_stmt 1
 1512 00e6 FFF7FEFF 		bl	initTurnRight
 1513 00ea 02E0     		b	.L50
 1514              	.L52:
 338:.\main.c      ****                     }
 339:.\main.c      ****                     else inittrackLineZ();
 1515              		.loc 1 339 0
 1516 00ec FFF7FEFF 		bl	inittrackLineZ
 340:.\main.c      ****                 }
 341:.\main.c      ****             break;
 1517              		.loc 1 341 0
 1518 00f0 0FE3     		b	.L41
 1519              	.L50:
 1520 00f2 0EE3     		b	.L41
 1521              	.L48:
 342:.\main.c      ****             case NO_TRACK:
 343:.\main.c      ****             break;
 344:.\main.c      ****             case CURVE_TRACK:
 345:.\main.c      ****             break;
 346:.\main.c      ****             case U_TRACK:
 347:.\main.c      ****             break;
 348:.\main.c      ****             case QUAD_STOP:
 349:.\main.c      ****             break;
 350:.\main.c      ****             case RF_STOP:
 351:.\main.c      ****                 if(initial_pos_valid == 1)
 1522              		.loc 1 351 0
 1523 00f4 834B     		ldr	r3, .L103+36
 1524 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1525 00f8 012B     		cmp	r3, #1
 1526 00fa 0DD1     		bne	.L53
 352:.\main.c      ****                 {
 353:.\main.c      ****                     //changeToBT();
 354:.\main.c      ****                    // UART_PutString("Valid RF detected!");
 355:.\main.c      ****                     //changeToRF();
 356:.\main.c      ****                     initial_x_pos = system_state.robot_xpos;
 1527              		.loc 1 356 0
 1528 00fc 824B     		ldr	r3, .L103+40
 1529 00fe 5A88     		ldrh	r2, [r3, #2]
 1530 0100 824B     		ldr	r3, .L103+44
 1531 0102 1A80     		strh	r2, [r3]	@ movhi
 357:.\main.c      ****                     initial_y_pos = system_state.robot_ypos;
 1532              		.loc 1 357 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 35


 1533 0104 804B     		ldr	r3, .L103+40
 1534 0106 9A88     		ldrh	r2, [r3, #4]
 1535 0108 814B     		ldr	r3, .L103+48
 1536 010a 1A80     		strh	r2, [r3]	@ movhi
 358:.\main.c      ****                     initial_pos_valid = 2;
 1537              		.loc 1 358 0
 1538 010c 7D4B     		ldr	r3, .L103+36
 1539 010e 0222     		movs	r2, #2
 1540 0110 1A70     		strb	r2, [r3]
 359:.\main.c      ****                     initForward();
 1541              		.loc 1 359 0
 1542 0112 FFF7FEFF 		bl	initForward
 360:.\main.c      ****                 }
 361:.\main.c      ****             break;
 1543              		.loc 1 361 0
 1544 0116 FCE2     		b	.L41
 1545              	.L53:
 1546 0118 FBE2     		b	.L41
 1547              	.L49:
 362:.\main.c      ****             case MAP_TRAVERSE:
 363:.\main.c      ****             case DEST_TEST:
 364:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN && movement_state != UTURN){
 1548              		.loc 1 364 0
 1549 011a 794B     		ldr	r3, .L103+32
 1550 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1551 011e 012B     		cmp	r3, #1
 1552 0120 00F0F682 		beq	.L54
 1553              		.loc 1 364 0 is_stmt 0 discriminator 1
 1554 0124 764B     		ldr	r3, .L103+32
 1555 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1556 0128 022B     		cmp	r3, #2
 1557 012a 00F0F182 		beq	.L54
 1558              		.loc 1 364 0 discriminator 2
 1559 012e 744B     		ldr	r3, .L103+32
 1560 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1561 0132 072B     		cmp	r3, #7
 1562 0134 00F0EC82 		beq	.L54
 1563              	.LBB4:
 365:.\main.c      ****                     //when we hit an intersection, verify the next step then evaluate
 366:.\main.c      ****                     char nextStep = instructions[instructionCount];
 1564              		.loc 1 366 0 is_stmt 1
 1565 0138 764B     		ldr	r3, .L103+52
 1566 013a 1B88     		ldrh	r3, [r3]
 1567 013c 1A46     		mov	r2, r3
 1568 013e 764B     		ldr	r3, .L103+56
 1569 0140 9B5C     		ldrb	r3, [r3, r2]
 1570 0142 87F83530 		strb	r3, [r7, #53]
 367:.\main.c      **** //                    if(nextStep == 'U' && instructions[instructionCount+1] == 0)
 368:.\main.c      **** //                    {
 369:.\main.c      **** //                        instructionCount += 2;
 370:.\main.c      **** //                        nextStep = instructions[instructionCount];
 371:.\main.c      **** //                    }
 372:.\main.c      ****                     leftOn = frontSensors[0] && frontSensors[2];
 1571              		.loc 1 372 0
 1572 0146 6C4B     		ldr	r3, .L103+24
 1573 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1574 014a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 36


 1575 014c 05D0     		beq	.L55
 1576              		.loc 1 372 0 is_stmt 0 discriminator 1
 1577 014e 6A4B     		ldr	r3, .L103+24
 1578 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1579 0152 002B     		cmp	r3, #0
 1580 0154 01D0     		beq	.L55
 1581              		.loc 1 372 0 discriminator 3
 1582 0156 0123     		movs	r3, #1
 1583 0158 00E0     		b	.L56
 1584              	.L55:
 1585              		.loc 1 372 0 discriminator 4
 1586 015a 0023     		movs	r3, #0
 1587              	.L56:
 1588              		.loc 1 372 0 discriminator 6
 1589 015c DAB2     		uxtb	r2, r3
 1590 015e 6F4B     		ldr	r3, .L103+60
 1591 0160 1A70     		strb	r2, [r3]
 373:.\main.c      ****                     rightOn = frontSensors[4] && frontSensors[2];
 1592              		.loc 1 373 0 is_stmt 1 discriminator 6
 1593 0162 654B     		ldr	r3, .L103+24
 1594 0164 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1595 0166 002B     		cmp	r3, #0
 1596 0168 05D0     		beq	.L57
 1597              		.loc 1 373 0 is_stmt 0 discriminator 1
 1598 016a 634B     		ldr	r3, .L103+24
 1599 016c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1600 016e 002B     		cmp	r3, #0
 1601 0170 01D0     		beq	.L57
 1602              		.loc 1 373 0 discriminator 3
 1603 0172 0123     		movs	r3, #1
 1604 0174 00E0     		b	.L58
 1605              	.L57:
 1606              		.loc 1 373 0 discriminator 4
 1607 0176 0023     		movs	r3, #0
 1608              	.L58:
 1609              		.loc 1 373 0 discriminator 6
 1610 0178 DAB2     		uxtb	r2, r3
 1611 017a 694B     		ldr	r3, .L103+64
 1612 017c 1A70     		strb	r2, [r3]
 374:.\main.c      ****                     if((leftOn && (nextStep != 'R')) || (rightOn && (nextStep != 'L'))){ //intersec
 1613              		.loc 1 374 0 is_stmt 1 discriminator 6
 1614 017e 674B     		ldr	r3, .L103+60
 1615 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1616 0182 002B     		cmp	r3, #0
 1617 0184 03D0     		beq	.L59
 1618              		.loc 1 374 0 is_stmt 0 discriminator 1
 1619 0186 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1620 018a 522B     		cmp	r3, #82
 1621 018c 09D1     		bne	.L60
 1622              	.L59:
 1623              		.loc 1 374 0 discriminator 3
 1624 018e 644B     		ldr	r3, .L103+64
 1625 0190 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1626 0192 002B     		cmp	r3, #0
 1627 0194 00F01081 		beq	.L61
 1628              		.loc 1 374 0 discriminator 4
 1629 0198 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 37


 1630 019c 4C2B     		cmp	r3, #76
 1631 019e 00F00B81 		beq	.L61
 1632              	.L60:
 375:.\main.c      ****                         if(sensorsDisabled == 0)
 1633              		.loc 1 375 0 is_stmt 1
 1634 01a2 604B     		ldr	r3, .L103+68
 1635 01a4 1B68     		ldr	r3, [r3]
 1636 01a6 002B     		cmp	r3, #0
 1637 01a8 40F00581 		bne	.L62
 376:.\main.c      ****                         {
 377:.\main.c      ****                             actionDebounce++;
 1638              		.loc 1 377 0
 1639 01ac FB8E     		ldrh	r3, [r7, #54]
 1640 01ae 0133     		adds	r3, r3, #1
 1641 01b0 FB86     		strh	r3, [r7, #54]	@ movhi
 378:.\main.c      ****                             if(actionDebounce >= 400)
 1642              		.loc 1 378 0
 1643 01b2 FB8E     		ldrh	r3, [r7, #54]
 1644 01b4 B3F5C87F 		cmp	r3, #400
 1645 01b8 C0F0FD80 		bcc	.L62
 1646              	.LBB5:
 379:.\main.c      ****                             {
 380:.\main.c      ****                                 char mes[16];
 381:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1647              		.loc 1 381 0
 1648 01bc 5A4B     		ldr	r3, .L103+72
 1649 01be 1B88     		ldrh	r3, [r3]
 1650 01c0 1BB2     		sxth	r3, r3
 1651 01c2 07F12002 		add	r2, r7, #32
 1652 01c6 1046     		mov	r0, r2
 1653 01c8 5849     		ldr	r1, .L103+76
 1654 01ca 1A46     		mov	r2, r3
 1655 01cc FFF7FEFF 		bl	sprintf
 382:.\main.c      ****                                  UART_PutString(mes);
 1656              		.loc 1 382 0
 1657 01d0 07F12003 		add	r3, r7, #32
 1658 01d4 1846     		mov	r0, r3
 1659 01d6 FFF7FEFF 		bl	UART_PutString
 383:.\main.c      ****                             if(reached_target == 1)
 1660              		.loc 1 383 0
 1661 01da 554B     		ldr	r3, .L103+80
 1662 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1663 01de 012B     		cmp	r3, #1
 1664 01e0 40F0E980 		bne	.L62
 1665              	.LBB6:
 384:.\main.c      ****                             {
 385:.\main.c      **** //                                if(nextStep == 'D')
 386:.\main.c      **** //                                {
 387:.\main.c      **** //                                    instructionCount += 2;
 388:.\main.c      **** //                                    nextStep = instructions[instructionCount]; 
 389:.\main.c      **** //                                }
 390:.\main.c      ****                                 
 391:.\main.c      ****                                 sensorsDisabled = 1;
 1666              		.loc 1 391 0
 1667 01e4 4F4B     		ldr	r3, .L103+68
 1668 01e6 0122     		movs	r2, #1
 1669 01e8 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 38


 392:.\main.c      ****                                 UART_PutString("Trigger intersection\r\n");
 1670              		.loc 1 392 0
 1671 01ea 5248     		ldr	r0, .L103+84
 1672 01ec FFF7FEFF 		bl	UART_PutString
 393:.\main.c      ****                                 UART_PutString("Deadzone enter\r\n");
 1673              		.loc 1 393 0
 1674 01f0 5148     		ldr	r0, .L103+88
 1675 01f2 FFF7FEFF 		bl	UART_PutString
 394:.\main.c      ****                                 deadzone = 1;
 1676              		.loc 1 394 0
 1677 01f6 514B     		ldr	r3, .L103+92
 1678 01f8 0122     		movs	r2, #1
 1679 01fa 1A70     		strb	r2, [r3]
 395:.\main.c      ****                                 
 396:.\main.c      ****                                 accum_dist = 0;
 1680              		.loc 1 396 0
 1681 01fc 4A4B     		ldr	r3, .L103+72
 1682 01fe 0022     		movs	r2, #0
 1683 0200 1A80     		strh	r2, [r3]	@ movhi
 397:.\main.c      ****                                 uint8 nextStepDist;
 398:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 1684              		.loc 1 398 0
 1685 0202 444B     		ldr	r3, .L103+52
 1686 0204 1B88     		ldrh	r3, [r3]
 1687 0206 1A46     		mov	r2, r3
 1688 0208 4D4B     		ldr	r3, .L103+96
 1689 020a 1B88     		ldrh	r3, [r3]
 1690 020c 053B     		subs	r3, r3, #5
 1691 020e 9A42     		cmp	r2, r3
 1692 0210 07DC     		bgt	.L64
 1693              		.loc 1 398 0 is_stmt 0 discriminator 1
 1694 0212 404B     		ldr	r3, .L103+52
 1695 0214 1B88     		ldrh	r3, [r3]
 1696 0216 0333     		adds	r3, r3, #3
 1697 0218 3F4A     		ldr	r2, .L103+56
 1698 021a D35C     		ldrb	r3, [r2, r3]
 1699 021c 87F83430 		strb	r3, [r7, #52]
 1700 0220 02E0     		b	.L65
 1701              	.L64:
 399:.\main.c      ****                                 else nextStepDist = 0;
 1702              		.loc 1 399 0 is_stmt 1
 1703 0222 0023     		movs	r3, #0
 1704 0224 87F83430 		strb	r3, [r7, #52]
 1705              	.L65:
 400:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 1706              		.loc 1 400 0
 1707 0228 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
 1708 022c 9BB2     		uxth	r3, r3
 1709 022e 1A46     		mov	r2, r3	@ movhi
 1710 0230 D200     		lsls	r2, r2, #3
 1711 0232 1344     		add	r3, r3, r2
 1712 0234 1B01     		lsls	r3, r3, #4
 1713 0236 9BB2     		uxth	r3, r3
 1714 0238 9AB2     		uxth	r2, r3
 1715 023a 424B     		ldr	r3, .L103+100
 1716 023c 1A80     		strh	r2, [r3]	@ movhi
 401:.\main.c      ****                                 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 39


 402:.\main.c      ****                                 
 403:.\main.c      ****                                 
 404:.\main.c      ****                                 switch(nextStep)
 1717              		.loc 1 404 0
 1718 023e 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1719 0242 4C3B     		subs	r3, r3, #76
 1720 0244 092B     		cmp	r3, #9
 1721 0246 00F28180 		bhi	.L101
 1722 024a 01A2     		adr	r2, .L68
 1723 024c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1724              		.p2align 2
 1725              	.L68:
 1726 0250 87020000 		.word	.L67+1
 1727 0254 4D030000 		.word	.L101+1
 1728 0258 4D030000 		.word	.L101+1
 1729 025c 4D030000 		.word	.L101+1
 1730 0260 4D030000 		.word	.L101+1
 1731 0264 4D030000 		.word	.L101+1
 1732 0268 A5020000 		.word	.L69+1
 1733 026c 79020000 		.word	.L70+1
 1734 0270 4D030000 		.word	.L101+1
 1735 0274 C3020000 		.word	.L71+1
 1736              		.p2align 1
 1737              	.L70:
 405:.\main.c      ****                                 {
 406:.\main.c      ****                                     case 'S':
 407:.\main.c      ****                                         inittrackLineZ();
 1738              		.loc 1 407 0
 1739 0278 FFF7FEFF 		bl	inittrackLineZ
 408:.\main.c      ****                                          Timer_Deadzone_WriteCounter(S_DEADZONE);
 1740              		.loc 1 408 0
 1741 027c 42F21070 		movw	r0, #10000
 1742 0280 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 409:.\main.c      ****                                         //do nothing
 410:.\main.c      ****                                     break;
 1743              		.loc 1 410 0
 1744 0284 63E0     		b	.L72
 1745              	.L67:
 411:.\main.c      ****                                     case 'L':
 412:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 413:.\main.c      ****                                         initTurnLeft();
 1746              		.loc 1 413 0
 1747 0286 FFF7FEFF 		bl	initTurnLeft
 414:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1748              		.loc 1 414 0
 1749 028a 4CF25030 		movw	r0, #50000
 1750 028e FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 415:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1751              		.loc 1 415 0
 1752 0292 2C4B     		ldr	r3, .L103+100
 1753 0294 1B88     		ldrh	r3, [r3]
 1754 0296 9BB2     		uxth	r3, r3
 1755 0298 8A3B     		subs	r3, r3, #138
 1756 029a 9BB2     		uxth	r3, r3
 1757 029c 9AB2     		uxth	r2, r3
 1758 029e 294B     		ldr	r3, .L103+100
 1759 02a0 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 40


 416:.\main.c      ****                                     break;
 1760              		.loc 1 416 0
 1761 02a2 54E0     		b	.L72
 1762              	.L69:
 417:.\main.c      ****                                     case 'R':
 418:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 419:.\main.c      ****                                         initTurnRight();
 1763              		.loc 1 419 0
 1764 02a4 FFF7FEFF 		bl	initTurnRight
 420:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1765              		.loc 1 420 0
 1766 02a8 264B     		ldr	r3, .L103+100
 1767 02aa 1B88     		ldrh	r3, [r3]
 1768 02ac 9BB2     		uxth	r3, r3
 1769 02ae 8A3B     		subs	r3, r3, #138
 1770 02b0 9BB2     		uxth	r3, r3
 1771 02b2 9AB2     		uxth	r2, r3
 1772 02b4 234B     		ldr	r3, .L103+100
 1773 02b6 1A80     		strh	r2, [r3]	@ movhi
 421:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 422:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1774              		.loc 1 422 0
 1775 02b8 4CF25030 		movw	r0, #50000
 1776 02bc FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 423:.\main.c      ****                                     break;
 1777              		.loc 1 423 0
 1778 02c0 45E0     		b	.L72
 1779              	.L71:
 424:.\main.c      ****                                     case 'U':
 425:.\main.c      ****                                         // Direction not tracked any more
 426:.\main.c      ****                                         initTurnU();
 1780              		.loc 1 426 0
 1781 02c2 FFF7FEFF 		bl	initTurnU
 427:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 1782              		.loc 1 427 0
 1783 02c6 2048     		ldr	r0, .L103+104
 1784 02c8 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 428:.\main.c      ****                                         target_distance_quad -= U_OFFSET;
 1785              		.loc 1 428 0
 1786 02cc 1D4B     		ldr	r3, .L103+100
 1787 02ce 1B88     		ldrh	r3, [r3]
 1788 02d0 9BB2     		uxth	r3, r3
 1789 02d2 783B     		subs	r3, r3, #120
 1790 02d4 9BB2     		uxth	r3, r3
 1791 02d6 9AB2     		uxth	r2, r3
 1792 02d8 1A4B     		ldr	r3, .L103+100
 1793 02da 1A80     		strh	r2, [r3]	@ movhi
 429:.\main.c      ****                                         //target_distance_quad += 208;
 430:.\main.c      ****                                     break;
 1794              		.loc 1 430 0
 1795 02dc 37E0     		b	.L72
 1796              	.L104:
 1797 02de 00BF     		.align	2
 1798              	.L103:
 1799 02e0 00000000 		.word	isr_quad1
 1800 02e4 00000000 		.word	isr_turn_timer
 1801 02e8 00000000 		.word	button
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 41


 1802 02ec 00000000 		.word	isr_deadzone
 1803 02f0 00000000 		.word	BIN_ENABLED
 1804 02f4 00000000 		.word	BT_ENABLED
 1805 02f8 00000000 		.word	frontSensors
 1806 02fc 00000000 		.word	track_mode
 1807 0300 00000000 		.word	movement_state
 1808 0304 00000000 		.word	initial_pos_valid
 1809 0308 00000000 		.word	system_state
 1810 030c 00000000 		.word	initial_x_pos
 1811 0310 00000000 		.word	initial_y_pos
 1812 0314 00000000 		.word	instructionCount
 1813 0318 00000000 		.word	instructions
 1814 031c 00000000 		.word	leftOn
 1815 0320 00000000 		.word	rightOn
 1816 0324 00000000 		.word	sensorsDisabled
 1817 0328 00000000 		.word	accum_dist
 1818 032c 24000000 		.word	.LC2
 1819 0330 00000000 		.word	reached_target
 1820 0334 38000000 		.word	.LC3
 1821 0338 50000000 		.word	.LC4
 1822 033c 00000000 		.word	deadzone
 1823 0340 00000000 		.word	instructionLength
 1824 0344 00000000 		.word	target_distance_quad
 1825 0348 905F0100 		.word	90000
 1826              	.L101:
 431:.\main.c      ****                                     
 432:.\main.c      ****                                     default:
 433:.\main.c      ****                                         //do nothing
 434:.\main.c      ****                                         break;
 1827              		.loc 1 434 0
 1828 034c 00BF     		nop
 1829              	.L72:
 435:.\main.c      ****                                 }
 436:.\main.c      ****                                 if(target_distance_quad < 0) target_distance_quad = 0;
 1830              		.loc 1 436 0
 1831 034e B34B     		ldr	r3, .L105
 1832 0350 1B88     		ldrh	r3, [r3]
 1833 0352 1BB2     		sxth	r3, r3
 1834 0354 002B     		cmp	r3, #0
 1835 0356 02DA     		bge	.L73
 1836              		.loc 1 436 0 is_stmt 0 discriminator 1
 1837 0358 B04B     		ldr	r3, .L105
 1838 035a 0022     		movs	r2, #0
 1839 035c 1A80     		strh	r2, [r3]	@ movhi
 1840              	.L73:
 437:.\main.c      ****                                 sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 1841              		.loc 1 437 0 is_stmt 1
 1842 035e AF4B     		ldr	r3, .L105
 1843 0360 1B88     		ldrh	r3, [r3]
 1844 0362 1BB2     		sxth	r3, r3
 1845 0364 07F12002 		add	r2, r7, #32
 1846 0368 1046     		mov	r0, r2
 1847 036a AD49     		ldr	r1, .L105+4
 1848 036c 1A46     		mov	r2, r3
 1849 036e FFF7FEFF 		bl	sprintf
 438:.\main.c      ****                                  UART_PutString(mes);
 1850              		.loc 1 438 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 42


 1851 0372 07F12003 		add	r3, r7, #32
 1852 0376 1846     		mov	r0, r3
 1853 0378 FFF7FEFF 		bl	UART_PutString
 439:.\main.c      ****                                 
 440:.\main.c      ****                                 Timer_Deadzone_Start();
 1854              		.loc 1 440 0
 1855 037c FFF7FEFF 		bl	Timer_Deadzone_Start
 441:.\main.c      ****                                 reached_target = 0;
 1856              		.loc 1 441 0
 1857 0380 A84B     		ldr	r3, .L105+8
 1858 0382 0022     		movs	r2, #0
 1859 0384 1A70     		strb	r2, [r3]
 442:.\main.c      ****                                 overshot_target = 0;
 1860              		.loc 1 442 0
 1861 0386 A84B     		ldr	r3, .L105+12
 1862 0388 0022     		movs	r2, #0
 1863 038a 1A70     		strb	r2, [r3]
 443:.\main.c      ****                                 instructionCount += 2;
 1864              		.loc 1 443 0
 1865 038c A74B     		ldr	r3, .L105+16
 1866 038e 1B88     		ldrh	r3, [r3]
 1867 0390 0233     		adds	r3, r3, #2
 1868 0392 9AB2     		uxth	r2, r3
 1869 0394 A54B     		ldr	r3, .L105+16
 1870 0396 1A80     		strh	r2, [r3]	@ movhi
 444:.\main.c      ****                                 sprintf(mes, "instr count:%d\r\n", instructionCount);
 1871              		.loc 1 444 0
 1872 0398 A44B     		ldr	r3, .L105+16
 1873 039a 1B88     		ldrh	r3, [r3]
 1874 039c 1A46     		mov	r2, r3
 1875 039e 07F12003 		add	r3, r7, #32
 1876 03a2 1846     		mov	r0, r3
 1877 03a4 A249     		ldr	r1, .L105+20
 1878 03a6 FFF7FEFF 		bl	sprintf
 445:.\main.c      ****                                 UART_PutString(mes);
 1879              		.loc 1 445 0
 1880 03aa 07F12003 		add	r3, r7, #32
 1881 03ae 1846     		mov	r0, r3
 1882 03b0 FFF7FEFF 		bl	UART_PutString
 1883              	.LBE6:
 1884              	.LBE5:
 375:.\main.c      ****                         {
 1885              		.loc 1 375 0
 1886 03b4 ACE1     		b	.L54
 1887              	.L62:
 375:.\main.c      ****                         {
 1888              		.loc 1 375 0 is_stmt 0 discriminator 1
 1889 03b6 ABE1     		b	.L54
 1890              	.L61:
 446:.\main.c      ****                                 
 447:.\main.c      ****                             }
 448:.\main.c      ****                             }
 449:.\main.c      ****                         }
 450:.\main.c      ****                     }
 451:.\main.c      ****                     else if (frontSensors[0] == 0 && frontSensors[1] == 0 && frontSensors[2] == 0 &
 1891              		.loc 1 451 0 is_stmt 1
 1892 03b8 9E4B     		ldr	r3, .L105+24
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 43


 1893 03ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1894 03bc 002B     		cmp	r3, #0
 1895 03be 40F0CF80 		bne	.L74
 1896              		.loc 1 451 0 is_stmt 0 discriminator 1
 1897 03c2 9C4B     		ldr	r3, .L105+24
 1898 03c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1899 03c6 002B     		cmp	r3, #0
 1900 03c8 40F0CA80 		bne	.L74
 1901              		.loc 1 451 0 discriminator 2
 1902 03cc 994B     		ldr	r3, .L105+24
 1903 03ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1904 03d0 002B     		cmp	r3, #0
 1905 03d2 40F0C580 		bne	.L74
 1906              		.loc 1 451 0 discriminator 3
 1907 03d6 974B     		ldr	r3, .L105+24
 1908 03d8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1909 03da 002B     		cmp	r3, #0
 1910 03dc 40F0C080 		bne	.L74
 1911              		.loc 1 451 0 discriminator 4
 1912 03e0 944B     		ldr	r3, .L105+24
 1913 03e2 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1914 03e4 002B     		cmp	r3, #0
 1915 03e6 40F0BB80 		bne	.L74
 1916              		.loc 1 451 0 discriminator 5
 1917 03ea 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1918 03ee 552B     		cmp	r3, #85
 1919 03f0 04D0     		beq	.L75
 1920              		.loc 1 451 0 discriminator 6
 1921 03f2 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1922 03f6 442B     		cmp	r3, #68
 1923 03f8 40F0B280 		bne	.L74
 1924              	.L75:
 452:.\main.c      ****                     {
 453:.\main.c      ****                         if(sensorsDisabled == 0)
 1925              		.loc 1 453 0 is_stmt 1
 1926 03fc 8E4B     		ldr	r3, .L105+28
 1927 03fe 1B68     		ldr	r3, [r3]
 1928 0400 002B     		cmp	r3, #0
 1929 0402 40F0AC80 		bne	.L76
 454:.\main.c      ****                         {
 455:.\main.c      ****                                 if(nextStep == 'D')
 1930              		.loc 1 455 0
 1931 0406 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1932 040a 442B     		cmp	r3, #68
 1933 040c 17D1     		bne	.L77
 1934              	.LBB7:
 456:.\main.c      ****                                 {
 457:.\main.c      ****                                     char nextInstruction = instructions[instructionCount+2];
 1935              		.loc 1 457 0
 1936 040e 874B     		ldr	r3, .L105+16
 1937 0410 1B88     		ldrh	r3, [r3]
 1938 0412 0233     		adds	r3, r3, #2
 1939 0414 894A     		ldr	r2, .L105+32
 1940 0416 D35C     		ldrb	r3, [r2, r3]
 1941 0418 87F83130 		strb	r3, [r7, #49]
 458:.\main.c      ****                                     if(nextInstruction == 'U')
 1942              		.loc 1 458 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 44


 1943 041c 97F83130 		ldrb	r3, [r7, #49]	@ zero_extendqisi2
 1944 0420 552B     		cmp	r3, #85
 1945 0422 0CD1     		bne	.L77
 459:.\main.c      ****                                     {
 460:.\main.c      ****                                         instructionCount += 2;
 1946              		.loc 1 460 0
 1947 0424 814B     		ldr	r3, .L105+16
 1948 0426 1B88     		ldrh	r3, [r3]
 1949 0428 0233     		adds	r3, r3, #2
 1950 042a 9AB2     		uxth	r2, r3
 1951 042c 7F4B     		ldr	r3, .L105+16
 1952 042e 1A80     		strh	r2, [r3]	@ movhi
 461:.\main.c      ****                                         nextStep = instructions[instructionCount];
 1953              		.loc 1 461 0
 1954 0430 7E4B     		ldr	r3, .L105+16
 1955 0432 1B88     		ldrh	r3, [r3]
 1956 0434 1A46     		mov	r2, r3
 1957 0436 814B     		ldr	r3, .L105+32
 1958 0438 9B5C     		ldrb	r3, [r3, r2]
 1959 043a 87F83530 		strb	r3, [r7, #53]
 1960              	.L77:
 1961              	.LBE7:
 462:.\main.c      ****                                     }
 463:.\main.c      ****                                 }
 464:.\main.c      ****                                 
 465:.\main.c      ****                                 if(nextStep == 'U')
 1962              		.loc 1 465 0
 1963 043e 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 1964 0442 552B     		cmp	r3, #85
 1965 0444 40F08B80 		bne	.L76
 466:.\main.c      ****                                 {
 467:.\main.c      ****                                     actionDebounce++;
 1966              		.loc 1 467 0
 1967 0448 FB8E     		ldrh	r3, [r7, #54]
 1968 044a 0133     		adds	r3, r3, #1
 1969 044c FB86     		strh	r3, [r7, #54]	@ movhi
 468:.\main.c      ****                                     if(actionDebounce >= 2400)
 1970              		.loc 1 468 0
 1971 044e FB8E     		ldrh	r3, [r7, #54]
 1972 0450 B3F5166F 		cmp	r3, #2400
 1973 0454 C0F08380 		bcc	.L76
 469:.\main.c      ****                                     {
 470:.\main.c      ****                                         if(reached_target == 1)
 1974              		.loc 1 470 0
 1975 0458 724B     		ldr	r3, .L105+8
 1976 045a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1977 045c 012B     		cmp	r3, #1
 1978 045e 7ED1     		bne	.L76
 1979              	.LBB8:
 471:.\main.c      ****                                         {
 472:.\main.c      ****                                     char mes[16];
 473:.\main.c      ****                                     sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1980              		.loc 1 473 0
 1981 0460 774B     		ldr	r3, .L105+36
 1982 0462 1B88     		ldrh	r3, [r3]
 1983 0464 1BB2     		sxth	r3, r3
 1984 0466 07F11002 		add	r2, r7, #16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 45


 1985 046a 1046     		mov	r0, r2
 1986 046c 7549     		ldr	r1, .L105+40
 1987 046e 1A46     		mov	r2, r3
 1988 0470 FFF7FEFF 		bl	sprintf
 474:.\main.c      ****                                      UART_PutString(mes);
 1989              		.loc 1 474 0
 1990 0474 07F11003 		add	r3, r7, #16
 1991 0478 1846     		mov	r0, r3
 1992 047a FFF7FEFF 		bl	UART_PutString
 475:.\main.c      ****                                          accum_dist = 0;
 1993              		.loc 1 475 0
 1994 047e 704B     		ldr	r3, .L105+36
 1995 0480 0022     		movs	r2, #0
 1996 0482 1A80     		strh	r2, [r3]	@ movhi
 476:.\main.c      ****                                     uint8 nextStepDist;
 477:.\main.c      ****                                     if(instructionCount <= instructionLength - 5) nextStepDist = in
 1997              		.loc 1 477 0
 1998 0484 694B     		ldr	r3, .L105+16
 1999 0486 1B88     		ldrh	r3, [r3]
 2000 0488 1A46     		mov	r2, r3
 2001 048a 6F4B     		ldr	r3, .L105+44
 2002 048c 1B88     		ldrh	r3, [r3]
 2003 048e 053B     		subs	r3, r3, #5
 2004 0490 9A42     		cmp	r2, r3
 2005 0492 07DC     		bgt	.L78
 2006              		.loc 1 477 0 is_stmt 0 discriminator 1
 2007 0494 654B     		ldr	r3, .L105+16
 2008 0496 1B88     		ldrh	r3, [r3]
 2009 0498 0333     		adds	r3, r3, #3
 2010 049a 684A     		ldr	r2, .L105+32
 2011 049c D35C     		ldrb	r3, [r2, r3]
 2012 049e 87F83330 		strb	r3, [r7, #51]
 2013 04a2 02E0     		b	.L79
 2014              	.L78:
 478:.\main.c      ****                                     else nextStepDist = 0;
 2015              		.loc 1 478 0 is_stmt 1
 2016 04a4 0023     		movs	r3, #0
 2017 04a6 87F83330 		strb	r3, [r7, #51]
 2018              	.L79:
 479:.\main.c      ****                                     
 480:.\main.c      ****                                     target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 2019              		.loc 1 480 0
 2020 04aa 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 2021 04ae 9BB2     		uxth	r3, r3
 2022 04b0 1A46     		mov	r2, r3	@ movhi
 2023 04b2 D200     		lsls	r2, r2, #3
 2024 04b4 1344     		add	r3, r3, r2
 2025 04b6 1B01     		lsls	r3, r3, #4
 2026 04b8 9BB2     		uxth	r3, r3
 2027 04ba 9AB2     		uxth	r2, r3
 2028 04bc 574B     		ldr	r3, .L105
 2029 04be 1A80     		strh	r2, [r3]	@ movhi
 481:.\main.c      ****                                     target_distance_quad -= U_OFFSET;
 2030              		.loc 1 481 0
 2031 04c0 564B     		ldr	r3, .L105
 2032 04c2 1B88     		ldrh	r3, [r3]
 2033 04c4 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 46


 2034 04c6 783B     		subs	r3, r3, #120
 2035 04c8 9BB2     		uxth	r3, r3
 2036 04ca 9AB2     		uxth	r2, r3
 2037 04cc 534B     		ldr	r3, .L105
 2038 04ce 1A80     		strh	r2, [r3]	@ movhi
 482:.\main.c      ****                                     //target_distance_quad += 208;
 483:.\main.c      ****                                     
 484:.\main.c      ****                                         UART_PutString("Trigger white light\r\n");
 2039              		.loc 1 484 0
 2040 04d0 5E48     		ldr	r0, .L105+48
 2041 04d2 FFF7FEFF 		bl	UART_PutString
 485:.\main.c      ****                                         UART_PutString("Deadzone enter\r\n");
 2042              		.loc 1 485 0
 2043 04d6 5E48     		ldr	r0, .L105+52
 2044 04d8 FFF7FEFF 		bl	UART_PutString
 486:.\main.c      ****                                         
 487:.\main.c      ****                                         deadzone = 1;
 2045              		.loc 1 487 0
 2046 04dc 5D4B     		ldr	r3, .L105+56
 2047 04de 0122     		movs	r2, #1
 2048 04e0 1A70     		strb	r2, [r3]
 488:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 2049              		.loc 1 488 0
 2050 04e2 5D48     		ldr	r0, .L105+60
 2051 04e4 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 489:.\main.c      ****                                         if(target_distance_quad < 0) target_distance_quad = 0;
 2052              		.loc 1 489 0
 2053 04e8 4C4B     		ldr	r3, .L105
 2054 04ea 1B88     		ldrh	r3, [r3]
 2055 04ec 1BB2     		sxth	r3, r3
 2056 04ee 002B     		cmp	r3, #0
 2057 04f0 02DA     		bge	.L80
 2058              		.loc 1 489 0 is_stmt 0 discriminator 1
 2059 04f2 4A4B     		ldr	r3, .L105
 2060 04f4 0022     		movs	r2, #0
 2061 04f6 1A80     		strh	r2, [r3]	@ movhi
 2062              	.L80:
 490:.\main.c      ****                                         Timer_Deadzone_Start();
 2063              		.loc 1 490 0 is_stmt 1
 2064 04f8 FFF7FEFF 		bl	Timer_Deadzone_Start
 491:.\main.c      ****                                         actionDebounce = 0;
 2065              		.loc 1 491 0
 2066 04fc 0023     		movs	r3, #0
 2067 04fe FB86     		strh	r3, [r7, #54]	@ movhi
 492:.\main.c      ****                                         sensorsDisabled = 1;
 2068              		.loc 1 492 0
 2069 0500 4D4B     		ldr	r3, .L105+28
 2070 0502 0122     		movs	r2, #1
 2071 0504 1A60     		str	r2, [r3]
 493:.\main.c      ****                                         initTurnU();
 2072              		.loc 1 493 0
 2073 0506 FFF7FEFF 		bl	initTurnU
 494:.\main.c      ****                                         reached_target = 0;
 2074              		.loc 1 494 0
 2075 050a 464B     		ldr	r3, .L105+8
 2076 050c 0022     		movs	r2, #0
 2077 050e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 47


 495:.\main.c      ****                                         overshot_target = 0;
 2078              		.loc 1 495 0
 2079 0510 454B     		ldr	r3, .L105+12
 2080 0512 0022     		movs	r2, #0
 2081 0514 1A70     		strb	r2, [r3]
 496:.\main.c      ****                                         instructionCount += 2;
 2082              		.loc 1 496 0
 2083 0516 454B     		ldr	r3, .L105+16
 2084 0518 1B88     		ldrh	r3, [r3]
 2085 051a 0233     		adds	r3, r3, #2
 2086 051c 9AB2     		uxth	r2, r3
 2087 051e 434B     		ldr	r3, .L105+16
 2088 0520 1A80     		strh	r2, [r3]	@ movhi
 497:.\main.c      ****                                         
 498:.\main.c      ****                                         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2089              		.loc 1 498 0
 2090 0522 3E4B     		ldr	r3, .L105
 2091 0524 1B88     		ldrh	r3, [r3]
 2092 0526 1BB2     		sxth	r3, r3
 2093 0528 07F11002 		add	r2, r7, #16
 2094 052c 1046     		mov	r0, r2
 2095 052e 3C49     		ldr	r1, .L105+4
 2096 0530 1A46     		mov	r2, r3
 2097 0532 FFF7FEFF 		bl	sprintf
 499:.\main.c      ****                                         UART_PutString(mes);
 2098              		.loc 1 499 0
 2099 0536 07F11003 		add	r3, r7, #16
 2100 053a 1846     		mov	r0, r3
 2101 053c FFF7FEFF 		bl	UART_PutString
 500:.\main.c      ****                                         sprintf(mes, "instr count:%d\r\n", instructionCount);
 2102              		.loc 1 500 0
 2103 0540 3A4B     		ldr	r3, .L105+16
 2104 0542 1B88     		ldrh	r3, [r3]
 2105 0544 1A46     		mov	r2, r3
 2106 0546 07F11003 		add	r3, r7, #16
 2107 054a 1846     		mov	r0, r3
 2108 054c 3849     		ldr	r1, .L105+20
 2109 054e FFF7FEFF 		bl	sprintf
 501:.\main.c      ****                                         UART_PutString(mes);
 2110              		.loc 1 501 0
 2111 0552 07F11003 		add	r3, r7, #16
 2112 0556 1846     		mov	r0, r3
 2113 0558 FFF7FEFF 		bl	UART_PutString
 2114              	.LBE8:
 453:.\main.c      ****                         {
 2115              		.loc 1 453 0
 2116 055c D8E0     		b	.L54
 2117              	.L76:
 453:.\main.c      ****                         {
 2118              		.loc 1 453 0 is_stmt 0 discriminator 3
 2119 055e D7E0     		b	.L54
 2120              	.L74:
 502:.\main.c      ****                                 }
 503:.\main.c      ****                                 }
 504:.\main.c      ****                             }
 505:.\main.c      ****                         }
 506:.\main.c      ****                     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 48


 507:.\main.c      ****                     else if (overshot_target == 1 && (nextStep == 'D' || nextStep == 'U' || nextSte
 2121              		.loc 1 507 0 is_stmt 1
 2122 0560 314B     		ldr	r3, .L105+12
 2123 0562 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2124 0564 012B     		cmp	r3, #1
 2125 0566 40F0CE80 		bne	.L81
 2126              		.loc 1 507 0 is_stmt 0 discriminator 1
 2127 056a 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 2128 056e 442B     		cmp	r3, #68
 2129 0570 08D0     		beq	.L82
 2130              		.loc 1 507 0 discriminator 2
 2131 0572 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 2132 0576 552B     		cmp	r3, #85
 2133 0578 04D0     		beq	.L82
 2134              		.loc 1 507 0 discriminator 3
 2135 057a 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 2136 057e 532B     		cmp	r3, #83
 2137 0580 40F0C180 		bne	.L81
 2138              	.L82:
 2139              	.LBB9:
 508:.\main.c      ****                     {
 509:.\main.c      ****                         
 510:.\main.c      ****                                 //instructionCount += 2;
 511:.\main.c      ****                                 //nextStep = instructions[instructionCount]; 
 512:.\main.c      ****                                 char mes[16];
 513:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 2140              		.loc 1 513 0 is_stmt 1
 2141 0584 2E4B     		ldr	r3, .L105+36
 2142 0586 1B88     		ldrh	r3, [r3]
 2143 0588 1BB2     		sxth	r3, r3
 2144 058a 3A46     		mov	r2, r7
 2145 058c 1046     		mov	r0, r2
 2146 058e 2D49     		ldr	r1, .L105+40
 2147 0590 1A46     		mov	r2, r3
 2148 0592 FFF7FEFF 		bl	sprintf
 514:.\main.c      ****                                  UART_PutString(mes);
 2149              		.loc 1 514 0
 2150 0596 3B46     		mov	r3, r7
 2151 0598 1846     		mov	r0, r3
 2152 059a FFF7FEFF 		bl	UART_PutString
 515:.\main.c      ****                                  accum_dist = 0;
 2153              		.loc 1 515 0
 2154 059e 284B     		ldr	r3, .L105+36
 2155 05a0 0022     		movs	r2, #0
 2156 05a2 1A80     		strh	r2, [r3]	@ movhi
 516:.\main.c      ****                                 uint8 nextStepDist;
 517:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 2157              		.loc 1 517 0
 2158 05a4 214B     		ldr	r3, .L105+16
 2159 05a6 1B88     		ldrh	r3, [r3]
 2160 05a8 1A46     		mov	r2, r3
 2161 05aa 274B     		ldr	r3, .L105+44
 2162 05ac 1B88     		ldrh	r3, [r3]
 2163 05ae 053B     		subs	r3, r3, #5
 2164 05b0 9A42     		cmp	r2, r3
 2165 05b2 07DC     		bgt	.L83
 2166              		.loc 1 517 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 49


 2167 05b4 1D4B     		ldr	r3, .L105+16
 2168 05b6 1B88     		ldrh	r3, [r3]
 2169 05b8 0333     		adds	r3, r3, #3
 2170 05ba 204A     		ldr	r2, .L105+32
 2171 05bc D35C     		ldrb	r3, [r2, r3]
 2172 05be 87F83230 		strb	r3, [r7, #50]
 2173 05c2 02E0     		b	.L84
 2174              	.L83:
 518:.\main.c      ****                                 else nextStepDist = 0;
 2175              		.loc 1 518 0 is_stmt 1
 2176 05c4 0023     		movs	r3, #0
 2177 05c6 87F83230 		strb	r3, [r7, #50]
 2178              	.L84:
 519:.\main.c      ****                                 
 520:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 2179              		.loc 1 520 0
 2180 05ca 97F83230 		ldrb	r3, [r7, #50]	@ zero_extendqisi2
 2181 05ce 9BB2     		uxth	r3, r3
 2182 05d0 1A46     		mov	r2, r3	@ movhi
 2183 05d2 D200     		lsls	r2, r2, #3
 2184 05d4 1344     		add	r3, r3, r2
 2185 05d6 1B01     		lsls	r3, r3, #4
 2186 05d8 9BB2     		uxth	r3, r3
 2187 05da 9AB2     		uxth	r2, r3
 2188 05dc 0F4B     		ldr	r3, .L105
 2189 05de 1A80     		strh	r2, [r3]	@ movhi
 521:.\main.c      ****                                 
 522:.\main.c      ****                                 
 523:.\main.c      ****                                     UART_PutString("Trigger quad\r\n");
 2190              		.loc 1 523 0
 2191 05e0 1E48     		ldr	r0, .L105+64
 2192 05e2 FFF7FEFF 		bl	UART_PutString
 524:.\main.c      ****                                     switch(nextStep)
 2193              		.loc 1 524 0
 2194 05e6 97F83530 		ldrb	r3, [r7, #53]	@ zero_extendqisi2
 2195 05ea 532B     		cmp	r3, #83
 2196 05ec 38D0     		beq	.L86
 2197 05ee 552B     		cmp	r3, #85
 2198 05f0 01D0     		beq	.L87
 2199 05f2 442B     		cmp	r3, #68
 525:.\main.c      ****                                     {
 526:.\main.c      ****                                         case 'U':
 527:.\main.c      ****                                              Timer_Deadzone_WriteCounter(U_DEADZONE);
 528:.\main.c      ****                                             initTurnU();
 529:.\main.c      ****                                             //target_distance_quad += 208;
 530:.\main.c      ****                                             target_distance_quad -= U_OFFSET;
 531:.\main.c      ****                                             Timer_Deadzone_Start();
 532:.\main.c      ****                                              deadzone = 1;
 533:.\main.c      ****                                         break;
 534:.\main.c      ****                                         case 'D':
 535:.\main.c      ****                                             //do nothing
 536:.\main.c      ****                                         break;
 2200              		.loc 1 536 0
 2201 05f4 59E0     		b	.L85
 2202              	.L87:
 527:.\main.c      ****                                             initTurnU();
 2203              		.loc 1 527 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 50


 2204 05f6 1848     		ldr	r0, .L105+60
 2205 05f8 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 528:.\main.c      ****                                             //target_distance_quad += 208;
 2206              		.loc 1 528 0
 2207 05fc FFF7FEFF 		bl	initTurnU
 530:.\main.c      ****                                             Timer_Deadzone_Start();
 2208              		.loc 1 530 0
 2209 0600 064B     		ldr	r3, .L105
 2210 0602 1B88     		ldrh	r3, [r3]
 2211 0604 9BB2     		uxth	r3, r3
 2212 0606 783B     		subs	r3, r3, #120
 2213 0608 9BB2     		uxth	r3, r3
 2214 060a 9AB2     		uxth	r2, r3
 2215 060c 034B     		ldr	r3, .L105
 2216 060e 1A80     		strh	r2, [r3]	@ movhi
 531:.\main.c      ****                                              deadzone = 1;
 2217              		.loc 1 531 0
 2218 0610 FFF7FEFF 		bl	Timer_Deadzone_Start
 532:.\main.c      ****                                         break;
 2219              		.loc 1 532 0
 2220 0614 0F4B     		ldr	r3, .L105+56
 2221 0616 0122     		movs	r2, #1
 2222 0618 1A70     		strb	r2, [r3]
 533:.\main.c      ****                                         case 'D':
 2223              		.loc 1 533 0
 2224 061a 46E0     		b	.L85
 2225              	.L106:
 2226              		.align	2
 2227              	.L105:
 2228 061c 00000000 		.word	target_distance_quad
 2229 0620 64000000 		.word	.LC5
 2230 0624 00000000 		.word	reached_target
 2231 0628 00000000 		.word	overshot_target
 2232 062c 00000000 		.word	instructionCount
 2233 0630 78000000 		.word	.LC6
 2234 0634 00000000 		.word	frontSensors
 2235 0638 00000000 		.word	sensorsDisabled
 2236 063c 00000000 		.word	instructions
 2237 0640 00000000 		.word	accum_dist
 2238 0644 24000000 		.word	.LC2
 2239 0648 00000000 		.word	instructionLength
 2240 064c 8C000000 		.word	.LC7
 2241 0650 50000000 		.word	.LC4
 2242 0654 00000000 		.word	deadzone
 2243 0658 905F0100 		.word	90000
 2244 065c A4000000 		.word	.LC8
 2245              	.L86:
 537:.\main.c      ****                                         case 'S':
 538:.\main.c      ****                                             inittrackLineZ();
 2246              		.loc 1 538 0
 2247 0660 FFF7FEFF 		bl	inittrackLineZ
 539:.\main.c      ****                                             Timer_Deadzone_WriteCounter(S_DEADZONE);
 2248              		.loc 1 539 0
 2249 0664 42F21070 		movw	r0, #10000
 2250 0668 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 540:.\main.c      ****                                              target_distance_quad -= (QUAD_PER_UNIT * 0.5);
 2251              		.loc 1 540 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 51


 2252 066c 414B     		ldr	r3, .L107
 2253 066e 1B88     		ldrh	r3, [r3]
 2254 0670 1BB2     		sxth	r3, r3
 2255 0672 1846     		mov	r0, r3
 2256 0674 FFF7FEFF 		bl	__aeabi_i2d
 2257 0678 0246     		mov	r2, r0
 2258 067a 0B46     		mov	r3, r1
 2259 067c 1046     		mov	r0, r2
 2260 067e 1946     		mov	r1, r3
 2261 0680 4FF00002 		mov	r2, #0
 2262 0684 3C4B     		ldr	r3, .L107+4
 2263 0686 FFF7FEFF 		bl	__aeabi_dsub
 2264 068a 0246     		mov	r2, r0
 2265 068c 0B46     		mov	r3, r1
 2266 068e 1046     		mov	r0, r2
 2267 0690 1946     		mov	r1, r3
 2268 0692 FFF7FEFF 		bl	__aeabi_d2iz
 2269 0696 0346     		mov	r3, r0
 2270 0698 9AB2     		uxth	r2, r3
 2271 069a 364B     		ldr	r3, .L107
 2272 069c 1A80     		strh	r2, [r3]	@ movhi
 541:.\main.c      ****                                             Timer_Deadzone_Start();
 2273              		.loc 1 541 0
 2274 069e FFF7FEFF 		bl	Timer_Deadzone_Start
 542:.\main.c      ****                                             deadzone = 1;
 2275              		.loc 1 542 0
 2276 06a2 364B     		ldr	r3, .L107+8
 2277 06a4 0122     		movs	r2, #1
 2278 06a6 1A70     		strb	r2, [r3]
 543:.\main.c      ****                                         break;
 2279              		.loc 1 543 0
 2280 06a8 00BF     		nop
 2281              	.L85:
 544:.\main.c      ****                                     }                                   
 545:.\main.c      ****                                     reached_target = 0;
 2282              		.loc 1 545 0
 2283 06aa 354B     		ldr	r3, .L107+12
 2284 06ac 0022     		movs	r2, #0
 2285 06ae 1A70     		strb	r2, [r3]
 546:.\main.c      ****                                     overshot_target = 0;
 2286              		.loc 1 546 0
 2287 06b0 344B     		ldr	r3, .L107+16
 2288 06b2 0022     		movs	r2, #0
 2289 06b4 1A70     		strb	r2, [r3]
 547:.\main.c      ****                                     instructionCount += 2;
 2290              		.loc 1 547 0
 2291 06b6 344B     		ldr	r3, .L107+20
 2292 06b8 1B88     		ldrh	r3, [r3]
 2293 06ba 0233     		adds	r3, r3, #2
 2294 06bc 9AB2     		uxth	r2, r3
 2295 06be 324B     		ldr	r3, .L107+20
 2296 06c0 1A80     		strh	r2, [r3]	@ movhi
 548:.\main.c      ****                                     if(target_distance_quad < 0) target_distance_quad = 0;
 2297              		.loc 1 548 0
 2298 06c2 2C4B     		ldr	r3, .L107
 2299 06c4 1B88     		ldrh	r3, [r3]
 2300 06c6 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 52


 2301 06c8 002B     		cmp	r3, #0
 2302 06ca 02DA     		bge	.L89
 2303              		.loc 1 548 0 is_stmt 0 discriminator 1
 2304 06cc 294B     		ldr	r3, .L107
 2305 06ce 0022     		movs	r2, #0
 2306 06d0 1A80     		strh	r2, [r3]	@ movhi
 2307              	.L89:
 549:.\main.c      ****                                     //Timer_Deadzone_Start();
 550:.\main.c      ****                                     //deadzone = 1;
 551:.\main.c      ****                                     sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2308              		.loc 1 551 0 is_stmt 1 discriminator 5
 2309 06d2 284B     		ldr	r3, .L107
 2310 06d4 1B88     		ldrh	r3, [r3]
 2311 06d6 1BB2     		sxth	r3, r3
 2312 06d8 3A46     		mov	r2, r7
 2313 06da 1046     		mov	r0, r2
 2314 06dc 2B49     		ldr	r1, .L107+24
 2315 06de 1A46     		mov	r2, r3
 2316 06e0 FFF7FEFF 		bl	sprintf
 552:.\main.c      ****                                     UART_PutString(mes);
 2317              		.loc 1 552 0 discriminator 5
 2318 06e4 3B46     		mov	r3, r7
 2319 06e6 1846     		mov	r0, r3
 2320 06e8 FFF7FEFF 		bl	UART_PutString
 553:.\main.c      ****                                     sprintf(mes, "instr count:%d\r\n", instructionCount);
 2321              		.loc 1 553 0 discriminator 5
 2322 06ec 264B     		ldr	r3, .L107+20
 2323 06ee 1B88     		ldrh	r3, [r3]
 2324 06f0 1A46     		mov	r2, r3
 2325 06f2 3B46     		mov	r3, r7
 2326 06f4 1846     		mov	r0, r3
 2327 06f6 2649     		ldr	r1, .L107+28
 2328 06f8 FFF7FEFF 		bl	sprintf
 554:.\main.c      ****                                     UART_PutString(mes);
 2329              		.loc 1 554 0 discriminator 5
 2330 06fc 3B46     		mov	r3, r7
 2331 06fe 1846     		mov	r0, r3
 2332 0700 FFF7FEFF 		bl	UART_PutString
 2333              	.LBE9:
 508:.\main.c      ****                         
 2334              		.loc 1 508 0 discriminator 5
 2335 0704 04E0     		b	.L54
 2336              	.L81:
 555:.\main.c      ****                     }
 556:.\main.c      ****                     else
 557:.\main.c      ****                     {
 558:.\main.c      ****                         inittrackLineZ();
 2337              		.loc 1 558 0
 2338 0706 FFF7FEFF 		bl	inittrackLineZ
 559:.\main.c      ****                         actionDebounce = 0;
 2339              		.loc 1 559 0
 2340 070a 0023     		movs	r3, #0
 2341 070c FB86     		strh	r3, [r7, #54]	@ movhi
 2342              	.LBE4:
 560:.\main.c      ****                     }
 561:.\main.c      ****                 }
 562:.\main.c      ****                 break;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 53


 2343              		.loc 1 562 0
 2344 070e FFE7     		b	.L102
 2345              	.L54:
 2346              	.L102:
 2347 0710 00BF     		nop
 2348              	.L41:
 563:.\main.c      ****         }
 564:.\main.c      ****         
 565:.\main.c      ****         switch(movement_state)
 2349              		.loc 1 565 0
 2350 0712 204B     		ldr	r3, .L107+32
 2351 0714 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2352 0716 072B     		cmp	r3, #7
 2353 0718 3FF6A5AC 		bhi	.L100
 2354 071c 01A2     		adr	r2, .L92
 2355 071e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2356 0722 00BF     		.p2align 2
 2357              	.L92:
 2358 0724 45070000 		.word	.L91+1
 2359 0728 4B070000 		.word	.L93+1
 2360 072c 51070000 		.word	.L94+1
 2361 0730 5D070000 		.word	.L95+1
 2362 0734 63070000 		.word	.L96+1
 2363 0738 69070000 		.word	.L97+1
 2364 073c 6F070000 		.word	.L98+1
 2365 0740 57070000 		.word	.L99+1
 2366              		.p2align 1
 2367              	.L91:
 566:.\main.c      ****         {
 567:.\main.c      ****             case DRIVE:
 568:.\main.c      ****                 driveForwards();
 2368              		.loc 1 568 0
 2369 0744 FFF7FEFF 		bl	driveForwards
 569:.\main.c      ****             break;
 2370              		.loc 1 569 0
 2371 0748 13E0     		b	.L90
 2372              	.L93:
 570:.\main.c      ****             case LTURN:
 571:.\main.c      ****                 turnLeft();
 2373              		.loc 1 571 0
 2374 074a FFF7FEFF 		bl	turnLeft
 572:.\main.c      ****             break;
 2375              		.loc 1 572 0
 2376 074e 10E0     		b	.L90
 2377              	.L94:
 573:.\main.c      ****             case RTURN:
 574:.\main.c      ****                 turnRight();
 2378              		.loc 1 574 0
 2379 0750 FFF7FEFF 		bl	turnRight
 575:.\main.c      ****             break;
 2380              		.loc 1 575 0
 2381 0754 0DE0     		b	.L90
 2382              	.L99:
 576:.\main.c      ****             case UTURN:
 577:.\main.c      ****                 turnU();
 2383              		.loc 1 577 0
 2384 0756 FFF7FEFF 		bl	turnU
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 54


 578:.\main.c      ****             break;
 2385              		.loc 1 578 0
 2386 075a 0AE0     		b	.L90
 2387              	.L95:
 579:.\main.c      ****             case STOPPED:
 580:.\main.c      ****                 brakeMotor();
 2388              		.loc 1 580 0
 2389 075c FFF7FEFF 		bl	brakeMotor
 581:.\main.c      ****             break;
 2390              		.loc 1 581 0
 2391 0760 07E0     		b	.L90
 2392              	.L96:
 582:.\main.c      ****             case TRACKING:
 583:.\main.c      ****                 trackLine();
 2393              		.loc 1 583 0
 2394 0762 FFF7FEFF 		bl	trackLine
 584:.\main.c      ****             break;
 2395              		.loc 1 584 0
 2396 0766 04E0     		b	.L90
 2397              	.L97:
 585:.\main.c      ****             case TRACKING_U:
 586:.\main.c      ****                 trackLineU();
 2398              		.loc 1 586 0
 2399 0768 FFF7FEFF 		bl	trackLineU
 587:.\main.c      ****             break;
 2400              		.loc 1 587 0
 2401 076c 01E0     		b	.L90
 2402              	.L98:
 588:.\main.c      ****             case TRACKING_SOFT:
 589:.\main.c      ****                 trackLineZ();
 2403              		.loc 1 589 0
 2404 076e FFF7FEFF 		bl	trackLineZ
 2405              	.L90:
 590:.\main.c      ****         }      
 591:.\main.c      ****     }   
 2406              		.loc 1 591 0
 2407 0772 78E4     		b	.L100
 2408              	.L108:
 2409              		.align	2
 2410              	.L107:
 2411 0774 00000000 		.word	target_distance_quad
 2412 0778 00005240 		.word	1079115776
 2413 077c 00000000 		.word	deadzone
 2414 0780 00000000 		.word	reached_target
 2415 0784 00000000 		.word	overshot_target
 2416 0788 00000000 		.word	instructionCount
 2417 078c 64000000 		.word	.LC5
 2418 0790 78000000 		.word	.LC6
 2419 0794 00000000 		.word	movement_state
 2420              		.cfi_endproc
 2421              	.LFE71:
 2422              		.size	main, .-main
 2423              		.section	.text.handle_rx_binary,"ax",%progbits
 2424              		.align	2
 2425              		.global	handle_rx_binary
 2426              		.thumb
 2427              		.thumb_func
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 55


 2428              		.type	handle_rx_binary, %function
 2429              	handle_rx_binary:
 2430              	.LFB72:
 592:.\main.c      **** }
 593:.\main.c      **** 
 594:.\main.c      **** /*-------------------------------------------------------------------------------------------------
 595:.\main.c      **** 
 596:.\main.c      **** void handle_rx_binary()
 597:.\main.c      **** {
 2431              		.loc 1 597 0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 32
 2434              		@ frame_needed = 1, uses_anonymous_args = 0
 2435              		@ link register save eliminated.
 2436 0000 80B4     		push	{r7}
 2437              		.cfi_def_cfa_offset 4
 2438              		.cfi_offset 7, -4
 2439 0002 89B0     		sub	sp, sp, #36
 2440              		.cfi_def_cfa_offset 40
 2441 0004 00AF     		add	r7, sp, #0
 2442              		.cfi_def_cfa_register 7
 598:.\main.c      ****     if(flag_rx == 1)
 2443              		.loc 1 598 0
 2444 0006 524B     		ldr	r3, .L129
 2445 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2446 000a 012B     		cmp	r3, #1
 2447 000c 40F09A80 		bne	.L109
 2448              	.LBB10:
 599:.\main.c      ****     {    
 600:.\main.c      ****         flag_rx = 0;
 2449              		.loc 1 600 0
 2450 0010 4F4B     		ldr	r3, .L129
 2451 0012 0022     		movs	r2, #0
 2452 0014 1A70     		strb	r2, [r3]
 601:.\main.c      ****         
 602:.\main.c      ****         uint16 packet_bytes = (packet[1] << 8) | (packet[0]);
 2453              		.loc 1 602 0
 2454 0016 4F4B     		ldr	r3, .L129+4
 2455 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2456 001a 1B02     		lsls	r3, r3, #8
 2457 001c 9AB2     		uxth	r2, r3
 2458 001e 4D4B     		ldr	r3, .L129+4
 2459 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2460 0022 9BB2     		uxth	r3, r3
 2461 0024 1343     		orrs	r3, r3, r2
 2462 0026 9BB2     		uxth	r3, r3
 2463 0028 FB83     		strh	r3, [r7, #30]	@ movhi
 603:.\main.c      ****         char byte_packet[12];
 604:.\main.c      ****         char string_packet[12];
 605:.\main.c      ****         
 606:.\main.c      ****         switch(byteCount)
 2464              		.loc 1 606 0
 2465 002a 4B4B     		ldr	r3, .L129+8
 2466 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2467 002e 043B     		subs	r3, r3, #4
 2468 0030 1E2B     		cmp	r3, #30
 2469 0032 00F28780 		bhi	.L109
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 56


 2470 0036 01A2     		adr	r2, .L113
 2471 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2472              		.p2align 2
 2473              	.L113:
 2474 003c B9000000 		.word	.L112+1
 2475 0040 45010000 		.word	.L109+1
 2476 0044 CD000000 		.word	.L114+1
 2477 0048 45010000 		.word	.L109+1
 2478 004c D5000000 		.word	.L115+1
 2479 0050 45010000 		.word	.L109+1
 2480 0054 DD000000 		.word	.L116+1
 2481 0058 45010000 		.word	.L109+1
 2482 005c E5000000 		.word	.L117+1
 2483 0060 45010000 		.word	.L109+1
 2484 0064 ED000000 		.word	.L118+1
 2485 0068 45010000 		.word	.L109+1
 2486 006c F5000000 		.word	.L119+1
 2487 0070 45010000 		.word	.L109+1
 2488 0074 FD000000 		.word	.L120+1
 2489 0078 45010000 		.word	.L109+1
 2490 007c 05010000 		.word	.L121+1
 2491 0080 45010000 		.word	.L109+1
 2492 0084 0D010000 		.word	.L122+1
 2493 0088 45010000 		.word	.L109+1
 2494 008c 15010000 		.word	.L123+1
 2495 0090 45010000 		.word	.L109+1
 2496 0094 1D010000 		.word	.L124+1
 2497 0098 45010000 		.word	.L109+1
 2498 009c 25010000 		.word	.L125+1
 2499 00a0 45010000 		.word	.L109+1
 2500 00a4 2D010000 		.word	.L126+1
 2501 00a8 45010000 		.word	.L109+1
 2502 00ac 35010000 		.word	.L127+1
 2503 00b0 45010000 		.word	.L109+1
 2504 00b4 3D010000 		.word	.L128+1
 2505              		.p2align 1
 2506              	.L112:
 607:.\main.c      ****         {
 608:.\main.c      ****             case 4:
 609:.\main.c      ****                 buffer_state.rssi = packet[0];
 2507              		.loc 1 609 0
 2508 00b8 264B     		ldr	r3, .L129+4
 2509 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2510 00bc DAB2     		uxtb	r2, r3
 2511 00be 274B     		ldr	r3, .L129+12
 2512 00c0 1A70     		strb	r2, [r3]
 610:.\main.c      ****                 buffer_state.index = packet[1];
 2513              		.loc 1 610 0
 2514 00c2 244B     		ldr	r3, .L129+4
 2515 00c4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2516 00c6 254B     		ldr	r3, .L129+12
 2517 00c8 5A70     		strb	r2, [r3, #1]
 611:.\main.c      ****             break;
 2518              		.loc 1 611 0
 2519 00ca 3BE0     		b	.L109
 2520              	.L114:
 612:.\main.c      ****             case 6:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 57


 613:.\main.c      ****                 buffer_state.robot_xpos = packet_bytes;
 2521              		.loc 1 613 0
 2522 00cc FA8B     		ldrh	r2, [r7, #30]
 2523 00ce 234B     		ldr	r3, .L129+12
 2524 00d0 5A80     		strh	r2, [r3, #2]	@ movhi
 614:.\main.c      ****             break;
 2525              		.loc 1 614 0
 2526 00d2 37E0     		b	.L109
 2527              	.L115:
 615:.\main.c      ****             case 8:
 616:.\main.c      ****                 buffer_state.robot_ypos = packet_bytes;
 2528              		.loc 1 616 0
 2529 00d4 FA8B     		ldrh	r2, [r7, #30]
 2530 00d6 214B     		ldr	r3, .L129+12
 2531 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 617:.\main.c      ****             break;
 2532              		.loc 1 617 0
 2533 00da 33E0     		b	.L109
 2534              	.L116:
 618:.\main.c      ****             case 10:
 619:.\main.c      ****                 buffer_state.robot_orientation = packet_bytes;
 2535              		.loc 1 619 0
 2536 00dc FA8B     		ldrh	r2, [r7, #30]
 2537 00de 1F4B     		ldr	r3, .L129+12
 2538 00e0 DA80     		strh	r2, [r3, #6]	@ movhi
 620:.\main.c      ****             break;
 2539              		.loc 1 620 0
 2540 00e2 2FE0     		b	.L109
 2541              	.L117:
 621:.\main.c      ****             case 12:
 622:.\main.c      ****                 buffer_state.g0_xpos = packet_bytes;
 2542              		.loc 1 622 0
 2543 00e4 FA8B     		ldrh	r2, [r7, #30]
 2544 00e6 1D4B     		ldr	r3, .L129+12
 2545 00e8 1A81     		strh	r2, [r3, #8]	@ movhi
 623:.\main.c      ****             break;
 2546              		.loc 1 623 0
 2547 00ea 2BE0     		b	.L109
 2548              	.L118:
 624:.\main.c      ****             case 14:
 625:.\main.c      ****                 buffer_state.g0_ypos = packet_bytes;
 2549              		.loc 1 625 0
 2550 00ec FA8B     		ldrh	r2, [r7, #30]
 2551 00ee 1B4B     		ldr	r3, .L129+12
 2552 00f0 5A81     		strh	r2, [r3, #10]	@ movhi
 626:.\main.c      ****             break;
 2553              		.loc 1 626 0
 2554 00f2 27E0     		b	.L109
 2555              	.L119:
 627:.\main.c      ****             case 16:
 628:.\main.c      ****                 buffer_state.g0_speed = packet_bytes;
 2556              		.loc 1 628 0
 2557 00f4 FA8B     		ldrh	r2, [r7, #30]
 2558 00f6 194B     		ldr	r3, .L129+12
 2559 00f8 9A81     		strh	r2, [r3, #12]	@ movhi
 629:.\main.c      ****             break;
 2560              		.loc 1 629 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 58


 2561 00fa 23E0     		b	.L109
 2562              	.L120:
 630:.\main.c      ****             case 18:
 631:.\main.c      ****                 buffer_state.g0_direction = packet_bytes;
 2563              		.loc 1 631 0
 2564 00fc FA8B     		ldrh	r2, [r7, #30]
 2565 00fe 174B     		ldr	r3, .L129+12
 2566 0100 DA81     		strh	r2, [r3, #14]	@ movhi
 632:.\main.c      ****             break;
 2567              		.loc 1 632 0
 2568 0102 1FE0     		b	.L109
 2569              	.L121:
 633:.\main.c      ****             case 20:
 634:.\main.c      ****                 buffer_state.g1_xpos = packet_bytes;
 2570              		.loc 1 634 0
 2571 0104 FA8B     		ldrh	r2, [r7, #30]
 2572 0106 154B     		ldr	r3, .L129+12
 2573 0108 1A82     		strh	r2, [r3, #16]	@ movhi
 635:.\main.c      ****             break;
 2574              		.loc 1 635 0
 2575 010a 1BE0     		b	.L109
 2576              	.L122:
 636:.\main.c      ****             case 22:
 637:.\main.c      ****                 buffer_state.g1_ypos = packet_bytes;
 2577              		.loc 1 637 0
 2578 010c FA8B     		ldrh	r2, [r7, #30]
 2579 010e 134B     		ldr	r3, .L129+12
 2580 0110 5A82     		strh	r2, [r3, #18]	@ movhi
 638:.\main.c      ****             break;
 2581              		.loc 1 638 0
 2582 0112 17E0     		b	.L109
 2583              	.L123:
 639:.\main.c      ****             case 24:
 640:.\main.c      ****                 buffer_state.g1_speed = packet_bytes;
 2584              		.loc 1 640 0
 2585 0114 FA8B     		ldrh	r2, [r7, #30]
 2586 0116 114B     		ldr	r3, .L129+12
 2587 0118 9A82     		strh	r2, [r3, #20]	@ movhi
 641:.\main.c      ****             break;
 2588              		.loc 1 641 0
 2589 011a 13E0     		b	.L109
 2590              	.L124:
 642:.\main.c      ****             case 26:
 643:.\main.c      ****                 buffer_state.g1_direction = packet_bytes;
 2591              		.loc 1 643 0
 2592 011c FA8B     		ldrh	r2, [r7, #30]
 2593 011e 0F4B     		ldr	r3, .L129+12
 2594 0120 DA82     		strh	r2, [r3, #22]	@ movhi
 644:.\main.c      ****             break;
 2595              		.loc 1 644 0
 2596 0122 0FE0     		b	.L109
 2597              	.L125:
 645:.\main.c      ****             case 28:
 646:.\main.c      ****                 buffer_state.g2_xpos = packet_bytes;
 2598              		.loc 1 646 0
 2599 0124 FA8B     		ldrh	r2, [r7, #30]
 2600 0126 0D4B     		ldr	r3, .L129+12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 59


 2601 0128 1A83     		strh	r2, [r3, #24]	@ movhi
 647:.\main.c      ****             break;
 2602              		.loc 1 647 0
 2603 012a 0BE0     		b	.L109
 2604              	.L126:
 648:.\main.c      ****             case 30:
 649:.\main.c      ****                 buffer_state.g2_ypos = packet_bytes;
 2605              		.loc 1 649 0
 2606 012c FA8B     		ldrh	r2, [r7, #30]
 2607 012e 0B4B     		ldr	r3, .L129+12
 2608 0130 5A83     		strh	r2, [r3, #26]	@ movhi
 650:.\main.c      ****             break;
 2609              		.loc 1 650 0
 2610 0132 07E0     		b	.L109
 2611              	.L127:
 651:.\main.c      ****             case 32:
 652:.\main.c      ****                 buffer_state.g2_speed = packet_bytes;
 2612              		.loc 1 652 0
 2613 0134 FA8B     		ldrh	r2, [r7, #30]
 2614 0136 094B     		ldr	r3, .L129+12
 2615 0138 9A83     		strh	r2, [r3, #28]	@ movhi
 653:.\main.c      ****             break;
 2616              		.loc 1 653 0
 2617 013a 03E0     		b	.L109
 2618              	.L128:
 654:.\main.c      ****             case 34:
 655:.\main.c      ****                 buffer_state.g2_direction = packet_bytes;
 2619              		.loc 1 655 0
 2620 013c FA8B     		ldrh	r2, [r7, #30]
 2621 013e 074B     		ldr	r3, .L129+12
 2622 0140 DA83     		strh	r2, [r3, #30]	@ movhi
 656:.\main.c      ****             break;
 2623              		.loc 1 656 0
 2624 0142 00BF     		nop
 2625              	.L109:
 2626              	.LBE10:
 657:.\main.c      ****         }
 658:.\main.c      ****     }
 659:.\main.c      **** }
 2627              		.loc 1 659 0
 2628 0144 2437     		adds	r7, r7, #36
 2629              		.cfi_def_cfa_offset 4
 2630 0146 BD46     		mov	sp, r7
 2631              		.cfi_def_cfa_register 13
 2632              		@ sp needed
 2633 0148 5DF8047B 		ldr	r7, [sp], #4
 2634              		.cfi_restore 7
 2635              		.cfi_def_cfa_offset 0
 2636 014c 7047     		bx	lr
 2637              	.L130:
 2638 014e 00BF     		.align	2
 2639              	.L129:
 2640 0150 00000000 		.word	flag_rx
 2641 0154 00000000 		.word	packet
 2642 0158 00000000 		.word	byteCount
 2643 015c 00000000 		.word	buffer_state
 2644              		.cfi_endproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 60


 2645              	.LFE72:
 2646              		.size	handle_rx_binary, .-handle_rx_binary
 2647              		.section	.text.setLeftDir,"ax",%progbits
 2648              		.align	2
 2649              		.global	setLeftDir
 2650              		.thumb
 2651              		.thumb_func
 2652              		.type	setLeftDir, %function
 2653              	setLeftDir:
 2654              	.LFB73:
 660:.\main.c      **** 
 661:.\main.c      **** void setLeftDir(uint8 dir)
 662:.\main.c      **** {
 2655              		.loc 1 662 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 8
 2658              		@ frame_needed = 1, uses_anonymous_args = 0
 2659 0000 80B5     		push	{r7, lr}
 2660              		.cfi_def_cfa_offset 8
 2661              		.cfi_offset 7, -8
 2662              		.cfi_offset 14, -4
 2663 0002 82B0     		sub	sp, sp, #8
 2664              		.cfi_def_cfa_offset 16
 2665 0004 00AF     		add	r7, sp, #0
 2666              		.cfi_def_cfa_register 7
 2667 0006 0346     		mov	r3, r0
 2668 0008 FB71     		strb	r3, [r7, #7]
 663:.\main.c      ****     M2_IN2_Write(dir);
 2669              		.loc 1 663 0
 2670 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2671 000c 1846     		mov	r0, r3
 2672 000e FFF7FEFF 		bl	M2_IN2_Write
 664:.\main.c      **** }
 2673              		.loc 1 664 0
 2674 0012 0837     		adds	r7, r7, #8
 2675              		.cfi_def_cfa_offset 8
 2676 0014 BD46     		mov	sp, r7
 2677              		.cfi_def_cfa_register 13
 2678              		@ sp needed
 2679 0016 80BD     		pop	{r7, pc}
 2680              		.cfi_endproc
 2681              	.LFE73:
 2682              		.size	setLeftDir, .-setLeftDir
 2683              		.section	.text.setRightDir,"ax",%progbits
 2684              		.align	2
 2685              		.global	setRightDir
 2686              		.thumb
 2687              		.thumb_func
 2688              		.type	setRightDir, %function
 2689              	setRightDir:
 2690              	.LFB74:
 665:.\main.c      **** 
 666:.\main.c      **** void setRightDir(uint8 dir)
 667:.\main.c      **** {
 2691              		.loc 1 667 0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 61


 2694              		@ frame_needed = 1, uses_anonymous_args = 0
 2695 0000 80B5     		push	{r7, lr}
 2696              		.cfi_def_cfa_offset 8
 2697              		.cfi_offset 7, -8
 2698              		.cfi_offset 14, -4
 2699 0002 82B0     		sub	sp, sp, #8
 2700              		.cfi_def_cfa_offset 16
 2701 0004 00AF     		add	r7, sp, #0
 2702              		.cfi_def_cfa_register 7
 2703 0006 0346     		mov	r3, r0
 2704 0008 FB71     		strb	r3, [r7, #7]
 668:.\main.c      ****     M1_IN2_Write(dir);
 2705              		.loc 1 668 0
 2706 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2707 000c 1846     		mov	r0, r3
 2708 000e FFF7FEFF 		bl	M1_IN2_Write
 669:.\main.c      **** }
 2709              		.loc 1 669 0
 2710 0012 0837     		adds	r7, r7, #8
 2711              		.cfi_def_cfa_offset 8
 2712 0014 BD46     		mov	sp, r7
 2713              		.cfi_def_cfa_register 13
 2714              		@ sp needed
 2715 0016 80BD     		pop	{r7, pc}
 2716              		.cfi_endproc
 2717              	.LFE74:
 2718              		.size	setRightDir, .-setRightDir
 2719              		.section	.rodata
 2720 00b3 00       		.align	2
 2721              	.LC9:
 2722 00b4 6469723A 		.ascii	"dir: %d\015\012\000"
 2722      2025640D 
 2722      0A00
 2723              		.section	.text.reverseDirection,"ax",%progbits
 2724              		.align	2
 2725              		.global	reverseDirection
 2726              		.thumb
 2727              		.thumb_func
 2728              		.type	reverseDirection, %function
 2729              	reverseDirection:
 2730              	.LFB75:
 670:.\main.c      **** 
 671:.\main.c      **** void reverseDirection()
 672:.\main.c      **** {
 2731              		.loc 1 672 0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 16
 2734              		@ frame_needed = 1, uses_anonymous_args = 0
 2735 0000 80B5     		push	{r7, lr}
 2736              		.cfi_def_cfa_offset 8
 2737              		.cfi_offset 7, -8
 2738              		.cfi_offset 14, -4
 2739 0002 84B0     		sub	sp, sp, #16
 2740              		.cfi_def_cfa_offset 24
 2741 0004 00AF     		add	r7, sp, #0
 2742              		.cfi_def_cfa_register 7
 673:.\main.c      ****     direction = !direction;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 62


 2743              		.loc 1 673 0
 2744 0006 114B     		ldr	r3, .L134
 2745 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2746 000a 002B     		cmp	r3, #0
 2747 000c 0CBF     		ite	eq
 2748 000e 0123     		moveq	r3, #1
 2749 0010 0023     		movne	r3, #0
 2750 0012 DBB2     		uxtb	r3, r3
 2751 0014 1A46     		mov	r2, r3
 2752 0016 0D4B     		ldr	r3, .L134
 2753 0018 1A70     		strb	r2, [r3]
 674:.\main.c      ****     setLeftDir(direction);
 2754              		.loc 1 674 0
 2755 001a 0C4B     		ldr	r3, .L134
 2756 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2757 001e 1846     		mov	r0, r3
 2758 0020 FFF7FEFF 		bl	setLeftDir
 675:.\main.c      ****     setRightDir(direction);
 2759              		.loc 1 675 0
 2760 0024 094B     		ldr	r3, .L134
 2761 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2762 0028 1846     		mov	r0, r3
 2763 002a FFF7FEFF 		bl	setRightDir
 676:.\main.c      ****     char mes[16];
 677:.\main.c      ****      sprintf(mes, "dir: %d\r\n", direction);
 2764              		.loc 1 677 0
 2765 002e 074B     		ldr	r3, .L134
 2766 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2767 0032 1A46     		mov	r2, r3
 2768 0034 3B46     		mov	r3, r7
 2769 0036 1846     		mov	r0, r3
 2770 0038 0549     		ldr	r1, .L134+4
 2771 003a FFF7FEFF 		bl	sprintf
 678:.\main.c      ****     UART_PutString(mes);
 2772              		.loc 1 678 0
 2773 003e 3B46     		mov	r3, r7
 2774 0040 1846     		mov	r0, r3
 2775 0042 FFF7FEFF 		bl	UART_PutString
 679:.\main.c      **** }
 2776              		.loc 1 679 0
 2777 0046 1037     		adds	r7, r7, #16
 2778              		.cfi_def_cfa_offset 8
 2779 0048 BD46     		mov	sp, r7
 2780              		.cfi_def_cfa_register 13
 2781              		@ sp needed
 2782 004a 80BD     		pop	{r7, pc}
 2783              	.L135:
 2784              		.align	2
 2785              	.L134:
 2786 004c 00000000 		.word	direction
 2787 0050 B4000000 		.word	.LC9
 2788              		.cfi_endproc
 2789              	.LFE75:
 2790              		.size	reverseDirection, .-reverseDirection
 2791              		.global	__aeabi_dcmplt
 2792              		.global	__aeabi_ddiv
 2793              		.section	.text.setSpeed,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 63


 2794              		.align	2
 2795              		.global	setSpeed
 2796              		.thumb
 2797              		.thumb_func
 2798              		.type	setSpeed, %function
 2799              	setSpeed:
 2800              	.LFB76:
 680:.\main.c      **** 
 681:.\main.c      **** void setSpeed(double left, double right){
 2801              		.loc 1 681 0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 24
 2804              		@ frame_needed = 1, uses_anonymous_args = 0
 2805 0000 80B5     		push	{r7, lr}
 2806              		.cfi_def_cfa_offset 8
 2807              		.cfi_offset 7, -8
 2808              		.cfi_offset 14, -4
 2809 0002 86B0     		sub	sp, sp, #24
 2810              		.cfi_def_cfa_offset 32
 2811 0004 00AF     		add	r7, sp, #0
 2812              		.cfi_def_cfa_register 7
 2813 0006 C7E90201 		strd	r0, [r7, #8]
 2814 000a C7E90023 		strd	r2, [r7]
 682:.\main.c      ****     if(right < 0.0)
 2815              		.loc 1 682 0
 2816 000e D7E90001 		ldrd	r0, [r7]
 2817 0012 4FF00002 		mov	r2, #0
 2818 0016 4FF00003 		mov	r3, #0
 2819 001a FFF7FEFF 		bl	__aeabi_dcmplt
 2820 001e 0346     		mov	r3, r0
 2821 0020 002B     		cmp	r3, #0
 2822 0022 10D0     		beq	.L145
 683:.\main.c      ****     {
 684:.\main.c      ****         //char mes[16];
 685:.\main.c      ****        // sprintf(mes, "right dir: %d\r\n", !direction);
 686:.\main.c      ****        // UART_PutString(mes);
 687:.\main.c      ****         setRightDir(!direction);
 2823              		.loc 1 687 0
 2824 0024 304B     		ldr	r3, .L147+8
 2825 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2826 0028 002B     		cmp	r3, #0
 2827 002a 0CBF     		ite	eq
 2828 002c 0123     		moveq	r3, #1
 2829 002e 0023     		movne	r3, #0
 2830 0030 DBB2     		uxtb	r3, r3
 2831 0032 1846     		mov	r0, r3
 2832 0034 FFF7FEFF 		bl	setRightDir
 688:.\main.c      ****         right = -right;
 2833              		.loc 1 688 0
 2834 0038 3B68     		ldr	r3, [r7]
 2835 003a 3B60     		str	r3, [r7]
 2836 003c 7B68     		ldr	r3, [r7, #4]
 2837 003e 83F00043 		eor	r3, r3, #-2147483648
 2838 0042 7B60     		str	r3, [r7, #4]
 2839 0044 04E0     		b	.L139
 2840              	.L145:
 689:.\main.c      ****     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 64


 690:.\main.c      ****     else setRightDir(direction);
 2841              		.loc 1 690 0
 2842 0046 284B     		ldr	r3, .L147+8
 2843 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2844 004a 1846     		mov	r0, r3
 2845 004c FFF7FEFF 		bl	setRightDir
 2846              	.L139:
 691:.\main.c      ****     
 692:.\main.c      ****     if(left < 0.0)
 2847              		.loc 1 692 0
 2848 0050 D7E90201 		ldrd	r0, [r7, #8]
 2849 0054 4FF00002 		mov	r2, #0
 2850 0058 4FF00003 		mov	r3, #0
 2851 005c FFF7FEFF 		bl	__aeabi_dcmplt
 2852 0060 0346     		mov	r3, r0
 2853 0062 002B     		cmp	r3, #0
 2854 0064 10D0     		beq	.L146
 693:.\main.c      ****     {
 694:.\main.c      ****        // char mes[16];
 695:.\main.c      ****         //sprintf(mes, "left dir: %d\r\n", !direction);
 696:.\main.c      ****         //UART_PutString(mes);
 697:.\main.c      ****         setLeftDir(!direction);
 2855              		.loc 1 697 0
 2856 0066 204B     		ldr	r3, .L147+8
 2857 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2858 006a 002B     		cmp	r3, #0
 2859 006c 0CBF     		ite	eq
 2860 006e 0123     		moveq	r3, #1
 2861 0070 0023     		movne	r3, #0
 2862 0072 DBB2     		uxtb	r3, r3
 2863 0074 1846     		mov	r0, r3
 2864 0076 FFF7FEFF 		bl	setLeftDir
 698:.\main.c      ****         left = -left;
 2865              		.loc 1 698 0
 2866 007a BB68     		ldr	r3, [r7, #8]
 2867 007c BB60     		str	r3, [r7, #8]
 2868 007e FB68     		ldr	r3, [r7, #12]
 2869 0080 83F00043 		eor	r3, r3, #-2147483648
 2870 0084 FB60     		str	r3, [r7, #12]
 2871 0086 04E0     		b	.L142
 2872              	.L146:
 699:.\main.c      ****     }
 700:.\main.c      ****     else setLeftDir(direction);
 2873              		.loc 1 700 0
 2874 0088 174B     		ldr	r3, .L147+8
 2875 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2876 008c 1846     		mov	r0, r3
 2877 008e FFF7FEFF 		bl	setLeftDir
 2878              	.L142:
 701:.\main.c      ****     
 702:.\main.c      ****     int16 countsLeft = left/QUAD_RATIO;
 2879              		.loc 1 702 0
 2880 0092 D7E90201 		ldrd	r0, [r7, #8]
 2881 0096 12A3     		adr	r3, .L147
 2882 0098 D3E90023 		ldrd	r2, [r3]
 2883 009c FFF7FEFF 		bl	__aeabi_ddiv
 2884 00a0 0246     		mov	r2, r0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 65


 2885 00a2 0B46     		mov	r3, r1
 2886 00a4 1046     		mov	r0, r2
 2887 00a6 1946     		mov	r1, r3
 2888 00a8 FFF7FEFF 		bl	__aeabi_d2iz
 2889 00ac 0346     		mov	r3, r0
 2890 00ae FB82     		strh	r3, [r7, #22]	@ movhi
 703:.\main.c      ****     int16 countsRight = right/QUAD_RATIO;
 2891              		.loc 1 703 0
 2892 00b0 D7E90001 		ldrd	r0, [r7]
 2893 00b4 0AA3     		adr	r3, .L147
 2894 00b6 D3E90023 		ldrd	r2, [r3]
 2895 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2896 00be 0246     		mov	r2, r0
 2897 00c0 0B46     		mov	r3, r1
 2898 00c2 1046     		mov	r0, r2
 2899 00c4 1946     		mov	r1, r3
 2900 00c6 FFF7FEFF 		bl	__aeabi_d2iz
 2901 00ca 0346     		mov	r3, r0
 2902 00cc BB82     		strh	r3, [r7, #20]	@ movhi
 704:.\main.c      ****     
 705:.\main.c      ****     leftSpeedLimit = countsRight;
 2903              		.loc 1 705 0
 2904 00ce 074A     		ldr	r2, .L147+12
 2905 00d0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2906 00d2 1380     		strh	r3, [r2]	@ movhi
 706:.\main.c      ****     rightSpeedLimit = countsLeft;
 2907              		.loc 1 706 0
 2908 00d4 064A     		ldr	r2, .L147+16
 2909 00d6 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2910 00d8 1380     		strh	r3, [r2]	@ movhi
 707:.\main.c      **** }
 2911              		.loc 1 707 0
 2912 00da 1837     		adds	r7, r7, #24
 2913              		.cfi_def_cfa_offset 8
 2914 00dc BD46     		mov	sp, r7
 2915              		.cfi_def_cfa_register 13
 2916              		@ sp needed
 2917 00de 80BD     		pop	{r7, pc}
 2918              	.L148:
 2919              		.align	3
 2920              	.L147:
 2921 00e0 969526A5 		.word	-1524197994
 2922 00e4 A0DBEF3F 		.word	1072683936
 2923 00e8 00000000 		.word	direction
 2924 00ec 00000000 		.word	leftSpeedLimit
 2925 00f0 00000000 		.word	rightSpeedLimit
 2926              		.cfi_endproc
 2927              	.LFE76:
 2928              		.size	setSpeed, .-setSpeed
 2929 00f4 AFF30080 		.section	.text.brakeLeft,"ax",%progbits
 2930              		.align	2
 2931              		.global	brakeLeft
 2932              		.thumb
 2933              		.thumb_func
 2934              		.type	brakeLeft, %function
 2935              	brakeLeft:
 2936              	.LFB77:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 66


 708:.\main.c      **** 
 709:.\main.c      **** void brakeLeft()
 710:.\main.c      **** {
 2937              		.loc 1 710 0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 1, uses_anonymous_args = 0
 2941 0000 80B5     		push	{r7, lr}
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 00AF     		add	r7, sp, #0
 2946              		.cfi_def_cfa_register 7
 711:.\main.c      ****     PWM_1_WriteCompare(0);
 2947              		.loc 1 711 0
 2948 0004 0020     		movs	r0, #0
 2949 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 712:.\main.c      ****     left_duty_cycle = 0;
 2950              		.loc 1 712 0
 2951 000a 024B     		ldr	r3, .L150
 2952 000c 0022     		movs	r2, #0
 2953 000e 1A80     		strh	r2, [r3]	@ movhi
 713:.\main.c      **** }
 2954              		.loc 1 713 0
 2955 0010 80BD     		pop	{r7, pc}
 2956              	.L151:
 2957 0012 00BF     		.align	2
 2958              	.L150:
 2959 0014 00000000 		.word	left_duty_cycle
 2960              		.cfi_endproc
 2961              	.LFE77:
 2962              		.size	brakeLeft, .-brakeLeft
 2963              		.section	.text.brakeRight,"ax",%progbits
 2964              		.align	2
 2965              		.global	brakeRight
 2966              		.thumb
 2967              		.thumb_func
 2968              		.type	brakeRight, %function
 2969              	brakeRight:
 2970              	.LFB78:
 714:.\main.c      **** 
 715:.\main.c      **** void brakeRight()
 716:.\main.c      **** {
 2971              		.loc 1 716 0
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 0
 2974              		@ frame_needed = 1, uses_anonymous_args = 0
 2975 0000 80B5     		push	{r7, lr}
 2976              		.cfi_def_cfa_offset 8
 2977              		.cfi_offset 7, -8
 2978              		.cfi_offset 14, -4
 2979 0002 00AF     		add	r7, sp, #0
 2980              		.cfi_def_cfa_register 7
 717:.\main.c      ****      PWM_2_WriteCompare(0);
 2981              		.loc 1 717 0
 2982 0004 0020     		movs	r0, #0
 2983 0006 FFF7FEFF 		bl	PWM_2_WriteCompare
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 67


 718:.\main.c      ****      right_duty_cycle = 0;
 2984              		.loc 1 718 0
 2985 000a 024B     		ldr	r3, .L153
 2986 000c 0022     		movs	r2, #0
 2987 000e 1A80     		strh	r2, [r3]	@ movhi
 719:.\main.c      **** }
 2988              		.loc 1 719 0
 2989 0010 80BD     		pop	{r7, pc}
 2990              	.L154:
 2991 0012 00BF     		.align	2
 2992              	.L153:
 2993 0014 00000000 		.word	right_duty_cycle
 2994              		.cfi_endproc
 2995              	.LFE78:
 2996              		.size	brakeRight, .-brakeRight
 2997              		.section	.text.brakeMotor,"ax",%progbits
 2998              		.align	2
 2999              		.global	brakeMotor
 3000              		.thumb
 3001              		.thumb_func
 3002              		.type	brakeMotor, %function
 3003              	brakeMotor:
 3004              	.LFB79:
 720:.\main.c      **** 
 721:.\main.c      **** void brakeMotor(){
 3005              		.loc 1 721 0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 0
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009 0000 80B5     		push	{r7, lr}
 3010              		.cfi_def_cfa_offset 8
 3011              		.cfi_offset 7, -8
 3012              		.cfi_offset 14, -4
 3013 0002 00AF     		add	r7, sp, #0
 3014              		.cfi_def_cfa_register 7
 722:.\main.c      ****     setSpeed(0, 0);
 3015              		.loc 1 722 0
 3016 0004 4FF00000 		mov	r0, #0
 3017 0008 4FF00001 		mov	r1, #0
 3018 000c 4FF00002 		mov	r2, #0
 3019 0010 4FF00003 		mov	r3, #0
 3020 0014 FFF7FEFF 		bl	setSpeed
 723:.\main.c      ****     brakeLeft();
 3021              		.loc 1 723 0
 3022 0018 FFF7FEFF 		bl	brakeLeft
 724:.\main.c      ****     brakeRight();
 3023              		.loc 1 724 0
 3024 001c FFF7FEFF 		bl	brakeRight
 725:.\main.c      **** }
 3025              		.loc 1 725 0
 3026 0020 80BD     		pop	{r7, pc}
 3027              		.cfi_endproc
 3028              	.LFE79:
 3029              		.size	brakeMotor, .-brakeMotor
 3030 0022 00BF     		.section	.text.driveForwards,"ax",%progbits
 3031              		.align	2
 3032              		.global	driveForwards
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 68


 3033              		.thumb
 3034              		.thumb_func
 3035              		.type	driveForwards, %function
 3036              	driveForwards:
 3037              	.LFB80:
 726:.\main.c      **** 
 727:.\main.c      **** void driveForwards()
 728:.\main.c      **** {
 3038              		.loc 1 728 0
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 0
 3041              		@ frame_needed = 1, uses_anonymous_args = 0
 3042 0000 80B5     		push	{r7, lr}
 3043              		.cfi_def_cfa_offset 8
 3044              		.cfi_offset 7, -8
 3045              		.cfi_offset 14, -4
 3046 0002 00AF     		add	r7, sp, #0
 3047              		.cfi_def_cfa_register 7
 729:.\main.c      ****     setSpeed(speed, speed);
 3048              		.loc 1 729 0
 3049 0004 044B     		ldr	r3, .L157
 3050 0006 D3E90001 		ldrd	r0, [r3]
 3051 000a 034B     		ldr	r3, .L157
 3052 000c D3E90023 		ldrd	r2, [r3]
 3053 0010 FFF7FEFF 		bl	setSpeed
 730:.\main.c      **** }
 3054              		.loc 1 730 0
 3055 0014 80BD     		pop	{r7, pc}
 3056              	.L158:
 3057 0016 00BF     		.align	2
 3058              	.L157:
 3059 0018 00000000 		.word	speed
 3060              		.cfi_endproc
 3061              	.LFE80:
 3062              		.size	driveForwards, .-driveForwards
 3063              		.global	__aeabi_dmul
 3064              		.section	.text.turnRight,"ax",%progbits
 3065              		.align	2
 3066              		.global	turnRight
 3067              		.thumb
 3068              		.thumb_func
 3069              		.type	turnRight, %function
 3070              	turnRight:
 3071              	.LFB81:
 731:.\main.c      **** 
 732:.\main.c      **** void turnRight()
 733:.\main.c      **** {
 3072              		.loc 1 733 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 0
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 80B5     		push	{r7, lr}
 3077              		.cfi_def_cfa_offset 8
 3078              		.cfi_offset 7, -8
 3079              		.cfi_offset 14, -4
 3080 0002 00AF     		add	r7, sp, #0
 3081              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 69


 734:.\main.c      ****     setSpeed(0,speed * 1.5);
 3082              		.loc 1 734 0
 3083 0004 094B     		ldr	r3, .L160
 3084 0006 D3E90023 		ldrd	r2, [r3]
 3085 000a 1046     		mov	r0, r2
 3086 000c 1946     		mov	r1, r3
 3087 000e 4FF00002 		mov	r2, #0
 3088 0012 074B     		ldr	r3, .L160+4
 3089 0014 FFF7FEFF 		bl	__aeabi_dmul
 3090 0018 0246     		mov	r2, r0
 3091 001a 0B46     		mov	r3, r1
 3092 001c 4FF00000 		mov	r0, #0
 3093 0020 4FF00001 		mov	r1, #0
 3094 0024 FFF7FEFF 		bl	setSpeed
 735:.\main.c      **** }
 3095              		.loc 1 735 0
 3096 0028 80BD     		pop	{r7, pc}
 3097              	.L161:
 3098 002a 00BF     		.align	2
 3099              	.L160:
 3100 002c 00000000 		.word	speed
 3101 0030 0000F83F 		.word	1073217536
 3102              		.cfi_endproc
 3103              	.LFE81:
 3104              		.size	turnRight, .-turnRight
 3105              		.section	.text.turnLeft,"ax",%progbits
 3106              		.align	2
 3107              		.global	turnLeft
 3108              		.thumb
 3109              		.thumb_func
 3110              		.type	turnLeft, %function
 3111              	turnLeft:
 3112              	.LFB82:
 736:.\main.c      **** 
 737:.\main.c      **** void turnLeft()
 738:.\main.c      **** {
 3113              		.loc 1 738 0
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 0
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0000 80B5     		push	{r7, lr}
 3118              		.cfi_def_cfa_offset 8
 3119              		.cfi_offset 7, -8
 3120              		.cfi_offset 14, -4
 3121 0002 00AF     		add	r7, sp, #0
 3122              		.cfi_def_cfa_register 7
 739:.\main.c      ****     setSpeed(speed * 1.5,0);
 3123              		.loc 1 739 0
 3124 0004 0A4B     		ldr	r3, .L163
 3125 0006 D3E90023 		ldrd	r2, [r3]
 3126 000a 1046     		mov	r0, r2
 3127 000c 1946     		mov	r1, r3
 3128 000e 4FF00002 		mov	r2, #0
 3129 0012 084B     		ldr	r3, .L163+4
 3130 0014 FFF7FEFF 		bl	__aeabi_dmul
 3131 0018 0246     		mov	r2, r0
 3132 001a 0B46     		mov	r3, r1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 70


 3133 001c 1046     		mov	r0, r2
 3134 001e 1946     		mov	r1, r3
 3135 0020 4FF00002 		mov	r2, #0
 3136 0024 4FF00003 		mov	r3, #0
 3137 0028 FFF7FEFF 		bl	setSpeed
 740:.\main.c      **** }
 3138              		.loc 1 740 0
 3139 002c 80BD     		pop	{r7, pc}
 3140              	.L164:
 3141 002e 00BF     		.align	2
 3142              	.L163:
 3143 0030 00000000 		.word	speed
 3144 0034 0000F83F 		.word	1073217536
 3145              		.cfi_endproc
 3146              	.LFE82:
 3147              		.size	turnLeft, .-turnLeft
 3148              		.section	.text.turnU,"ax",%progbits
 3149              		.align	2
 3150              		.global	turnU
 3151              		.thumb
 3152              		.thumb_func
 3153              		.type	turnU, %function
 3154              	turnU:
 3155              	.LFB83:
 741:.\main.c      **** 
 742:.\main.c      **** void turnU()
 743:.\main.c      **** {
 3156              		.loc 1 743 0
 3157              		.cfi_startproc
 3158              		@ args = 0, pretend = 0, frame = 0
 3159              		@ frame_needed = 1, uses_anonymous_args = 0
 3160 0000 B0B5     		push	{r4, r5, r7, lr}
 3161              		.cfi_def_cfa_offset 16
 3162              		.cfi_offset 4, -16
 3163              		.cfi_offset 5, -12
 3164              		.cfi_offset 7, -8
 3165              		.cfi_offset 14, -4
 3166 0002 00AF     		add	r7, sp, #0
 3167              		.cfi_def_cfa_register 7
 744:.\main.c      ****     setSpeed(-speed*1.5,speed*1.5);
 3168              		.loc 1 744 0
 3169 0004 0F4B     		ldr	r3, .L166
 3170 0006 D3E90023 		ldrd	r2, [r3]
 3171 000a 1046     		mov	r0, r2
 3172 000c 83F00041 		eor	r1, r3, #-2147483648
 3173 0010 4FF00002 		mov	r2, #0
 3174 0014 0C4B     		ldr	r3, .L166+4
 3175 0016 FFF7FEFF 		bl	__aeabi_dmul
 3176 001a 0246     		mov	r2, r0
 3177 001c 0B46     		mov	r3, r1
 3178 001e 1446     		mov	r4, r2
 3179 0020 1D46     		mov	r5, r3
 3180 0022 084B     		ldr	r3, .L166
 3181 0024 D3E90023 		ldrd	r2, [r3]
 3182 0028 1046     		mov	r0, r2
 3183 002a 1946     		mov	r1, r3
 3184 002c 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 71


 3185 0030 054B     		ldr	r3, .L166+4
 3186 0032 FFF7FEFF 		bl	__aeabi_dmul
 3187 0036 0246     		mov	r2, r0
 3188 0038 0B46     		mov	r3, r1
 3189 003a 2046     		mov	r0, r4
 3190 003c 2946     		mov	r1, r5
 3191 003e FFF7FEFF 		bl	setSpeed
 745:.\main.c      **** }
 3192              		.loc 1 745 0
 3193 0042 B0BD     		pop	{r4, r5, r7, pc}
 3194              	.L167:
 3195              		.align	2
 3196              	.L166:
 3197 0044 00000000 		.word	speed
 3198 0048 0000F83F 		.word	1073217536
 3199              		.cfi_endproc
 3200              	.LFE83:
 3201              		.size	turnU, .-turnU
 3202              		.section	.text.initTurnLeft,"ax",%progbits
 3203              		.align	2
 3204              		.global	initTurnLeft
 3205              		.thumb
 3206              		.thumb_func
 3207              		.type	initTurnLeft, %function
 3208              	initTurnLeft:
 3209              	.LFB84:
 746:.\main.c      **** 
 747:.\main.c      **** void initTurnLeft(){
 3210              		.loc 1 747 0
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 0
 3213              		@ frame_needed = 1, uses_anonymous_args = 0
 3214 0000 80B5     		push	{r7, lr}
 3215              		.cfi_def_cfa_offset 8
 3216              		.cfi_offset 7, -8
 3217              		.cfi_offset 14, -4
 3218 0002 00AF     		add	r7, sp, #0
 3219              		.cfi_def_cfa_register 7
 748:.\main.c      ****     Timer_2_Stop();
 3220              		.loc 1 748 0
 3221 0004 FFF7FEFF 		bl	Timer_2_Stop
 749:.\main.c      ****     prev_movement_state = movement_state;
 3222              		.loc 1 749 0
 3223 0008 084B     		ldr	r3, .L169
 3224 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3225 000c 084B     		ldr	r3, .L169+4
 3226 000e 1A70     		strb	r2, [r3]
 750:.\main.c      ****     movement_state = LTURN;
 3227              		.loc 1 750 0
 3228 0010 064B     		ldr	r3, .L169
 3229 0012 0122     		movs	r2, #1
 3230 0014 1A70     		strb	r2, [r3]
 751:.\main.c      ****     brakeLeft();
 3231              		.loc 1 751 0
 3232 0016 FFF7FEFF 		bl	brakeLeft
 752:.\main.c      ****     start_turn_count = QuadDec_M2_GetCounter();
 3233              		.loc 1 752 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 72


 3234 001a FFF7FEFF 		bl	QuadDec_M2_GetCounter
 3235 001e 0346     		mov	r3, r0
 3236 0020 1A46     		mov	r2, r3
 3237 0022 044B     		ldr	r3, .L169+8
 3238 0024 1A80     		strh	r2, [r3]	@ movhi
 753:.\main.c      ****     Timer_2_Start();
 3239              		.loc 1 753 0
 3240 0026 FFF7FEFF 		bl	Timer_2_Start
 754:.\main.c      **** }
 3241              		.loc 1 754 0
 3242 002a 80BD     		pop	{r7, pc}
 3243              	.L170:
 3244              		.align	2
 3245              	.L169:
 3246 002c 00000000 		.word	movement_state
 3247 0030 00000000 		.word	prev_movement_state
 3248 0034 00000000 		.word	start_turn_count
 3249              		.cfi_endproc
 3250              	.LFE84:
 3251              		.size	initTurnLeft, .-initTurnLeft
 3252              		.section	.text.initTurnRight,"ax",%progbits
 3253              		.align	2
 3254              		.global	initTurnRight
 3255              		.thumb
 3256              		.thumb_func
 3257              		.type	initTurnRight, %function
 3258              	initTurnRight:
 3259              	.LFB85:
 755:.\main.c      **** 
 756:.\main.c      **** void initTurnRight(){
 3260              		.loc 1 756 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 1, uses_anonymous_args = 0
 3264 0000 80B5     		push	{r7, lr}
 3265              		.cfi_def_cfa_offset 8
 3266              		.cfi_offset 7, -8
 3267              		.cfi_offset 14, -4
 3268 0002 00AF     		add	r7, sp, #0
 3269              		.cfi_def_cfa_register 7
 757:.\main.c      ****     Timer_2_Stop();
 3270              		.loc 1 757 0
 3271 0004 FFF7FEFF 		bl	Timer_2_Stop
 758:.\main.c      ****     prev_movement_state = movement_state;
 3272              		.loc 1 758 0
 3273 0008 084B     		ldr	r3, .L172
 3274 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3275 000c 084B     		ldr	r3, .L172+4
 3276 000e 1A70     		strb	r2, [r3]
 759:.\main.c      ****     movement_state = RTURN;
 3277              		.loc 1 759 0
 3278 0010 064B     		ldr	r3, .L172
 3279 0012 0222     		movs	r2, #2
 3280 0014 1A70     		strb	r2, [r3]
 760:.\main.c      ****     brakeRight();
 3281              		.loc 1 760 0
 3282 0016 FFF7FEFF 		bl	brakeRight
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 73


 761:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3283              		.loc 1 761 0
 3284 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3285 001e 0346     		mov	r3, r0
 3286 0020 1A46     		mov	r2, r3
 3287 0022 044B     		ldr	r3, .L172+8
 3288 0024 1A80     		strh	r2, [r3]	@ movhi
 762:.\main.c      ****     Timer_2_Start();
 3289              		.loc 1 762 0
 3290 0026 FFF7FEFF 		bl	Timer_2_Start
 763:.\main.c      **** }
 3291              		.loc 1 763 0
 3292 002a 80BD     		pop	{r7, pc}
 3293              	.L173:
 3294              		.align	2
 3295              	.L172:
 3296 002c 00000000 		.word	movement_state
 3297 0030 00000000 		.word	prev_movement_state
 3298 0034 00000000 		.word	start_turn_count
 3299              		.cfi_endproc
 3300              	.LFE85:
 3301              		.size	initTurnRight, .-initTurnRight
 3302              		.section	.text.initTurnU,"ax",%progbits
 3303              		.align	2
 3304              		.global	initTurnU
 3305              		.thumb
 3306              		.thumb_func
 3307              		.type	initTurnU, %function
 3308              	initTurnU:
 3309              	.LFB86:
 764:.\main.c      **** 
 765:.\main.c      **** void initTurnU(){
 3310              		.loc 1 765 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314 0000 80B5     		push	{r7, lr}
 3315              		.cfi_def_cfa_offset 8
 3316              		.cfi_offset 7, -8
 3317              		.cfi_offset 14, -4
 3318 0002 00AF     		add	r7, sp, #0
 3319              		.cfi_def_cfa_register 7
 766:.\main.c      ****     Timer_2_Stop();
 3320              		.loc 1 766 0
 3321 0004 FFF7FEFF 		bl	Timer_2_Stop
 767:.\main.c      ****     prev_movement_state = movement_state;
 3322              		.loc 1 767 0
 3323 0008 084B     		ldr	r3, .L175
 3324 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3325 000c 084B     		ldr	r3, .L175+4
 3326 000e 1A70     		strb	r2, [r3]
 768:.\main.c      ****     movement_state = UTURN;
 3327              		.loc 1 768 0
 3328 0010 064B     		ldr	r3, .L175
 3329 0012 0722     		movs	r2, #7
 3330 0014 1A70     		strb	r2, [r3]
 769:.\main.c      ****     brakeMotor();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 74


 3331              		.loc 1 769 0
 3332 0016 FFF7FEFF 		bl	brakeMotor
 770:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3333              		.loc 1 770 0
 3334 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3335 001e 0346     		mov	r3, r0
 3336 0020 1A46     		mov	r2, r3
 3337 0022 044B     		ldr	r3, .L175+8
 3338 0024 1A80     		strh	r2, [r3]	@ movhi
 771:.\main.c      ****     Timer_2_Start();
 3339              		.loc 1 771 0
 3340 0026 FFF7FEFF 		bl	Timer_2_Start
 772:.\main.c      **** }
 3341              		.loc 1 772 0
 3342 002a 80BD     		pop	{r7, pc}
 3343              	.L176:
 3344              		.align	2
 3345              	.L175:
 3346 002c 00000000 		.word	movement_state
 3347 0030 00000000 		.word	prev_movement_state
 3348 0034 00000000 		.word	start_turn_count
 3349              		.cfi_endproc
 3350              	.LFE86:
 3351              		.size	initTurnU, .-initTurnU
 3352              		.section	.text.initForward,"ax",%progbits
 3353              		.align	2
 3354              		.global	initForward
 3355              		.thumb
 3356              		.thumb_func
 3357              		.type	initForward, %function
 3358              	initForward:
 3359              	.LFB87:
 773:.\main.c      **** 
 774:.\main.c      **** void initForward(){
 3360              		.loc 1 774 0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 0
 3363              		@ frame_needed = 1, uses_anonymous_args = 0
 3364 0000 80B5     		push	{r7, lr}
 3365              		.cfi_def_cfa_offset 8
 3366              		.cfi_offset 7, -8
 3367              		.cfi_offset 14, -4
 3368 0002 00AF     		add	r7, sp, #0
 3369              		.cfi_def_cfa_register 7
 775:.\main.c      ****     brakeMotor();
 3370              		.loc 1 775 0
 3371 0004 FFF7FEFF 		bl	brakeMotor
 776:.\main.c      ****     movement_state = DRIVE;
 3372              		.loc 1 776 0
 3373 0008 014B     		ldr	r3, .L178
 3374 000a 0022     		movs	r2, #0
 3375 000c 1A70     		strb	r2, [r3]
 777:.\main.c      **** }
 3376              		.loc 1 777 0
 3377 000e 80BD     		pop	{r7, pc}
 3378              	.L179:
 3379              		.align	2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 75


 3380              	.L178:
 3381 0010 00000000 		.word	movement_state
 3382              		.cfi_endproc
 3383              	.LFE87:
 3384              		.size	initForward, .-initForward
 3385              		.section	.text.initBrake,"ax",%progbits
 3386              		.align	2
 3387              		.global	initBrake
 3388              		.thumb
 3389              		.thumb_func
 3390              		.type	initBrake, %function
 3391              	initBrake:
 3392              	.LFB88:
 778:.\main.c      **** 
 779:.\main.c      **** void initBrake(){
 3393              		.loc 1 779 0
 3394              		.cfi_startproc
 3395              		@ args = 0, pretend = 0, frame = 0
 3396              		@ frame_needed = 1, uses_anonymous_args = 0
 3397              		@ link register save eliminated.
 3398 0000 80B4     		push	{r7}
 3399              		.cfi_def_cfa_offset 4
 3400              		.cfi_offset 7, -4
 3401 0002 00AF     		add	r7, sp, #0
 3402              		.cfi_def_cfa_register 7
 780:.\main.c      ****     movement_state = STOPPED;
 3403              		.loc 1 780 0
 3404 0004 034B     		ldr	r3, .L181
 3405 0006 0322     		movs	r2, #3
 3406 0008 1A70     		strb	r2, [r3]
 781:.\main.c      **** }
 3407              		.loc 1 781 0
 3408 000a BD46     		mov	sp, r7
 3409              		.cfi_def_cfa_register 13
 3410              		@ sp needed
 3411 000c 5DF8047B 		ldr	r7, [sp], #4
 3412              		.cfi_restore 7
 3413              		.cfi_def_cfa_offset 0
 3414 0010 7047     		bx	lr
 3415              	.L182:
 3416 0012 00BF     		.align	2
 3417              	.L181:
 3418 0014 00000000 		.word	movement_state
 3419              		.cfi_endproc
 3420              	.LFE88:
 3421              		.size	initBrake, .-initBrake
 3422              		.section	.text.initTrack,"ax",%progbits
 3423              		.align	2
 3424              		.global	initTrack
 3425              		.thumb
 3426              		.thumb_func
 3427              		.type	initTrack, %function
 3428              	initTrack:
 3429              	.LFB89:
 782:.\main.c      **** 
 783:.\main.c      **** void initTrack()
 784:.\main.c      **** {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 76


 3430              		.loc 1 784 0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 0
 3433              		@ frame_needed = 1, uses_anonymous_args = 0
 3434              		@ link register save eliminated.
 3435 0000 80B4     		push	{r7}
 3436              		.cfi_def_cfa_offset 4
 3437              		.cfi_offset 7, -4
 3438 0002 00AF     		add	r7, sp, #0
 3439              		.cfi_def_cfa_register 7
 785:.\main.c      ****     movement_state = TRACKING;
 3440              		.loc 1 785 0
 3441 0004 034B     		ldr	r3, .L184
 3442 0006 0422     		movs	r2, #4
 3443 0008 1A70     		strb	r2, [r3]
 786:.\main.c      **** }
 3444              		.loc 1 786 0
 3445 000a BD46     		mov	sp, r7
 3446              		.cfi_def_cfa_register 13
 3447              		@ sp needed
 3448 000c 5DF8047B 		ldr	r7, [sp], #4
 3449              		.cfi_restore 7
 3450              		.cfi_def_cfa_offset 0
 3451 0010 7047     		bx	lr
 3452              	.L185:
 3453 0012 00BF     		.align	2
 3454              	.L184:
 3455 0014 00000000 		.word	movement_state
 3456              		.cfi_endproc
 3457              	.LFE89:
 3458              		.size	initTrack, .-initTrack
 3459              		.section	.text.initTrackU,"ax",%progbits
 3460              		.align	2
 3461              		.global	initTrackU
 3462              		.thumb
 3463              		.thumb_func
 3464              		.type	initTrackU, %function
 3465              	initTrackU:
 3466              	.LFB90:
 787:.\main.c      **** 
 788:.\main.c      **** void initTrackU(){
 3467              		.loc 1 788 0
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 0
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471              		@ link register save eliminated.
 3472 0000 80B4     		push	{r7}
 3473              		.cfi_def_cfa_offset 4
 3474              		.cfi_offset 7, -4
 3475 0002 00AF     		add	r7, sp, #0
 3476              		.cfi_def_cfa_register 7
 789:.\main.c      ****     movement_state = TRACKING_U;
 3477              		.loc 1 789 0
 3478 0004 034B     		ldr	r3, .L187
 3479 0006 0522     		movs	r2, #5
 3480 0008 1A70     		strb	r2, [r3]
 790:.\main.c      **** }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 77


 3481              		.loc 1 790 0
 3482 000a BD46     		mov	sp, r7
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 000c 5DF8047B 		ldr	r7, [sp], #4
 3486              		.cfi_restore 7
 3487              		.cfi_def_cfa_offset 0
 3488 0010 7047     		bx	lr
 3489              	.L188:
 3490 0012 00BF     		.align	2
 3491              	.L187:
 3492 0014 00000000 		.word	movement_state
 3493              		.cfi_endproc
 3494              	.LFE90:
 3495              		.size	initTrackU, .-initTrackU
 3496              		.section	.text.inittrackLineZ,"ax",%progbits
 3497              		.align	2
 3498              		.global	inittrackLineZ
 3499              		.thumb
 3500              		.thumb_func
 3501              		.type	inittrackLineZ, %function
 3502              	inittrackLineZ:
 3503              	.LFB91:
 791:.\main.c      **** 
 792:.\main.c      **** void inittrackLineZ(){
 3504              		.loc 1 792 0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 0
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508              		@ link register save eliminated.
 3509 0000 80B4     		push	{r7}
 3510              		.cfi_def_cfa_offset 4
 3511              		.cfi_offset 7, -4
 3512 0002 00AF     		add	r7, sp, #0
 3513              		.cfi_def_cfa_register 7
 793:.\main.c      ****     movement_state = TRACKING_SOFT;
 3514              		.loc 1 793 0
 3515 0004 034B     		ldr	r3, .L190
 3516 0006 0622     		movs	r2, #6
 3517 0008 1A70     		strb	r2, [r3]
 794:.\main.c      **** }
 3518              		.loc 1 794 0
 3519 000a BD46     		mov	sp, r7
 3520              		.cfi_def_cfa_register 13
 3521              		@ sp needed
 3522 000c 5DF8047B 		ldr	r7, [sp], #4
 3523              		.cfi_restore 7
 3524              		.cfi_def_cfa_offset 0
 3525 0010 7047     		bx	lr
 3526              	.L191:
 3527 0012 00BF     		.align	2
 3528              	.L190:
 3529 0014 00000000 		.word	movement_state
 3530              		.cfi_endproc
 3531              	.LFE91:
 3532              		.size	inittrackLineZ, .-inittrackLineZ
 3533              		.section	.text.rxInt,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 78


 3534              		.align	2
 3535              		.global	rxInt
 3536              		.thumb
 3537              		.thumb_func
 3538              		.type	rxInt, %function
 3539              	rxInt:
 3540              	.LFB92:
 795:.\main.c      **** 
 796:.\main.c      **** 
 797:.\main.c      **** 
 798:.\main.c      **** //Binary RF Data
 799:.\main.c      **** CY_ISR(rxInt){
 3541              		.loc 1 799 0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 8
 3544              		@ frame_needed = 1, uses_anonymous_args = 0
 3545 0000 B0B5     		push	{r4, r5, r7, lr}
 3546              		.cfi_def_cfa_offset 16
 3547              		.cfi_offset 4, -16
 3548              		.cfi_offset 5, -12
 3549              		.cfi_offset 7, -8
 3550              		.cfi_offset 14, -4
 3551 0002 82B0     		sub	sp, sp, #8
 3552              		.cfi_def_cfa_offset 24
 3553 0004 00AF     		add	r7, sp, #0
 3554              		.cfi_def_cfa_register 7
 800:.\main.c      ****     char rf_char = UART_GetChar();
 3555              		.loc 1 800 0
 3556 0006 FFF7FEFF 		bl	UART_GetChar
 3557 000a 0346     		mov	r3, r0
 3558 000c FB71     		strb	r3, [r7, #7]
 801:.\main.c      ****     if(rf_char == SOP){
 3559              		.loc 1 801 0
 3560 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3561 0010 AA2B     		cmp	r3, #170
 3562 0012 2BD1     		bne	.L193
 802:.\main.c      ****             //we should evalute whether the last packet was valid by measuring the length of data
 803:.\main.c      ****             if(byteCount == 34)
 3563              		.loc 1 803 0
 3564 0014 224B     		ldr	r3, .L197
 3565 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3566 0018 222B     		cmp	r3, #34
 3567 001a 20D1     		bne	.L194
 804:.\main.c      ****             {
 805:.\main.c      ****                 system_state = buffer_state;
 3568              		.loc 1 805 0
 3569 001c 214B     		ldr	r3, .L197+4
 3570 001e 224A     		ldr	r2, .L197+8
 3571 0020 1568     		ldr	r5, [r2]	@ unaligned
 3572 0022 5468     		ldr	r4, [r2, #4]	@ unaligned
 3573 0024 9068     		ldr	r0, [r2, #8]	@ unaligned
 3574 0026 D168     		ldr	r1, [r2, #12]	@ unaligned
 3575 0028 1D60     		str	r5, [r3]	@ unaligned
 3576 002a 5C60     		str	r4, [r3, #4]	@ unaligned
 3577 002c 9860     		str	r0, [r3, #8]	@ unaligned
 3578 002e D960     		str	r1, [r3, #12]	@ unaligned
 3579 0030 1569     		ldr	r5, [r2, #16]	@ unaligned
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 79


 3580 0032 5469     		ldr	r4, [r2, #20]	@ unaligned
 3581 0034 9069     		ldr	r0, [r2, #24]	@ unaligned
 3582 0036 D169     		ldr	r1, [r2, #28]	@ unaligned
 3583 0038 1D61     		str	r5, [r3, #16]	@ unaligned
 3584 003a 5C61     		str	r4, [r3, #20]	@ unaligned
 3585 003c 9861     		str	r0, [r3, #24]	@ unaligned
 3586 003e D961     		str	r1, [r3, #28]	@ unaligned
 806:.\main.c      ****                 if(initial_pos_valid == 0)
 3587              		.loc 1 806 0
 3588 0040 1A4B     		ldr	r3, .L197+12
 3589 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3590 0044 002B     		cmp	r3, #0
 3591 0046 0AD1     		bne	.L194
 807:.\main.c      ****                 {
 808:.\main.c      ****                     LED_Write(~LED_Read());
 3592              		.loc 1 808 0
 3593 0048 FFF7FEFF 		bl	LED_Read
 3594 004c 0346     		mov	r3, r0
 3595 004e DB43     		mvns	r3, r3
 3596 0050 DBB2     		uxtb	r3, r3
 3597 0052 1846     		mov	r0, r3
 3598 0054 FFF7FEFF 		bl	LED_Write
 809:.\main.c      ****                     initial_pos_valid = 1;
 3599              		.loc 1 809 0
 3600 0058 144B     		ldr	r3, .L197+12
 3601 005a 0122     		movs	r2, #1
 3602 005c 1A70     		strb	r2, [r3]
 3603              	.L194:
 810:.\main.c      ****                 }
 811:.\main.c      ****             }
 812:.\main.c      ****             byteCount = 2; //2 for legacy purposes - fix this
 3604              		.loc 1 812 0
 3605 005e 104B     		ldr	r3, .L197
 3606 0060 0222     		movs	r2, #2
 3607 0062 1A70     		strb	r2, [r3]
 813:.\main.c      ****             flag_rx = 0;
 3608              		.loc 1 813 0
 3609 0064 124B     		ldr	r3, .L197+16
 3610 0066 0022     		movs	r2, #0
 3611 0068 1A70     		strb	r2, [r3]
 3612 006a 16E0     		b	.L192
 3613              	.L193:
 814:.\main.c      ****              //LED_Write(~LED_Read()); //flash an LED so we know the interrupt is called
 815:.\main.c      ****         }
 816:.\main.c      ****         else
 817:.\main.c      ****         {
 818:.\main.c      ****             packet[byteCount % 2] = rf_char;
 3614              		.loc 1 818 0
 3615 006c 0C4B     		ldr	r3, .L197
 3616 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3617 0070 03F00103 		and	r3, r3, #1
 3618 0074 0F49     		ldr	r1, .L197+20
 3619 0076 FA79     		ldrb	r2, [r7, #7]
 3620 0078 CA54     		strb	r2, [r1, r3]
 819:.\main.c      ****            
 820:.\main.c      ****             if(byteCount % 2 == 1) //we have received a whole 16-bit packet
 3621              		.loc 1 820 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 80


 3622 007a 094B     		ldr	r3, .L197
 3623 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3624 007e 03F00103 		and	r3, r3, #1
 3625 0082 DBB2     		uxtb	r3, r3
 3626 0084 002B     		cmp	r3, #0
 3627 0086 02D0     		beq	.L196
 821:.\main.c      ****             {
 822:.\main.c      ****                 flag_rx = 1;
 3628              		.loc 1 822 0
 3629 0088 094B     		ldr	r3, .L197+16
 3630 008a 0122     		movs	r2, #1
 3631 008c 1A70     		strb	r2, [r3]
 3632              	.L196:
 823:.\main.c      ****             }
 824:.\main.c      ****             byteCount = (byteCount + 1);
 3633              		.loc 1 824 0
 3634 008e 044B     		ldr	r3, .L197
 3635 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3636 0092 0133     		adds	r3, r3, #1
 3637 0094 DAB2     		uxtb	r2, r3
 3638 0096 024B     		ldr	r3, .L197
 3639 0098 1A70     		strb	r2, [r3]
 3640              	.L192:
 825:.\main.c      ****         }
 826:.\main.c      **** }
 3641              		.loc 1 826 0
 3642 009a 0837     		adds	r7, r7, #8
 3643              		.cfi_def_cfa_offset 16
 3644 009c BD46     		mov	sp, r7
 3645              		.cfi_def_cfa_register 13
 3646              		@ sp needed
 3647 009e B0BD     		pop	{r4, r5, r7, pc}
 3648              	.L198:
 3649              		.align	2
 3650              	.L197:
 3651 00a0 00000000 		.word	byteCount
 3652 00a4 00000000 		.word	system_state
 3653 00a8 00000000 		.word	buffer_state
 3654 00ac 00000000 		.word	initial_pos_valid
 3655 00b0 00000000 		.word	flag_rx
 3656 00b4 00000000 		.word	packet
 3657              		.cfi_endproc
 3658              	.LFE92:
 3659              		.size	rxInt, .-rxInt
 3660              		.global	__aeabi_i2f
 3661              		.global	__aeabi_fmul
 3662              		.global	__aeabi_f2iz
 3663              		.section	.rodata
 3664 00be 0000     		.align	2
 3665              	.LC10:
 3666 00c0 74617267 		.ascii	"target quad: %d\015\012\000"
 3666      65742071 
 3666      7561643A 
 3666      2025640D 
 3666      0A00
 3667 00d2 0000     		.align	2
 3668              	.LC11:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 81


 3669 00d4 72656365 		.ascii	"received: \000"
 3669      69766564 
 3669      3A2000
 3670 00df 00       		.align	2
 3671              	.LC12:
 3672 00e0 0D0A00   		.ascii	"\015\012\000"
 3673 00e3 00       		.align	2
 3674              	.LC13:
 3675 00e4 73746172 		.ascii	"starting from instruction %d\015\012\000"
 3675      74696E67 
 3675      2066726F 
 3675      6D20696E 
 3675      73747275 
 3676              		.section	.text.BT_rxInt,"ax",%progbits
 3677              		.align	2
 3678              		.global	BT_rxInt
 3679              		.thumb
 3680              		.thumb_func
 3681              		.type	BT_rxInt, %function
 3682              	BT_rxInt:
 3683              	.LFB93:
 827:.\main.c      **** 
 828:.\main.c      **** CY_ISR(BT_rxInt)
 829:.\main.c      **** {
 3684              		.loc 1 829 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 32
 3687              		@ frame_needed = 1, uses_anonymous_args = 0
 3688 0000 80B5     		push	{r7, lr}
 3689              		.cfi_def_cfa_offset 8
 3690              		.cfi_offset 7, -8
 3691              		.cfi_offset 14, -4
 3692 0002 88B0     		sub	sp, sp, #32
 3693              		.cfi_def_cfa_offset 40
 3694 0004 00AF     		add	r7, sp, #0
 3695              		.cfi_def_cfa_register 7
 830:.\main.c      ****     char rf_char = UART_GetChar();
 3696              		.loc 1 830 0
 3697 0006 FFF7FEFF 		bl	UART_GetChar
 3698 000a 0346     		mov	r3, r0
 3699 000c FB77     		strb	r3, [r7, #31]
 831:.\main.c      ****     switch(rf_char){
 3700              		.loc 1 831 0
 3701 000e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3702 0010 313B     		subs	r3, r3, #49
 3703 0012 492B     		cmp	r3, #73
 3704 0014 00F28182 		bhi	.L199
 3705 0018 01A2     		adr	r2, .L202
 3706 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3707 001e 00BF     		.p2align 2
 3708              	.L202:
 3709 0020 71030000 		.word	.L201+1
 3710 0024 15020000 		.word	.L203+1
 3711 0028 1B050000 		.word	.L199+1
 3712 002c 1B050000 		.word	.L199+1
 3713 0030 1B050000 		.word	.L199+1
 3714 0034 1B050000 		.word	.L199+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 82


 3715 0038 1B050000 		.word	.L199+1
 3716 003c 1B050000 		.word	.L199+1
 3717 0040 1B050000 		.word	.L199+1
 3718 0044 1B050000 		.word	.L199+1
 3719 0048 1B050000 		.word	.L199+1
 3720 004c 1B050000 		.word	.L199+1
 3721 0050 1B050000 		.word	.L199+1
 3722 0054 1B050000 		.word	.L199+1
 3723 0058 1B050000 		.word	.L199+1
 3724 005c 1B050000 		.word	.L199+1
 3725 0060 1B050000 		.word	.L199+1
 3726 0064 1B050000 		.word	.L199+1
 3727 0068 1B050000 		.word	.L199+1
 3728 006c 1B050000 		.word	.L199+1
 3729 0070 1B050000 		.word	.L199+1
 3730 0074 1B050000 		.word	.L199+1
 3731 0078 1B050000 		.word	.L199+1
 3732 007c 1B050000 		.word	.L199+1
 3733 0080 1B050000 		.word	.L199+1
 3734 0084 1B050000 		.word	.L199+1
 3735 0088 1B050000 		.word	.L199+1
 3736 008c 1B050000 		.word	.L199+1
 3737 0090 1B050000 		.word	.L199+1
 3738 0094 1B050000 		.word	.L199+1
 3739 0098 1B050000 		.word	.L199+1
 3740 009c 1B050000 		.word	.L199+1
 3741 00a0 1B050000 		.word	.L199+1
 3742 00a4 1B050000 		.word	.L199+1
 3743 00a8 1B050000 		.word	.L199+1
 3744 00ac 1B050000 		.word	.L199+1
 3745 00b0 1B050000 		.word	.L199+1
 3746 00b4 1B050000 		.word	.L199+1
 3747 00b8 1B050000 		.word	.L199+1
 3748 00bc 1B050000 		.word	.L199+1
 3749 00c0 1B050000 		.word	.L199+1
 3750 00c4 1B050000 		.word	.L199+1
 3751 00c8 1B050000 		.word	.L199+1
 3752 00cc 1B050000 		.word	.L199+1
 3753 00d0 1B050000 		.word	.L199+1
 3754 00d4 1B050000 		.word	.L199+1
 3755 00d8 1B050000 		.word	.L199+1
 3756 00dc 1B050000 		.word	.L199+1
 3757 00e0 49010000 		.word	.L204+1
 3758 00e4 1B050000 		.word	.L199+1
 3759 00e8 1B050000 		.word	.L199+1
 3760 00ec 6D010000 		.word	.L205+1
 3761 00f0 1B050000 		.word	.L199+1
 3762 00f4 79010000 		.word	.L206+1
 3763 00f8 1B050000 		.word	.L199+1
 3764 00fc 1B050000 		.word	.L199+1
 3765 0100 1B050000 		.word	.L199+1
 3766 0104 1B050000 		.word	.L199+1
 3767 0108 1B050000 		.word	.L199+1
 3768 010c 1B050000 		.word	.L199+1
 3769 0110 1B050000 		.word	.L199+1
 3770 0114 1B050000 		.word	.L199+1
 3771 0118 1B050000 		.word	.L199+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 83


 3772 011c 1B050000 		.word	.L199+1
 3773 0120 A9010000 		.word	.L207+1
 3774 0124 FF010000 		.word	.L208+1
 3775 0128 61010000 		.word	.L209+1
 3776 012c 85010000 		.word	.L210+1
 3777 0130 91010000 		.word	.L211+1
 3778 0134 1B050000 		.word	.L199+1
 3779 0138 55010000 		.word	.L212+1
 3780 013c 1B050000 		.word	.L199+1
 3781 0140 1B050000 		.word	.L199+1
 3782 0144 9D010000 		.word	.L213+1
 3783              		.p2align 1
 3784              	.L204:
 3785              	.LBB11:
 832:.\main.c      ****     case 'a':
 833:.\main.c      ****         initTurnLeft();
 3786              		.loc 1 833 0
 3787 0148 FFF7FEFF 		bl	initTurnLeft
 834:.\main.c      ****         track_mode = NO_TRACK;
 3788              		.loc 1 834 0
 3789 014c 9C4B     		ldr	r3, .L233
 3790 014e 0022     		movs	r2, #0
 3791 0150 1A70     		strb	r2, [r3]
 835:.\main.c      ****         break;
 3792              		.loc 1 835 0
 3793 0152 E2E1     		b	.L199
 3794              	.L212:
 836:.\main.c      ****     case 'w':
 837:.\main.c      ****         initForward();
 3795              		.loc 1 837 0
 3796 0154 FFF7FEFF 		bl	initForward
 838:.\main.c      ****         track_mode = NO_TRACK;
 3797              		.loc 1 838 0
 3798 0158 994B     		ldr	r3, .L233
 3799 015a 0022     		movs	r2, #0
 3800 015c 1A70     		strb	r2, [r3]
 839:.\main.c      ****         break;
 3801              		.loc 1 839 0
 3802 015e DCE1     		b	.L199
 3803              	.L209:
 840:.\main.c      ****     case 's': 
 841:.\main.c      ****         reverseDirection();
 3804              		.loc 1 841 0
 3805 0160 FFF7FEFF 		bl	reverseDirection
 842:.\main.c      ****         track_mode = NO_TRACK;
 3806              		.loc 1 842 0
 3807 0164 964B     		ldr	r3, .L233
 3808 0166 0022     		movs	r2, #0
 3809 0168 1A70     		strb	r2, [r3]
 843:.\main.c      ****         break;
 3810              		.loc 1 843 0
 3811 016a D6E1     		b	.L199
 3812              	.L205:
 844:.\main.c      ****     case 'd':
 845:.\main.c      ****         initTurnRight();
 3813              		.loc 1 845 0
 3814 016c FFF7FEFF 		bl	initTurnRight
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 84


 846:.\main.c      ****         track_mode = NO_TRACK;
 3815              		.loc 1 846 0
 3816 0170 934B     		ldr	r3, .L233
 3817 0172 0022     		movs	r2, #0
 3818 0174 1A70     		strb	r2, [r3]
 847:.\main.c      ****         break;
 3819              		.loc 1 847 0
 3820 0176 D0E1     		b	.L199
 3821              	.L206:
 848:.\main.c      ****     case 'f':
 849:.\main.c      ****         initBrake();
 3822              		.loc 1 849 0
 3823 0178 FFF7FEFF 		bl	initBrake
 850:.\main.c      ****         track_mode = NO_TRACK;
 3824              		.loc 1 850 0
 3825 017c 904B     		ldr	r3, .L233
 3826 017e 0022     		movs	r2, #0
 3827 0180 1A70     		strb	r2, [r3]
 851:.\main.c      ****         break;
 3828              		.loc 1 851 0
 3829 0182 CAE1     		b	.L199
 3830              	.L210:
 852:.\main.c      ****     case('t'):
 853:.\main.c      ****         track_mode = CURVE_TRACK;
 3831              		.loc 1 853 0
 3832 0184 8E4B     		ldr	r3, .L233
 3833 0186 0122     		movs	r2, #1
 3834 0188 1A70     		strb	r2, [r3]
 854:.\main.c      ****         initTrack();
 3835              		.loc 1 854 0
 3836 018a FFF7FEFF 		bl	initTrack
 855:.\main.c      ****         break;
 3837              		.loc 1 855 0
 3838 018e C4E1     		b	.L199
 3839              	.L211:
 856:.\main.c      ****     case('u'):
 857:.\main.c      ****         initTrackU();
 3840              		.loc 1 857 0
 3841 0190 FFF7FEFF 		bl	initTrackU
 858:.\main.c      ****         track_mode = U_TRACK;
 3842              		.loc 1 858 0
 3843 0194 8A4B     		ldr	r3, .L233
 3844 0196 0222     		movs	r2, #2
 3845 0198 1A70     		strb	r2, [r3]
 859:.\main.c      ****         break;
 3846              		.loc 1 859 0
 3847 019a BEE1     		b	.L199
 3848              	.L213:
 860:.\main.c      ****     case('z'):
 861:.\main.c      ****         track_mode = SQUARE_TRACK;
 3849              		.loc 1 861 0
 3850 019c 884B     		ldr	r3, .L233
 3851 019e 0322     		movs	r2, #3
 3852 01a0 1A70     		strb	r2, [r3]
 862:.\main.c      ****         inittrackLineZ();
 3853              		.loc 1 862 0
 3854 01a2 FFF7FEFF 		bl	inittrackLineZ
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 85


 863:.\main.c      ****         break;
 3855              		.loc 1 863 0
 3856 01a6 B8E1     		b	.L199
 3857              	.L207:
 864:.\main.c      ****     case('q'):
 865:.\main.c      ****         track_mode = QUAD_STOP;
 3858              		.loc 1 865 0
 3859 01a8 854B     		ldr	r3, .L233
 3860 01aa 0422     		movs	r2, #4
 3861 01ac 1A70     		strb	r2, [r3]
 866:.\main.c      ****         accum_dist = 0;
 3862              		.loc 1 866 0
 3863 01ae 854B     		ldr	r3, .L233+4
 3864 01b0 0022     		movs	r2, #0
 3865 01b2 1A80     		strh	r2, [r3]	@ movhi
 867:.\main.c      ****         target_distance_quad = target_distance_cm * quad_per_cm;
 3866              		.loc 1 867 0
 3867 01b4 844B     		ldr	r3, .L233+8
 3868 01b6 1B88     		ldrh	r3, [r3]
 3869 01b8 1BB2     		sxth	r3, r3
 3870 01ba 1846     		mov	r0, r3
 3871 01bc FFF7FEFF 		bl	__aeabi_i2f
 3872 01c0 0246     		mov	r2, r0
 3873 01c2 824B     		ldr	r3, .L233+12
 3874 01c4 1B68     		ldr	r3, [r3]	@ float
 3875 01c6 1046     		mov	r0, r2
 3876 01c8 1946     		mov	r1, r3
 3877 01ca FFF7FEFF 		bl	__aeabi_fmul
 3878 01ce 0346     		mov	r3, r0
 3879 01d0 1846     		mov	r0, r3
 3880 01d2 FFF7FEFF 		bl	__aeabi_f2iz
 3881 01d6 0346     		mov	r3, r0
 3882 01d8 9AB2     		uxth	r2, r3
 3883 01da 7D4B     		ldr	r3, .L233+16
 3884 01dc 1A80     		strh	r2, [r3]	@ movhi
 868:.\main.c      ****         char mes[16];
 869:.\main.c      ****         sprintf(mes, "target quad: %d\r\n", target_distance_quad);
 3885              		.loc 1 869 0
 3886 01de 7C4B     		ldr	r3, .L233+16
 3887 01e0 1B88     		ldrh	r3, [r3]
 3888 01e2 1BB2     		sxth	r3, r3
 3889 01e4 3A46     		mov	r2, r7
 3890 01e6 1046     		mov	r0, r2
 3891 01e8 7A49     		ldr	r1, .L233+20
 3892 01ea 1A46     		mov	r2, r3
 3893 01ec FFF7FEFF 		bl	sprintf
 870:.\main.c      ****         UART_PutString(mes);
 3894              		.loc 1 870 0
 3895 01f0 3B46     		mov	r3, r7
 3896 01f2 1846     		mov	r0, r3
 3897 01f4 FFF7FEFF 		bl	UART_PutString
 871:.\main.c      ****         initForward();
 3898              		.loc 1 871 0
 3899 01f8 FFF7FEFF 		bl	initForward
 872:.\main.c      ****         break;
 3900              		.loc 1 872 0
 3901 01fc 8DE1     		b	.L199
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 86


 3902              	.L208:
 873:.\main.c      ****     case ('r'):
 874:.\main.c      ****         track_mode = RF_STOP;
 3903              		.loc 1 874 0
 3904 01fe 704B     		ldr	r3, .L233
 3905 0200 0522     		movs	r2, #5
 3906 0202 1A70     		strb	r2, [r3]
 875:.\main.c      ****         changeToRF();
 3907              		.loc 1 875 0
 3908 0204 FFF7FEFF 		bl	changeToRF
 876:.\main.c      ****         // Make initial position
 877:.\main.c      ****         initial_pos_valid = 0;
 3909              		.loc 1 877 0
 3910 0208 734B     		ldr	r3, .L233+24
 3911 020a 0022     		movs	r2, #0
 3912 020c 1A70     		strb	r2, [r3]
 878:.\main.c      ****         initBrake();
 3913              		.loc 1 878 0
 3914 020e FFF7FEFF 		bl	initBrake
 879:.\main.c      ****         break;
 3915              		.loc 1 879 0
 3916 0212 82E1     		b	.L199
 3917              	.L203:
 880:.\main.c      ****     case ('2'):
 881:.\main.c      ****         track_mode = DEST_TEST;
 3918              		.loc 1 881 0
 3919 0214 6A4B     		ldr	r3, .L233
 3920 0216 0622     		movs	r2, #6
 3921 0218 1A70     		strb	r2, [r3]
 882:.\main.c      ****         tracked_direction = robot_direction;
 3922              		.loc 1 882 0
 3923 021a 704B     		ldr	r3, .L233+28
 3924 021c 1B68     		ldr	r3, [r3]
 3925 021e 704A     		ldr	r2, .L233+32
 3926 0220 1360     		str	r3, [r2]
 883:.\main.c      ****         instructionLength = generateDirections();
 3927              		.loc 1 883 0
 3928 0222 FFF7FEFF 		bl	generateDirections
 3929 0226 0346     		mov	r3, r0
 3930 0228 9AB2     		uxth	r2, r3
 3931 022a 6E4B     		ldr	r3, .L233+36
 3932 022c 1A80     		strh	r2, [r3]	@ movhi
 884:.\main.c      ****         //instructionLength = generateEntireMapDirections();
 885:.\main.c      ****         //char message[128];
 886:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 887:.\main.c      ****         
 888:.\main.c      ****         last_quad_count1 = 0;
 3933              		.loc 1 888 0
 3934 022e 6E4B     		ldr	r3, .L233+40
 3935 0230 0022     		movs	r2, #0
 3936 0232 1A80     		strh	r2, [r3]	@ movhi
 889:.\main.c      ****         last_quad_count2 = 0;
 3937              		.loc 1 889 0
 3938 0234 6D4B     		ldr	r3, .L233+44
 3939 0236 0022     		movs	r2, #0
 3940 0238 1A80     		strh	r2, [r3]	@ movhi
 890:.\main.c      ****         QuadDec_M1_SetCounter(0);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 87


 3941              		.loc 1 890 0
 3942 023a 0020     		movs	r0, #0
 3943 023c FFF7FEFF 		bl	QuadDec_M1_SetCounter
 891:.\main.c      ****         QuadDec_M2_SetCounter(0);
 3944              		.loc 1 891 0
 3945 0240 0020     		movs	r0, #0
 3946 0242 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 892:.\main.c      ****         instructionCount = 0;
 3947              		.loc 1 892 0
 3948 0246 6A4B     		ldr	r3, .L233+48
 3949 0248 0022     		movs	r2, #0
 3950 024a 1A80     		strh	r2, [r3]	@ movhi
 893:.\main.c      ****         isrRF_RX_Disable();
 3951              		.loc 1 893 0
 3952 024c FFF7FEFF 		bl	isrRF_RX_Disable
 894:.\main.c      ****         while(rf_char != 'F')
 3953              		.loc 1 894 0
 3954 0250 26E0     		b	.L215
 3955              	.L218:
 895:.\main.c      ****         {
 896:.\main.c      ****             rf_char = UART_GetChar();
 3956              		.loc 1 896 0
 3957 0252 FFF7FEFF 		bl	UART_GetChar
 3958 0256 0346     		mov	r3, r0
 3959 0258 FB77     		strb	r3, [r7, #31]
 897:.\main.c      ****             if(rf_char == 'F') break;
 3960              		.loc 1 897 0
 3961 025a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3962 025c 462B     		cmp	r3, #70
 3963 025e 00D1     		bne	.L216
 3964 0260 21E0     		b	.L217
 3965              	.L216:
 898:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 3966              		.loc 1 898 0
 3967 0262 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3968 0264 2F2B     		cmp	r3, #47
 3969 0266 1BD9     		bls	.L215
 3970              		.loc 1 898 0 is_stmt 0 discriminator 1
 3971 0268 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3972 026a 392B     		cmp	r3, #57
 3973 026c 18D8     		bhi	.L215
 899:.\main.c      ****             {
 900:.\main.c      ****                 UART_PutString("received: ");
 3974              		.loc 1 900 0 is_stmt 1
 3975 026e 6148     		ldr	r0, .L233+52
 3976 0270 FFF7FEFF 		bl	UART_PutString
 901:.\main.c      ****                 UART_PutChar(rf_char);
 3977              		.loc 1 901 0
 3978 0274 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3979 0276 1846     		mov	r0, r3
 3980 0278 FFF7FEFF 		bl	UART_PutChar
 902:.\main.c      ****                 UART_PutString("\r\n");
 3981              		.loc 1 902 0
 3982 027c 5E48     		ldr	r0, .L233+56
 3983 027e FFF7FEFF 		bl	UART_PutString
 903:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 3984              		.loc 1 903 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 88


 3985 0282 5B4B     		ldr	r3, .L233+48
 3986 0284 1B88     		ldrh	r3, [r3]
 3987 0286 1A46     		mov	r2, r3	@ movhi
 3988 0288 9200     		lsls	r2, r2, #2
 3989 028a 1344     		add	r3, r3, r2
 3990 028c 5B00     		lsls	r3, r3, #1
 3991 028e 9AB2     		uxth	r2, r3
 3992 0290 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3993 0292 9BB2     		uxth	r3, r3
 3994 0294 1344     		add	r3, r3, r2
 3995 0296 9BB2     		uxth	r3, r3
 3996 0298 303B     		subs	r3, r3, #48
 3997 029a 9AB2     		uxth	r2, r3
 3998 029c 544B     		ldr	r3, .L233+48
 3999 029e 1A80     		strh	r2, [r3]	@ movhi
 4000              	.L215:
 894:.\main.c      ****         {
 4001              		.loc 1 894 0
 4002 02a0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4003 02a2 462B     		cmp	r3, #70
 4004 02a4 D5D1     		bne	.L218
 4005              	.L217:
 904:.\main.c      ****             }
 905:.\main.c      ****             
 906:.\main.c      ****         }
 907:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4006              		.loc 1 907 0
 4007 02a6 5548     		ldr	r0, .L233+60
 4008 02a8 FFF7FEFF 		bl	isrRF_RX_StartEx
 908:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4009              		.loc 1 908 0
 4010 02ac 504B     		ldr	r3, .L233+48
 4011 02ae 1B88     		ldrh	r3, [r3]
 4012 02b0 1A46     		mov	r2, r3
 4013 02b2 3B46     		mov	r3, r7
 4014 02b4 1846     		mov	r0, r3
 4015 02b6 5249     		ldr	r1, .L233+64
 4016 02b8 FFF7FEFF 		bl	sprintf
 909:.\main.c      ****         UART_PutString(mes);
 4017              		.loc 1 909 0
 4018 02bc 3B46     		mov	r3, r7
 4019 02be 1846     		mov	r0, r3
 4020 02c0 FFF7FEFF 		bl	UART_PutString
 910:.\main.c      ****         
 911:.\main.c      ****         int i;
 912:.\main.c      ****         for(i = instructionCount;i < instructionLength; i++)
 4021              		.loc 1 912 0
 4022 02c4 4A4B     		ldr	r3, .L233+48
 4023 02c6 1B88     		ldrh	r3, [r3]
 4024 02c8 BB61     		str	r3, [r7, #24]
 4025 02ca 18E0     		b	.L219
 4026              	.L222:
 913:.\main.c      ****         {
 914:.\main.c      ****             if(i%2 == 0)
 4027              		.loc 1 914 0
 4028 02cc BB69     		ldr	r3, [r7, #24]
 4029 02ce 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 89


 4030 02d2 002B     		cmp	r3, #0
 4031 02d4 07D1     		bne	.L220
 915:.\main.c      ****             {
 916:.\main.c      ****                 UART_PutChar(instructions[i]);
 4032              		.loc 1 916 0
 4033 02d6 4B4A     		ldr	r2, .L233+68
 4034 02d8 BB69     		ldr	r3, [r7, #24]
 4035 02da 1344     		add	r3, r3, r2
 4036 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4037 02de 1846     		mov	r0, r3
 4038 02e0 FFF7FEFF 		bl	UART_PutChar
 4039 02e4 08E0     		b	.L221
 4040              	.L220:
 917:.\main.c      ****             }
 918:.\main.c      ****             else UART_PutChar(instructions[i] + 48);
 4041              		.loc 1 918 0
 4042 02e6 474A     		ldr	r2, .L233+68
 4043 02e8 BB69     		ldr	r3, [r7, #24]
 4044 02ea 1344     		add	r3, r3, r2
 4045 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4046 02ee 3033     		adds	r3, r3, #48
 4047 02f0 DBB2     		uxtb	r3, r3
 4048 02f2 1846     		mov	r0, r3
 4049 02f4 FFF7FEFF 		bl	UART_PutChar
 4050              	.L221:
 912:.\main.c      ****         {
 4051              		.loc 1 912 0 discriminator 2
 4052 02f8 BB69     		ldr	r3, [r7, #24]
 4053 02fa 0133     		adds	r3, r3, #1
 4054 02fc BB61     		str	r3, [r7, #24]
 4055              	.L219:
 912:.\main.c      ****         {
 4056              		.loc 1 912 0 is_stmt 0 discriminator 1
 4057 02fe 394B     		ldr	r3, .L233+36
 4058 0300 1B88     		ldrh	r3, [r3]
 4059 0302 1A46     		mov	r2, r3
 4060 0304 BB69     		ldr	r3, [r7, #24]
 4061 0306 9A42     		cmp	r2, r3
 4062 0308 E0DC     		bgt	.L222
 919:.\main.c      **** 
 920:.\main.c      ****         }
 921:.\main.c      ****         
 922:.\main.c      ****         UART_PutString("\r\n");
 4063              		.loc 1 922 0 is_stmt 1
 4064 030a 3B48     		ldr	r0, .L233+56
 4065 030c FFF7FEFF 		bl	UART_PutString
 923:.\main.c      ****         
 924:.\main.c      ****         char nextStep = instructions[instructionCount];
 4066              		.loc 1 924 0
 4067 0310 374B     		ldr	r3, .L233+48
 4068 0312 1B88     		ldrh	r3, [r3]
 4069 0314 1A46     		mov	r2, r3
 4070 0316 3B4B     		ldr	r3, .L233+68
 4071 0318 9B5C     		ldrb	r3, [r3, r2]
 4072 031a FB74     		strb	r3, [r7, #19]
 925:.\main.c      ****         
 926:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1];
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 90


 4073              		.loc 1 926 0
 4074 031c 344B     		ldr	r3, .L233+48
 4075 031e 1B88     		ldrh	r3, [r3]
 4076 0320 0133     		adds	r3, r3, #1
 4077 0322 384A     		ldr	r2, .L233+68
 4078 0324 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4079 0326 9BB2     		uxth	r3, r3
 4080 0328 1A46     		mov	r2, r3	@ movhi
 4081 032a D200     		lsls	r2, r2, #3
 4082 032c 1344     		add	r3, r3, r2
 4083 032e 1B01     		lsls	r3, r3, #4
 4084 0330 9BB2     		uxth	r3, r3
 4085 0332 9AB2     		uxth	r2, r3
 4086 0334 264B     		ldr	r3, .L233+16
 4087 0336 1A80     		strh	r2, [r3]	@ movhi
 927:.\main.c      ****         if(instructionCount == 0) target_distance_quad -= QUAD_PER_UNIT; 
 4088              		.loc 1 927 0
 4089 0338 2D4B     		ldr	r3, .L233+48
 4090 033a 1B88     		ldrh	r3, [r3]
 4091 033c 002B     		cmp	r3, #0
 4092 033e 07D1     		bne	.L223
 4093              		.loc 1 927 0 is_stmt 0 discriminator 1
 4094 0340 234B     		ldr	r3, .L233+16
 4095 0342 1B88     		ldrh	r3, [r3]
 4096 0344 9BB2     		uxth	r3, r3
 4097 0346 903B     		subs	r3, r3, #144
 4098 0348 9BB2     		uxth	r3, r3
 4099 034a 9AB2     		uxth	r2, r3
 4100 034c 204B     		ldr	r3, .L233+16
 4101 034e 1A80     		strh	r2, [r3]	@ movhi
 4102              	.L223:
 928:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4103              		.loc 1 928 0 is_stmt 1
 4104 0350 1F4B     		ldr	r3, .L233+16
 4105 0352 1B88     		ldrh	r3, [r3]
 4106 0354 1BB2     		sxth	r3, r3
 4107 0356 3A46     		mov	r2, r7
 4108 0358 1046     		mov	r0, r2
 4109 035a 2B49     		ldr	r1, .L233+72
 4110 035c 1A46     		mov	r2, r3
 4111 035e FFF7FEFF 		bl	sprintf
 929:.\main.c      ****         UART_PutString(mes);
 4112              		.loc 1 929 0
 4113 0362 3B46     		mov	r3, r7
 4114 0364 1846     		mov	r0, r3
 4115 0366 FFF7FEFF 		bl	UART_PutString
 930:.\main.c      ****         inittrackLineZ();
 4116              		.loc 1 930 0
 4117 036a FFF7FEFF 		bl	inittrackLineZ
 931:.\main.c      ****         break;
 4118              		.loc 1 931 0
 4119 036e D4E0     		b	.L199
 4120              	.L201:
 932:.\main.c      ****     case ('1'):
 933:.\main.c      ****         track_mode = DEST_TEST;
 4121              		.loc 1 933 0
 4122 0370 134B     		ldr	r3, .L233
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 91


 4123 0372 0622     		movs	r2, #6
 4124 0374 1A70     		strb	r2, [r3]
 934:.\main.c      ****         tracked_direction = robot_direction;
 4125              		.loc 1 934 0
 4126 0376 194B     		ldr	r3, .L233+28
 4127 0378 1B68     		ldr	r3, [r3]
 4128 037a 194A     		ldr	r2, .L233+32
 4129 037c 1360     		str	r3, [r2]
 935:.\main.c      ****         //instructionLength = generateDirections();
 936:.\main.c      ****         instructionLength = generateEntireMapDirections();
 4130              		.loc 1 936 0
 4131 037e FFF7FEFF 		bl	generateEntireMapDirections
 4132 0382 0346     		mov	r3, r0
 4133 0384 9AB2     		uxth	r2, r3
 4134 0386 174B     		ldr	r3, .L233+36
 4135 0388 1A80     		strh	r2, [r3]	@ movhi
 937:.\main.c      ****         //char message[128];
 938:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 939:.\main.c      ****         instructionCount = 0;
 4136              		.loc 1 939 0
 4137 038a 194B     		ldr	r3, .L233+48
 4138 038c 0022     		movs	r2, #0
 4139 038e 1A80     		strh	r2, [r3]	@ movhi
 940:.\main.c      ****         QuadDec_M1_SetCounter(0);
 4140              		.loc 1 940 0
 4141 0390 0020     		movs	r0, #0
 4142 0392 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 941:.\main.c      ****         QuadDec_M2_SetCounter(0);
 4143              		.loc 1 941 0
 4144 0396 0020     		movs	r0, #0
 4145 0398 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 942:.\main.c      ****         last_quad_count1 = 0;
 4146              		.loc 1 942 0
 4147 039c 124B     		ldr	r3, .L233+40
 4148 039e 0022     		movs	r2, #0
 4149 03a0 1A80     		strh	r2, [r3]	@ movhi
 943:.\main.c      ****         last_quad_count2 = 0;
 4150              		.loc 1 943 0
 4151 03a2 124B     		ldr	r3, .L233+44
 4152 03a4 0022     		movs	r2, #0
 4153 03a6 1A80     		strh	r2, [r3]	@ movhi
 944:.\main.c      ****         isrRF_RX_Disable();
 4154              		.loc 1 944 0
 4155 03a8 FFF7FEFF 		bl	isrRF_RX_Disable
 945:.\main.c      ****         while(rf_char != 'F')
 4156              		.loc 1 945 0
 4157 03ac 4DE0     		b	.L224
 4158              	.L227:
 946:.\main.c      ****         {
 947:.\main.c      ****             rf_char = UART_GetChar();
 4159              		.loc 1 947 0
 4160 03ae FFF7FEFF 		bl	UART_GetChar
 4161 03b2 0346     		mov	r3, r0
 4162 03b4 FB77     		strb	r3, [r7, #31]
 948:.\main.c      ****             if(rf_char == 'F') break;
 4163              		.loc 1 948 0
 4164 03b6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 92


 4165 03b8 462B     		cmp	r3, #70
 4166 03ba 27D1     		bne	.L225
 4167 03bc 48E0     		b	.L226
 4168              	.L234:
 4169 03be 00BF     		.align	2
 4170              	.L233:
 4171 03c0 00000000 		.word	track_mode
 4172 03c4 00000000 		.word	accum_dist
 4173 03c8 00000000 		.word	target_distance_cm
 4174 03cc 00000000 		.word	quad_per_cm
 4175 03d0 00000000 		.word	target_distance_quad
 4176 03d4 C0000000 		.word	.LC10
 4177 03d8 00000000 		.word	initial_pos_valid
 4178 03dc 00000000 		.word	robot_direction
 4179 03e0 00000000 		.word	tracked_direction
 4180 03e4 00000000 		.word	instructionLength
 4181 03e8 00000000 		.word	last_quad_count1
 4182 03ec 00000000 		.word	last_quad_count2
 4183 03f0 00000000 		.word	instructionCount
 4184 03f4 D4000000 		.word	.LC11
 4185 03f8 E0000000 		.word	.LC12
 4186 03fc 00000000 		.word	BT_rxInt
 4187 0400 E4000000 		.word	.LC13
 4188 0404 00000000 		.word	instructions
 4189 0408 64000000 		.word	.LC5
 4190              	.L225:
 949:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 4191              		.loc 1 949 0
 4192 040c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4193 040e 2F2B     		cmp	r3, #47
 4194 0410 1BD9     		bls	.L224
 4195              		.loc 1 949 0 is_stmt 0 discriminator 1
 4196 0412 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4197 0414 392B     		cmp	r3, #57
 4198 0416 18D8     		bhi	.L224
 950:.\main.c      ****             {
 951:.\main.c      ****                 UART_PutString("received: ");
 4199              		.loc 1 951 0 is_stmt 1
 4200 0418 4148     		ldr	r0, .L235
 4201 041a FFF7FEFF 		bl	UART_PutString
 952:.\main.c      ****                 UART_PutChar(rf_char);
 4202              		.loc 1 952 0
 4203 041e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4204 0420 1846     		mov	r0, r3
 4205 0422 FFF7FEFF 		bl	UART_PutChar
 953:.\main.c      ****                 UART_PutString("\r\n");
 4206              		.loc 1 953 0
 4207 0426 3F48     		ldr	r0, .L235+4
 4208 0428 FFF7FEFF 		bl	UART_PutString
 954:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 4209              		.loc 1 954 0
 4210 042c 3E4B     		ldr	r3, .L235+8
 4211 042e 1B88     		ldrh	r3, [r3]
 4212 0430 1A46     		mov	r2, r3	@ movhi
 4213 0432 9200     		lsls	r2, r2, #2
 4214 0434 1344     		add	r3, r3, r2
 4215 0436 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 93


 4216 0438 9AB2     		uxth	r2, r3
 4217 043a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4218 043c 9BB2     		uxth	r3, r3
 4219 043e 1344     		add	r3, r3, r2
 4220 0440 9BB2     		uxth	r3, r3
 4221 0442 303B     		subs	r3, r3, #48
 4222 0444 9AB2     		uxth	r2, r3
 4223 0446 384B     		ldr	r3, .L235+8
 4224 0448 1A80     		strh	r2, [r3]	@ movhi
 4225              	.L224:
 945:.\main.c      ****         {
 4226              		.loc 1 945 0
 4227 044a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4228 044c 462B     		cmp	r3, #70
 4229 044e AED1     		bne	.L227
 4230              	.L226:
 955:.\main.c      ****             }
 956:.\main.c      ****             
 957:.\main.c      ****         }
 958:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4231              		.loc 1 958 0
 4232 0450 3648     		ldr	r0, .L235+12
 4233 0452 FFF7FEFF 		bl	isrRF_RX_StartEx
 959:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4234              		.loc 1 959 0
 4235 0456 344B     		ldr	r3, .L235+8
 4236 0458 1B88     		ldrh	r3, [r3]
 4237 045a 1A46     		mov	r2, r3
 4238 045c 3B46     		mov	r3, r7
 4239 045e 1846     		mov	r0, r3
 4240 0460 3349     		ldr	r1, .L235+16
 4241 0462 FFF7FEFF 		bl	sprintf
 960:.\main.c      ****         UART_PutString(mes);
 4242              		.loc 1 960 0
 4243 0466 3B46     		mov	r3, r7
 4244 0468 1846     		mov	r0, r3
 4245 046a FFF7FEFF 		bl	UART_PutString
 961:.\main.c      ****         //instructionCount = instructionLength - 22;
 962:.\main.c      ****         int x;
 963:.\main.c      ****         for(x = instructionCount;x < instructionLength; x++)
 4246              		.loc 1 963 0
 4247 046e 2E4B     		ldr	r3, .L235+8
 4248 0470 1B88     		ldrh	r3, [r3]
 4249 0472 7B61     		str	r3, [r7, #20]
 4250 0474 18E0     		b	.L228
 4251              	.L231:
 964:.\main.c      ****         {
 965:.\main.c      ****             if(x%2 == 0)
 4252              		.loc 1 965 0
 4253 0476 7B69     		ldr	r3, [r7, #20]
 4254 0478 03F00103 		and	r3, r3, #1
 4255 047c 002B     		cmp	r3, #0
 4256 047e 07D1     		bne	.L229
 966:.\main.c      ****             {
 967:.\main.c      ****                 UART_PutChar(instructions[x]);
 4257              		.loc 1 967 0
 4258 0480 2C4A     		ldr	r2, .L235+20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 94


 4259 0482 7B69     		ldr	r3, [r7, #20]
 4260 0484 1344     		add	r3, r3, r2
 4261 0486 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4262 0488 1846     		mov	r0, r3
 4263 048a FFF7FEFF 		bl	UART_PutChar
 4264 048e 08E0     		b	.L230
 4265              	.L229:
 968:.\main.c      ****             }
 969:.\main.c      ****             else UART_PutChar(instructions[x] + 48);
 4266              		.loc 1 969 0
 4267 0490 284A     		ldr	r2, .L235+20
 4268 0492 7B69     		ldr	r3, [r7, #20]
 4269 0494 1344     		add	r3, r3, r2
 4270 0496 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4271 0498 3033     		adds	r3, r3, #48
 4272 049a DBB2     		uxtb	r3, r3
 4273 049c 1846     		mov	r0, r3
 4274 049e FFF7FEFF 		bl	UART_PutChar
 4275              	.L230:
 963:.\main.c      ****         {
 4276              		.loc 1 963 0 discriminator 2
 4277 04a2 7B69     		ldr	r3, [r7, #20]
 4278 04a4 0133     		adds	r3, r3, #1
 4279 04a6 7B61     		str	r3, [r7, #20]
 4280              	.L228:
 963:.\main.c      ****         {
 4281              		.loc 1 963 0 is_stmt 0 discriminator 1
 4282 04a8 234B     		ldr	r3, .L235+24
 4283 04aa 1B88     		ldrh	r3, [r3]
 4284 04ac 1A46     		mov	r2, r3
 4285 04ae 7B69     		ldr	r3, [r7, #20]
 4286 04b0 9A42     		cmp	r2, r3
 4287 04b2 E0DC     		bgt	.L231
 970:.\main.c      **** 
 971:.\main.c      ****         }
 972:.\main.c      ****         
 973:.\main.c      ****         UART_PutString("\r\n");
 4288              		.loc 1 973 0 is_stmt 1
 4289 04b4 1B48     		ldr	r0, .L235+4
 4290 04b6 FFF7FEFF 		bl	UART_PutString
 974:.\main.c      **** 
 975:.\main.c      ****         nextStep = instructions[instructionCount];
 4291              		.loc 1 975 0
 4292 04ba 1B4B     		ldr	r3, .L235+8
 4293 04bc 1B88     		ldrh	r3, [r3]
 4294 04be 1A46     		mov	r2, r3
 4295 04c0 1C4B     		ldr	r3, .L235+20
 4296 04c2 9B5C     		ldrb	r3, [r3, r2]
 4297 04c4 FB74     		strb	r3, [r7, #19]
 976:.\main.c      ****         
 977:.\main.c      ****         
 978:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1]; 
 4298              		.loc 1 978 0
 4299 04c6 184B     		ldr	r3, .L235+8
 4300 04c8 1B88     		ldrh	r3, [r3]
 4301 04ca 0133     		adds	r3, r3, #1
 4302 04cc 194A     		ldr	r2, .L235+20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 95


 4303 04ce D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4304 04d0 9BB2     		uxth	r3, r3
 4305 04d2 1A46     		mov	r2, r3	@ movhi
 4306 04d4 D200     		lsls	r2, r2, #3
 4307 04d6 1344     		add	r3, r3, r2
 4308 04d8 1B01     		lsls	r3, r3, #4
 4309 04da 9BB2     		uxth	r3, r3
 4310 04dc 9AB2     		uxth	r2, r3
 4311 04de 174B     		ldr	r3, .L235+28
 4312 04e0 1A80     		strh	r2, [r3]	@ movhi
 979:.\main.c      ****         if(instructionCount == 0) target_distance_quad += QUAD_PER_UNIT; 
 4313              		.loc 1 979 0
 4314 04e2 114B     		ldr	r3, .L235+8
 4315 04e4 1B88     		ldrh	r3, [r3]
 4316 04e6 002B     		cmp	r3, #0
 4317 04e8 07D1     		bne	.L232
 4318              		.loc 1 979 0 is_stmt 0 discriminator 1
 4319 04ea 144B     		ldr	r3, .L235+28
 4320 04ec 1B88     		ldrh	r3, [r3]
 4321 04ee 9BB2     		uxth	r3, r3
 4322 04f0 9033     		adds	r3, r3, #144
 4323 04f2 9BB2     		uxth	r3, r3
 4324 04f4 9AB2     		uxth	r2, r3
 4325 04f6 114B     		ldr	r3, .L235+28
 4326 04f8 1A80     		strh	r2, [r3]	@ movhi
 4327              	.L232:
 980:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4328              		.loc 1 980 0 is_stmt 1
 4329 04fa 104B     		ldr	r3, .L235+28
 4330 04fc 1B88     		ldrh	r3, [r3]
 4331 04fe 1BB2     		sxth	r3, r3
 4332 0500 3A46     		mov	r2, r7
 4333 0502 1046     		mov	r0, r2
 4334 0504 0E49     		ldr	r1, .L235+32
 4335 0506 1A46     		mov	r2, r3
 4336 0508 FFF7FEFF 		bl	sprintf
 981:.\main.c      ****         UART_PutString(mes);
 4337              		.loc 1 981 0
 4338 050c 3B46     		mov	r3, r7
 4339 050e 1846     		mov	r0, r3
 4340 0510 FFF7FEFF 		bl	UART_PutString
 982:.\main.c      ****         inittrackLineZ();
 4341              		.loc 1 982 0
 4342 0514 FFF7FEFF 		bl	inittrackLineZ
 983:.\main.c      ****         break;
 4343              		.loc 1 983 0
 4344 0518 00BF     		nop
 4345              	.L199:
 4346              	.LBE11:
 984:.\main.c      ****     }
 985:.\main.c      **** }
 4347              		.loc 1 985 0
 4348 051a 2037     		adds	r7, r7, #32
 4349              		.cfi_def_cfa_offset 8
 4350 051c BD46     		mov	sp, r7
 4351              		.cfi_def_cfa_register 13
 4352              		@ sp needed
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 96


 4353 051e 80BD     		pop	{r7, pc}
 4354              	.L236:
 4355              		.align	2
 4356              	.L235:
 4357 0520 D4000000 		.word	.LC11
 4358 0524 E0000000 		.word	.LC12
 4359 0528 00000000 		.word	instructionCount
 4360 052c 00000000 		.word	BT_rxInt
 4361 0530 E4000000 		.word	.LC13
 4362 0534 00000000 		.word	instructions
 4363 0538 00000000 		.word	instructionLength
 4364 053c 00000000 		.word	target_distance_quad
 4365 0540 64000000 		.word	.LC5
 4366              		.cfi_endproc
 4367              	.LFE93:
 4368              		.size	BT_rxInt, .-BT_rxInt
 4369              		.section	.text.changeToRF,"ax",%progbits
 4370              		.align	2
 4371              		.global	changeToRF
 4372              		.thumb
 4373              		.thumb_func
 4374              		.type	changeToRF, %function
 4375              	changeToRF:
 4376              	.LFB94:
 986:.\main.c      **** 
 987:.\main.c      **** 
 988:.\main.c      **** void changeToRF()
 989:.\main.c      **** {
 4377              		.loc 1 989 0
 4378              		.cfi_startproc
 4379              		@ args = 0, pretend = 0, frame = 0
 4380              		@ frame_needed = 1, uses_anonymous_args = 0
 4381 0000 80B5     		push	{r7, lr}
 4382              		.cfi_def_cfa_offset 8
 4383              		.cfi_offset 7, -8
 4384              		.cfi_offset 14, -4
 4385 0002 00AF     		add	r7, sp, #0
 4386              		.cfi_def_cfa_register 7
 990:.\main.c      ****         //disable BT
 991:.\main.c      ****         BT_ENABLED = 0;
 4387              		.loc 1 991 0
 4388 0004 0B4B     		ldr	r3, .L238
 4389 0006 0022     		movs	r2, #0
 4390 0008 1A70     		strb	r2, [r3]
 992:.\main.c      ****         isrRF_RX_Stop();
 4391              		.loc 1 992 0
 4392 000a FFF7FEFF 		bl	isrRF_RX_Stop
 993:.\main.c      ****         UART_Stop();
 4393              		.loc 1 993 0
 4394 000e FFF7FEFF 		bl	UART_Stop
 994:.\main.c      ****         
 995:.\main.c      ****         //enable RF
 996:.\main.c      ****         BIN_ENABLED = 1;
 4395              		.loc 1 996 0
 4396 0012 094B     		ldr	r3, .L238+4
 4397 0014 0122     		movs	r2, #1
 4398 0016 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 97


 997:.\main.c      ****         UART_clk_SetDividerValue(130);
 4399              		.loc 1 997 0
 4400 0018 8120     		movs	r0, #129
 4401 001a 0121     		movs	r1, #1
 4402 001c FFF7FEFF 		bl	UART_clk_SetDividerRegister
 998:.\main.c      ****         isrRF_RX_StartEx(rxInt);
 4403              		.loc 1 998 0
 4404 0020 0648     		ldr	r0, .L238+8
 4405 0022 FFF7FEFF 		bl	isrRF_RX_StartEx
 999:.\main.c      ****         UART_Start();
 4406              		.loc 1 999 0
 4407 0026 FFF7FEFF 		bl	UART_Start
1000:.\main.c      ****         RF_BT_SELECT_Write(0);
 4408              		.loc 1 1000 0
 4409 002a 0020     		movs	r0, #0
 4410 002c FFF7FEFF 		bl	RF_BT_SELECT_Write
1001:.\main.c      **** }
 4411              		.loc 1 1001 0
 4412 0030 80BD     		pop	{r7, pc}
 4413              	.L239:
 4414 0032 00BF     		.align	2
 4415              	.L238:
 4416 0034 00000000 		.word	BT_ENABLED
 4417 0038 00000000 		.word	BIN_ENABLED
 4418 003c 00000000 		.word	rxInt
 4419              		.cfi_endproc
 4420              	.LFE94:
 4421              		.size	changeToRF, .-changeToRF
 4422              		.section	.text.changeToBT,"ax",%progbits
 4423              		.align	2
 4424              		.global	changeToBT
 4425              		.thumb
 4426              		.thumb_func
 4427              		.type	changeToBT, %function
 4428              	changeToBT:
 4429              	.LFB95:
1002:.\main.c      **** 
1003:.\main.c      **** void changeToBT()
1004:.\main.c      **** {
 4430              		.loc 1 1004 0
 4431              		.cfi_startproc
 4432              		@ args = 0, pretend = 0, frame = 0
 4433              		@ frame_needed = 1, uses_anonymous_args = 0
 4434 0000 80B5     		push	{r7, lr}
 4435              		.cfi_def_cfa_offset 8
 4436              		.cfi_offset 7, -8
 4437              		.cfi_offset 14, -4
 4438 0002 00AF     		add	r7, sp, #0
 4439              		.cfi_def_cfa_register 7
1005:.\main.c      ****         //disable RF
1006:.\main.c      ****         BIN_ENABLED = 0;
 4440              		.loc 1 1006 0
 4441 0004 0B4B     		ldr	r3, .L241
 4442 0006 0022     		movs	r2, #0
 4443 0008 1A70     		strb	r2, [r3]
1007:.\main.c      ****         isrRF_RX_Stop();
 4444              		.loc 1 1007 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 98


 4445 000a FFF7FEFF 		bl	isrRF_RX_Stop
1008:.\main.c      ****         UART_Stop();
 4446              		.loc 1 1008 0
 4447 000e FFF7FEFF 		bl	UART_Stop
1009:.\main.c      ****         
1010:.\main.c      ****         //enable BT
1011:.\main.c      ****         BT_ENABLED = 1;
 4448              		.loc 1 1011 0
 4449 0012 094B     		ldr	r3, .L241+4
 4450 0014 0122     		movs	r2, #1
 4451 0016 1A70     		strb	r2, [r3]
1012:.\main.c      ****         UART_clk_SetDividerValue(781);
 4452              		.loc 1 1012 0
 4453 0018 4FF44370 		mov	r0, #780
 4454 001c 0121     		movs	r1, #1
 4455 001e FFF7FEFF 		bl	UART_clk_SetDividerRegister
1013:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4456              		.loc 1 1013 0
 4457 0022 0648     		ldr	r0, .L241+8
 4458 0024 FFF7FEFF 		bl	isrRF_RX_StartEx
1014:.\main.c      ****         UART_Start();
 4459              		.loc 1 1014 0
 4460 0028 FFF7FEFF 		bl	UART_Start
1015:.\main.c      ****         RF_BT_SELECT_Write(1);
 4461              		.loc 1 1015 0
 4462 002c 0120     		movs	r0, #1
 4463 002e FFF7FEFF 		bl	RF_BT_SELECT_Write
1016:.\main.c      **** }
 4464              		.loc 1 1016 0
 4465 0032 80BD     		pop	{r7, pc}
 4466              	.L242:
 4467              		.align	2
 4468              	.L241:
 4469 0034 00000000 		.word	BIN_ENABLED
 4470 0038 00000000 		.word	BT_ENABLED
 4471 003c 00000000 		.word	BT_rxInt
 4472              		.cfi_endproc
 4473              	.LFE95:
 4474              		.size	changeToBT, .-changeToBT
 4475              		.section	.text.Quad_Dec_response,"ax",%progbits
 4476              		.align	2
 4477              		.global	Quad_Dec_response
 4478              		.thumb
 4479              		.thumb_func
 4480              		.type	Quad_Dec_response, %function
 4481              	Quad_Dec_response:
 4482              	.LFB96:
1017:.\main.c      **** 
1018:.\main.c      **** 
1019:.\main.c      **** void Quad_Dec_response()
1020:.\main.c      **** {
 4483              		.loc 1 1020 0
 4484              		.cfi_startproc
 4485              		@ args = 0, pretend = 0, frame = 32
 4486              		@ frame_needed = 1, uses_anonymous_args = 0
 4487 0000 B0B5     		push	{r4, r5, r7, lr}
 4488              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 99


 4489              		.cfi_offset 4, -16
 4490              		.cfi_offset 5, -12
 4491              		.cfi_offset 7, -8
 4492              		.cfi_offset 14, -4
 4493 0002 88B0     		sub	sp, sp, #32
 4494              		.cfi_def_cfa_offset 48
 4495 0004 00AF     		add	r7, sp, #0
 4496              		.cfi_def_cfa_register 7
1021:.\main.c      ****     //Check if the flag has been set
1022:.\main.c      ****     if (!flag_calc_wheelspeed) return;
 4497              		.loc 1 1022 0
 4498 0006 824B     		ldr	r3, .L251
 4499 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4500 000a 002B     		cmp	r3, #0
 4501 000c 00D1     		bne	.L244
 4502 000e FCE0     		b	.L243
 4503              	.L244:
1023:.\main.c      ****     flag_calc_wheelspeed = 0;
 4504              		.loc 1 1023 0
 4505 0010 7F4B     		ldr	r3, .L251
 4506 0012 0022     		movs	r2, #0
 4507 0014 1A70     		strb	r2, [r3]
1024:.\main.c      ****     
1025:.\main.c      ****     //char wheel_1_str [64];
1026:.\main.c      ****     //char wheel_2_str [64];
1027:.\main.c      ****     //sprintf(wheel_1_str, "quad count 1 is: %d\n\r", quad_diff1);
1028:.\main.c      ****     //usbPutString(wheel_1_str);
1029:.\main.c      ****     //sprintf(wheel_2_str, "quad count 2 is: %d\n\r", quad_diff2);
1030:.\main.c      ****     
1031:.\main.c      ****     //usbPutString(wheel_2_str);
1032:.\main.c      ****     
1033:.\main.c      ****     int16 leftSpeed = quad_diff1;
 4508              		.loc 1 1033 0
 4509 0016 7F4B     		ldr	r3, .L251+4
 4510 0018 1B88     		ldrh	r3, [r3]	@ movhi
 4511 001a FB81     		strh	r3, [r7, #14]	@ movhi
1034:.\main.c      ****     int16 rightSpeed = quad_diff2;
 4512              		.loc 1 1034 0
 4513 001c 7E4B     		ldr	r3, .L251+8
 4514 001e 1B88     		ldrh	r3, [r3]	@ movhi
 4515 0020 BB81     		strh	r3, [r7, #12]	@ movhi
1035:.\main.c      ****     double scalingLeft = 1;
 4516              		.loc 1 1035 0
 4517 0022 4FF00002 		mov	r2, #0
 4518 0026 7D4B     		ldr	r3, .L251+12
 4519 0028 C7E90623 		strd	r2, [r7, #24]
1036:.\main.c      ****     double scalingRight = 1;
 4520              		.loc 1 1036 0
 4521 002c 4FF00002 		mov	r2, #0
 4522 0030 7A4B     		ldr	r3, .L251+12
 4523 0032 C7E90423 		strd	r2, [r7, #16]
1037:.\main.c      ****     
1038:.\main.c      ****     //there's an initial right tilt by default, so we want to decrease the initial left speed
1039:.\main.c      ****     if(leftSpeed == 0 && rightSpeed == 0){ 
 4524              		.loc 1 1039 0
 4525 0036 B7F90E30 		ldrsh	r3, [r7, #14]
 4526 003a 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 100


 4527 003c 0FD1     		bne	.L246
 4528              		.loc 1 1039 0 is_stmt 0 discriminator 1
 4529 003e B7F90C30 		ldrsh	r3, [r7, #12]
 4530 0042 002B     		cmp	r3, #0
 4531 0044 0BD1     		bne	.L246
1040:.\main.c      ****        //leftSpeed = 3;
1041:.\main.c      ****         scalingLeft = 2;
 4532              		.loc 1 1041 0 is_stmt 1
 4533 0046 4FF00002 		mov	r2, #0
 4534 004a 4FF08043 		mov	r3, #1073741824
 4535 004e C7E90623 		strd	r2, [r7, #24]
1042:.\main.c      ****         scalingRight = 2;
 4536              		.loc 1 1042 0
 4537 0052 4FF00002 		mov	r2, #0
 4538 0056 4FF08043 		mov	r3, #1073741824
 4539 005a C7E90423 		strd	r2, [r7, #16]
 4540              	.L246:
1043:.\main.c      ****     }
1044:.\main.c      **** 
1045:.\main.c      ****     int interCalc = leftSpeedLimit - abs(leftSpeed);
 4541              		.loc 1 1045 0
 4542 005e 704B     		ldr	r3, .L251+16
 4543 0060 1B88     		ldrh	r3, [r3]
 4544 0062 1AB2     		sxth	r2, r3
 4545 0064 B7F90E30 		ldrsh	r3, [r7, #14]
 4546 0068 002B     		cmp	r3, #0
 4547 006a B8BF     		it	lt
 4548 006c 5B42     		rsblt	r3, r3, #0
 4549 006e D31A     		subs	r3, r2, r3
 4550 0070 BB60     		str	r3, [r7, #8]
1046:.\main.c      ****     int nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs((int)(interCalc)));
 4551              		.loc 1 1046 0
 4552 0072 BB68     		ldr	r3, [r7, #8]
 4553 0074 83EAE372 		eor	r2, r3, r3, asr #31
 4554 0078 A2EBE372 		sub	r2, r2, r3, asr #31
 4555 007c BB68     		ldr	r3, [r7, #8]
 4556 007e 92FBF3F3 		sdiv	r3, r2, r3
 4557 0082 1846     		mov	r0, r3
 4558 0084 FFF7FEFF 		bl	__aeabi_i2d
 4559 0088 0446     		mov	r4, r0
 4560 008a 0D46     		mov	r5, r1
 4561 008c BB68     		ldr	r3, [r7, #8]
 4562 008e 002B     		cmp	r3, #0
 4563 0090 B8BF     		it	lt
 4564 0092 5B42     		rsblt	r3, r3, #0
 4565 0094 1846     		mov	r0, r3
 4566 0096 FFF7FEFF 		bl	__aeabi_i2d
 4567 009a 0246     		mov	r2, r0
 4568 009c 0B46     		mov	r3, r1
 4569 009e 1046     		mov	r0, r2
 4570 00a0 1946     		mov	r1, r3
 4571 00a2 FFF7FEFF 		bl	sqrt
 4572 00a6 0246     		mov	r2, r0
 4573 00a8 0B46     		mov	r3, r1
 4574 00aa 2046     		mov	r0, r4
 4575 00ac 2946     		mov	r1, r5
 4576 00ae FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 101


 4577 00b2 0246     		mov	r2, r0
 4578 00b4 0B46     		mov	r3, r1
 4579 00b6 1046     		mov	r0, r2
 4580 00b8 1946     		mov	r1, r3
 4581 00ba FFF7FEFF 		bl	__aeabi_d2iz
 4582 00be 0346     		mov	r3, r0
 4583 00c0 7B60     		str	r3, [r7, #4]
1047:.\main.c      ****     left_duty_cycle = left_duty_cycle + scalingLeft*nextSpeed;
 4584              		.loc 1 1047 0
 4585 00c2 584B     		ldr	r3, .L251+20
 4586 00c4 1B88     		ldrh	r3, [r3]
 4587 00c6 1BB2     		sxth	r3, r3
 4588 00c8 1846     		mov	r0, r3
 4589 00ca FFF7FEFF 		bl	__aeabi_i2d
 4590 00ce 0446     		mov	r4, r0
 4591 00d0 0D46     		mov	r5, r1
 4592 00d2 7868     		ldr	r0, [r7, #4]
 4593 00d4 FFF7FEFF 		bl	__aeabi_i2d
 4594 00d8 0246     		mov	r2, r0
 4595 00da 0B46     		mov	r3, r1
 4596 00dc 1046     		mov	r0, r2
 4597 00de 1946     		mov	r1, r3
 4598 00e0 D7E90623 		ldrd	r2, [r7, #24]
 4599 00e4 FFF7FEFF 		bl	__aeabi_dmul
 4600 00e8 0246     		mov	r2, r0
 4601 00ea 0B46     		mov	r3, r1
 4602 00ec 2046     		mov	r0, r4
 4603 00ee 2946     		mov	r1, r5
 4604 00f0 FFF7FEFF 		bl	__aeabi_dadd
 4605 00f4 0246     		mov	r2, r0
 4606 00f6 0B46     		mov	r3, r1
 4607 00f8 1046     		mov	r0, r2
 4608 00fa 1946     		mov	r1, r3
 4609 00fc FFF7FEFF 		bl	__aeabi_d2iz
 4610 0100 0346     		mov	r3, r0
 4611 0102 9AB2     		uxth	r2, r3
 4612 0104 474B     		ldr	r3, .L251+20
 4613 0106 1A80     		strh	r2, [r3]	@ movhi
1048:.\main.c      ****     interCalc = rightSpeedLimit - abs(rightSpeed);
 4614              		.loc 1 1048 0
 4615 0108 474B     		ldr	r3, .L251+24
 4616 010a 1B88     		ldrh	r3, [r3]
 4617 010c 1AB2     		sxth	r2, r3
 4618 010e B7F90C30 		ldrsh	r3, [r7, #12]
 4619 0112 002B     		cmp	r3, #0
 4620 0114 B8BF     		it	lt
 4621 0116 5B42     		rsblt	r3, r3, #0
 4622 0118 D31A     		subs	r3, r2, r3
 4623 011a BB60     		str	r3, [r7, #8]
1049:.\main.c      ****     nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs(interCalc));
 4624              		.loc 1 1049 0
 4625 011c BB68     		ldr	r3, [r7, #8]
 4626 011e 83EAE372 		eor	r2, r3, r3, asr #31
 4627 0122 A2EBE372 		sub	r2, r2, r3, asr #31
 4628 0126 BB68     		ldr	r3, [r7, #8]
 4629 0128 92FBF3F3 		sdiv	r3, r2, r3
 4630 012c 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 102


 4631 012e FFF7FEFF 		bl	__aeabi_i2d
 4632 0132 0446     		mov	r4, r0
 4633 0134 0D46     		mov	r5, r1
 4634 0136 BB68     		ldr	r3, [r7, #8]
 4635 0138 002B     		cmp	r3, #0
 4636 013a B8BF     		it	lt
 4637 013c 5B42     		rsblt	r3, r3, #0
 4638 013e 1846     		mov	r0, r3
 4639 0140 FFF7FEFF 		bl	__aeabi_i2d
 4640 0144 0246     		mov	r2, r0
 4641 0146 0B46     		mov	r3, r1
 4642 0148 1046     		mov	r0, r2
 4643 014a 1946     		mov	r1, r3
 4644 014c FFF7FEFF 		bl	sqrt
 4645 0150 0246     		mov	r2, r0
 4646 0152 0B46     		mov	r3, r1
 4647 0154 2046     		mov	r0, r4
 4648 0156 2946     		mov	r1, r5
 4649 0158 FFF7FEFF 		bl	__aeabi_dmul
 4650 015c 0246     		mov	r2, r0
 4651 015e 0B46     		mov	r3, r1
 4652 0160 1046     		mov	r0, r2
 4653 0162 1946     		mov	r1, r3
 4654 0164 FFF7FEFF 		bl	__aeabi_d2iz
 4655 0168 0346     		mov	r3, r0
 4656 016a 7B60     		str	r3, [r7, #4]
1050:.\main.c      ****     right_duty_cycle = right_duty_cycle + scalingRight*nextSpeed;
 4657              		.loc 1 1050 0
 4658 016c 2F4B     		ldr	r3, .L251+28
 4659 016e 1B88     		ldrh	r3, [r3]
 4660 0170 1BB2     		sxth	r3, r3
 4661 0172 1846     		mov	r0, r3
 4662 0174 FFF7FEFF 		bl	__aeabi_i2d
 4663 0178 0446     		mov	r4, r0
 4664 017a 0D46     		mov	r5, r1
 4665 017c 7868     		ldr	r0, [r7, #4]
 4666 017e FFF7FEFF 		bl	__aeabi_i2d
 4667 0182 0246     		mov	r2, r0
 4668 0184 0B46     		mov	r3, r1
 4669 0186 1046     		mov	r0, r2
 4670 0188 1946     		mov	r1, r3
 4671 018a D7E90423 		ldrd	r2, [r7, #16]
 4672 018e FFF7FEFF 		bl	__aeabi_dmul
 4673 0192 0246     		mov	r2, r0
 4674 0194 0B46     		mov	r3, r1
 4675 0196 2046     		mov	r0, r4
 4676 0198 2946     		mov	r1, r5
 4677 019a FFF7FEFF 		bl	__aeabi_dadd
 4678 019e 0246     		mov	r2, r0
 4679 01a0 0B46     		mov	r3, r1
 4680 01a2 1046     		mov	r0, r2
 4681 01a4 1946     		mov	r1, r3
 4682 01a6 FFF7FEFF 		bl	__aeabi_d2iz
 4683 01aa 0346     		mov	r3, r0
 4684 01ac 9AB2     		uxth	r2, r3
 4685 01ae 1F4B     		ldr	r3, .L251+28
 4686 01b0 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 103


1051:.\main.c      ****     
1052:.\main.c      ****     if(right_duty_cycle < 0) right_duty_cycle = 0;
 4687              		.loc 1 1052 0
 4688 01b2 1E4B     		ldr	r3, .L251+28
 4689 01b4 1B88     		ldrh	r3, [r3]
 4690 01b6 1BB2     		sxth	r3, r3
 4691 01b8 002B     		cmp	r3, #0
 4692 01ba 02DA     		bge	.L247
 4693              		.loc 1 1052 0 is_stmt 0 discriminator 1
 4694 01bc 1B4B     		ldr	r3, .L251+28
 4695 01be 0022     		movs	r2, #0
 4696 01c0 1A80     		strh	r2, [r3]	@ movhi
 4697              	.L247:
1053:.\main.c      ****     if(left_duty_cycle < 0) left_duty_cycle = 0;
 4698              		.loc 1 1053 0 is_stmt 1
 4699 01c2 184B     		ldr	r3, .L251+20
 4700 01c4 1B88     		ldrh	r3, [r3]
 4701 01c6 1BB2     		sxth	r3, r3
 4702 01c8 002B     		cmp	r3, #0
 4703 01ca 02DA     		bge	.L248
 4704              		.loc 1 1053 0 is_stmt 0 discriminator 1
 4705 01cc 154B     		ldr	r3, .L251+20
 4706 01ce 0022     		movs	r2, #0
 4707 01d0 1A80     		strh	r2, [r3]	@ movhi
 4708              	.L248:
1054:.\main.c      ****     if(right_duty_cycle > 100) right_duty_cycle = 100;
 4709              		.loc 1 1054 0 is_stmt 1
 4710 01d2 164B     		ldr	r3, .L251+28
 4711 01d4 1B88     		ldrh	r3, [r3]
 4712 01d6 1BB2     		sxth	r3, r3
 4713 01d8 642B     		cmp	r3, #100
 4714 01da 02DD     		ble	.L249
 4715              		.loc 1 1054 0 is_stmt 0 discriminator 1
 4716 01dc 134B     		ldr	r3, .L251+28
 4717 01de 6422     		movs	r2, #100
 4718 01e0 1A80     		strh	r2, [r3]	@ movhi
 4719              	.L249:
1055:.\main.c      ****     if(left_duty_cycle > 100) left_duty_cycle = 100;
 4720              		.loc 1 1055 0 is_stmt 1
 4721 01e2 104B     		ldr	r3, .L251+20
 4722 01e4 1B88     		ldrh	r3, [r3]
 4723 01e6 1BB2     		sxth	r3, r3
 4724 01e8 642B     		cmp	r3, #100
 4725 01ea 02DD     		ble	.L250
 4726              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4727 01ec 0D4B     		ldr	r3, .L251+20
 4728 01ee 6422     		movs	r2, #100
 4729 01f0 1A80     		strh	r2, [r3]	@ movhi
 4730              	.L250:
1056:.\main.c      ****     PWM_1_WriteCompare(left_duty_cycle);
 4731              		.loc 1 1056 0 is_stmt 1
 4732 01f2 0C4B     		ldr	r3, .L251+20
 4733 01f4 1B88     		ldrh	r3, [r3]
 4734 01f6 DBB2     		uxtb	r3, r3
 4735 01f8 1846     		mov	r0, r3
 4736 01fa FFF7FEFF 		bl	PWM_1_WriteCompare
1057:.\main.c      ****     PWM_2_WriteCompare(right_duty_cycle);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 104


 4737              		.loc 1 1057 0
 4738 01fe 0B4B     		ldr	r3, .L251+28
 4739 0200 1B88     		ldrh	r3, [r3]
 4740 0202 DBB2     		uxtb	r3, r3
 4741 0204 1846     		mov	r0, r3
 4742 0206 FFF7FEFF 		bl	PWM_2_WriteCompare
 4743              	.L243:
1058:.\main.c      **** }
 4744              		.loc 1 1058 0
 4745 020a 2037     		adds	r7, r7, #32
 4746              		.cfi_def_cfa_offset 16
 4747 020c BD46     		mov	sp, r7
 4748              		.cfi_def_cfa_register 13
 4749              		@ sp needed
 4750 020e B0BD     		pop	{r4, r5, r7, pc}
 4751              	.L252:
 4752              		.align	2
 4753              	.L251:
 4754 0210 00000000 		.word	flag_calc_wheelspeed
 4755 0214 00000000 		.word	quad_diff1
 4756 0218 00000000 		.word	quad_diff2
 4757 021c 0000F03F 		.word	1072693248
 4758 0220 00000000 		.word	leftSpeedLimit
 4759 0224 00000000 		.word	left_duty_cycle
 4760 0228 00000000 		.word	rightSpeedLimit
 4761 022c 00000000 		.word	right_duty_cycle
 4762              		.cfi_endproc
 4763              	.LFE96:
 4764              		.size	Quad_Dec_response, .-Quad_Dec_response
 4765              		.section	.text.trackLine,"ax",%progbits
 4766              		.align	2
 4767              		.global	trackLine
 4768              		.thumb
 4769              		.thumb_func
 4770              		.type	trackLine, %function
 4771              	trackLine:
 4772              	.LFB97:
1059:.\main.c      **** 
1060:.\main.c      **** void trackLine()
1061:.\main.c      **** {
 4773              		.loc 1 1061 0
 4774              		.cfi_startproc
 4775              		@ args = 0, pretend = 0, frame = 0
 4776              		@ frame_needed = 1, uses_anonymous_args = 0
 4777              		@ link register save eliminated.
 4778 0000 80B4     		push	{r7}
 4779              		.cfi_def_cfa_offset 4
 4780              		.cfi_offset 7, -4
 4781 0002 00AF     		add	r7, sp, #0
 4782              		.cfi_def_cfa_register 7
1062:.\main.c      ****  //removed from implementation
1063:.\main.c      **** }
 4783              		.loc 1 1063 0
 4784 0004 BD46     		mov	sp, r7
 4785              		.cfi_def_cfa_register 13
 4786              		@ sp needed
 4787 0006 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 105


 4788              		.cfi_restore 7
 4789              		.cfi_def_cfa_offset 0
 4790 000a 7047     		bx	lr
 4791              		.cfi_endproc
 4792              	.LFE97:
 4793              		.size	trackLine, .-trackLine
 4794              		.global	leftTurnCount
 4795              		.bss
 4796              		.align	1
 4797              		.type	leftTurnCount, %object
 4798              		.size	leftTurnCount, 2
 4799              	leftTurnCount:
 4800 28e8 0000     		.space	2
 4801              		.global	rightTurnCount
 4802              		.align	1
 4803              		.type	rightTurnCount, %object
 4804              		.size	rightTurnCount, 2
 4805              	rightTurnCount:
 4806 28ea 0000     		.space	2
 4807              		.section	.text.trackLineZ,"ax",%progbits
 4808              		.align	2
 4809              		.global	trackLineZ
 4810              		.thumb
 4811              		.thumb_func
 4812              		.type	trackLineZ, %function
 4813              	trackLineZ:
 4814              	.LFB98:
1064:.\main.c      **** uint16 leftTurnCount = 0;
1065:.\main.c      **** uint16 rightTurnCount = 0;
1066:.\main.c      **** void trackLineZ()
1067:.\main.c      **** {
 4815              		.loc 1 1067 0
 4816              		.cfi_startproc
 4817              		@ args = 0, pretend = 0, frame = 8
 4818              		@ frame_needed = 1, uses_anonymous_args = 0
 4819 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 4820              		.cfi_def_cfa_offset 24
 4821              		.cfi_offset 4, -24
 4822              		.cfi_offset 5, -20
 4823              		.cfi_offset 7, -16
 4824              		.cfi_offset 8, -12
 4825              		.cfi_offset 9, -8
 4826              		.cfi_offset 14, -4
 4827 0004 82B0     		sub	sp, sp, #8
 4828              		.cfi_def_cfa_offset 32
 4829 0006 00AF     		add	r7, sp, #0
 4830              		.cfi_def_cfa_register 7
1068:.\main.c      ****     //read the value of the three central-front sensors
1069:.\main.c      ****     
1070:.\main.c      ****     uint8 nl = NLSens_out_Read();
 4831              		.loc 1 1070 0
 4832 0008 FFF7FEFF 		bl	NLSens_out_Read
 4833 000c 0346     		mov	r3, r0
 4834 000e FB71     		strb	r3, [r7, #7]
1071:.\main.c      ****     uint8 nr = NRSens_out_Read();
 4835              		.loc 1 1071 0
 4836 0010 FFF7FEFF 		bl	NRSens_out_Read
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 106


 4837 0014 0346     		mov	r3, r0
 4838 0016 BB71     		strb	r3, [r7, #6]
1072:.\main.c      ****     uint8 mid = MSens_out_Read();
 4839              		.loc 1 1072 0
 4840 0018 FFF7FEFF 		bl	MSens_out_Read
 4841 001c 0346     		mov	r3, r0
 4842 001e 7B71     		strb	r3, [r7, #5]
1073:.\main.c      ****     
1074:.\main.c      ****         //if only the left one, hard left
1075:.\main.c      ****     if(nl && !nr && !mid)// && trackTurnCount > 0)
 4843              		.loc 1 1075 0
 4844 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4845 0022 002B     		cmp	r3, #0
 4846 0024 27D0     		beq	.L255
 4847              		.loc 1 1075 0 is_stmt 0 discriminator 1
 4848 0026 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4849 0028 002B     		cmp	r3, #0
 4850 002a 24D1     		bne	.L255
 4851              		.loc 1 1075 0 discriminator 2
 4852 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4853 002e 002B     		cmp	r3, #0
 4854 0030 21D1     		bne	.L255
1076:.\main.c      ****     {
1077:.\main.c      ****         setSpeed(speed / 1.6,-speed / 1.6);
 4855              		.loc 1 1077 0 is_stmt 1
 4856 0032 454B     		ldr	r3, .L260+8
 4857 0034 D3E90023 		ldrd	r2, [r3]
 4858 0038 1046     		mov	r0, r2
 4859 003a 1946     		mov	r1, r3
 4860 003c 40A3     		adr	r3, .L260
 4861 003e D3E90023 		ldrd	r2, [r3]
 4862 0042 FFF7FEFF 		bl	__aeabi_ddiv
 4863 0046 0246     		mov	r2, r0
 4864 0048 0B46     		mov	r3, r1
 4865 004a 1446     		mov	r4, r2
 4866 004c 1D46     		mov	r5, r3
 4867 004e 3E4B     		ldr	r3, .L260+8
 4868 0050 D3E90023 		ldrd	r2, [r3]
 4869 0054 9046     		mov	r8, r2
 4870 0056 83F00049 		eor	r9, r3, #-2147483648
 4871 005a 4046     		mov	r0, r8
 4872 005c 4946     		mov	r1, r9
 4873 005e 38A3     		adr	r3, .L260
 4874 0060 D3E90023 		ldrd	r2, [r3]
 4875 0064 FFF7FEFF 		bl	__aeabi_ddiv
 4876 0068 0246     		mov	r2, r0
 4877 006a 0B46     		mov	r3, r1
 4878 006c 2046     		mov	r0, r4
 4879 006e 2946     		mov	r1, r5
 4880 0070 FFF7FEFF 		bl	setSpeed
 4881 0074 5FE0     		b	.L254
 4882              	.L255:
1078:.\main.c      ****     }
1079:.\main.c      ****     else if(nl && mid && !nr)   //if centre/middle, soft left
 4883              		.loc 1 1079 0
 4884 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4885 0078 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 107


 4886 007a 0ED0     		beq	.L257
 4887              		.loc 1 1079 0 is_stmt 0 discriminator 1
 4888 007c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4889 007e 002B     		cmp	r3, #0
 4890 0080 0BD0     		beq	.L257
 4891              		.loc 1 1079 0 discriminator 2
 4892 0082 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4893 0084 002B     		cmp	r3, #0
 4894 0086 08D1     		bne	.L257
1080:.\main.c      ****     {
1081:.\main.c      ****         setSpeed(speed,speed);
 4895              		.loc 1 1081 0 is_stmt 1
 4896 0088 2F4B     		ldr	r3, .L260+8
 4897 008a D3E90001 		ldrd	r0, [r3]
 4898 008e 2E4B     		ldr	r3, .L260+8
 4899 0090 D3E90023 		ldrd	r2, [r3]
 4900 0094 FFF7FEFF 		bl	setSpeed
 4901 0098 4DE0     		b	.L254
 4902              	.L257:
1082:.\main.c      ****     }
1083:.\main.c      ****     else if (nr && mid && !nl)//if centre/right, soft right
 4903              		.loc 1 1083 0
 4904 009a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4905 009c 002B     		cmp	r3, #0
 4906 009e 0ED0     		beq	.L258
 4907              		.loc 1 1083 0 is_stmt 0 discriminator 1
 4908 00a0 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4909 00a2 002B     		cmp	r3, #0
 4910 00a4 0BD0     		beq	.L258
 4911              		.loc 1 1083 0 discriminator 2
 4912 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4913 00a8 002B     		cmp	r3, #0
 4914 00aa 08D1     		bne	.L258
1084:.\main.c      ****     {
1085:.\main.c      ****         setSpeed(speed ,speed);
 4915              		.loc 1 1085 0 is_stmt 1
 4916 00ac 264B     		ldr	r3, .L260+8
 4917 00ae D3E90001 		ldrd	r0, [r3]
 4918 00b2 254B     		ldr	r3, .L260+8
 4919 00b4 D3E90023 		ldrd	r2, [r3]
 4920 00b8 FFF7FEFF 		bl	setSpeed
 4921 00bc 3BE0     		b	.L254
 4922              	.L258:
1086:.\main.c      ****     }
1087:.\main.c      ****    else if (nr && !mid && !nl)    //if only right, hard right
 4923              		.loc 1 1087 0
 4924 00be BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4925 00c0 002B     		cmp	r3, #0
 4926 00c2 27D0     		beq	.L259
 4927              		.loc 1 1087 0 is_stmt 0 discriminator 1
 4928 00c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4929 00c6 002B     		cmp	r3, #0
 4930 00c8 24D1     		bne	.L259
 4931              		.loc 1 1087 0 discriminator 2
 4932 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4933 00cc 002B     		cmp	r3, #0
 4934 00ce 21D1     		bne	.L259
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 108


1088:.\main.c      ****     {
1089:.\main.c      ****         setSpeed(-speed / 1.6,speed / 1.6);
 4935              		.loc 1 1089 0 is_stmt 1
 4936 00d0 1D4B     		ldr	r3, .L260+8
 4937 00d2 D3E90023 		ldrd	r2, [r3]
 4938 00d6 1446     		mov	r4, r2
 4939 00d8 83F00045 		eor	r5, r3, #-2147483648
 4940 00dc 2046     		mov	r0, r4
 4941 00de 2946     		mov	r1, r5
 4942 00e0 17A3     		adr	r3, .L260
 4943 00e2 D3E90023 		ldrd	r2, [r3]
 4944 00e6 FFF7FEFF 		bl	__aeabi_ddiv
 4945 00ea 0246     		mov	r2, r0
 4946 00ec 0B46     		mov	r3, r1
 4947 00ee 1446     		mov	r4, r2
 4948 00f0 1D46     		mov	r5, r3
 4949 00f2 154B     		ldr	r3, .L260+8
 4950 00f4 D3E90023 		ldrd	r2, [r3]
 4951 00f8 1046     		mov	r0, r2
 4952 00fa 1946     		mov	r1, r3
 4953 00fc 10A3     		adr	r3, .L260
 4954 00fe D3E90023 		ldrd	r2, [r3]
 4955 0102 FFF7FEFF 		bl	__aeabi_ddiv
 4956 0106 0246     		mov	r2, r0
 4957 0108 0B46     		mov	r3, r1
 4958 010a 2046     		mov	r0, r4
 4959 010c 2946     		mov	r1, r5
 4960 010e FFF7FEFF 		bl	setSpeed
 4961 0112 10E0     		b	.L254
 4962              	.L259:
1090:.\main.c      ****     }
1091:.\main.c      ****     else if (mid && !nr && !nl)
 4963              		.loc 1 1091 0
 4964 0114 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4965 0116 002B     		cmp	r3, #0
 4966 0118 0DD0     		beq	.L254
 4967              		.loc 1 1091 0 is_stmt 0 discriminator 1
 4968 011a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4969 011c 002B     		cmp	r3, #0
 4970 011e 0AD1     		bne	.L254
 4971              		.loc 1 1091 0 discriminator 2
 4972 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4973 0122 002B     		cmp	r3, #0
 4974 0124 07D1     		bne	.L254
1092:.\main.c      ****     {
1093:.\main.c      ****         setSpeed(speed,speed);
 4975              		.loc 1 1093 0 is_stmt 1
 4976 0126 084B     		ldr	r3, .L260+8
 4977 0128 D3E90001 		ldrd	r0, [r3]
 4978 012c 064B     		ldr	r3, .L260+8
 4979 012e D3E90023 		ldrd	r2, [r3]
 4980 0132 FFF7FEFF 		bl	setSpeed
 4981              	.L254:
1094:.\main.c      ****     }
1095:.\main.c      **** }
 4982              		.loc 1 1095 0
 4983 0136 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 109


 4984              		.cfi_def_cfa_offset 24
 4985 0138 BD46     		mov	sp, r7
 4986              		.cfi_def_cfa_register 13
 4987              		@ sp needed
 4988 013a BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 4989              	.L261:
 4990 013e 00BF     		.align	3
 4991              	.L260:
 4992 0140 9A999999 		.word	-1717986918
 4993 0144 9999F93F 		.word	1073322393
 4994 0148 00000000 		.word	speed
 4995              		.cfi_endproc
 4996              	.LFE98:
 4997              		.size	trackLineZ, .-trackLineZ
 4998 014c AFF30080 		.section	.text.trackLineU,"ax",%progbits
 4999              		.align	2
 5000              		.global	trackLineU
 5001              		.thumb
 5002              		.thumb_func
 5003              		.type	trackLineU, %function
 5004              	trackLineU:
 5005              	.LFB99:
1096:.\main.c      **** 
1097:.\main.c      **** 
1098:.\main.c      **** void trackLineU()
1099:.\main.c      **** { 
 5006              		.loc 1 1099 0
 5007              		.cfi_startproc
 5008              		@ args = 0, pretend = 0, frame = 0
 5009              		@ frame_needed = 1, uses_anonymous_args = 0
 5010              		@ link register save eliminated.
 5011 0000 80B4     		push	{r7}
 5012              		.cfi_def_cfa_offset 4
 5013              		.cfi_offset 7, -4
 5014 0002 00AF     		add	r7, sp, #0
 5015              		.cfi_def_cfa_register 7
1100:.\main.c      **** //removed from final implementation
1101:.\main.c      **** }
 5016              		.loc 1 1101 0
 5017 0004 BD46     		mov	sp, r7
 5018              		.cfi_def_cfa_register 13
 5019              		@ sp needed
 5020 0006 5DF8047B 		ldr	r7, [sp], #4
 5021              		.cfi_restore 7
 5022              		.cfi_def_cfa_offset 0
 5023 000a 7047     		bx	lr
 5024              		.cfi_endproc
 5025              	.LFE99:
 5026              		.size	trackLineU, .-trackLineU
 5027              		.global	__aeabi_fadd
 5028              		.section	.rodata
 5029 0103 00       		.align	2
 5030              	.LC14:
 5031 0104 42617474 		.ascii	"Battery Voltage: %dmv\012\015\000"
 5031      65727920 
 5031      566F6C74 
 5031      6167653A 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 110


 5031      2025646D 
 5032              		.section	.text.print_ADC,"ax",%progbits
 5033              		.align	2
 5034              		.global	print_ADC
 5035              		.thumb
 5036              		.thumb_func
 5037              		.type	print_ADC, %function
 5038              	print_ADC:
 5039              	.LFB100:
1102:.\main.c      **** 
1103:.\main.c      **** void print_ADC()
1104:.\main.c      **** {
 5040              		.loc 1 1104 0
 5041              		.cfi_startproc
 5042              		@ args = 0, pretend = 0, frame = 24
 5043              		@ frame_needed = 1, uses_anonymous_args = 0
 5044 0000 80B5     		push	{r7, lr}
 5045              		.cfi_def_cfa_offset 8
 5046              		.cfi_offset 7, -8
 5047              		.cfi_offset 14, -4
 5048 0002 86B0     		sub	sp, sp, #24
 5049              		.cfi_def_cfa_offset 32
 5050 0004 00AF     		add	r7, sp, #0
 5051              		.cfi_def_cfa_register 7
1105:.\main.c      ****    //usbPutString("HII\n");
1106:.\main.c      ****     if(flag_receive_ADC == 1)
 5052              		.loc 1 1106 0
 5053 0006 274B     		ldr	r3, .L266
 5054 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5055 000a 012B     		cmp	r3, #1
 5056 000c 46D1     		bne	.L263
 5057              	.LBB12:
1107:.\main.c      ****     {
1108:.\main.c      ****         //usbPutString("AAA\r\n");
1109:.\main.c      ****         flag_receive_ADC = 0;
 5058              		.loc 1 1109 0
 5059 000e 254B     		ldr	r3, .L266
 5060 0010 0022     		movs	r2, #0
 5061 0012 1A70     		strb	r2, [r3]
1110:.\main.c      ****         
1111:.\main.c      ****        // int8 channel = ADC_
1112:.\main.c      ****         float scalingFactor = 0.972;
 5062              		.loc 1 1112 0
 5063 0014 244B     		ldr	r3, .L266+4
 5064 0016 7B61     		str	r3, [r7, #20]	@ float
1113:.\main.c      ****         int16 converted_val = (5000 * adc_result) / 4096 * scalingFactor * 2;
 5065              		.loc 1 1113 0
 5066 0018 244B     		ldr	r3, .L266+8
 5067 001a 1B88     		ldrh	r3, [r3]
 5068 001c 1BB2     		sxth	r3, r3
 5069 001e 41F28832 		movw	r2, #5000
 5070 0022 02FB03F3 		mul	r3, r2, r3
 5071 0026 002B     		cmp	r3, #0
 5072 0028 01DA     		bge	.L265
 5073 002a 03F6FF73 		addw	r3, r3, #4095
 5074              	.L265:
 5075 002e 1B13     		asrs	r3, r3, #12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 111


 5076 0030 1846     		mov	r0, r3
 5077 0032 FFF7FEFF 		bl	__aeabi_i2f
 5078 0036 0346     		mov	r3, r0
 5079 0038 1846     		mov	r0, r3
 5080 003a 7969     		ldr	r1, [r7, #20]	@ float
 5081 003c FFF7FEFF 		bl	__aeabi_fmul
 5082 0040 0346     		mov	r3, r0
 5083 0042 1846     		mov	r0, r3
 5084 0044 1946     		mov	r1, r3
 5085 0046 FFF7FEFF 		bl	__aeabi_fadd
 5086 004a 0346     		mov	r3, r0
 5087 004c 1846     		mov	r0, r3
 5088 004e FFF7FEFF 		bl	__aeabi_f2iz
 5089 0052 0346     		mov	r3, r0
 5090 0054 7B82     		strh	r3, [r7, #18]	@ movhi
1114:.\main.c      ****         converted_val = (converted_val + prevVoltage + prevVoltage2) / 3; //smooth rapid changes in
 5091              		.loc 1 1114 0
 5092 0056 B7F91220 		ldrsh	r2, [r7, #18]
 5093 005a 154B     		ldr	r3, .L266+12
 5094 005c 1B88     		ldrh	r3, [r3]
 5095 005e 1BB2     		sxth	r3, r3
 5096 0060 1A44     		add	r2, r2, r3
 5097 0062 144B     		ldr	r3, .L266+16
 5098 0064 1B88     		ldrh	r3, [r3]
 5099 0066 1BB2     		sxth	r3, r3
 5100 0068 1344     		add	r3, r3, r2
 5101 006a 134A     		ldr	r2, .L266+20
 5102 006c 82FB0312 		smull	r1, r2, r2, r3
 5103 0070 DB17     		asrs	r3, r3, #31
 5104 0072 D31A     		subs	r3, r2, r3
 5105 0074 7B82     		strh	r3, [r7, #18]	@ movhi
1115:.\main.c      ****         prevVoltage2 = prevVoltage;
 5106              		.loc 1 1115 0
 5107 0076 0E4B     		ldr	r3, .L266+12
 5108 0078 1A88     		ldrh	r2, [r3]
 5109 007a 0E4B     		ldr	r3, .L266+16
 5110 007c 1A80     		strh	r2, [r3]	@ movhi
1116:.\main.c      ****         prevVoltage = converted_val;
 5111              		.loc 1 1116 0
 5112 007e 0C4A     		ldr	r2, .L266+12
 5113 0080 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 5114 0082 1380     		strh	r3, [r2]	@ movhi
1117:.\main.c      ****         
1118:.\main.c      ****         char result_str[16];
1119:.\main.c      ****         sprintf(result_str, "Battery Voltage: %dmv\n\r", converted_val);
 5115              		.loc 1 1119 0
 5116 0084 B7F91230 		ldrsh	r3, [r7, #18]
 5117 0088 3A46     		mov	r2, r7
 5118 008a 1046     		mov	r0, r2
 5119 008c 0B49     		ldr	r1, .L266+24
 5120 008e 1A46     		mov	r2, r3
 5121 0090 FFF7FEFF 		bl	sprintf
1120:.\main.c      ****         
1121:.\main.c      ****         usbPutString(result_str);
 5122              		.loc 1 1121 0
 5123 0094 3B46     		mov	r3, r7
 5124 0096 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 112


 5125 0098 FFF7FEFF 		bl	usbPutString
 5126              	.L263:
 5127              	.LBE12:
1122:.\main.c      ****     }
1123:.\main.c      **** }
 5128              		.loc 1 1123 0
 5129 009c 1837     		adds	r7, r7, #24
 5130              		.cfi_def_cfa_offset 8
 5131 009e BD46     		mov	sp, r7
 5132              		.cfi_def_cfa_register 13
 5133              		@ sp needed
 5134 00a0 80BD     		pop	{r7, pc}
 5135              	.L267:
 5136 00a2 00BF     		.align	2
 5137              	.L266:
 5138 00a4 00000000 		.word	flag_receive_ADC
 5139 00a8 FED4783F 		.word	1064883454
 5140 00ac 00000000 		.word	adc_result
 5141 00b0 00000000 		.word	prevVoltage
 5142 00b4 00000000 		.word	prevVoltage2
 5143 00b8 56555555 		.word	1431655766
 5144 00bc 04010000 		.word	.LC14
 5145              		.cfi_endproc
 5146              	.LFE100:
 5147              		.size	print_ADC, .-print_ADC
 5148              		.section	.rodata
 5149              		.align	2
 5150              	.LC15:
 5151 011c 52535349 		.ascii	"RSSI:\000"
 5151      3A00
 5152 0122 0000     		.align	2
 5153              	.LC16:
 5154 0124 25640D0A 		.ascii	"%d\015\012\000"
 5154      00
 5155 0129 000000   		.align	2
 5156              	.LC17:
 5157 012c 726F626F 		.ascii	"robot_x:\000"
 5157      745F783A 
 5157      00
 5158 0135 000000   		.align	2
 5159              	.LC18:
 5160 0138 726F626F 		.ascii	"robot_y:\000"
 5160      745F793A 
 5160      00
 5161 0141 000000   		.align	2
 5162              	.LC19:
 5163 0144 726F626F 		.ascii	"robot_dir:\000"
 5163      745F6469 
 5163      723A00
 5164 014f 00       		.section	.text.print_RF,"ax",%progbits
 5165              		.align	2
 5166              		.global	print_RF
 5167              		.thumb
 5168              		.thumb_func
 5169              		.type	print_RF, %function
 5170              	print_RF:
 5171              	.LFB101:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 113


1124:.\main.c      **** 
1125:.\main.c      **** void print_RF()
1126:.\main.c      **** {
 5172              		.loc 1 1126 0
 5173              		.cfi_startproc
 5174              		@ args = 0, pretend = 0, frame = 16
 5175              		@ frame_needed = 1, uses_anonymous_args = 0
 5176 0000 80B5     		push	{r7, lr}
 5177              		.cfi_def_cfa_offset 8
 5178              		.cfi_offset 7, -8
 5179              		.cfi_offset 14, -4
 5180 0002 84B0     		sub	sp, sp, #16
 5181              		.cfi_def_cfa_offset 24
 5182 0004 00AF     		add	r7, sp, #0
 5183              		.cfi_def_cfa_register 7
1127:.\main.c      ****     if(flag_print_rf == 1)
 5184              		.loc 1 1127 0
 5185 0006 254B     		ldr	r3, .L270
 5186 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5187 000a 012B     		cmp	r3, #1
 5188 000c 42D1     		bne	.L268
 5189              	.LBB13:
1128:.\main.c      ****     {
1129:.\main.c      ****         char printString[16];
1130:.\main.c      ****         flag_print_rf = 0;
 5190              		.loc 1 1130 0
 5191 000e 234B     		ldr	r3, .L270
 5192 0010 0022     		movs	r2, #0
 5193 0012 1A70     		strb	r2, [r3]
1131:.\main.c      ****         usbPutString("RSSI:");
 5194              		.loc 1 1131 0
 5195 0014 2248     		ldr	r0, .L270+4
 5196 0016 FFF7FEFF 		bl	usbPutString
1132:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.rssi);
 5197              		.loc 1 1132 0
 5198 001a 224B     		ldr	r3, .L270+8
 5199 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5200 001e 5BB2     		sxtb	r3, r3
 5201 0020 3A46     		mov	r2, r7
 5202 0022 1046     		mov	r0, r2
 5203 0024 2049     		ldr	r1, .L270+12
 5204 0026 1A46     		mov	r2, r3
 5205 0028 FFF7FEFF 		bl	sprintf
1133:.\main.c      ****         usbPutString(printString);
 5206              		.loc 1 1133 0
 5207 002c 3B46     		mov	r3, r7
 5208 002e 1846     		mov	r0, r3
 5209 0030 FFF7FEFF 		bl	usbPutString
1134:.\main.c      ****         usbPutString("robot_x:");
 5210              		.loc 1 1134 0
 5211 0034 1D48     		ldr	r0, .L270+16
 5212 0036 FFF7FEFF 		bl	usbPutString
1135:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_xpos);
 5213              		.loc 1 1135 0
 5214 003a 1A4B     		ldr	r3, .L270+8
 5215 003c 5B88     		ldrh	r3, [r3, #2]
 5216 003e 1BB2     		sxth	r3, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 114


 5217 0040 3A46     		mov	r2, r7
 5218 0042 1046     		mov	r0, r2
 5219 0044 1849     		ldr	r1, .L270+12
 5220 0046 1A46     		mov	r2, r3
 5221 0048 FFF7FEFF 		bl	sprintf
1136:.\main.c      ****         usbPutString(printString);
 5222              		.loc 1 1136 0
 5223 004c 3B46     		mov	r3, r7
 5224 004e 1846     		mov	r0, r3
 5225 0050 FFF7FEFF 		bl	usbPutString
1137:.\main.c      ****         usbPutString("robot_y:");
 5226              		.loc 1 1137 0
 5227 0054 1648     		ldr	r0, .L270+20
 5228 0056 FFF7FEFF 		bl	usbPutString
1138:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_ypos);
 5229              		.loc 1 1138 0
 5230 005a 124B     		ldr	r3, .L270+8
 5231 005c 9B88     		ldrh	r3, [r3, #4]
 5232 005e 1BB2     		sxth	r3, r3
 5233 0060 3A46     		mov	r2, r7
 5234 0062 1046     		mov	r0, r2
 5235 0064 1049     		ldr	r1, .L270+12
 5236 0066 1A46     		mov	r2, r3
 5237 0068 FFF7FEFF 		bl	sprintf
1139:.\main.c      ****         usbPutString(printString);
 5238              		.loc 1 1139 0
 5239 006c 3B46     		mov	r3, r7
 5240 006e 1846     		mov	r0, r3
 5241 0070 FFF7FEFF 		bl	usbPutString
1140:.\main.c      ****         usbPutString("robot_dir:");
 5242              		.loc 1 1140 0
 5243 0074 0F48     		ldr	r0, .L270+24
 5244 0076 FFF7FEFF 		bl	usbPutString
1141:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_orientation);
 5245              		.loc 1 1141 0
 5246 007a 0A4B     		ldr	r3, .L270+8
 5247 007c DB88     		ldrh	r3, [r3, #6]
 5248 007e 1BB2     		sxth	r3, r3
 5249 0080 3A46     		mov	r2, r7
 5250 0082 1046     		mov	r0, r2
 5251 0084 0849     		ldr	r1, .L270+12
 5252 0086 1A46     		mov	r2, r3
 5253 0088 FFF7FEFF 		bl	sprintf
1142:.\main.c      ****         usbPutString(printString);
 5254              		.loc 1 1142 0
 5255 008c 3B46     		mov	r3, r7
 5256 008e 1846     		mov	r0, r3
 5257 0090 FFF7FEFF 		bl	usbPutString
 5258              	.L268:
 5259              	.LBE13:
1143:.\main.c      ****     }
1144:.\main.c      **** }
 5260              		.loc 1 1144 0
 5261 0094 1037     		adds	r7, r7, #16
 5262              		.cfi_def_cfa_offset 8
 5263 0096 BD46     		mov	sp, r7
 5264              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 115


 5265              		@ sp needed
 5266 0098 80BD     		pop	{r7, pc}
 5267              	.L271:
 5268 009a 00BF     		.align	2
 5269              	.L270:
 5270 009c 00000000 		.word	flag_print_rf
 5271 00a0 1C010000 		.word	.LC15
 5272 00a4 00000000 		.word	system_state
 5273 00a8 24010000 		.word	.LC16
 5274 00ac 2C010000 		.word	.LC17
 5275 00b0 38010000 		.word	.LC18
 5276 00b4 44010000 		.word	.LC19
 5277              		.cfi_endproc
 5278              	.LFE101:
 5279              		.size	print_RF, .-print_RF
 5280              		.section	.text.readFrontSensors,"ax",%progbits
 5281              		.align	2
 5282              		.global	readFrontSensors
 5283              		.thumb
 5284              		.thumb_func
 5285              		.type	readFrontSensors, %function
 5286              	readFrontSensors:
 5287              	.LFB102:
1145:.\main.c      **** 
1146:.\main.c      **** void readFrontSensors(uint8 sensorVals[5])
1147:.\main.c      **** {
 5288              		.loc 1 1147 0
 5289              		.cfi_startproc
 5290              		@ args = 0, pretend = 0, frame = 8
 5291              		@ frame_needed = 1, uses_anonymous_args = 0
 5292 0000 90B5     		push	{r4, r7, lr}
 5293              		.cfi_def_cfa_offset 12
 5294              		.cfi_offset 4, -12
 5295              		.cfi_offset 7, -8
 5296              		.cfi_offset 14, -4
 5297 0002 83B0     		sub	sp, sp, #12
 5298              		.cfi_def_cfa_offset 24
 5299 0004 00AF     		add	r7, sp, #0
 5300              		.cfi_def_cfa_register 7
 5301 0006 7860     		str	r0, [r7, #4]
1148:.\main.c      ****     sensorVals[0] = FLSens_out_Read();
 5302              		.loc 1 1148 0
 5303 0008 FFF7FEFF 		bl	FLSens_out_Read
 5304 000c 0346     		mov	r3, r0
 5305 000e 1A46     		mov	r2, r3
 5306 0010 7B68     		ldr	r3, [r7, #4]
 5307 0012 1A70     		strb	r2, [r3]
1149:.\main.c      ****     sensorVals[1] = NLSens_out_Read();
 5308              		.loc 1 1149 0
 5309 0014 7B68     		ldr	r3, [r7, #4]
 5310 0016 5C1C     		adds	r4, r3, #1
 5311 0018 FFF7FEFF 		bl	NLSens_out_Read
 5312 001c 0346     		mov	r3, r0
 5313 001e 2370     		strb	r3, [r4]
1150:.\main.c      ****     sensorVals[2] = MSens_out_Read();
 5314              		.loc 1 1150 0
 5315 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 116


 5316 0022 9C1C     		adds	r4, r3, #2
 5317 0024 FFF7FEFF 		bl	MSens_out_Read
 5318 0028 0346     		mov	r3, r0
 5319 002a 2370     		strb	r3, [r4]
1151:.\main.c      ****     sensorVals[3] = NRSens_out_Read();
 5320              		.loc 1 1151 0
 5321 002c 7B68     		ldr	r3, [r7, #4]
 5322 002e DC1C     		adds	r4, r3, #3
 5323 0030 FFF7FEFF 		bl	NRSens_out_Read
 5324 0034 0346     		mov	r3, r0
 5325 0036 2370     		strb	r3, [r4]
1152:.\main.c      ****     sensorVals[4] = FRSens_out_Read();
 5326              		.loc 1 1152 0
 5327 0038 7B68     		ldr	r3, [r7, #4]
 5328 003a 1C1D     		adds	r4, r3, #4
 5329 003c FFF7FEFF 		bl	FRSens_out_Read
 5330 0040 0346     		mov	r3, r0
 5331 0042 2370     		strb	r3, [r4]
1153:.\main.c      **** }
 5332              		.loc 1 1153 0
 5333 0044 0C37     		adds	r7, r7, #12
 5334              		.cfi_def_cfa_offset 12
 5335 0046 BD46     		mov	sp, r7
 5336              		.cfi_def_cfa_register 13
 5337              		@ sp needed
 5338 0048 90BD     		pop	{r4, r7, pc}
 5339              		.cfi_endproc
 5340              	.LFE102:
 5341              		.size	readFrontSensors, .-readFrontSensors
 5342 004a 00BF     		.section	.text.usbPutString,"ax",%progbits
 5343              		.align	2
 5344              		.global	usbPutString
 5345              		.thumb
 5346              		.thumb_func
 5347              		.type	usbPutString, %function
 5348              	usbPutString:
 5349              	.LFB103:
1154:.\main.c      **** 
1155:.\main.c      **** 
1156:.\main.c      **** //* ========================================
1157:.\main.c      **** void usbPutString(char *s)
1158:.\main.c      **** {
 5350              		.loc 1 1158 0
 5351              		.cfi_startproc
 5352              		@ args = 0, pretend = 0, frame = 16
 5353              		@ frame_needed = 1, uses_anonymous_args = 0
 5354 0000 80B5     		push	{r7, lr}
 5355              		.cfi_def_cfa_offset 8
 5356              		.cfi_offset 7, -8
 5357              		.cfi_offset 14, -4
 5358 0002 84B0     		sub	sp, sp, #16
 5359              		.cfi_def_cfa_offset 24
 5360 0004 00AF     		add	r7, sp, #0
 5361              		.cfi_def_cfa_register 7
 5362 0006 7860     		str	r0, [r7, #4]
1159:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
1160:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 117


1161:.\main.c      **** //  length to 62 char (63rd char is a '!')
1162:.\main.c      ****     if (USE_USB && portOpen)
 5363              		.loc 1 1162 0
 5364 0008 154B     		ldr	r3, .L277
 5365 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5366 000c 002B     		cmp	r3, #0
 5367 000e 23D0     		beq	.L273
 5368              	.LBB14:
1163:.\main.c      ****     {
1164:.\main.c      ****             uint32 cnt = 0;
 5369              		.loc 1 1164 0
 5370 0010 0023     		movs	r3, #0
 5371 0012 FB60     		str	r3, [r7, #12]
1165:.\main.c      ****             while (USBUART_CDCIsReady() == 0)
 5372              		.loc 1 1165 0
 5373 0014 0AE0     		b	.L275
 5374              	.L276:
1166:.\main.c      ****             {
1167:.\main.c      ****                 cnt++;
 5375              		.loc 1 1167 0
 5376 0016 FB68     		ldr	r3, [r7, #12]
 5377 0018 0133     		adds	r3, r3, #1
 5378 001a FB60     		str	r3, [r7, #12]
1168:.\main.c      ****                 if(cnt == 3000000){
 5379              		.loc 1 1168 0
 5380 001c FB68     		ldr	r3, [r7, #12]
 5381 001e 114A     		ldr	r2, .L277+4
 5382 0020 9342     		cmp	r3, r2
 5383 0022 03D1     		bne	.L275
1169:.\main.c      ****                     portOpen = 0;
 5384              		.loc 1 1169 0
 5385 0024 0E4B     		ldr	r3, .L277
 5386 0026 0022     		movs	r2, #0
 5387 0028 1A70     		strb	r2, [r3]
1170:.\main.c      ****                     return;
 5388              		.loc 1 1170 0
 5389 002a 15E0     		b	.L273
 5390              	.L275:
1165:.\main.c      ****             {
 5391              		.loc 1 1165 0
 5392 002c FFF7FEFF 		bl	USBUART_CDCIsReady
 5393 0030 0346     		mov	r3, r0
 5394 0032 002B     		cmp	r3, #0
 5395 0034 EFD0     		beq	.L276
1171:.\main.c      ****                 }
1172:.\main.c      ****             }
1173:.\main.c      ****             s[63]='\0';
 5396              		.loc 1 1173 0
 5397 0036 7B68     		ldr	r3, [r7, #4]
 5398 0038 3F33     		adds	r3, r3, #63
 5399 003a 0022     		movs	r2, #0
 5400 003c 1A70     		strb	r2, [r3]
1174:.\main.c      ****             s[62]='!';
 5401              		.loc 1 1174 0
 5402 003e 7B68     		ldr	r3, [r7, #4]
 5403 0040 3E33     		adds	r3, r3, #62
 5404 0042 2122     		movs	r2, #33
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 118


 5405 0044 1A70     		strb	r2, [r3]
1175:.\main.c      ****             USBUART_PutData((uint8*)s,strlen(s));
 5406              		.loc 1 1175 0
 5407 0046 7868     		ldr	r0, [r7, #4]
 5408 0048 FFF7FEFF 		bl	strlen
 5409 004c 0346     		mov	r3, r0
 5410 004e 9BB2     		uxth	r3, r3
 5411 0050 7868     		ldr	r0, [r7, #4]
 5412 0052 1946     		mov	r1, r3
 5413 0054 FFF7FEFF 		bl	USBUART_PutData
 5414              	.L273:
 5415              	.LBE14:
1176:.\main.c      ****     }
1177:.\main.c      **** }
 5416              		.loc 1 1177 0
 5417 0058 1037     		adds	r7, r7, #16
 5418              		.cfi_def_cfa_offset 8
 5419 005a BD46     		mov	sp, r7
 5420              		.cfi_def_cfa_register 13
 5421              		@ sp needed
 5422 005c 80BD     		pop	{r7, pc}
 5423              	.L278:
 5424 005e 00BF     		.align	2
 5425              	.L277:
 5426 0060 00000000 		.word	portOpen
 5427 0064 C0C62D00 		.word	3000000
 5428              		.cfi_endproc
 5429              	.LFE103:
 5430              		.size	usbPutString, .-usbPutString
 5431              		.section	.text.usbPutChar,"ax",%progbits
 5432              		.align	2
 5433              		.global	usbPutChar
 5434              		.thumb
 5435              		.thumb_func
 5436              		.type	usbPutChar, %function
 5437              	usbPutChar:
 5438              	.LFB104:
1178:.\main.c      **** //* ========================================
1179:.\main.c      **** void usbPutChar(char c)
1180:.\main.c      **** {
 5439              		.loc 1 1180 0
 5440              		.cfi_startproc
 5441              		@ args = 0, pretend = 0, frame = 16
 5442              		@ frame_needed = 1, uses_anonymous_args = 0
 5443 0000 80B5     		push	{r7, lr}
 5444              		.cfi_def_cfa_offset 8
 5445              		.cfi_offset 7, -8
 5446              		.cfi_offset 14, -4
 5447 0002 84B0     		sub	sp, sp, #16
 5448              		.cfi_def_cfa_offset 24
 5449 0004 00AF     		add	r7, sp, #0
 5450              		.cfi_def_cfa_register 7
 5451 0006 0346     		mov	r3, r0
 5452 0008 FB71     		strb	r3, [r7, #7]
1181:.\main.c      ****     if (USE_USB && portOpen)    
 5453              		.loc 1 1181 0
 5454 000a 0F4B     		ldr	r3, .L283
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 119


 5455 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5456 000e 002B     		cmp	r3, #0
 5457 0010 16D0     		beq	.L279
 5458              	.LBB15:
1182:.\main.c      ****     {    
1183:.\main.c      ****         uint32 cnt = 0;
 5459              		.loc 1 1183 0
 5460 0012 0023     		movs	r3, #0
 5461 0014 FB60     		str	r3, [r7, #12]
1184:.\main.c      ****         while (USBUART_CDCIsReady() == 0){
 5462              		.loc 1 1184 0
 5463 0016 0AE0     		b	.L281
 5464              	.L282:
1185:.\main.c      ****             cnt++;
 5465              		.loc 1 1185 0
 5466 0018 FB68     		ldr	r3, [r7, #12]
 5467 001a 0133     		adds	r3, r3, #1
 5468 001c FB60     		str	r3, [r7, #12]
1186:.\main.c      ****             if(cnt == 3000000){
 5469              		.loc 1 1186 0
 5470 001e FB68     		ldr	r3, [r7, #12]
 5471 0020 0A4A     		ldr	r2, .L283+4
 5472 0022 9342     		cmp	r3, r2
 5473 0024 03D1     		bne	.L281
1187:.\main.c      ****                 portOpen = 0;
 5474              		.loc 1 1187 0
 5475 0026 084B     		ldr	r3, .L283
 5476 0028 0022     		movs	r2, #0
 5477 002a 1A70     		strb	r2, [r3]
1188:.\main.c      ****                 return;
 5478              		.loc 1 1188 0
 5479 002c 08E0     		b	.L279
 5480              	.L281:
1184:.\main.c      ****             cnt++;
 5481              		.loc 1 1184 0
 5482 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 5483 0032 0346     		mov	r3, r0
 5484 0034 002B     		cmp	r3, #0
 5485 0036 EFD0     		beq	.L282
1189:.\main.c      ****             }
1190:.\main.c      ****         }
1191:.\main.c      ****         USBUART_PutChar(c);
 5486              		.loc 1 1191 0
 5487 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5488 003a 1846     		mov	r0, r3
 5489 003c FFF7FEFF 		bl	USBUART_PutChar
 5490              	.L279:
 5491              	.LBE15:
1192:.\main.c      ****     }    
1193:.\main.c      **** }
 5492              		.loc 1 1193 0
 5493 0040 1037     		adds	r7, r7, #16
 5494              		.cfi_def_cfa_offset 8
 5495 0042 BD46     		mov	sp, r7
 5496              		.cfi_def_cfa_register 13
 5497              		@ sp needed
 5498 0044 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 120


 5499              	.L284:
 5500 0046 00BF     		.align	2
 5501              	.L283:
 5502 0048 00000000 		.word	portOpen
 5503 004c C0C62D00 		.word	3000000
 5504              		.cfi_endproc
 5505              	.LFE104:
 5506              		.size	usbPutChar, .-usbPutChar
 5507              		.section	.text.uart_set_PWM,"ax",%progbits
 5508              		.align	2
 5509              		.global	uart_set_PWM
 5510              		.thumb
 5511              		.thumb_func
 5512              		.type	uart_set_PWM, %function
 5513              	uart_set_PWM:
 5514              	.LFB105:
1194:.\main.c      **** //* ========================================
1195:.\main.c      **** 
1196:.\main.c      **** void uart_set_PWM()
1197:.\main.c      **** {
 5515              		.loc 1 1197 0
 5516              		.cfi_startproc
 5517              		@ args = 0, pretend = 0, frame = 0
 5518              		@ frame_needed = 1, uses_anonymous_args = 0
 5519              		@ link register save eliminated.
 5520 0000 80B4     		push	{r7}
 5521              		.cfi_def_cfa_offset 4
 5522              		.cfi_offset 7, -4
 5523 0002 00AF     		add	r7, sp, #0
 5524              		.cfi_def_cfa_register 7
1198:.\main.c      ****     //removed from final implementation
1199:.\main.c      **** }
 5525              		.loc 1 1199 0
 5526 0004 BD46     		mov	sp, r7
 5527              		.cfi_def_cfa_register 13
 5528              		@ sp needed
 5529 0006 5DF8047B 		ldr	r7, [sp], #4
 5530              		.cfi_restore 7
 5531              		.cfi_def_cfa_offset 0
 5532 000a 7047     		bx	lr
 5533              		.cfi_endproc
 5534              	.LFE105:
 5535              		.size	uart_set_PWM, .-uart_set_PWM
 5536              		.text
 5537              	.Letext0:
 5538              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5539              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5540              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5541              		.file 5 ".\\vars.h"
 5542              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 5543              		.file 7 ".\\pathfinder.h"
 5544              		.section	.debug_info,"",%progbits
 5545              	.Ldebug_info0:
 5546 0000 A70E0000 		.4byte	0xea7
 5547 0004 0400     		.2byte	0x4
 5548 0006 00000000 		.4byte	.Ldebug_abbrev0
 5549 000a 04       		.byte	0x4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 121


 5550 000b 01       		.uleb128 0x1
 5551 000c 0D050000 		.4byte	.LASF199
 5552 0010 01       		.byte	0x1
 5553 0011 3E090000 		.4byte	.LASF200
 5554 0015 76090000 		.4byte	.LASF201
 5555 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5556 001d 00000000 		.4byte	0
 5557 0021 00000000 		.4byte	.Ldebug_line0
 5558 0025 02       		.uleb128 0x2
 5559 0026 01       		.byte	0x1
 5560 0027 06       		.byte	0x6
 5561 0028 3C010000 		.4byte	.LASF0
 5562 002c 02       		.uleb128 0x2
 5563 002d 01       		.byte	0x1
 5564 002e 08       		.byte	0x8
 5565 002f 75060000 		.4byte	.LASF1
 5566 0033 02       		.uleb128 0x2
 5567 0034 02       		.byte	0x2
 5568 0035 05       		.byte	0x5
 5569 0036 AF060000 		.4byte	.LASF2
 5570 003a 02       		.uleb128 0x2
 5571 003b 02       		.byte	0x2
 5572 003c 07       		.byte	0x7
 5573 003d 92030000 		.4byte	.LASF3
 5574 0041 03       		.uleb128 0x3
 5575 0042 18040000 		.4byte	.LASF5
 5576 0046 02       		.byte	0x2
 5577 0047 3F       		.byte	0x3f
 5578 0048 4C000000 		.4byte	0x4c
 5579 004c 02       		.uleb128 0x2
 5580 004d 04       		.byte	0x4
 5581 004e 05       		.byte	0x5
 5582 004f D6010000 		.4byte	.LASF4
 5583 0053 03       		.uleb128 0x3
 5584 0054 94070000 		.4byte	.LASF6
 5585 0058 02       		.byte	0x2
 5586 0059 41       		.byte	0x41
 5587 005a 5E000000 		.4byte	0x5e
 5588 005e 02       		.uleb128 0x2
 5589 005f 04       		.byte	0x4
 5590 0060 07       		.byte	0x7
 5591 0061 52030000 		.4byte	.LASF7
 5592 0065 02       		.uleb128 0x2
 5593 0066 08       		.byte	0x8
 5594 0067 05       		.byte	0x5
 5595 0068 2E010000 		.4byte	.LASF8
 5596 006c 02       		.uleb128 0x2
 5597 006d 08       		.byte	0x8
 5598 006e 07       		.byte	0x7
 5599 006f 99000000 		.4byte	.LASF9
 5600 0073 04       		.uleb128 0x4
 5601 0074 04       		.byte	0x4
 5602 0075 05       		.byte	0x5
 5603 0076 696E7400 		.ascii	"int\000"
 5604 007a 02       		.uleb128 0x2
 5605 007b 04       		.byte	0x4
 5606 007c 07       		.byte	0x7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 122


 5607 007d FE020000 		.4byte	.LASF10
 5608 0081 02       		.uleb128 0x2
 5609 0082 04       		.byte	0x4
 5610 0083 07       		.byte	0x7
 5611 0084 8B040000 		.4byte	.LASF11
 5612 0088 05       		.uleb128 0x5
 5613 0089 04       		.byte	0x4
 5614 008a 8E000000 		.4byte	0x8e
 5615 008e 02       		.uleb128 0x2
 5616 008f 01       		.byte	0x1
 5617 0090 08       		.byte	0x8
 5618 0091 54070000 		.4byte	.LASF12
 5619 0095 03       		.uleb128 0x3
 5620 0096 6D060000 		.4byte	.LASF13
 5621 009a 03       		.byte	0x3
 5622 009b 2C       		.byte	0x2c
 5623 009c 41000000 		.4byte	0x41
 5624 00a0 03       		.uleb128 0x3
 5625 00a1 60080000 		.4byte	.LASF14
 5626 00a5 03       		.byte	0x3
 5627 00a6 2D       		.byte	0x2d
 5628 00a7 53000000 		.4byte	0x53
 5629 00ab 06       		.uleb128 0x6
 5630 00ac F1010000 		.4byte	.LASF15
 5631 00b0 04       		.byte	0x4
 5632 00b1 9201     		.2byte	0x192
 5633 00b3 2C000000 		.4byte	0x2c
 5634 00b7 06       		.uleb128 0x6
 5635 00b8 83060000 		.4byte	.LASF16
 5636 00bc 04       		.byte	0x4
 5637 00bd 9301     		.2byte	0x193
 5638 00bf 3A000000 		.4byte	0x3a
 5639 00c3 06       		.uleb128 0x6
 5640 00c4 3D020000 		.4byte	.LASF17
 5641 00c8 04       		.byte	0x4
 5642 00c9 9401     		.2byte	0x194
 5643 00cb 5E000000 		.4byte	0x5e
 5644 00cf 06       		.uleb128 0x6
 5645 00d0 AE030000 		.4byte	.LASF18
 5646 00d4 04       		.byte	0x4
 5647 00d5 9501     		.2byte	0x195
 5648 00d7 25000000 		.4byte	0x25
 5649 00db 06       		.uleb128 0x6
 5650 00dc FD080000 		.4byte	.LASF19
 5651 00e0 04       		.byte	0x4
 5652 00e1 9601     		.2byte	0x196
 5653 00e3 33000000 		.4byte	0x33
 5654 00e7 02       		.uleb128 0x2
 5655 00e8 04       		.byte	0x4
 5656 00e9 04       		.byte	0x4
 5657 00ea E3050000 		.4byte	.LASF20
 5658 00ee 02       		.uleb128 0x2
 5659 00ef 08       		.byte	0x8
 5660 00f0 04       		.byte	0x4
 5661 00f1 10020000 		.4byte	.LASF21
 5662 00f5 07       		.uleb128 0x7
 5663 00f6 A0000000 		.4byte	0xa0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 123


 5664 00fa 05010000 		.4byte	0x105
 5665 00fe 08       		.uleb128 0x8
 5666 00ff 81000000 		.4byte	0x81
 5667 0103 01       		.byte	0x1
 5668 0104 00       		.byte	0
 5669 0105 02       		.uleb128 0x2
 5670 0106 08       		.byte	0x8
 5671 0107 04       		.byte	0x4
 5672 0108 36070000 		.4byte	.LASF22
 5673 010c 09       		.uleb128 0x9
 5674 010d D0010000 		.4byte	.LASF31
 5675 0111 01       		.byte	0x1
 5676 0112 05       		.byte	0x5
 5677 0113 63       		.byte	0x63
 5678 0114 49010000 		.4byte	0x149
 5679 0118 0A       		.uleb128 0xa
 5680 0119 B3030000 		.4byte	.LASF23
 5681 011d 00       		.sleb128 0
 5682 011e 0A       		.uleb128 0xa
 5683 011f D6040000 		.4byte	.LASF24
 5684 0123 01       		.sleb128 1
 5685 0124 0A       		.uleb128 0xa
 5686 0125 E2020000 		.4byte	.LASF25
 5687 0129 02       		.sleb128 2
 5688 012a 0A       		.uleb128 0xa
 5689 012b 21070000 		.4byte	.LASF26
 5690 012f 03       		.sleb128 3
 5691 0130 0A       		.uleb128 0xa
 5692 0131 D1030000 		.4byte	.LASF27
 5693 0135 04       		.sleb128 4
 5694 0136 0A       		.uleb128 0xa
 5695 0137 E9050000 		.4byte	.LASF28
 5696 013b 05       		.sleb128 5
 5697 013c 0A       		.uleb128 0xa
 5698 013d 53060000 		.4byte	.LASF29
 5699 0141 06       		.sleb128 6
 5700 0142 0A       		.uleb128 0xa
 5701 0143 DF010000 		.4byte	.LASF30
 5702 0147 07       		.sleb128 7
 5703 0148 00       		.byte	0
 5704 0149 09       		.uleb128 0x9
 5705 014a 59070000 		.4byte	.LASF32
 5706 014e 01       		.byte	0x1
 5707 014f 05       		.byte	0x5
 5708 0150 64       		.byte	0x64
 5709 0151 86010000 		.4byte	0x186
 5710 0155 0A       		.uleb128 0xa
 5711 0156 B9060000 		.4byte	.LASF33
 5712 015a 00       		.sleb128 0
 5713 015b 0A       		.uleb128 0xa
 5714 015c 0C040000 		.4byte	.LASF34
 5715 0160 01       		.sleb128 1
 5716 0161 0A       		.uleb128 0xa
 5717 0162 08010000 		.4byte	.LASF35
 5718 0166 02       		.sleb128 2
 5719 0167 0A       		.uleb128 0xa
 5720 0168 22040000 		.4byte	.LASF36
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 124


 5721 016c 03       		.sleb128 3
 5722 016d 0A       		.uleb128 0xa
 5723 016e 1F000000 		.4byte	.LASF37
 5724 0172 04       		.sleb128 4
 5725 0173 0A       		.uleb128 0xa
 5726 0174 8A060000 		.4byte	.LASF38
 5727 0178 05       		.sleb128 5
 5728 0179 0A       		.uleb128 0xa
 5729 017a CD020000 		.4byte	.LASF39
 5730 017e 06       		.sleb128 6
 5731 017f 0A       		.uleb128 0xa
 5732 0180 10010000 		.4byte	.LASF40
 5733 0184 07       		.sleb128 7
 5734 0185 00       		.byte	0
 5735 0186 0B       		.uleb128 0xb
 5736 0187 1C030000 		.4byte	.LASF202
 5737 018b 20       		.byte	0x20
 5738 018c 05       		.byte	0x5
 5739 018d 6A       		.byte	0x6a
 5740 018e 5F020000 		.4byte	0x25f
 5741 0192 0C       		.uleb128 0xc
 5742 0193 7D040000 		.4byte	.LASF41
 5743 0197 05       		.byte	0x5
 5744 0198 6B       		.byte	0x6b
 5745 0199 CF000000 		.4byte	0xcf
 5746 019d 00       		.byte	0
 5747 019e 0C       		.uleb128 0xc
 5748 019f 6B070000 		.4byte	.LASF42
 5749 01a3 05       		.byte	0x5
 5750 01a4 6C       		.byte	0x6c
 5751 01a5 AB000000 		.4byte	0xab
 5752 01a9 01       		.byte	0x1
 5753 01aa 0C       		.uleb128 0xc
 5754 01ab D3070000 		.4byte	.LASF43
 5755 01af 05       		.byte	0x5
 5756 01b0 6D       		.byte	0x6d
 5757 01b1 DB000000 		.4byte	0xdb
 5758 01b5 02       		.byte	0x2
 5759 01b6 0C       		.uleb128 0xc
 5760 01b7 F2080000 		.4byte	.LASF44
 5761 01bb 05       		.byte	0x5
 5762 01bc 6E       		.byte	0x6e
 5763 01bd DB000000 		.4byte	0xdb
 5764 01c1 04       		.byte	0x4
 5765 01c2 0C       		.uleb128 0xc
 5766 01c3 53010000 		.4byte	.LASF45
 5767 01c7 05       		.byte	0x5
 5768 01c8 6F       		.byte	0x6f
 5769 01c9 DB000000 		.4byte	0xdb
 5770 01cd 06       		.byte	0x6
 5771 01ce 0C       		.uleb128 0xc
 5772 01cf D6000000 		.4byte	.LASF46
 5773 01d3 05       		.byte	0x5
 5774 01d4 70       		.byte	0x70
 5775 01d5 DB000000 		.4byte	0xdb
 5776 01d9 08       		.byte	0x8
 5777 01da 0C       		.uleb128 0xc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 125


 5778 01db BC070000 		.4byte	.LASF47
 5779 01df 05       		.byte	0x5
 5780 01e0 71       		.byte	0x71
 5781 01e1 DB000000 		.4byte	0xdb
 5782 01e5 0A       		.byte	0xa
 5783 01e6 0C       		.uleb128 0xc
 5784 01e7 6D090000 		.4byte	.LASF48
 5785 01eb 05       		.byte	0x5
 5786 01ec 72       		.byte	0x72
 5787 01ed DB000000 		.4byte	0xdb
 5788 01f1 0C       		.byte	0xc
 5789 01f2 0C       		.uleb128 0xc
 5790 01f3 7B000000 		.4byte	.LASF49
 5791 01f7 05       		.byte	0x5
 5792 01f8 73       		.byte	0x73
 5793 01f9 DB000000 		.4byte	0xdb
 5794 01fd 0E       		.byte	0xe
 5795 01fe 0C       		.uleb128 0xc
 5796 01ff 14080000 		.4byte	.LASF50
 5797 0203 05       		.byte	0x5
 5798 0204 74       		.byte	0x74
 5799 0205 DB000000 		.4byte	0xdb
 5800 0209 10       		.byte	0x10
 5801 020a 0C       		.uleb128 0xc
 5802 020b AF040000 		.4byte	.LASF51
 5803 020f 05       		.byte	0x5
 5804 0210 75       		.byte	0x75
 5805 0211 DB000000 		.4byte	0xdb
 5806 0215 12       		.byte	0x12
 5807 0216 0C       		.uleb128 0xc
 5808 0217 82040000 		.4byte	.LASF52
 5809 021b 05       		.byte	0x5
 5810 021c 76       		.byte	0x76
 5811 021d DB000000 		.4byte	0xdb
 5812 0221 14       		.byte	0x14
 5813 0222 0C       		.uleb128 0xc
 5814 0223 B7040000 		.4byte	.LASF53
 5815 0227 05       		.byte	0x5
 5816 0228 77       		.byte	0x77
 5817 0229 DB000000 		.4byte	0xdb
 5818 022d 16       		.byte	0x16
 5819 022e 0C       		.uleb128 0xc
 5820 022f 9D060000 		.4byte	.LASF54
 5821 0233 05       		.byte	0x5
 5822 0234 78       		.byte	0x78
 5823 0235 DB000000 		.4byte	0xdb
 5824 0239 18       		.byte	0x18
 5825 023a 0C       		.uleb128 0xc
 5826 023b E6040000 		.4byte	.LASF55
 5827 023f 05       		.byte	0x5
 5828 0240 79       		.byte	0x79
 5829 0241 DB000000 		.4byte	0xdb
 5830 0245 1A       		.byte	0x1a
 5831 0246 0C       		.uleb128 0xc
 5832 0247 0B000000 		.4byte	.LASF56
 5833 024b 05       		.byte	0x5
 5834 024c 7A       		.byte	0x7a
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 126


 5835 024d DB000000 		.4byte	0xdb
 5836 0251 1C       		.byte	0x1c
 5837 0252 0C       		.uleb128 0xc
 5838 0253 7A020000 		.4byte	.LASF57
 5839 0257 05       		.byte	0x5
 5840 0258 7B       		.byte	0x7b
 5841 0259 DB000000 		.4byte	0xdb
 5842 025d 1E       		.byte	0x1e
 5843 025e 00       		.byte	0
 5844 025f 0D       		.uleb128 0xd
 5845 0260 91080000 		.4byte	.LASF58
 5846 0264 01       		.byte	0x1
 5847 0265 84       		.byte	0x84
 5848 0266 00000000 		.4byte	.LFB63
 5849 026a 0C000000 		.4byte	.LFE63-.LFB63
 5850 026e 01       		.uleb128 0x1
 5851 026f 9C       		.byte	0x9c
 5852 0270 0E       		.uleb128 0xe
 5853 0271 26020000 		.4byte	.LASF59
 5854 0275 01       		.byte	0x1
 5855 0276 8A       		.byte	0x8a
 5856 0277 00000000 		.4byte	.LFB64
 5857 027b 2C000000 		.4byte	.LFE64-.LFB64
 5858 027f 01       		.uleb128 0x1
 5859 0280 9C       		.byte	0x9c
 5860 0281 0E       		.uleb128 0xe
 5861 0282 F4020000 		.4byte	.LASF60
 5862 0286 01       		.byte	0x1
 5863 0287 93       		.byte	0x93
 5864 0288 00000000 		.4byte	.LFB65
 5865 028c A4010000 		.4byte	.LFE65-.LFB65
 5866 0290 01       		.uleb128 0x1
 5867 0291 9C       		.byte	0x9c
 5868 0292 0F       		.uleb128 0xf
 5869 0293 56040000 		.4byte	.LASF66
 5870 0297 01       		.byte	0x1
 5871 0298 B8       		.byte	0xb8
 5872 0299 00000000 		.4byte	.LFB66
 5873 029d 34010000 		.4byte	.LFE66-.LFB66
 5874 02a1 01       		.uleb128 0x1
 5875 02a2 9C       		.byte	0x9c
 5876 02a3 DC020000 		.4byte	0x2dc
 5877 02a7 10       		.uleb128 0x10
 5878 02a8 0E000000 		.4byte	.LBB2
 5879 02ac 64000000 		.4byte	.LBE2-.LBB2
 5880 02b0 C3020000 		.4byte	0x2c3
 5881 02b4 11       		.uleb128 0x11
 5882 02b5 88000000 		.4byte	.LASF61
 5883 02b9 01       		.byte	0x1
 5884 02ba BC       		.byte	0xbc
 5885 02bb B7000000 		.4byte	0xb7
 5886 02bf 02       		.uleb128 0x2
 5887 02c0 91       		.byte	0x91
 5888 02c1 76       		.sleb128 -10
 5889 02c2 00       		.byte	0
 5890 02c3 12       		.uleb128 0x12
 5891 02c4 7E000000 		.4byte	.LBB3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 127


 5892 02c8 64000000 		.4byte	.LBE3-.LBB3
 5893 02cc 11       		.uleb128 0x11
 5894 02cd 88000000 		.4byte	.LASF61
 5895 02d1 01       		.byte	0x1
 5896 02d2 C8       		.byte	0xc8
 5897 02d3 B7000000 		.4byte	0xb7
 5898 02d7 02       		.uleb128 0x2
 5899 02d8 91       		.byte	0x91
 5900 02d9 74       		.sleb128 -12
 5901 02da 00       		.byte	0
 5902 02db 00       		.byte	0
 5903 02dc 0D       		.uleb128 0xd
 5904 02dd FF030000 		.4byte	.LASF62
 5905 02e1 01       		.byte	0x1
 5906 02e2 DE       		.byte	0xde
 5907 02e3 00000000 		.4byte	.LFB67
 5908 02e7 20000000 		.4byte	.LFE67-.LFB67
 5909 02eb 01       		.uleb128 0x1
 5910 02ec 9C       		.byte	0x9c
 5911 02ed 0E       		.uleb128 0xe
 5912 02ee 29000000 		.4byte	.LASF63
 5913 02f2 01       		.byte	0x1
 5914 02f3 E5       		.byte	0xe5
 5915 02f4 00000000 		.4byte	.LFB68
 5916 02f8 28000000 		.4byte	.LFE68-.LFB68
 5917 02fc 01       		.uleb128 0x1
 5918 02fd 9C       		.byte	0x9c
 5919 02fe 0E       		.uleb128 0xe
 5920 02ff EF060000 		.4byte	.LASF64
 5921 0303 01       		.byte	0x1
 5922 0304 EE       		.byte	0xee
 5923 0305 00000000 		.4byte	.LFB69
 5924 0309 0A000000 		.4byte	.LFE69-.LFB69
 5925 030d 01       		.uleb128 0x1
 5926 030e 9C       		.byte	0x9c
 5927 030f 0E       		.uleb128 0xe
 5928 0310 55000000 		.4byte	.LASF65
 5929 0314 01       		.byte	0x1
 5930 0315 F3       		.byte	0xf3
 5931 0316 00000000 		.4byte	.LFB70
 5932 031a 28000000 		.4byte	.LFE70-.LFB70
 5933 031e 01       		.uleb128 0x1
 5934 031f 9C       		.byte	0x9c
 5935 0320 13       		.uleb128 0x13
 5936 0321 63090000 		.4byte	.LASF67
 5937 0325 01       		.byte	0x1
 5938 0326 FE       		.byte	0xfe
 5939 0327 73000000 		.4byte	0x73
 5940 032b 00000000 		.4byte	.LFB71
 5941 032f 98070000 		.4byte	.LFE71-.LFB71
 5942 0333 01       		.uleb128 0x1
 5943 0334 9C       		.byte	0x9c
 5944 0335 09040000 		.4byte	0x409
 5945 0339 14       		.uleb128 0x14
 5946 033a 7B070000 		.4byte	.LASF68
 5947 033e 01       		.byte	0x1
 5948 033f 3701     		.2byte	0x137
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 128


 5949 0341 B7000000 		.4byte	0xb7
 5950 0345 02       		.uleb128 0x2
 5951 0346 91       		.byte	0x91
 5952 0347 76       		.sleb128 -10
 5953 0348 12       		.uleb128 0x12
 5954 0349 38010000 		.4byte	.LBB4
 5955 034d D6050000 		.4byte	.LBE4-.LBB4
 5956 0351 14       		.uleb128 0x14
 5957 0352 35090000 		.4byte	.LASF69
 5958 0356 01       		.byte	0x1
 5959 0357 6E01     		.2byte	0x16e
 5960 0359 8E000000 		.4byte	0x8e
 5961 035d 02       		.uleb128 0x2
 5962 035e 91       		.byte	0x91
 5963 035f 75       		.sleb128 -11
 5964 0360 10       		.uleb128 0x10
 5965 0361 BC010000 		.4byte	.LBB5
 5966 0365 F8010000 		.4byte	.LBE5-.LBB5
 5967 0369 96030000 		.4byte	0x396
 5968 036d 15       		.uleb128 0x15
 5969 036e 6D657300 		.ascii	"mes\000"
 5970 0372 01       		.byte	0x1
 5971 0373 7C01     		.2byte	0x17c
 5972 0375 09040000 		.4byte	0x409
 5973 0379 02       		.uleb128 0x2
 5974 037a 91       		.byte	0x91
 5975 037b 60       		.sleb128 -32
 5976 037c 12       		.uleb128 0x12
 5977 037d E4010000 		.4byte	.LBB6
 5978 0381 D0010000 		.4byte	.LBE6-.LBB6
 5979 0385 14       		.uleb128 0x14
 5980 0386 79080000 		.4byte	.LASF70
 5981 038a 01       		.byte	0x1
 5982 038b 8D01     		.2byte	0x18d
 5983 038d AB000000 		.4byte	0xab
 5984 0391 02       		.uleb128 0x2
 5985 0392 91       		.byte	0x91
 5986 0393 74       		.sleb128 -12
 5987 0394 00       		.byte	0
 5988 0395 00       		.byte	0
 5989 0396 10       		.uleb128 0x10
 5990 0397 0E040000 		.4byte	.LBB7
 5991 039b 30000000 		.4byte	.LBE7-.LBB7
 5992 039f B3030000 		.4byte	0x3b3
 5993 03a3 14       		.uleb128 0x14
 5994 03a4 44020000 		.4byte	.LASF71
 5995 03a8 01       		.byte	0x1
 5996 03a9 C901     		.2byte	0x1c9
 5997 03ab 8E000000 		.4byte	0x8e
 5998 03af 02       		.uleb128 0x2
 5999 03b0 91       		.byte	0x91
 6000 03b1 71       		.sleb128 -15
 6001 03b2 00       		.byte	0
 6002 03b3 10       		.uleb128 0x10
 6003 03b4 60040000 		.4byte	.LBB8
 6004 03b8 FC000000 		.4byte	.LBE8-.LBB8
 6005 03bc DF030000 		.4byte	0x3df
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 129


 6006 03c0 15       		.uleb128 0x15
 6007 03c1 6D657300 		.ascii	"mes\000"
 6008 03c5 01       		.byte	0x1
 6009 03c6 D801     		.2byte	0x1d8
 6010 03c8 09040000 		.4byte	0x409
 6011 03cc 02       		.uleb128 0x2
 6012 03cd 91       		.byte	0x91
 6013 03ce 50       		.sleb128 -48
 6014 03cf 14       		.uleb128 0x14
 6015 03d0 79080000 		.4byte	.LASF70
 6016 03d4 01       		.byte	0x1
 6017 03d5 DC01     		.2byte	0x1dc
 6018 03d7 AB000000 		.4byte	0xab
 6019 03db 02       		.uleb128 0x2
 6020 03dc 91       		.byte	0x91
 6021 03dd 73       		.sleb128 -13
 6022 03de 00       		.byte	0
 6023 03df 12       		.uleb128 0x12
 6024 03e0 84050000 		.4byte	.LBB9
 6025 03e4 80010000 		.4byte	.LBE9-.LBB9
 6026 03e8 15       		.uleb128 0x15
 6027 03e9 6D657300 		.ascii	"mes\000"
 6028 03ed 01       		.byte	0x1
 6029 03ee 0002     		.2byte	0x200
 6030 03f0 09040000 		.4byte	0x409
 6031 03f4 02       		.uleb128 0x2
 6032 03f5 91       		.byte	0x91
 6033 03f6 40       		.sleb128 -64
 6034 03f7 14       		.uleb128 0x14
 6035 03f8 79080000 		.4byte	.LASF70
 6036 03fc 01       		.byte	0x1
 6037 03fd 0402     		.2byte	0x204
 6038 03ff AB000000 		.4byte	0xab
 6039 0403 02       		.uleb128 0x2
 6040 0404 91       		.byte	0x91
 6041 0405 72       		.sleb128 -14
 6042 0406 00       		.byte	0
 6043 0407 00       		.byte	0
 6044 0408 00       		.byte	0
 6045 0409 07       		.uleb128 0x7
 6046 040a 8E000000 		.4byte	0x8e
 6047 040e 19040000 		.4byte	0x419
 6048 0412 08       		.uleb128 0x8
 6049 0413 81000000 		.4byte	0x81
 6050 0417 0F       		.byte	0xf
 6051 0418 00       		.byte	0
 6052 0419 16       		.uleb128 0x16
 6053 041a CE060000 		.4byte	.LASF77
 6054 041e 01       		.byte	0x1
 6055 041f 5402     		.2byte	0x254
 6056 0421 00000000 		.4byte	.LFB72
 6057 0425 60010000 		.4byte	.LFE72-.LFB72
 6058 0429 01       		.uleb128 0x1
 6059 042a 9C       		.byte	0x9c
 6060 042b 67040000 		.4byte	0x467
 6061 042f 12       		.uleb128 0x12
 6062 0430 10000000 		.4byte	.LBB10
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 130


 6063 0434 34010000 		.4byte	.LBE10-.LBB10
 6064 0438 14       		.uleb128 0x14
 6065 0439 29070000 		.4byte	.LASF72
 6066 043d 01       		.byte	0x1
 6067 043e 5A02     		.2byte	0x25a
 6068 0440 B7000000 		.4byte	0xb7
 6069 0444 02       		.uleb128 0x2
 6070 0445 91       		.byte	0x91
 6071 0446 76       		.sleb128 -10
 6072 0447 14       		.uleb128 0x14
 6073 0448 54020000 		.4byte	.LASF73
 6074 044c 01       		.byte	0x1
 6075 044d 5B02     		.2byte	0x25b
 6076 044f 67040000 		.4byte	0x467
 6077 0453 02       		.uleb128 0x2
 6078 0454 91       		.byte	0x91
 6079 0455 68       		.sleb128 -24
 6080 0456 14       		.uleb128 0x14
 6081 0457 D5050000 		.4byte	.LASF74
 6082 045b 01       		.byte	0x1
 6083 045c 5C02     		.2byte	0x25c
 6084 045e 67040000 		.4byte	0x467
 6085 0462 02       		.uleb128 0x2
 6086 0463 91       		.byte	0x91
 6087 0464 5C       		.sleb128 -36
 6088 0465 00       		.byte	0
 6089 0466 00       		.byte	0
 6090 0467 07       		.uleb128 0x7
 6091 0468 8E000000 		.4byte	0x8e
 6092 046c 77040000 		.4byte	0x477
 6093 0470 08       		.uleb128 0x8
 6094 0471 81000000 		.4byte	0x81
 6095 0475 0B       		.byte	0xb
 6096 0476 00       		.byte	0
 6097 0477 17       		.uleb128 0x17
 6098 0478 05020000 		.4byte	.LASF75
 6099 047c 01       		.byte	0x1
 6100 047d 9502     		.2byte	0x295
 6101 047f 00000000 		.4byte	.LFB73
 6102 0483 18000000 		.4byte	.LFE73-.LFB73
 6103 0487 01       		.uleb128 0x1
 6104 0488 9C       		.byte	0x9c
 6105 0489 9D040000 		.4byte	0x49d
 6106 048d 18       		.uleb128 0x18
 6107 048e 64697200 		.ascii	"dir\000"
 6108 0492 01       		.byte	0x1
 6109 0493 9502     		.2byte	0x295
 6110 0495 AB000000 		.4byte	0xab
 6111 0499 02       		.uleb128 0x2
 6112 049a 91       		.byte	0x91
 6113 049b 77       		.sleb128 -9
 6114 049c 00       		.byte	0
 6115 049d 17       		.uleb128 0x17
 6116 049e 25060000 		.4byte	.LASF76
 6117 04a2 01       		.byte	0x1
 6118 04a3 9A02     		.2byte	0x29a
 6119 04a5 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 131


 6120 04a9 18000000 		.4byte	.LFE74-.LFB74
 6121 04ad 01       		.uleb128 0x1
 6122 04ae 9C       		.byte	0x9c
 6123 04af C3040000 		.4byte	0x4c3
 6124 04b3 18       		.uleb128 0x18
 6125 04b4 64697200 		.ascii	"dir\000"
 6126 04b8 01       		.byte	0x1
 6127 04b9 9A02     		.2byte	0x29a
 6128 04bb AB000000 		.4byte	0xab
 6129 04bf 02       		.uleb128 0x2
 6130 04c0 91       		.byte	0x91
 6131 04c1 77       		.sleb128 -9
 6132 04c2 00       		.byte	0
 6133 04c3 19       		.uleb128 0x19
 6134 04c4 36080000 		.4byte	.LASF78
 6135 04c8 01       		.byte	0x1
 6136 04c9 9F02     		.2byte	0x29f
 6137 04cb 00000000 		.4byte	.LFB75
 6138 04cf 54000000 		.4byte	.LFE75-.LFB75
 6139 04d3 01       		.uleb128 0x1
 6140 04d4 9C       		.byte	0x9c
 6141 04d5 E9040000 		.4byte	0x4e9
 6142 04d9 15       		.uleb128 0x15
 6143 04da 6D657300 		.ascii	"mes\000"
 6144 04de 01       		.byte	0x1
 6145 04df A402     		.2byte	0x2a4
 6146 04e1 09040000 		.4byte	0x409
 6147 04e5 02       		.uleb128 0x2
 6148 04e6 91       		.byte	0x91
 6149 04e7 68       		.sleb128 -24
 6150 04e8 00       		.byte	0
 6151 04e9 17       		.uleb128 0x17
 6152 04ea A5030000 		.4byte	.LASF79
 6153 04ee 01       		.byte	0x1
 6154 04ef A902     		.2byte	0x2a9
 6155 04f1 00000000 		.4byte	.LFB76
 6156 04f5 F4000000 		.4byte	.LFE76-.LFB76
 6157 04f9 01       		.uleb128 0x1
 6158 04fa 9C       		.byte	0x9c
 6159 04fb 3C050000 		.4byte	0x53c
 6160 04ff 1A       		.uleb128 0x1a
 6161 0500 68090000 		.4byte	.LASF80
 6162 0504 01       		.byte	0x1
 6163 0505 A902     		.2byte	0x2a9
 6164 0507 EE000000 		.4byte	0xee
 6165 050b 02       		.uleb128 0x2
 6166 050c 91       		.byte	0x91
 6167 050d 68       		.sleb128 -24
 6168 050e 1A       		.uleb128 0x1a
 6169 050f 1D010000 		.4byte	.LASF81
 6170 0513 01       		.byte	0x1
 6171 0514 A902     		.2byte	0x2a9
 6172 0516 EE000000 		.4byte	0xee
 6173 051a 02       		.uleb128 0x2
 6174 051b 91       		.byte	0x91
 6175 051c 60       		.sleb128 -32
 6176 051d 14       		.uleb128 0x14
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 132


 6177 051e 03090000 		.4byte	.LASF82
 6178 0522 01       		.byte	0x1
 6179 0523 BE02     		.2byte	0x2be
 6180 0525 DB000000 		.4byte	0xdb
 6181 0529 02       		.uleb128 0x2
 6182 052a 91       		.byte	0x91
 6183 052b 76       		.sleb128 -10
 6184 052c 14       		.uleb128 0x14
 6185 052d EB070000 		.4byte	.LASF83
 6186 0531 01       		.byte	0x1
 6187 0532 BF02     		.2byte	0x2bf
 6188 0534 DB000000 		.4byte	0xdb
 6189 0538 02       		.uleb128 0x2
 6190 0539 91       		.byte	0x91
 6191 053a 74       		.sleb128 -12
 6192 053b 00       		.byte	0
 6193 053c 1B       		.uleb128 0x1b
 6194 053d 00080000 		.4byte	.LASF84
 6195 0541 01       		.byte	0x1
 6196 0542 C502     		.2byte	0x2c5
 6197 0544 00000000 		.4byte	.LFB77
 6198 0548 18000000 		.4byte	.LFE77-.LFB77
 6199 054c 01       		.uleb128 0x1
 6200 054d 9C       		.byte	0x9c
 6201 054e 1B       		.uleb128 0x1b
 6202 054f 06070000 		.4byte	.LASF85
 6203 0553 01       		.byte	0x1
 6204 0554 CB02     		.2byte	0x2cb
 6205 0556 00000000 		.4byte	.LFB78
 6206 055a 18000000 		.4byte	.LFE78-.LFB78
 6207 055e 01       		.uleb128 0x1
 6208 055f 9C       		.byte	0x9c
 6209 0560 1B       		.uleb128 0x1b
 6210 0561 92060000 		.4byte	.LASF86
 6211 0565 01       		.byte	0x1
 6212 0566 D102     		.2byte	0x2d1
 6213 0568 00000000 		.4byte	.LFB79
 6214 056c 22000000 		.4byte	.LFE79-.LFB79
 6215 0570 01       		.uleb128 0x1
 6216 0571 9C       		.byte	0x9c
 6217 0572 1B       		.uleb128 0x1b
 6218 0573 02060000 		.4byte	.LASF87
 6219 0577 01       		.byte	0x1
 6220 0578 D702     		.2byte	0x2d7
 6221 057a 00000000 		.4byte	.LFB80
 6222 057e 1C000000 		.4byte	.LFE80-.LFB80
 6223 0582 01       		.uleb128 0x1
 6224 0583 9C       		.byte	0x9c
 6225 0584 1B       		.uleb128 0x1b
 6226 0585 CC000000 		.4byte	.LASF88
 6227 0589 01       		.byte	0x1
 6228 058a DC02     		.2byte	0x2dc
 6229 058c 00000000 		.4byte	.LFB81
 6230 0590 34000000 		.4byte	.LFE81-.LFB81
 6231 0594 01       		.uleb128 0x1
 6232 0595 9C       		.byte	0x9c
 6233 0596 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 133


 6234 0597 C7010000 		.4byte	.LASF89
 6235 059b 01       		.byte	0x1
 6236 059c E102     		.2byte	0x2e1
 6237 059e 00000000 		.4byte	.LFB82
 6238 05a2 38000000 		.4byte	.LFE82-.LFB82
 6239 05a6 01       		.uleb128 0x1
 6240 05a7 9C       		.byte	0x9c
 6241 05a8 1B       		.uleb128 0x1b
 6242 05a9 DE070000 		.4byte	.LASF90
 6243 05ad 01       		.byte	0x1
 6244 05ae E602     		.2byte	0x2e6
 6245 05b0 00000000 		.4byte	.LFB83
 6246 05b4 4C000000 		.4byte	.LFE83-.LFB83
 6247 05b8 01       		.uleb128 0x1
 6248 05b9 9C       		.byte	0x9c
 6249 05ba 1B       		.uleb128 0x1b
 6250 05bb B9030000 		.4byte	.LASF91
 6251 05bf 01       		.byte	0x1
 6252 05c0 EB02     		.2byte	0x2eb
 6253 05c2 00000000 		.4byte	.LFB84
 6254 05c6 38000000 		.4byte	.LFE84-.LFB84
 6255 05ca 01       		.uleb128 0x1
 6256 05cb 9C       		.byte	0x9c
 6257 05cc 1B       		.uleb128 0x1b
 6258 05cd 96010000 		.4byte	.LASF92
 6259 05d1 01       		.byte	0x1
 6260 05d2 F402     		.2byte	0x2f4
 6261 05d4 00000000 		.4byte	.LFB85
 6262 05d8 38000000 		.4byte	.LFE85-.LFB85
 6263 05dc 01       		.uleb128 0x1
 6264 05dd 9C       		.byte	0x9c
 6265 05de 1B       		.uleb128 0x1b
 6266 05df 6E030000 		.4byte	.LASF93
 6267 05e3 01       		.byte	0x1
 6268 05e4 FD02     		.2byte	0x2fd
 6269 05e6 00000000 		.4byte	.LFB86
 6270 05ea 38000000 		.4byte	.LFE86-.LFB86
 6271 05ee 01       		.uleb128 0x1
 6272 05ef 9C       		.byte	0x9c
 6273 05f0 1B       		.uleb128 0x1b
 6274 05f1 54080000 		.4byte	.LASF94
 6275 05f5 01       		.byte	0x1
 6276 05f6 0603     		.2byte	0x306
 6277 05f8 00000000 		.4byte	.LFB87
 6278 05fc 14000000 		.4byte	.LFE87-.LFB87
 6279 0600 01       		.uleb128 0x1
 6280 0601 9C       		.byte	0x9c
 6281 0602 1C       		.uleb128 0x1c
 6282 0603 71000000 		.4byte	.LASF95
 6283 0607 01       		.byte	0x1
 6284 0608 0B03     		.2byte	0x30b
 6285 060a 00000000 		.4byte	.LFB88
 6286 060e 18000000 		.4byte	.LFE88-.LFB88
 6287 0612 01       		.uleb128 0x1
 6288 0613 9C       		.byte	0x9c
 6289 0614 1C       		.uleb128 0x1c
 6290 0615 64030000 		.4byte	.LASF96
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 134


 6291 0619 01       		.byte	0x1
 6292 061a 0F03     		.2byte	0x30f
 6293 061c 00000000 		.4byte	.LFB89
 6294 0620 18000000 		.4byte	.LFE89-.LFB89
 6295 0624 01       		.uleb128 0x1
 6296 0625 9C       		.byte	0x9c
 6297 0626 1C       		.uleb128 0x1c
 6298 0627 00000000 		.4byte	.LASF97
 6299 062b 01       		.byte	0x1
 6300 062c 1403     		.2byte	0x314
 6301 062e 00000000 		.4byte	.LFB90
 6302 0632 18000000 		.4byte	.LFE90-.LFB90
 6303 0636 01       		.uleb128 0x1
 6304 0637 9C       		.byte	0x9c
 6305 0638 1C       		.uleb128 0x1c
 6306 0639 C7080000 		.4byte	.LASF98
 6307 063d 01       		.byte	0x1
 6308 063e 1803     		.2byte	0x318
 6309 0640 00000000 		.4byte	.LFB91
 6310 0644 18000000 		.4byte	.LFE91-.LFB91
 6311 0648 01       		.uleb128 0x1
 6312 0649 9C       		.byte	0x9c
 6313 064a 17       		.uleb128 0x17
 6314 064b DF060000 		.4byte	.LASF99
 6315 064f 01       		.byte	0x1
 6316 0650 1F03     		.2byte	0x31f
 6317 0652 00000000 		.4byte	.LFB92
 6318 0656 B8000000 		.4byte	.LFE92-.LFB92
 6319 065a 01       		.uleb128 0x1
 6320 065b 9C       		.byte	0x9c
 6321 065c 70060000 		.4byte	0x670
 6322 0660 14       		.uleb128 0x14
 6323 0661 1C080000 		.4byte	.LASF100
 6324 0665 01       		.byte	0x1
 6325 0666 2003     		.2byte	0x320
 6326 0668 8E000000 		.4byte	0x8e
 6327 066c 02       		.uleb128 0x2
 6328 066d 91       		.byte	0x91
 6329 066e 6F       		.sleb128 -17
 6330 066f 00       		.byte	0
 6331 0670 17       		.uleb128 0x17
 6332 0671 9B050000 		.4byte	.LASF101
 6333 0675 01       		.byte	0x1
 6334 0676 3C03     		.2byte	0x33c
 6335 0678 00000000 		.4byte	.LFB93
 6336 067c 44050000 		.4byte	.LFE93-.LFB93
 6337 0680 01       		.uleb128 0x1
 6338 0681 9C       		.byte	0x9c
 6339 0682 D8060000 		.4byte	0x6d8
 6340 0686 14       		.uleb128 0x14
 6341 0687 1C080000 		.4byte	.LASF100
 6342 068b 01       		.byte	0x1
 6343 068c 3E03     		.2byte	0x33e
 6344 068e 8E000000 		.4byte	0x8e
 6345 0692 02       		.uleb128 0x2
 6346 0693 91       		.byte	0x91
 6347 0694 77       		.sleb128 -9
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 135


 6348 0695 12       		.uleb128 0x12
 6349 0696 48010000 		.4byte	.LBB11
 6350 069a D2030000 		.4byte	.LBE11-.LBB11
 6351 069e 15       		.uleb128 0x15
 6352 069f 6D657300 		.ascii	"mes\000"
 6353 06a3 01       		.byte	0x1
 6354 06a4 6403     		.2byte	0x364
 6355 06a6 09040000 		.4byte	0x409
 6356 06aa 02       		.uleb128 0x2
 6357 06ab 91       		.byte	0x91
 6358 06ac 58       		.sleb128 -40
 6359 06ad 15       		.uleb128 0x15
 6360 06ae 6900     		.ascii	"i\000"
 6361 06b0 01       		.byte	0x1
 6362 06b1 8F03     		.2byte	0x38f
 6363 06b3 73000000 		.4byte	0x73
 6364 06b7 02       		.uleb128 0x2
 6365 06b8 91       		.byte	0x91
 6366 06b9 70       		.sleb128 -16
 6367 06ba 14       		.uleb128 0x14
 6368 06bb 35090000 		.4byte	.LASF69
 6369 06bf 01       		.byte	0x1
 6370 06c0 9C03     		.2byte	0x39c
 6371 06c2 8E000000 		.4byte	0x8e
 6372 06c6 02       		.uleb128 0x2
 6373 06c7 91       		.byte	0x91
 6374 06c8 6B       		.sleb128 -21
 6375 06c9 15       		.uleb128 0x15
 6376 06ca 7800     		.ascii	"x\000"
 6377 06cc 01       		.byte	0x1
 6378 06cd C203     		.2byte	0x3c2
 6379 06cf 73000000 		.4byte	0x73
 6380 06d3 02       		.uleb128 0x2
 6381 06d4 91       		.byte	0x91
 6382 06d5 6C       		.sleb128 -20
 6383 06d6 00       		.byte	0
 6384 06d7 00       		.byte	0
 6385 06d8 1B       		.uleb128 0x1b
 6386 06d9 14000000 		.4byte	.LASF102
 6387 06dd 01       		.byte	0x1
 6388 06de DC03     		.2byte	0x3dc
 6389 06e0 00000000 		.4byte	.LFB94
 6390 06e4 40000000 		.4byte	.LFE94-.LFB94
 6391 06e8 01       		.uleb128 0x1
 6392 06e9 9C       		.byte	0x9c
 6393 06ea 1B       		.uleb128 0x1b
 6394 06eb C6030000 		.4byte	.LASF103
 6395 06ef 01       		.byte	0x1
 6396 06f0 EB03     		.2byte	0x3eb
 6397 06f2 00000000 		.4byte	.LFB95
 6398 06f6 40000000 		.4byte	.LFE95-.LFB95
 6399 06fa 01       		.uleb128 0x1
 6400 06fb 9C       		.byte	0x9c
 6401 06fc 19       		.uleb128 0x19
 6402 06fd C4040000 		.4byte	.LASF104
 6403 0701 01       		.byte	0x1
 6404 0702 FB03     		.2byte	0x3fb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 136


 6405 0704 00000000 		.4byte	.LFB96
 6406 0708 30020000 		.4byte	.LFE96-.LFB96
 6407 070c 01       		.uleb128 0x1
 6408 070d 9C       		.byte	0x9c
 6409 070e 6D070000 		.4byte	0x76d
 6410 0712 14       		.uleb128 0x14
 6411 0713 8A070000 		.4byte	.LASF105
 6412 0717 01       		.byte	0x1
 6413 0718 0904     		.2byte	0x409
 6414 071a DB000000 		.4byte	0xdb
 6415 071e 02       		.uleb128 0x2
 6416 071f 91       		.byte	0x91
 6417 0720 5E       		.sleb128 -34
 6418 0721 14       		.uleb128 0x14
 6419 0722 48010000 		.4byte	.LASF106
 6420 0726 01       		.byte	0x1
 6421 0727 0A04     		.2byte	0x40a
 6422 0729 DB000000 		.4byte	0xdb
 6423 072d 02       		.uleb128 0x2
 6424 072e 91       		.byte	0x91
 6425 072f 5C       		.sleb128 -36
 6426 0730 14       		.uleb128 0x14
 6427 0731 C2060000 		.4byte	.LASF107
 6428 0735 01       		.byte	0x1
 6429 0736 0B04     		.2byte	0x40b
 6430 0738 EE000000 		.4byte	0xee
 6431 073c 02       		.uleb128 0x2
 6432 073d 91       		.byte	0x91
 6433 073e 68       		.sleb128 -24
 6434 073f 14       		.uleb128 0x14
 6435 0740 D6080000 		.4byte	.LASF108
 6436 0744 01       		.byte	0x1
 6437 0745 0C04     		.2byte	0x40c
 6438 0747 EE000000 		.4byte	0xee
 6439 074b 02       		.uleb128 0x2
 6440 074c 91       		.byte	0x91
 6441 074d 60       		.sleb128 -32
 6442 074e 14       		.uleb128 0x14
 6443 074f 65040000 		.4byte	.LASF109
 6444 0753 01       		.byte	0x1
 6445 0754 1504     		.2byte	0x415
 6446 0756 73000000 		.4byte	0x73
 6447 075a 02       		.uleb128 0x2
 6448 075b 91       		.byte	0x91
 6449 075c 58       		.sleb128 -40
 6450 075d 14       		.uleb128 0x14
 6451 075e A5060000 		.4byte	.LASF110
 6452 0762 01       		.byte	0x1
 6453 0763 1604     		.2byte	0x416
 6454 0765 73000000 		.4byte	0x73
 6455 0769 02       		.uleb128 0x2
 6456 076a 91       		.byte	0x91
 6457 076b 54       		.sleb128 -44
 6458 076c 00       		.byte	0
 6459 076d 1C       		.uleb128 0x1c
 6460 076e FC060000 		.4byte	.LASF111
 6461 0772 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 137


 6462 0773 2404     		.2byte	0x424
 6463 0775 00000000 		.4byte	.LFB97
 6464 0779 0C000000 		.4byte	.LFE97-.LFB97
 6465 077d 01       		.uleb128 0x1
 6466 077e 9C       		.byte	0x9c
 6467 077f 19       		.uleb128 0x19
 6468 0780 BC010000 		.4byte	.LASF112
 6469 0784 01       		.byte	0x1
 6470 0785 2A04     		.2byte	0x42a
 6471 0787 00000000 		.4byte	.LFB98
 6472 078b 4C010000 		.4byte	.LFE98-.LFB98
 6473 078f 01       		.uleb128 0x1
 6474 0790 9C       		.byte	0x9c
 6475 0791 C1070000 		.4byte	0x7c1
 6476 0795 15       		.uleb128 0x15
 6477 0796 6E6C00   		.ascii	"nl\000"
 6478 0799 01       		.byte	0x1
 6479 079a 2E04     		.2byte	0x42e
 6480 079c AB000000 		.4byte	0xab
 6481 07a0 02       		.uleb128 0x2
 6482 07a1 91       		.byte	0x91
 6483 07a2 67       		.sleb128 -25
 6484 07a3 15       		.uleb128 0x15
 6485 07a4 6E7200   		.ascii	"nr\000"
 6486 07a7 01       		.byte	0x1
 6487 07a8 2F04     		.2byte	0x42f
 6488 07aa AB000000 		.4byte	0xab
 6489 07ae 02       		.uleb128 0x2
 6490 07af 91       		.byte	0x91
 6491 07b0 66       		.sleb128 -26
 6492 07b1 15       		.uleb128 0x15
 6493 07b2 6D696400 		.ascii	"mid\000"
 6494 07b6 01       		.byte	0x1
 6495 07b7 3004     		.2byte	0x430
 6496 07b9 AB000000 		.4byte	0xab
 6497 07bd 02       		.uleb128 0x2
 6498 07be 91       		.byte	0x91
 6499 07bf 65       		.sleb128 -27
 6500 07c0 00       		.byte	0
 6501 07c1 1C       		.uleb128 0x1c
 6502 07c2 72010000 		.4byte	.LASF113
 6503 07c6 01       		.byte	0x1
 6504 07c7 4A04     		.2byte	0x44a
 6505 07c9 00000000 		.4byte	.LFB99
 6506 07cd 0C000000 		.4byte	.LFE99-.LFB99
 6507 07d1 01       		.uleb128 0x1
 6508 07d2 9C       		.byte	0x9c
 6509 07d3 19       		.uleb128 0x19
 6510 07d4 B5090000 		.4byte	.LASF114
 6511 07d8 01       		.byte	0x1
 6512 07d9 4F04     		.2byte	0x44f
 6513 07db 00000000 		.4byte	.LFB100
 6514 07df C0000000 		.4byte	.LFE100-.LFB100
 6515 07e3 01       		.uleb128 0x1
 6516 07e4 9C       		.byte	0x9c
 6517 07e5 21080000 		.4byte	0x821
 6518 07e9 12       		.uleb128 0x12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 138


 6519 07ea 0E000000 		.4byte	.LBB12
 6520 07ee 8E000000 		.4byte	.LBE12-.LBB12
 6521 07f2 14       		.uleb128 0x14
 6522 07f3 78030000 		.4byte	.LASF115
 6523 07f7 01       		.byte	0x1
 6524 07f8 5804     		.2byte	0x458
 6525 07fa E7000000 		.4byte	0xe7
 6526 07fe 02       		.uleb128 0x2
 6527 07ff 91       		.byte	0x91
 6528 0800 74       		.sleb128 -12
 6529 0801 14       		.uleb128 0x14
 6530 0802 F7010000 		.4byte	.LASF116
 6531 0806 01       		.byte	0x1
 6532 0807 5904     		.2byte	0x459
 6533 0809 DB000000 		.4byte	0xdb
 6534 080d 02       		.uleb128 0x2
 6535 080e 91       		.byte	0x91
 6536 080f 72       		.sleb128 -14
 6537 0810 14       		.uleb128 0x14
 6538 0811 EE040000 		.4byte	.LASF117
 6539 0815 01       		.byte	0x1
 6540 0816 5E04     		.2byte	0x45e
 6541 0818 09040000 		.4byte	0x409
 6542 081c 02       		.uleb128 0x2
 6543 081d 91       		.byte	0x91
 6544 081e 60       		.sleb128 -32
 6545 081f 00       		.byte	0
 6546 0820 00       		.byte	0
 6547 0821 19       		.uleb128 0x19
 6548 0822 F7070000 		.4byte	.LASF118
 6549 0826 01       		.byte	0x1
 6550 0827 6504     		.2byte	0x465
 6551 0829 00000000 		.4byte	.LFB101
 6552 082d B8000000 		.4byte	.LFE101-.LFB101
 6553 0831 01       		.uleb128 0x1
 6554 0832 9C       		.byte	0x9c
 6555 0833 51080000 		.4byte	0x851
 6556 0837 12       		.uleb128 0x12
 6557 0838 0E000000 		.4byte	.LBB13
 6558 083c 86000000 		.4byte	.LBE13-.LBB13
 6559 0840 14       		.uleb128 0x14
 6560 0841 10060000 		.4byte	.LASF119
 6561 0845 01       		.byte	0x1
 6562 0846 6904     		.2byte	0x469
 6563 0848 09040000 		.4byte	0x409
 6564 084c 02       		.uleb128 0x2
 6565 084d 91       		.byte	0x91
 6566 084e 68       		.sleb128 -24
 6567 084f 00       		.byte	0
 6568 0850 00       		.byte	0
 6569 0851 17       		.uleb128 0x17
 6570 0852 BF090000 		.4byte	.LASF120
 6571 0856 01       		.byte	0x1
 6572 0857 7A04     		.2byte	0x47a
 6573 0859 00000000 		.4byte	.LFB102
 6574 085d 4A000000 		.4byte	.LFE102-.LFB102
 6575 0861 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 139


 6576 0862 9C       		.byte	0x9c
 6577 0863 77080000 		.4byte	0x877
 6578 0867 1A       		.uleb128 0x1a
 6579 0868 23010000 		.4byte	.LASF121
 6580 086c 01       		.byte	0x1
 6581 086d 7A04     		.2byte	0x47a
 6582 086f 77080000 		.4byte	0x877
 6583 0873 02       		.uleb128 0x2
 6584 0874 91       		.byte	0x91
 6585 0875 6C       		.sleb128 -20
 6586 0876 00       		.byte	0
 6587 0877 05       		.uleb128 0x5
 6588 0878 04       		.byte	0x4
 6589 0879 AB000000 		.4byte	0xab
 6590 087d 17       		.uleb128 0x17
 6591 087e F2030000 		.4byte	.LASF122
 6592 0882 01       		.byte	0x1
 6593 0883 8504     		.2byte	0x485
 6594 0885 00000000 		.4byte	.LFB103
 6595 0889 68000000 		.4byte	.LFE103-.LFB103
 6596 088d 01       		.uleb128 0x1
 6597 088e 9C       		.byte	0x9c
 6598 088f BA080000 		.4byte	0x8ba
 6599 0893 18       		.uleb128 0x18
 6600 0894 7300     		.ascii	"s\000"
 6601 0896 01       		.byte	0x1
 6602 0897 8504     		.2byte	0x485
 6603 0899 88000000 		.4byte	0x88
 6604 089d 02       		.uleb128 0x2
 6605 089e 91       		.byte	0x91
 6606 089f 6C       		.sleb128 -20
 6607 08a0 12       		.uleb128 0x12
 6608 08a1 10000000 		.4byte	.LBB14
 6609 08a5 48000000 		.4byte	.LBE14-.LBB14
 6610 08a9 15       		.uleb128 0x15
 6611 08aa 636E7400 		.ascii	"cnt\000"
 6612 08ae 01       		.byte	0x1
 6613 08af 8C04     		.2byte	0x48c
 6614 08b1 C3000000 		.4byte	0xc3
 6615 08b5 02       		.uleb128 0x2
 6616 08b6 91       		.byte	0x91
 6617 08b7 74       		.sleb128 -12
 6618 08b8 00       		.byte	0
 6619 08b9 00       		.byte	0
 6620 08ba 17       		.uleb128 0x17
 6621 08bb BC080000 		.4byte	.LASF123
 6622 08bf 01       		.byte	0x1
 6623 08c0 9B04     		.2byte	0x49b
 6624 08c2 00000000 		.4byte	.LFB104
 6625 08c6 50000000 		.4byte	.LFE104-.LFB104
 6626 08ca 01       		.uleb128 0x1
 6627 08cb 9C       		.byte	0x9c
 6628 08cc F7080000 		.4byte	0x8f7
 6629 08d0 18       		.uleb128 0x18
 6630 08d1 6300     		.ascii	"c\000"
 6631 08d3 01       		.byte	0x1
 6632 08d4 9B04     		.2byte	0x49b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 140


 6633 08d6 8E000000 		.4byte	0x8e
 6634 08da 02       		.uleb128 0x2
 6635 08db 91       		.byte	0x91
 6636 08dc 6F       		.sleb128 -17
 6637 08dd 12       		.uleb128 0x12
 6638 08de 12000000 		.4byte	.LBB15
 6639 08e2 2E000000 		.4byte	.LBE15-.LBB15
 6640 08e6 15       		.uleb128 0x15
 6641 08e7 636E7400 		.ascii	"cnt\000"
 6642 08eb 01       		.byte	0x1
 6643 08ec 9F04     		.2byte	0x49f
 6644 08ee C3000000 		.4byte	0xc3
 6645 08f2 02       		.uleb128 0x2
 6646 08f3 91       		.byte	0x91
 6647 08f4 74       		.sleb128 -12
 6648 08f5 00       		.byte	0
 6649 08f6 00       		.byte	0
 6650 08f7 1C       		.uleb128 0x1c
 6651 08f8 3A040000 		.4byte	.LASF124
 6652 08fc 01       		.byte	0x1
 6653 08fd AC04     		.2byte	0x4ac
 6654 08ff 00000000 		.4byte	.LFB105
 6655 0903 0C000000 		.4byte	.LFE105-.LFB105
 6656 0907 01       		.uleb128 0x1
 6657 0908 9C       		.byte	0x9c
 6658 0909 1D       		.uleb128 0x1d
 6659 090a DE000000 		.4byte	.LASF125
 6660 090e 06       		.byte	0x6
 6661 090f 9606     		.2byte	0x696
 6662 0911 15090000 		.4byte	0x915
 6663 0915 1E       		.uleb128 0x1e
 6664 0916 95000000 		.4byte	0x95
 6665 091a 1F       		.uleb128 0x1f
 6666 091b 747300   		.ascii	"ts\000"
 6667 091e 05       		.byte	0x5
 6668 091f 10       		.byte	0x10
 6669 0920 AB000000 		.4byte	0xab
 6670 0924 05       		.uleb128 0x5
 6671 0925 03       		.byte	0x3
 6672 0926 00000000 		.4byte	ts
 6673 092a 20       		.uleb128 0x20
 6674 092b 2E020000 		.4byte	.LASF126
 6675 092f 05       		.byte	0x5
 6676 0930 11       		.byte	0x11
 6677 0931 B7000000 		.4byte	0xb7
 6678 0935 05       		.uleb128 0x5
 6679 0936 03       		.byte	0x3
 6680 0937 00000000 		.4byte	ts_enc
 6681 093b 20       		.uleb128 0x20
 6682 093c FE000000 		.4byte	.LASF127
 6683 0940 05       		.byte	0x5
 6684 0941 12       		.byte	0x12
 6685 0942 B7000000 		.4byte	0xb7
 6686 0946 05       		.uleb128 0x5
 6687 0947 03       		.byte	0x3
 6688 0948 00000000 		.4byte	ts_update
 6689 094c 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 141


 6690 094d 30000000 		.4byte	.LASF128
 6691 0951 05       		.byte	0x5
 6692 0952 13       		.byte	0x13
 6693 0953 B7000000 		.4byte	0xb7
 6694 0957 05       		.uleb128 0x5
 6695 0958 03       		.byte	0x3
 6696 0959 00000000 		.4byte	ts_speed
 6697 095d 20       		.uleb128 0x20
 6698 095e 2F040000 		.4byte	.LASF129
 6699 0962 05       		.byte	0x5
 6700 0963 14       		.byte	0x14
 6701 0964 B7000000 		.4byte	0xb7
 6702 0968 05       		.uleb128 0x5
 6703 0969 03       		.byte	0x3
 6704 096a 00000000 		.4byte	ts_display
 6705 096e 20       		.uleb128 0x20
 6706 096f 7D010000 		.4byte	.LASF130
 6707 0973 05       		.byte	0x5
 6708 0974 16       		.byte	0x16
 6709 0975 AB000000 		.4byte	0xab
 6710 0979 05       		.uleb128 0x5
 6711 097a 03       		.byte	0x3
 6712 097b 00000000 		.4byte	flag_ts_enc
 6713 097f 20       		.uleb128 0x20
 6714 0980 9F070000 		.4byte	.LASF131
 6715 0984 05       		.byte	0x5
 6716 0985 17       		.byte	0x17
 6717 0986 AB000000 		.4byte	0xab
 6718 098a 05       		.uleb128 0x5
 6719 098b 03       		.byte	0x3
 6720 098c 00000000 		.4byte	flag_ts_update
 6721 0990 20       		.uleb128 0x20
 6722 0991 6F040000 		.4byte	.LASF132
 6723 0995 05       		.byte	0x5
 6724 0996 18       		.byte	0x18
 6725 0997 AB000000 		.4byte	0xab
 6726 099b 05       		.uleb128 0x5
 6727 099c 03       		.byte	0x3
 6728 099d 00000000 		.4byte	flag_ts_speed
 6729 09a1 20       		.uleb128 0x20
 6730 09a2 11070000 		.4byte	.LASF133
 6731 09a6 05       		.byte	0x5
 6732 09a7 19       		.byte	0x19
 6733 09a8 AB000000 		.4byte	0xab
 6734 09ac 05       		.uleb128 0x5
 6735 09ad 03       		.byte	0x3
 6736 09ae 00000000 		.4byte	flag_ts_display
 6737 09b2 20       		.uleb128 0x20
 6738 09b3 35020000 		.4byte	.LASF134
 6739 09b7 05       		.byte	0x5
 6740 09b8 1C       		.byte	0x1c
 6741 09b9 AB000000 		.4byte	0xab
 6742 09bd 05       		.uleb128 0x5
 6743 09be 03       		.byte	0x3
 6744 09bf 00000000 		.4byte	flag_rx
 6745 09c3 20       		.uleb128 0x20
 6746 09c4 C0000000 		.4byte	.LASF135
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 142


 6747 09c8 05       		.byte	0x5
 6748 09c9 1D       		.byte	0x1d
 6749 09ca AB000000 		.4byte	0xab
 6750 09ce 05       		.uleb128 0x5
 6751 09cf 03       		.byte	0x3
 6752 09d0 00000000 		.4byte	flag_packet
 6753 09d4 20       		.uleb128 0x20
 6754 09d5 AD010000 		.4byte	.LASF136
 6755 09d9 05       		.byte	0x5
 6756 09da 1E       		.byte	0x1e
 6757 09db AB000000 		.4byte	0xab
 6758 09df 05       		.uleb128 0x5
 6759 09e0 03       		.byte	0x3
 6760 09e1 00000000 		.4byte	flag_KB_string
 6761 09e5 20       		.uleb128 0x20
 6762 09e6 17020000 		.4byte	.LASF137
 6763 09ea 05       		.byte	0x5
 6764 09eb 20       		.byte	0x20
 6765 09ec AB000000 		.4byte	0xab
 6766 09f0 05       		.uleb128 0x5
 6767 09f1 03       		.byte	0x3
 6768 09f2 00000000 		.4byte	dataready_flag
 6769 09f6 20       		.uleb128 0x20
 6770 09f7 B9050000 		.4byte	.LASF138
 6771 09fb 05       		.byte	0x5
 6772 09fc 22       		.byte	0x22
 6773 09fd AB000000 		.4byte	0xab
 6774 0a01 05       		.uleb128 0x5
 6775 0a02 03       		.byte	0x3
 6776 0a03 00000000 		.4byte	flag_rf_transmission_active
 6777 0a07 20       		.uleb128 0x20
 6778 0a08 94040000 		.4byte	.LASF139
 6779 0a0c 05       		.byte	0x5
 6780 0a0d 23       		.byte	0x23
 6781 0a0e AB000000 		.4byte	0xab
 6782 0a12 05       		.uleb128 0x5
 6783 0a13 03       		.byte	0x3
 6784 0a14 00000000 		.4byte	flag_print_rf
 6785 0a18 20       		.uleb128 0x20
 6786 0a19 41030000 		.4byte	.LASF140
 6787 0a1d 05       		.byte	0x5
 6788 0a1e 25       		.byte	0x25
 6789 0a1f AB000000 		.4byte	0xab
 6790 0a23 05       		.uleb128 0x5
 6791 0a24 03       		.byte	0x3
 6792 0a25 00000000 		.4byte	flag_receive_ADC
 6793 0a29 20       		.uleb128 0x20
 6794 0a2a 26030000 		.4byte	.LASF141
 6795 0a2e 05       		.byte	0x5
 6796 0a2f 26       		.byte	0x26
 6797 0a30 DB000000 		.4byte	0xdb
 6798 0a34 05       		.uleb128 0x5
 6799 0a35 03       		.byte	0x3
 6800 0a36 00000000 		.4byte	adc_result
 6801 0a3a 20       		.uleb128 0x20
 6802 0a3b 62000000 		.4byte	.LASF142
 6803 0a3f 05       		.byte	0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 143


 6804 0a40 28       		.byte	0x28
 6805 0a41 AB000000 		.4byte	0xab
 6806 0a45 05       		.uleb128 0x5
 6807 0a46 03       		.byte	0x3
 6808 0a47 00000000 		.4byte	direction
 6809 0a4b 20       		.uleb128 0x20
 6810 0a4c 61060000 		.4byte	.LASF143
 6811 0a50 05       		.byte	0x5
 6812 0a51 2B       		.byte	0x2b
 6813 0a52 AB000000 		.4byte	0xab
 6814 0a56 05       		.uleb128 0x5
 6815 0a57 03       		.byte	0x3
 6816 0a58 00000000 		.4byte	BIN_ENABLED
 6817 0a5c 20       		.uleb128 0x20
 6818 0a5d B1080000 		.4byte	.LASF144
 6819 0a61 05       		.byte	0x5
 6820 0a62 2D       		.byte	0x2d
 6821 0a63 AB000000 		.4byte	0xab
 6822 0a67 05       		.uleb128 0x5
 6823 0a68 03       		.byte	0x3
 6824 0a69 00000000 		.4byte	BT_ENABLED
 6825 0a6d 20       		.uleb128 0x20
 6826 0a6e 65020000 		.4byte	.LASF145
 6827 0a72 05       		.byte	0x5
 6828 0a73 32       		.byte	0x32
 6829 0a74 AB000000 		.4byte	0xab
 6830 0a78 05       		.uleb128 0x5
 6831 0a79 03       		.byte	0x3
 6832 0a7a 00000000 		.4byte	flag_calc_wheelspeed
 6833 0a7e 20       		.uleb128 0x20
 6834 0a7f 93020000 		.4byte	.LASF146
 6835 0a83 05       		.byte	0x5
 6836 0a84 33       		.byte	0x33
 6837 0a85 DB000000 		.4byte	0xdb
 6838 0a89 05       		.uleb128 0x5
 6839 0a8a 03       		.byte	0x3
 6840 0a8b 00000000 		.4byte	quad_count1
 6841 0a8f 20       		.uleb128 0x20
 6842 0a90 9F020000 		.4byte	.LASF147
 6843 0a94 05       		.byte	0x5
 6844 0a95 34       		.byte	0x34
 6845 0a96 DB000000 		.4byte	0xdb
 6846 0a9a 05       		.uleb128 0x5
 6847 0a9b 03       		.byte	0x3
 6848 0a9c 00000000 		.4byte	quad_count2
 6849 0aa0 20       		.uleb128 0x20
 6850 0aa1 31060000 		.4byte	.LASF148
 6851 0aa5 05       		.byte	0x5
 6852 0aa6 35       		.byte	0x35
 6853 0aa7 DB000000 		.4byte	0xdb
 6854 0aab 05       		.uleb128 0x5
 6855 0aac 03       		.byte	0x3
 6856 0aad 00000000 		.4byte	last_quad_count1
 6857 0ab1 20       		.uleb128 0x20
 6858 0ab2 42060000 		.4byte	.LASF149
 6859 0ab6 05       		.byte	0x5
 6860 0ab7 36       		.byte	0x36
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 144


 6861 0ab8 DB000000 		.4byte	0xdb
 6862 0abc 05       		.uleb128 0x5
 6863 0abd 03       		.byte	0x3
 6864 0abe 00000000 		.4byte	last_quad_count2
 6865 0ac2 20       		.uleb128 0x20
 6866 0ac3 47090000 		.4byte	.LASF150
 6867 0ac7 05       		.byte	0x5
 6868 0ac8 37       		.byte	0x37
 6869 0ac9 DB000000 		.4byte	0xdb
 6870 0acd 05       		.uleb128 0x5
 6871 0ace 03       		.byte	0x3
 6872 0acf 00000000 		.4byte	quad_diff1
 6873 0ad3 20       		.uleb128 0x20
 6874 0ad4 52090000 		.4byte	.LASF151
 6875 0ad8 05       		.byte	0x5
 6876 0ad9 38       		.byte	0x38
 6877 0ada DB000000 		.4byte	0xdb
 6878 0ade 05       		.uleb128 0x5
 6879 0adf 03       		.byte	0x3
 6880 0ae0 00000000 		.4byte	quad_diff2
 6881 0ae4 20       		.uleb128 0x20
 6882 0ae5 A4010000 		.4byte	.LASF152
 6883 0ae9 05       		.byte	0x5
 6884 0aea 39       		.byte	0x39
 6885 0aeb AB000000 		.4byte	0xab
 6886 0aef 05       		.uleb128 0x5
 6887 0af0 03       		.byte	0x3
 6888 0af1 00000000 		.4byte	deadzone
 6889 0af5 20       		.uleb128 0x20
 6890 0af6 0E090000 		.4byte	.LASF153
 6891 0afa 05       		.byte	0x5
 6892 0afb 3C       		.byte	0x3c
 6893 0afc DB000000 		.4byte	0xdb
 6894 0b00 05       		.uleb128 0x5
 6895 0b01 03       		.byte	0x3
 6896 0b02 00000000 		.4byte	start_turn_count
 6897 0b06 20       		.uleb128 0x20
 6898 0b07 69080000 		.4byte	.LASF154
 6899 0b0b 05       		.byte	0x5
 6900 0b0c 3F       		.byte	0x3f
 6901 0b0d DB000000 		.4byte	0xdb
 6902 0b11 05       		.uleb128 0x5
 6903 0b12 03       		.byte	0x3
 6904 0b13 00000000 		.4byte	left_duty_cycle
 6905 0b17 20       		.uleb128 0x20
 6906 0b18 0B030000 		.4byte	.LASF155
 6907 0b1c 05       		.byte	0x5
 6908 0b1d 40       		.byte	0x40
 6909 0b1e DB000000 		.4byte	0xdb
 6910 0b22 05       		.uleb128 0x5
 6911 0b23 03       		.byte	0x3
 6912 0b24 00000000 		.4byte	right_duty_cycle
 6913 0b28 20       		.uleb128 0x20
 6914 0b29 C4070000 		.4byte	.LASF156
 6915 0b2d 05       		.byte	0x5
 6916 0b2e 43       		.byte	0x43
 6917 0b2f DB000000 		.4byte	0xdb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 145


 6918 0b33 05       		.uleb128 0x5
 6919 0b34 03       		.byte	0x3
 6920 0b35 00000000 		.4byte	leftSpeedLimit
 6921 0b39 20       		.uleb128 0x20
 6922 0b3a AB020000 		.4byte	.LASF157
 6923 0b3e 05       		.byte	0x5
 6924 0b3f 44       		.byte	0x44
 6925 0b40 DB000000 		.4byte	0xdb
 6926 0b44 05       		.uleb128 0x5
 6927 0b45 03       		.byte	0x3
 6928 0b46 00000000 		.4byte	rightSpeedLimit
 6929 0b4a 20       		.uleb128 0x20
 6930 0b4b EB000000 		.4byte	.LASF158
 6931 0b4f 05       		.byte	0x5
 6932 0b50 47       		.byte	0x47
 6933 0b51 DB000000 		.4byte	0xdb
 6934 0b55 05       		.uleb128 0x5
 6935 0b56 03       		.byte	0x3
 6936 0b57 00000000 		.4byte	target_distance_cm
 6937 0b5b 20       		.uleb128 0x20
 6938 0b5c 86080000 		.4byte	.LASF159
 6939 0b60 05       		.byte	0x5
 6940 0b61 49       		.byte	0x49
 6941 0b62 DB000000 		.4byte	0xdb
 6942 0b66 05       		.uleb128 0x5
 6943 0b67 03       		.byte	0x3
 6944 0b68 00000000 		.4byte	accum_dist
 6945 0b6c 20       		.uleb128 0x20
 6946 0b6d A4050000 		.4byte	.LASF160
 6947 0b71 05       		.byte	0x5
 6948 0b72 4A       		.byte	0x4a
 6949 0b73 DB000000 		.4byte	0xdb
 6950 0b77 05       		.uleb128 0x5
 6951 0b78 03       		.byte	0x3
 6952 0b79 00000000 		.4byte	target_distance_quad
 6953 0b7d 20       		.uleb128 0x20
 6954 0b7e E3080000 		.4byte	.LASF161
 6955 0b82 05       		.byte	0x5
 6956 0b83 4B       		.byte	0x4b
 6957 0b84 AB000000 		.4byte	0xab
 6958 0b88 05       		.uleb128 0x5
 6959 0b89 03       		.byte	0x3
 6960 0b8a 00000000 		.4byte	reached_target
 6961 0b8e 20       		.uleb128 0x20
 6962 0b8f 25090000 		.4byte	.LASF162
 6963 0b93 05       		.byte	0x5
 6964 0b94 4C       		.byte	0x4c
 6965 0b95 AB000000 		.4byte	0xab
 6966 0b99 05       		.uleb128 0x5
 6967 0b9a 03       		.byte	0x3
 6968 0b9b 00000000 		.4byte	overshot_target
 6969 0b9f 20       		.uleb128 0x20
 6970 0ba0 E5010000 		.4byte	.LASF163
 6971 0ba4 05       		.byte	0x5
 6972 0ba5 4D       		.byte	0x4d
 6973 0ba6 E7000000 		.4byte	0xe7
 6974 0baa 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 146


 6975 0bab 03       		.byte	0x3
 6976 0bac 00000000 		.4byte	quad_per_cm
 6977 0bb0 20       		.uleb128 0x20
 6978 0bb1 24080000 		.4byte	.LASF164
 6979 0bb5 05       		.byte	0x5
 6980 0bb6 50       		.byte	0x50
 6981 0bb7 AB000000 		.4byte	0xab
 6982 0bbb 05       		.uleb128 0x5
 6983 0bbc 03       		.byte	0x3
 6984 0bbd 00000000 		.4byte	initial_pos_valid
 6985 0bc1 20       		.uleb128 0x20
 6986 0bc2 F4050000 		.4byte	.LASF165
 6987 0bc6 05       		.byte	0x5
 6988 0bc7 51       		.byte	0x51
 6989 0bc8 DB000000 		.4byte	0xdb
 6990 0bcc 05       		.uleb128 0x5
 6991 0bcd 03       		.byte	0x3
 6992 0bce 00000000 		.4byte	initial_x_pos
 6993 0bd2 20       		.uleb128 0x20
 6994 0bd3 47000000 		.4byte	.LASF166
 6995 0bd7 05       		.byte	0x5
 6996 0bd8 52       		.byte	0x52
 6997 0bd9 DB000000 		.4byte	0xdb
 6998 0bdd 05       		.uleb128 0x5
 6999 0bde 03       		.byte	0x3
 7000 0bdf 00000000 		.4byte	initial_y_pos
 7001 0be3 20       		.uleb128 0x20
 7002 0be4 DC040000 		.4byte	.LASF167
 7003 0be8 05       		.byte	0x5
 7004 0be9 55       		.byte	0x55
 7005 0bea AB000000 		.4byte	0xab
 7006 0bee 05       		.uleb128 0x5
 7007 0bef 03       		.byte	0x3
 7008 0bf0 00000000 		.4byte	brakeFlag
 7009 0bf4 20       		.uleb128 0x20
 7010 0bf5 1C060000 		.4byte	.LASF168
 7011 0bf9 05       		.byte	0x5
 7012 0bfa 56       		.byte	0x56
 7013 0bfb AB000000 		.4byte	0xab
 7014 0bff 05       		.uleb128 0x5
 7015 0c00 03       		.byte	0x3
 7016 0c01 00000000 		.4byte	portOpen
 7017 0c05 07       		.uleb128 0x7
 7018 0c06 AB000000 		.4byte	0xab
 7019 0c0a 150C0000 		.4byte	0xc15
 7020 0c0e 08       		.uleb128 0x8
 7021 0c0f 81000000 		.4byte	0x81
 7022 0c13 04       		.byte	0x4
 7023 0c14 00       		.byte	0
 7024 0c15 20       		.uleb128 0x20
 7025 0c16 65010000 		.4byte	.LASF169
 7026 0c1a 05       		.byte	0x5
 7027 0c1b 59       		.byte	0x59
 7028 0c1c 050C0000 		.4byte	0xc05
 7029 0c20 05       		.uleb128 0x5
 7030 0c21 03       		.byte	0x3
 7031 0c22 00000000 		.4byte	frontSensors
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 147


 7032 0c26 20       		.uleb128 0x20
 7033 0c27 EB030000 		.4byte	.LASF170
 7034 0c2b 05       		.byte	0x5
 7035 0c2c 5A       		.byte	0x5a
 7036 0c2d AB000000 		.4byte	0xab
 7037 0c31 05       		.uleb128 0x5
 7038 0c32 03       		.byte	0x3
 7039 0c33 00000000 		.4byte	leftOn
 7040 0c37 20       		.uleb128 0x20
 7041 0c38 A9080000 		.4byte	.LASF171
 7042 0c3c 05       		.byte	0x5
 7043 0c3d 5B       		.byte	0x5b
 7044 0c3e AB000000 		.4byte	0xab
 7045 0c42 05       		.uleb128 0x5
 7046 0c43 03       		.byte	0x3
 7047 0c44 00000000 		.4byte	rightOn
 7048 0c48 20       		.uleb128 0x20
 7049 0c49 87020000 		.4byte	.LASF172
 7050 0c4d 05       		.byte	0x5
 7051 0c4e 5F       		.byte	0x5f
 7052 0c4f DB000000 		.4byte	0xdb
 7053 0c53 05       		.uleb128 0x5
 7054 0c54 03       		.byte	0x3
 7055 0c55 00000000 		.4byte	prevVoltage
 7056 0c59 20       		.uleb128 0x20
 7057 0c5a 47080000 		.4byte	.LASF173
 7058 0c5e 05       		.byte	0x5
 7059 0c5f 60       		.byte	0x60
 7060 0c60 DB000000 		.4byte	0xdb
 7061 0c64 05       		.uleb128 0x5
 7062 0c65 03       		.byte	0x3
 7063 0c66 00000000 		.4byte	prevVoltage2
 7064 0c6a 07       		.uleb128 0x7
 7065 0c6b 8E000000 		.4byte	0x8e
 7066 0c6f 7A0C0000 		.4byte	0xc7a
 7067 0c73 08       		.uleb128 0x8
 7068 0c74 81000000 		.4byte	0x81
 7069 0c78 3F       		.byte	0x3f
 7070 0c79 00       		.byte	0
 7071 0c7a 20       		.uleb128 0x20
 7072 0c7b AE070000 		.4byte	.LASF174
 7073 0c7f 05       		.byte	0x5
 7074 0c80 66       		.byte	0x66
 7075 0c81 6A0C0000 		.4byte	0xc6a
 7076 0c85 05       		.uleb128 0x5
 7077 0c86 03       		.byte	0x3
 7078 0c87 00000000 		.4byte	displaystring
 7079 0c8b 20       		.uleb128 0x20
 7080 0c8c 60020000 		.4byte	.LASF175
 7081 0c90 05       		.byte	0x5
 7082 0c91 67       		.byte	0x67
 7083 0c92 6A0C0000 		.4byte	0xc6a
 7084 0c96 05       		.uleb128 0x5
 7085 0c97 03       		.byte	0x3
 7086 0c98 00000000 		.4byte	line
 7087 0c9c 20       		.uleb128 0x20
 7088 0c9d 93000000 		.4byte	.LASF176
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 148


 7089 0ca1 05       		.byte	0x5
 7090 0ca2 67       		.byte	0x67
 7091 0ca3 6A0C0000 		.4byte	0xc6a
 7092 0ca7 05       		.uleb128 0x5
 7093 0ca8 03       		.byte	0x3
 7094 0ca9 00000000 		.4byte	entry
 7095 0cad 07       		.uleb128 0x7
 7096 0cae AB000000 		.4byte	0xab
 7097 0cb2 BD0C0000 		.4byte	0xcbd
 7098 0cb6 08       		.uleb128 0x8
 7099 0cb7 81000000 		.4byte	0x81
 7100 0cbb 3F       		.byte	0x3f
 7101 0cbc 00       		.byte	0
 7102 0cbd 20       		.uleb128 0x20
 7103 0cbe 0A080000 		.4byte	.LASF177
 7104 0cc2 05       		.byte	0x5
 7105 0cc3 68       		.byte	0x68
 7106 0cc4 AD0C0000 		.4byte	0xcad
 7107 0cc8 05       		.uleb128 0x5
 7108 0cc9 03       		.byte	0x3
 7109 0cca 00000000 		.4byte	usbBuffer
 7110 0cce 20       		.uleb128 0x20
 7111 0ccf 89010000 		.4byte	.LASF178
 7112 0cd3 05       		.byte	0x5
 7113 0cd4 7D       		.byte	0x7d
 7114 0cd5 86010000 		.4byte	0x186
 7115 0cd9 05       		.uleb128 0x5
 7116 0cda 03       		.byte	0x3
 7117 0cdb 00000000 		.4byte	buffer_state
 7118 0cdf 20       		.uleb128 0x20
 7119 0ce0 A2040000 		.4byte	.LASF179
 7120 0ce4 05       		.byte	0x5
 7121 0ce5 7E       		.byte	0x7e
 7122 0ce6 86010000 		.4byte	0x186
 7123 0cea 05       		.uleb128 0x5
 7124 0ceb 03       		.byte	0x3
 7125 0cec 00000000 		.4byte	system_state
 7126 0cf0 20       		.uleb128 0x20
 7127 0cf1 F9040000 		.4byte	.LASF180
 7128 0cf5 05       		.byte	0x5
 7129 0cf6 80       		.byte	0x80
 7130 0cf7 0C010000 		.4byte	0x10c
 7131 0cfb 05       		.uleb128 0x5
 7132 0cfc 03       		.byte	0x3
 7133 0cfd 00000000 		.4byte	prev_movement_state
 7134 0d01 20       		.uleb128 0x20
 7135 0d02 9A080000 		.4byte	.LASF181
 7136 0d06 05       		.byte	0x5
 7137 0d07 81       		.byte	0x81
 7138 0d08 0C010000 		.4byte	0x10c
 7139 0d0c 05       		.uleb128 0x5
 7140 0d0d 03       		.byte	0x3
 7141 0d0e 00000000 		.4byte	movement_state
 7142 0d12 20       		.uleb128 0x20
 7143 0d13 D7020000 		.4byte	.LASF182
 7144 0d17 05       		.byte	0x5
 7145 0d18 82       		.byte	0x82
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 149


 7146 0d19 49010000 		.4byte	0x149
 7147 0d1d 05       		.uleb128 0x5
 7148 0d1e 03       		.byte	0x3
 7149 0d1f 00000000 		.4byte	track_mode
 7150 0d23 20       		.uleb128 0x20
 7151 0d24 E5060000 		.4byte	.LASF183
 7152 0d28 05       		.byte	0x5
 7153 0d29 84       		.byte	0x84
 7154 0d2a AB000000 		.4byte	0xab
 7155 0d2e 05       		.uleb128 0x5
 7156 0d2f 03       		.byte	0x3
 7157 0d30 00000000 		.4byte	byteCount
 7158 0d34 07       		.uleb128 0x7
 7159 0d35 8E000000 		.4byte	0x8e
 7160 0d39 440D0000 		.4byte	0xd44
 7161 0d3d 08       		.uleb128 0x8
 7162 0d3e 81000000 		.4byte	0x81
 7163 0d42 01       		.byte	0x1
 7164 0d43 00       		.byte	0
 7165 0d44 20       		.uleb128 0x20
 7166 0d45 E4070000 		.4byte	.LASF184
 7167 0d49 05       		.byte	0x5
 7168 0d4a 85       		.byte	0x85
 7169 0d4b 340D0000 		.4byte	0xd34
 7170 0d4f 05       		.uleb128 0x5
 7171 0d50 03       		.byte	0x3
 7172 0d51 00000000 		.4byte	packet
 7173 0d55 20       		.uleb128 0x20
 7174 0d56 1F090000 		.4byte	.LASF185
 7175 0d5a 05       		.byte	0x5
 7176 0d5b 89       		.byte	0x89
 7177 0d5c EE000000 		.4byte	0xee
 7178 0d60 05       		.uleb128 0x5
 7179 0d61 03       		.byte	0x3
 7180 0d62 00000000 		.4byte	speed
 7181 0d66 20       		.uleb128 0x20
 7182 0d67 DA030000 		.4byte	.LASF186
 7183 0d6b 01       		.byte	0x1
 7184 0d6c 25       		.byte	0x25
 7185 0d6d B7000000 		.4byte	0xb7
 7186 0d71 05       		.uleb128 0x5
 7187 0d72 03       		.byte	0x3
 7188 0d73 00000000 		.4byte	instructionCount
 7189 0d77 20       		.uleb128 0x20
 7190 0d78 31030000 		.4byte	.LASF187
 7191 0d7c 01       		.byte	0x1
 7192 0d7d 27       		.byte	0x27
 7193 0d7e A0000000 		.4byte	0xa0
 7194 0d82 05       		.uleb128 0x5
 7195 0d83 03       		.byte	0x3
 7196 0d84 00000000 		.4byte	sensorsDisabled
 7197 0d88 07       		.uleb128 0x7
 7198 0d89 A0000000 		.4byte	0xa0
 7199 0d8d 9E0D0000 		.4byte	0xd9e
 7200 0d91 08       		.uleb128 0x8
 7201 0d92 81000000 		.4byte	0x81
 7202 0d96 0E       		.byte	0xe
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 150


 7203 0d97 08       		.uleb128 0x8
 7204 0d98 81000000 		.4byte	0x81
 7205 0d9c 12       		.byte	0x12
 7206 0d9d 00       		.byte	0
 7207 0d9e 1F       		.uleb128 0x1f
 7208 0d9f 6D617000 		.ascii	"map\000"
 7209 0da3 01       		.byte	0x1
 7210 0da4 43       		.byte	0x43
 7211 0da5 880D0000 		.4byte	0xd88
 7212 0da9 05       		.uleb128 0x5
 7213 0daa 03       		.byte	0x3
 7214 0dab 00000000 		.4byte	map
 7215 0daf 07       		.uleb128 0x7
 7216 0db0 A0000000 		.4byte	0xa0
 7217 0db4 C50D0000 		.4byte	0xdc5
 7218 0db8 08       		.uleb128 0x8
 7219 0db9 81000000 		.4byte	0x81
 7220 0dbd 05       		.byte	0x5
 7221 0dbe 08       		.uleb128 0x8
 7222 0dbf 81000000 		.4byte	0x81
 7223 0dc3 01       		.byte	0x1
 7224 0dc4 00       		.byte	0
 7225 0dc5 20       		.uleb128 0x20
 7226 0dc6 71070000 		.4byte	.LASF188
 7227 0dca 01       		.byte	0x1
 7228 0dcb 64       		.byte	0x64
 7229 0dcc AF0D0000 		.4byte	0xdaf
 7230 0dd0 05       		.uleb128 0x5
 7231 0dd1 03       		.byte	0x3
 7232 0dd2 00000000 		.4byte	food_list
 7233 0dd6 07       		.uleb128 0x7
 7234 0dd7 A0000000 		.4byte	0xa0
 7235 0ddb ED0D0000 		.4byte	0xded
 7236 0ddf 21       		.uleb128 0x21
 7237 0de0 81000000 		.4byte	0x81
 7238 0de4 1F03     		.2byte	0x31f
 7239 0de6 08       		.uleb128 0x8
 7240 0de7 81000000 		.4byte	0x81
 7241 0deb 02       		.byte	0x2
 7242 0dec 00       		.byte	0
 7243 0ded 20       		.uleb128 0x20
 7244 0dee 6C000000 		.4byte	.LASF189
 7245 0df2 01       		.byte	0x1
 7246 0df3 2B       		.byte	0x2b
 7247 0df4 D60D0000 		.4byte	0xdd6
 7248 0df8 05       		.uleb128 0x5
 7249 0df9 03       		.byte	0x3
 7250 0dfa 00000000 		.4byte	path
 7251 0dfe 20       		.uleb128 0x20
 7252 0dff 5D090000 		.4byte	.LASF190
 7253 0e03 01       		.byte	0x1
 7254 0e04 2C       		.byte	0x2c
 7255 0e05 F5000000 		.4byte	0xf5
 7256 0e09 05       		.uleb128 0x5
 7257 0e0a 03       		.byte	0x3
 7258 0e0b 00000000 		.4byte	start
 7259 0e0f 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 151


 7260 0e10 E8020000 		.4byte	.LASF191
 7261 0e14 01       		.byte	0x1
 7262 0e15 2D       		.byte	0x2d
 7263 0e16 F5000000 		.4byte	0xf5
 7264 0e1a 05       		.uleb128 0x5
 7265 0e1b 03       		.byte	0x3
 7266 0e1c 00000000 		.4byte	destination
 7267 0e20 20       		.uleb128 0x20
 7268 0e21 B0000000 		.4byte	.LASF192
 7269 0e25 01       		.byte	0x1
 7270 0e26 29       		.byte	0x29
 7271 0e27 A0000000 		.4byte	0xa0
 7272 0e2b 05       		.uleb128 0x5
 7273 0e2c 03       		.byte	0x3
 7274 0e2d 00000000 		.4byte	robot_direction
 7275 0e31 20       		.uleb128 0x20
 7276 0e32 42070000 		.4byte	.LASF193
 7277 0e36 07       		.byte	0x7
 7278 0e37 22       		.byte	0x22
 7279 0e38 A0000000 		.4byte	0xa0
 7280 0e3c 05       		.uleb128 0x5
 7281 0e3d 03       		.byte	0x3
 7282 0e3e 00000000 		.4byte	tracked_direction
 7283 0e42 20       		.uleb128 0x20
 7284 0e43 86030000 		.4byte	.LASF194
 7285 0e47 01       		.byte	0x1
 7286 0e48 69       		.byte	0x69
 7287 0e49 A0000000 		.4byte	0xa0
 7288 0e4d 05       		.uleb128 0x5
 7289 0e4e 03       		.byte	0x3
 7290 0e4f 00000000 		.4byte	food_length
 7291 0e53 07       		.uleb128 0x7
 7292 0e54 8E000000 		.4byte	0x8e
 7293 0e58 640E0000 		.4byte	0xe64
 7294 0e5c 21       		.uleb128 0x21
 7295 0e5d 81000000 		.4byte	0x81
 7296 0e61 1F03     		.2byte	0x31f
 7297 0e63 00       		.byte	0
 7298 0e64 20       		.uleb128 0x20
 7299 0e65 5E070000 		.4byte	.LASF195
 7300 0e69 01       		.byte	0x1
 7301 0e6a 24       		.byte	0x24
 7302 0e6b 530E0000 		.4byte	0xe53
 7303 0e6f 05       		.uleb128 0x5
 7304 0e70 03       		.byte	0x3
 7305 0e71 00000000 		.4byte	instructions
 7306 0e75 20       		.uleb128 0x20
 7307 0e76 BB020000 		.4byte	.LASF196
 7308 0e7a 01       		.byte	0x1
 7309 0e7b 26       		.byte	0x26
 7310 0e7c B7000000 		.4byte	0xb7
 7311 0e80 05       		.uleb128 0x5
 7312 0e81 03       		.byte	0x3
 7313 0e82 00000000 		.4byte	instructionLength
 7314 0e86 22       		.uleb128 0x22
 7315 0e87 39000000 		.4byte	.LASF197
 7316 0e8b 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 152


 7317 0e8c 2804     		.2byte	0x428
 7318 0e8e B7000000 		.4byte	0xb7
 7319 0e92 05       		.uleb128 0x5
 7320 0e93 03       		.byte	0x3
 7321 0e94 00000000 		.4byte	leftTurnCount
 7322 0e98 22       		.uleb128 0x22
 7323 0e99 47040000 		.4byte	.LASF198
 7324 0e9d 01       		.byte	0x1
 7325 0e9e 2904     		.2byte	0x429
 7326 0ea0 B7000000 		.4byte	0xb7
 7327 0ea4 05       		.uleb128 0x5
 7328 0ea5 03       		.byte	0x3
 7329 0ea6 00000000 		.4byte	rightTurnCount
 7330 0eaa 00       		.byte	0
 7331              		.section	.debug_abbrev,"",%progbits
 7332              	.Ldebug_abbrev0:
 7333 0000 01       		.uleb128 0x1
 7334 0001 11       		.uleb128 0x11
 7335 0002 01       		.byte	0x1
 7336 0003 25       		.uleb128 0x25
 7337 0004 0E       		.uleb128 0xe
 7338 0005 13       		.uleb128 0x13
 7339 0006 0B       		.uleb128 0xb
 7340 0007 03       		.uleb128 0x3
 7341 0008 0E       		.uleb128 0xe
 7342 0009 1B       		.uleb128 0x1b
 7343 000a 0E       		.uleb128 0xe
 7344 000b 55       		.uleb128 0x55
 7345 000c 17       		.uleb128 0x17
 7346 000d 11       		.uleb128 0x11
 7347 000e 01       		.uleb128 0x1
 7348 000f 10       		.uleb128 0x10
 7349 0010 17       		.uleb128 0x17
 7350 0011 00       		.byte	0
 7351 0012 00       		.byte	0
 7352 0013 02       		.uleb128 0x2
 7353 0014 24       		.uleb128 0x24
 7354 0015 00       		.byte	0
 7355 0016 0B       		.uleb128 0xb
 7356 0017 0B       		.uleb128 0xb
 7357 0018 3E       		.uleb128 0x3e
 7358 0019 0B       		.uleb128 0xb
 7359 001a 03       		.uleb128 0x3
 7360 001b 0E       		.uleb128 0xe
 7361 001c 00       		.byte	0
 7362 001d 00       		.byte	0
 7363 001e 03       		.uleb128 0x3
 7364 001f 16       		.uleb128 0x16
 7365 0020 00       		.byte	0
 7366 0021 03       		.uleb128 0x3
 7367 0022 0E       		.uleb128 0xe
 7368 0023 3A       		.uleb128 0x3a
 7369 0024 0B       		.uleb128 0xb
 7370 0025 3B       		.uleb128 0x3b
 7371 0026 0B       		.uleb128 0xb
 7372 0027 49       		.uleb128 0x49
 7373 0028 13       		.uleb128 0x13
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 153


 7374 0029 00       		.byte	0
 7375 002a 00       		.byte	0
 7376 002b 04       		.uleb128 0x4
 7377 002c 24       		.uleb128 0x24
 7378 002d 00       		.byte	0
 7379 002e 0B       		.uleb128 0xb
 7380 002f 0B       		.uleb128 0xb
 7381 0030 3E       		.uleb128 0x3e
 7382 0031 0B       		.uleb128 0xb
 7383 0032 03       		.uleb128 0x3
 7384 0033 08       		.uleb128 0x8
 7385 0034 00       		.byte	0
 7386 0035 00       		.byte	0
 7387 0036 05       		.uleb128 0x5
 7388 0037 0F       		.uleb128 0xf
 7389 0038 00       		.byte	0
 7390 0039 0B       		.uleb128 0xb
 7391 003a 0B       		.uleb128 0xb
 7392 003b 49       		.uleb128 0x49
 7393 003c 13       		.uleb128 0x13
 7394 003d 00       		.byte	0
 7395 003e 00       		.byte	0
 7396 003f 06       		.uleb128 0x6
 7397 0040 16       		.uleb128 0x16
 7398 0041 00       		.byte	0
 7399 0042 03       		.uleb128 0x3
 7400 0043 0E       		.uleb128 0xe
 7401 0044 3A       		.uleb128 0x3a
 7402 0045 0B       		.uleb128 0xb
 7403 0046 3B       		.uleb128 0x3b
 7404 0047 05       		.uleb128 0x5
 7405 0048 49       		.uleb128 0x49
 7406 0049 13       		.uleb128 0x13
 7407 004a 00       		.byte	0
 7408 004b 00       		.byte	0
 7409 004c 07       		.uleb128 0x7
 7410 004d 01       		.uleb128 0x1
 7411 004e 01       		.byte	0x1
 7412 004f 49       		.uleb128 0x49
 7413 0050 13       		.uleb128 0x13
 7414 0051 01       		.uleb128 0x1
 7415 0052 13       		.uleb128 0x13
 7416 0053 00       		.byte	0
 7417 0054 00       		.byte	0
 7418 0055 08       		.uleb128 0x8
 7419 0056 21       		.uleb128 0x21
 7420 0057 00       		.byte	0
 7421 0058 49       		.uleb128 0x49
 7422 0059 13       		.uleb128 0x13
 7423 005a 2F       		.uleb128 0x2f
 7424 005b 0B       		.uleb128 0xb
 7425 005c 00       		.byte	0
 7426 005d 00       		.byte	0
 7427 005e 09       		.uleb128 0x9
 7428 005f 04       		.uleb128 0x4
 7429 0060 01       		.byte	0x1
 7430 0061 03       		.uleb128 0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 154


 7431 0062 0E       		.uleb128 0xe
 7432 0063 0B       		.uleb128 0xb
 7433 0064 0B       		.uleb128 0xb
 7434 0065 3A       		.uleb128 0x3a
 7435 0066 0B       		.uleb128 0xb
 7436 0067 3B       		.uleb128 0x3b
 7437 0068 0B       		.uleb128 0xb
 7438 0069 01       		.uleb128 0x1
 7439 006a 13       		.uleb128 0x13
 7440 006b 00       		.byte	0
 7441 006c 00       		.byte	0
 7442 006d 0A       		.uleb128 0xa
 7443 006e 28       		.uleb128 0x28
 7444 006f 00       		.byte	0
 7445 0070 03       		.uleb128 0x3
 7446 0071 0E       		.uleb128 0xe
 7447 0072 1C       		.uleb128 0x1c
 7448 0073 0D       		.uleb128 0xd
 7449 0074 00       		.byte	0
 7450 0075 00       		.byte	0
 7451 0076 0B       		.uleb128 0xb
 7452 0077 13       		.uleb128 0x13
 7453 0078 01       		.byte	0x1
 7454 0079 03       		.uleb128 0x3
 7455 007a 0E       		.uleb128 0xe
 7456 007b 0B       		.uleb128 0xb
 7457 007c 0B       		.uleb128 0xb
 7458 007d 3A       		.uleb128 0x3a
 7459 007e 0B       		.uleb128 0xb
 7460 007f 3B       		.uleb128 0x3b
 7461 0080 0B       		.uleb128 0xb
 7462 0081 01       		.uleb128 0x1
 7463 0082 13       		.uleb128 0x13
 7464 0083 00       		.byte	0
 7465 0084 00       		.byte	0
 7466 0085 0C       		.uleb128 0xc
 7467 0086 0D       		.uleb128 0xd
 7468 0087 00       		.byte	0
 7469 0088 03       		.uleb128 0x3
 7470 0089 0E       		.uleb128 0xe
 7471 008a 3A       		.uleb128 0x3a
 7472 008b 0B       		.uleb128 0xb
 7473 008c 3B       		.uleb128 0x3b
 7474 008d 0B       		.uleb128 0xb
 7475 008e 49       		.uleb128 0x49
 7476 008f 13       		.uleb128 0x13
 7477 0090 38       		.uleb128 0x38
 7478 0091 0B       		.uleb128 0xb
 7479 0092 00       		.byte	0
 7480 0093 00       		.byte	0
 7481 0094 0D       		.uleb128 0xd
 7482 0095 2E       		.uleb128 0x2e
 7483 0096 00       		.byte	0
 7484 0097 3F       		.uleb128 0x3f
 7485 0098 19       		.uleb128 0x19
 7486 0099 03       		.uleb128 0x3
 7487 009a 0E       		.uleb128 0xe
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 155


 7488 009b 3A       		.uleb128 0x3a
 7489 009c 0B       		.uleb128 0xb
 7490 009d 3B       		.uleb128 0x3b
 7491 009e 0B       		.uleb128 0xb
 7492 009f 27       		.uleb128 0x27
 7493 00a0 19       		.uleb128 0x19
 7494 00a1 11       		.uleb128 0x11
 7495 00a2 01       		.uleb128 0x1
 7496 00a3 12       		.uleb128 0x12
 7497 00a4 06       		.uleb128 0x6
 7498 00a5 40       		.uleb128 0x40
 7499 00a6 18       		.uleb128 0x18
 7500 00a7 9742     		.uleb128 0x2117
 7501 00a9 19       		.uleb128 0x19
 7502 00aa 00       		.byte	0
 7503 00ab 00       		.byte	0
 7504 00ac 0E       		.uleb128 0xe
 7505 00ad 2E       		.uleb128 0x2e
 7506 00ae 00       		.byte	0
 7507 00af 3F       		.uleb128 0x3f
 7508 00b0 19       		.uleb128 0x19
 7509 00b1 03       		.uleb128 0x3
 7510 00b2 0E       		.uleb128 0xe
 7511 00b3 3A       		.uleb128 0x3a
 7512 00b4 0B       		.uleb128 0xb
 7513 00b5 3B       		.uleb128 0x3b
 7514 00b6 0B       		.uleb128 0xb
 7515 00b7 27       		.uleb128 0x27
 7516 00b8 19       		.uleb128 0x19
 7517 00b9 11       		.uleb128 0x11
 7518 00ba 01       		.uleb128 0x1
 7519 00bb 12       		.uleb128 0x12
 7520 00bc 06       		.uleb128 0x6
 7521 00bd 40       		.uleb128 0x40
 7522 00be 18       		.uleb128 0x18
 7523 00bf 9642     		.uleb128 0x2116
 7524 00c1 19       		.uleb128 0x19
 7525 00c2 00       		.byte	0
 7526 00c3 00       		.byte	0
 7527 00c4 0F       		.uleb128 0xf
 7528 00c5 2E       		.uleb128 0x2e
 7529 00c6 01       		.byte	0x1
 7530 00c7 3F       		.uleb128 0x3f
 7531 00c8 19       		.uleb128 0x19
 7532 00c9 03       		.uleb128 0x3
 7533 00ca 0E       		.uleb128 0xe
 7534 00cb 3A       		.uleb128 0x3a
 7535 00cc 0B       		.uleb128 0xb
 7536 00cd 3B       		.uleb128 0x3b
 7537 00ce 0B       		.uleb128 0xb
 7538 00cf 27       		.uleb128 0x27
 7539 00d0 19       		.uleb128 0x19
 7540 00d1 11       		.uleb128 0x11
 7541 00d2 01       		.uleb128 0x1
 7542 00d3 12       		.uleb128 0x12
 7543 00d4 06       		.uleb128 0x6
 7544 00d5 40       		.uleb128 0x40
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 156


 7545 00d6 18       		.uleb128 0x18
 7546 00d7 9642     		.uleb128 0x2116
 7547 00d9 19       		.uleb128 0x19
 7548 00da 01       		.uleb128 0x1
 7549 00db 13       		.uleb128 0x13
 7550 00dc 00       		.byte	0
 7551 00dd 00       		.byte	0
 7552 00de 10       		.uleb128 0x10
 7553 00df 0B       		.uleb128 0xb
 7554 00e0 01       		.byte	0x1
 7555 00e1 11       		.uleb128 0x11
 7556 00e2 01       		.uleb128 0x1
 7557 00e3 12       		.uleb128 0x12
 7558 00e4 06       		.uleb128 0x6
 7559 00e5 01       		.uleb128 0x1
 7560 00e6 13       		.uleb128 0x13
 7561 00e7 00       		.byte	0
 7562 00e8 00       		.byte	0
 7563 00e9 11       		.uleb128 0x11
 7564 00ea 34       		.uleb128 0x34
 7565 00eb 00       		.byte	0
 7566 00ec 03       		.uleb128 0x3
 7567 00ed 0E       		.uleb128 0xe
 7568 00ee 3A       		.uleb128 0x3a
 7569 00ef 0B       		.uleb128 0xb
 7570 00f0 3B       		.uleb128 0x3b
 7571 00f1 0B       		.uleb128 0xb
 7572 00f2 49       		.uleb128 0x49
 7573 00f3 13       		.uleb128 0x13
 7574 00f4 02       		.uleb128 0x2
 7575 00f5 18       		.uleb128 0x18
 7576 00f6 00       		.byte	0
 7577 00f7 00       		.byte	0
 7578 00f8 12       		.uleb128 0x12
 7579 00f9 0B       		.uleb128 0xb
 7580 00fa 01       		.byte	0x1
 7581 00fb 11       		.uleb128 0x11
 7582 00fc 01       		.uleb128 0x1
 7583 00fd 12       		.uleb128 0x12
 7584 00fe 06       		.uleb128 0x6
 7585 00ff 00       		.byte	0
 7586 0100 00       		.byte	0
 7587 0101 13       		.uleb128 0x13
 7588 0102 2E       		.uleb128 0x2e
 7589 0103 01       		.byte	0x1
 7590 0104 3F       		.uleb128 0x3f
 7591 0105 19       		.uleb128 0x19
 7592 0106 03       		.uleb128 0x3
 7593 0107 0E       		.uleb128 0xe
 7594 0108 3A       		.uleb128 0x3a
 7595 0109 0B       		.uleb128 0xb
 7596 010a 3B       		.uleb128 0x3b
 7597 010b 0B       		.uleb128 0xb
 7598 010c 49       		.uleb128 0x49
 7599 010d 13       		.uleb128 0x13
 7600 010e 11       		.uleb128 0x11
 7601 010f 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 157


 7602 0110 12       		.uleb128 0x12
 7603 0111 06       		.uleb128 0x6
 7604 0112 40       		.uleb128 0x40
 7605 0113 18       		.uleb128 0x18
 7606 0114 9642     		.uleb128 0x2116
 7607 0116 19       		.uleb128 0x19
 7608 0117 01       		.uleb128 0x1
 7609 0118 13       		.uleb128 0x13
 7610 0119 00       		.byte	0
 7611 011a 00       		.byte	0
 7612 011b 14       		.uleb128 0x14
 7613 011c 34       		.uleb128 0x34
 7614 011d 00       		.byte	0
 7615 011e 03       		.uleb128 0x3
 7616 011f 0E       		.uleb128 0xe
 7617 0120 3A       		.uleb128 0x3a
 7618 0121 0B       		.uleb128 0xb
 7619 0122 3B       		.uleb128 0x3b
 7620 0123 05       		.uleb128 0x5
 7621 0124 49       		.uleb128 0x49
 7622 0125 13       		.uleb128 0x13
 7623 0126 02       		.uleb128 0x2
 7624 0127 18       		.uleb128 0x18
 7625 0128 00       		.byte	0
 7626 0129 00       		.byte	0
 7627 012a 15       		.uleb128 0x15
 7628 012b 34       		.uleb128 0x34
 7629 012c 00       		.byte	0
 7630 012d 03       		.uleb128 0x3
 7631 012e 08       		.uleb128 0x8
 7632 012f 3A       		.uleb128 0x3a
 7633 0130 0B       		.uleb128 0xb
 7634 0131 3B       		.uleb128 0x3b
 7635 0132 05       		.uleb128 0x5
 7636 0133 49       		.uleb128 0x49
 7637 0134 13       		.uleb128 0x13
 7638 0135 02       		.uleb128 0x2
 7639 0136 18       		.uleb128 0x18
 7640 0137 00       		.byte	0
 7641 0138 00       		.byte	0
 7642 0139 16       		.uleb128 0x16
 7643 013a 2E       		.uleb128 0x2e
 7644 013b 01       		.byte	0x1
 7645 013c 3F       		.uleb128 0x3f
 7646 013d 19       		.uleb128 0x19
 7647 013e 03       		.uleb128 0x3
 7648 013f 0E       		.uleb128 0xe
 7649 0140 3A       		.uleb128 0x3a
 7650 0141 0B       		.uleb128 0xb
 7651 0142 3B       		.uleb128 0x3b
 7652 0143 05       		.uleb128 0x5
 7653 0144 11       		.uleb128 0x11
 7654 0145 01       		.uleb128 0x1
 7655 0146 12       		.uleb128 0x12
 7656 0147 06       		.uleb128 0x6
 7657 0148 40       		.uleb128 0x40
 7658 0149 18       		.uleb128 0x18
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 158


 7659 014a 9742     		.uleb128 0x2117
 7660 014c 19       		.uleb128 0x19
 7661 014d 01       		.uleb128 0x1
 7662 014e 13       		.uleb128 0x13
 7663 014f 00       		.byte	0
 7664 0150 00       		.byte	0
 7665 0151 17       		.uleb128 0x17
 7666 0152 2E       		.uleb128 0x2e
 7667 0153 01       		.byte	0x1
 7668 0154 3F       		.uleb128 0x3f
 7669 0155 19       		.uleb128 0x19
 7670 0156 03       		.uleb128 0x3
 7671 0157 0E       		.uleb128 0xe
 7672 0158 3A       		.uleb128 0x3a
 7673 0159 0B       		.uleb128 0xb
 7674 015a 3B       		.uleb128 0x3b
 7675 015b 05       		.uleb128 0x5
 7676 015c 27       		.uleb128 0x27
 7677 015d 19       		.uleb128 0x19
 7678 015e 11       		.uleb128 0x11
 7679 015f 01       		.uleb128 0x1
 7680 0160 12       		.uleb128 0x12
 7681 0161 06       		.uleb128 0x6
 7682 0162 40       		.uleb128 0x40
 7683 0163 18       		.uleb128 0x18
 7684 0164 9642     		.uleb128 0x2116
 7685 0166 19       		.uleb128 0x19
 7686 0167 01       		.uleb128 0x1
 7687 0168 13       		.uleb128 0x13
 7688 0169 00       		.byte	0
 7689 016a 00       		.byte	0
 7690 016b 18       		.uleb128 0x18
 7691 016c 05       		.uleb128 0x5
 7692 016d 00       		.byte	0
 7693 016e 03       		.uleb128 0x3
 7694 016f 08       		.uleb128 0x8
 7695 0170 3A       		.uleb128 0x3a
 7696 0171 0B       		.uleb128 0xb
 7697 0172 3B       		.uleb128 0x3b
 7698 0173 05       		.uleb128 0x5
 7699 0174 49       		.uleb128 0x49
 7700 0175 13       		.uleb128 0x13
 7701 0176 02       		.uleb128 0x2
 7702 0177 18       		.uleb128 0x18
 7703 0178 00       		.byte	0
 7704 0179 00       		.byte	0
 7705 017a 19       		.uleb128 0x19
 7706 017b 2E       		.uleb128 0x2e
 7707 017c 01       		.byte	0x1
 7708 017d 3F       		.uleb128 0x3f
 7709 017e 19       		.uleb128 0x19
 7710 017f 03       		.uleb128 0x3
 7711 0180 0E       		.uleb128 0xe
 7712 0181 3A       		.uleb128 0x3a
 7713 0182 0B       		.uleb128 0xb
 7714 0183 3B       		.uleb128 0x3b
 7715 0184 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 159


 7716 0185 11       		.uleb128 0x11
 7717 0186 01       		.uleb128 0x1
 7718 0187 12       		.uleb128 0x12
 7719 0188 06       		.uleb128 0x6
 7720 0189 40       		.uleb128 0x40
 7721 018a 18       		.uleb128 0x18
 7722 018b 9642     		.uleb128 0x2116
 7723 018d 19       		.uleb128 0x19
 7724 018e 01       		.uleb128 0x1
 7725 018f 13       		.uleb128 0x13
 7726 0190 00       		.byte	0
 7727 0191 00       		.byte	0
 7728 0192 1A       		.uleb128 0x1a
 7729 0193 05       		.uleb128 0x5
 7730 0194 00       		.byte	0
 7731 0195 03       		.uleb128 0x3
 7732 0196 0E       		.uleb128 0xe
 7733 0197 3A       		.uleb128 0x3a
 7734 0198 0B       		.uleb128 0xb
 7735 0199 3B       		.uleb128 0x3b
 7736 019a 05       		.uleb128 0x5
 7737 019b 49       		.uleb128 0x49
 7738 019c 13       		.uleb128 0x13
 7739 019d 02       		.uleb128 0x2
 7740 019e 18       		.uleb128 0x18
 7741 019f 00       		.byte	0
 7742 01a0 00       		.byte	0
 7743 01a1 1B       		.uleb128 0x1b
 7744 01a2 2E       		.uleb128 0x2e
 7745 01a3 00       		.byte	0
 7746 01a4 3F       		.uleb128 0x3f
 7747 01a5 19       		.uleb128 0x19
 7748 01a6 03       		.uleb128 0x3
 7749 01a7 0E       		.uleb128 0xe
 7750 01a8 3A       		.uleb128 0x3a
 7751 01a9 0B       		.uleb128 0xb
 7752 01aa 3B       		.uleb128 0x3b
 7753 01ab 05       		.uleb128 0x5
 7754 01ac 11       		.uleb128 0x11
 7755 01ad 01       		.uleb128 0x1
 7756 01ae 12       		.uleb128 0x12
 7757 01af 06       		.uleb128 0x6
 7758 01b0 40       		.uleb128 0x40
 7759 01b1 18       		.uleb128 0x18
 7760 01b2 9642     		.uleb128 0x2116
 7761 01b4 19       		.uleb128 0x19
 7762 01b5 00       		.byte	0
 7763 01b6 00       		.byte	0
 7764 01b7 1C       		.uleb128 0x1c
 7765 01b8 2E       		.uleb128 0x2e
 7766 01b9 00       		.byte	0
 7767 01ba 3F       		.uleb128 0x3f
 7768 01bb 19       		.uleb128 0x19
 7769 01bc 03       		.uleb128 0x3
 7770 01bd 0E       		.uleb128 0xe
 7771 01be 3A       		.uleb128 0x3a
 7772 01bf 0B       		.uleb128 0xb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 160


 7773 01c0 3B       		.uleb128 0x3b
 7774 01c1 05       		.uleb128 0x5
 7775 01c2 11       		.uleb128 0x11
 7776 01c3 01       		.uleb128 0x1
 7777 01c4 12       		.uleb128 0x12
 7778 01c5 06       		.uleb128 0x6
 7779 01c6 40       		.uleb128 0x40
 7780 01c7 18       		.uleb128 0x18
 7781 01c8 9742     		.uleb128 0x2117
 7782 01ca 19       		.uleb128 0x19
 7783 01cb 00       		.byte	0
 7784 01cc 00       		.byte	0
 7785 01cd 1D       		.uleb128 0x1d
 7786 01ce 34       		.uleb128 0x34
 7787 01cf 00       		.byte	0
 7788 01d0 03       		.uleb128 0x3
 7789 01d1 0E       		.uleb128 0xe
 7790 01d2 3A       		.uleb128 0x3a
 7791 01d3 0B       		.uleb128 0xb
 7792 01d4 3B       		.uleb128 0x3b
 7793 01d5 05       		.uleb128 0x5
 7794 01d6 49       		.uleb128 0x49
 7795 01d7 13       		.uleb128 0x13
 7796 01d8 3F       		.uleb128 0x3f
 7797 01d9 19       		.uleb128 0x19
 7798 01da 3C       		.uleb128 0x3c
 7799 01db 19       		.uleb128 0x19
 7800 01dc 00       		.byte	0
 7801 01dd 00       		.byte	0
 7802 01de 1E       		.uleb128 0x1e
 7803 01df 35       		.uleb128 0x35
 7804 01e0 00       		.byte	0
 7805 01e1 49       		.uleb128 0x49
 7806 01e2 13       		.uleb128 0x13
 7807 01e3 00       		.byte	0
 7808 01e4 00       		.byte	0
 7809 01e5 1F       		.uleb128 0x1f
 7810 01e6 34       		.uleb128 0x34
 7811 01e7 00       		.byte	0
 7812 01e8 03       		.uleb128 0x3
 7813 01e9 08       		.uleb128 0x8
 7814 01ea 3A       		.uleb128 0x3a
 7815 01eb 0B       		.uleb128 0xb
 7816 01ec 3B       		.uleb128 0x3b
 7817 01ed 0B       		.uleb128 0xb
 7818 01ee 49       		.uleb128 0x49
 7819 01ef 13       		.uleb128 0x13
 7820 01f0 3F       		.uleb128 0x3f
 7821 01f1 19       		.uleb128 0x19
 7822 01f2 02       		.uleb128 0x2
 7823 01f3 18       		.uleb128 0x18
 7824 01f4 00       		.byte	0
 7825 01f5 00       		.byte	0
 7826 01f6 20       		.uleb128 0x20
 7827 01f7 34       		.uleb128 0x34
 7828 01f8 00       		.byte	0
 7829 01f9 03       		.uleb128 0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 161


 7830 01fa 0E       		.uleb128 0xe
 7831 01fb 3A       		.uleb128 0x3a
 7832 01fc 0B       		.uleb128 0xb
 7833 01fd 3B       		.uleb128 0x3b
 7834 01fe 0B       		.uleb128 0xb
 7835 01ff 49       		.uleb128 0x49
 7836 0200 13       		.uleb128 0x13
 7837 0201 3F       		.uleb128 0x3f
 7838 0202 19       		.uleb128 0x19
 7839 0203 02       		.uleb128 0x2
 7840 0204 18       		.uleb128 0x18
 7841 0205 00       		.byte	0
 7842 0206 00       		.byte	0
 7843 0207 21       		.uleb128 0x21
 7844 0208 21       		.uleb128 0x21
 7845 0209 00       		.byte	0
 7846 020a 49       		.uleb128 0x49
 7847 020b 13       		.uleb128 0x13
 7848 020c 2F       		.uleb128 0x2f
 7849 020d 05       		.uleb128 0x5
 7850 020e 00       		.byte	0
 7851 020f 00       		.byte	0
 7852 0210 22       		.uleb128 0x22
 7853 0211 34       		.uleb128 0x34
 7854 0212 00       		.byte	0
 7855 0213 03       		.uleb128 0x3
 7856 0214 0E       		.uleb128 0xe
 7857 0215 3A       		.uleb128 0x3a
 7858 0216 0B       		.uleb128 0xb
 7859 0217 3B       		.uleb128 0x3b
 7860 0218 05       		.uleb128 0x5
 7861 0219 49       		.uleb128 0x49
 7862 021a 13       		.uleb128 0x13
 7863 021b 3F       		.uleb128 0x3f
 7864 021c 19       		.uleb128 0x19
 7865 021d 02       		.uleb128 0x2
 7866 021e 18       		.uleb128 0x18
 7867 021f 00       		.byte	0
 7868 0220 00       		.byte	0
 7869 0221 00       		.byte	0
 7870              		.section	.debug_aranges,"",%progbits
 7871 0000 6C010000 		.4byte	0x16c
 7872 0004 0200     		.2byte	0x2
 7873 0006 00000000 		.4byte	.Ldebug_info0
 7874 000a 04       		.byte	0x4
 7875 000b 00       		.byte	0
 7876 000c 0000     		.2byte	0
 7877 000e 0000     		.2byte	0
 7878 0010 00000000 		.4byte	.LFB63
 7879 0014 0C000000 		.4byte	.LFE63-.LFB63
 7880 0018 00000000 		.4byte	.LFB64
 7881 001c 2C000000 		.4byte	.LFE64-.LFB64
 7882 0020 00000000 		.4byte	.LFB65
 7883 0024 A4010000 		.4byte	.LFE65-.LFB65
 7884 0028 00000000 		.4byte	.LFB66
 7885 002c 34010000 		.4byte	.LFE66-.LFB66
 7886 0030 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 162


 7887 0034 20000000 		.4byte	.LFE67-.LFB67
 7888 0038 00000000 		.4byte	.LFB68
 7889 003c 28000000 		.4byte	.LFE68-.LFB68
 7890 0040 00000000 		.4byte	.LFB69
 7891 0044 0A000000 		.4byte	.LFE69-.LFB69
 7892 0048 00000000 		.4byte	.LFB70
 7893 004c 28000000 		.4byte	.LFE70-.LFB70
 7894 0050 00000000 		.4byte	.LFB71
 7895 0054 98070000 		.4byte	.LFE71-.LFB71
 7896 0058 00000000 		.4byte	.LFB72
 7897 005c 60010000 		.4byte	.LFE72-.LFB72
 7898 0060 00000000 		.4byte	.LFB73
 7899 0064 18000000 		.4byte	.LFE73-.LFB73
 7900 0068 00000000 		.4byte	.LFB74
 7901 006c 18000000 		.4byte	.LFE74-.LFB74
 7902 0070 00000000 		.4byte	.LFB75
 7903 0074 54000000 		.4byte	.LFE75-.LFB75
 7904 0078 00000000 		.4byte	.LFB76
 7905 007c F4000000 		.4byte	.LFE76-.LFB76
 7906 0080 00000000 		.4byte	.LFB77
 7907 0084 18000000 		.4byte	.LFE77-.LFB77
 7908 0088 00000000 		.4byte	.LFB78
 7909 008c 18000000 		.4byte	.LFE78-.LFB78
 7910 0090 00000000 		.4byte	.LFB79
 7911 0094 22000000 		.4byte	.LFE79-.LFB79
 7912 0098 00000000 		.4byte	.LFB80
 7913 009c 1C000000 		.4byte	.LFE80-.LFB80
 7914 00a0 00000000 		.4byte	.LFB81
 7915 00a4 34000000 		.4byte	.LFE81-.LFB81
 7916 00a8 00000000 		.4byte	.LFB82
 7917 00ac 38000000 		.4byte	.LFE82-.LFB82
 7918 00b0 00000000 		.4byte	.LFB83
 7919 00b4 4C000000 		.4byte	.LFE83-.LFB83
 7920 00b8 00000000 		.4byte	.LFB84
 7921 00bc 38000000 		.4byte	.LFE84-.LFB84
 7922 00c0 00000000 		.4byte	.LFB85
 7923 00c4 38000000 		.4byte	.LFE85-.LFB85
 7924 00c8 00000000 		.4byte	.LFB86
 7925 00cc 38000000 		.4byte	.LFE86-.LFB86
 7926 00d0 00000000 		.4byte	.LFB87
 7927 00d4 14000000 		.4byte	.LFE87-.LFB87
 7928 00d8 00000000 		.4byte	.LFB88
 7929 00dc 18000000 		.4byte	.LFE88-.LFB88
 7930 00e0 00000000 		.4byte	.LFB89
 7931 00e4 18000000 		.4byte	.LFE89-.LFB89
 7932 00e8 00000000 		.4byte	.LFB90
 7933 00ec 18000000 		.4byte	.LFE90-.LFB90
 7934 00f0 00000000 		.4byte	.LFB91
 7935 00f4 18000000 		.4byte	.LFE91-.LFB91
 7936 00f8 00000000 		.4byte	.LFB92
 7937 00fc B8000000 		.4byte	.LFE92-.LFB92
 7938 0100 00000000 		.4byte	.LFB93
 7939 0104 44050000 		.4byte	.LFE93-.LFB93
 7940 0108 00000000 		.4byte	.LFB94
 7941 010c 40000000 		.4byte	.LFE94-.LFB94
 7942 0110 00000000 		.4byte	.LFB95
 7943 0114 40000000 		.4byte	.LFE95-.LFB95
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 163


 7944 0118 00000000 		.4byte	.LFB96
 7945 011c 30020000 		.4byte	.LFE96-.LFB96
 7946 0120 00000000 		.4byte	.LFB97
 7947 0124 0C000000 		.4byte	.LFE97-.LFB97
 7948 0128 00000000 		.4byte	.LFB98
 7949 012c 4C010000 		.4byte	.LFE98-.LFB98
 7950 0130 00000000 		.4byte	.LFB99
 7951 0134 0C000000 		.4byte	.LFE99-.LFB99
 7952 0138 00000000 		.4byte	.LFB100
 7953 013c C0000000 		.4byte	.LFE100-.LFB100
 7954 0140 00000000 		.4byte	.LFB101
 7955 0144 B8000000 		.4byte	.LFE101-.LFB101
 7956 0148 00000000 		.4byte	.LFB102
 7957 014c 4A000000 		.4byte	.LFE102-.LFB102
 7958 0150 00000000 		.4byte	.LFB103
 7959 0154 68000000 		.4byte	.LFE103-.LFB103
 7960 0158 00000000 		.4byte	.LFB104
 7961 015c 50000000 		.4byte	.LFE104-.LFB104
 7962 0160 00000000 		.4byte	.LFB105
 7963 0164 0C000000 		.4byte	.LFE105-.LFB105
 7964 0168 00000000 		.4byte	0
 7965 016c 00000000 		.4byte	0
 7966              		.section	.debug_ranges,"",%progbits
 7967              	.Ldebug_ranges0:
 7968 0000 00000000 		.4byte	.LFB63
 7969 0004 0C000000 		.4byte	.LFE63
 7970 0008 00000000 		.4byte	.LFB64
 7971 000c 2C000000 		.4byte	.LFE64
 7972 0010 00000000 		.4byte	.LFB65
 7973 0014 A4010000 		.4byte	.LFE65
 7974 0018 00000000 		.4byte	.LFB66
 7975 001c 34010000 		.4byte	.LFE66
 7976 0020 00000000 		.4byte	.LFB67
 7977 0024 20000000 		.4byte	.LFE67
 7978 0028 00000000 		.4byte	.LFB68
 7979 002c 28000000 		.4byte	.LFE68
 7980 0030 00000000 		.4byte	.LFB69
 7981 0034 0A000000 		.4byte	.LFE69
 7982 0038 00000000 		.4byte	.LFB70
 7983 003c 28000000 		.4byte	.LFE70
 7984 0040 00000000 		.4byte	.LFB71
 7985 0044 98070000 		.4byte	.LFE71
 7986 0048 00000000 		.4byte	.LFB72
 7987 004c 60010000 		.4byte	.LFE72
 7988 0050 00000000 		.4byte	.LFB73
 7989 0054 18000000 		.4byte	.LFE73
 7990 0058 00000000 		.4byte	.LFB74
 7991 005c 18000000 		.4byte	.LFE74
 7992 0060 00000000 		.4byte	.LFB75
 7993 0064 54000000 		.4byte	.LFE75
 7994 0068 00000000 		.4byte	.LFB76
 7995 006c F4000000 		.4byte	.LFE76
 7996 0070 00000000 		.4byte	.LFB77
 7997 0074 18000000 		.4byte	.LFE77
 7998 0078 00000000 		.4byte	.LFB78
 7999 007c 18000000 		.4byte	.LFE78
 8000 0080 00000000 		.4byte	.LFB79
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 164


 8001 0084 22000000 		.4byte	.LFE79
 8002 0088 00000000 		.4byte	.LFB80
 8003 008c 1C000000 		.4byte	.LFE80
 8004 0090 00000000 		.4byte	.LFB81
 8005 0094 34000000 		.4byte	.LFE81
 8006 0098 00000000 		.4byte	.LFB82
 8007 009c 38000000 		.4byte	.LFE82
 8008 00a0 00000000 		.4byte	.LFB83
 8009 00a4 4C000000 		.4byte	.LFE83
 8010 00a8 00000000 		.4byte	.LFB84
 8011 00ac 38000000 		.4byte	.LFE84
 8012 00b0 00000000 		.4byte	.LFB85
 8013 00b4 38000000 		.4byte	.LFE85
 8014 00b8 00000000 		.4byte	.LFB86
 8015 00bc 38000000 		.4byte	.LFE86
 8016 00c0 00000000 		.4byte	.LFB87
 8017 00c4 14000000 		.4byte	.LFE87
 8018 00c8 00000000 		.4byte	.LFB88
 8019 00cc 18000000 		.4byte	.LFE88
 8020 00d0 00000000 		.4byte	.LFB89
 8021 00d4 18000000 		.4byte	.LFE89
 8022 00d8 00000000 		.4byte	.LFB90
 8023 00dc 18000000 		.4byte	.LFE90
 8024 00e0 00000000 		.4byte	.LFB91
 8025 00e4 18000000 		.4byte	.LFE91
 8026 00e8 00000000 		.4byte	.LFB92
 8027 00ec B8000000 		.4byte	.LFE92
 8028 00f0 00000000 		.4byte	.LFB93
 8029 00f4 44050000 		.4byte	.LFE93
 8030 00f8 00000000 		.4byte	.LFB94
 8031 00fc 40000000 		.4byte	.LFE94
 8032 0100 00000000 		.4byte	.LFB95
 8033 0104 40000000 		.4byte	.LFE95
 8034 0108 00000000 		.4byte	.LFB96
 8035 010c 30020000 		.4byte	.LFE96
 8036 0110 00000000 		.4byte	.LFB97
 8037 0114 0C000000 		.4byte	.LFE97
 8038 0118 00000000 		.4byte	.LFB98
 8039 011c 4C010000 		.4byte	.LFE98
 8040 0120 00000000 		.4byte	.LFB99
 8041 0124 0C000000 		.4byte	.LFE99
 8042 0128 00000000 		.4byte	.LFB100
 8043 012c C0000000 		.4byte	.LFE100
 8044 0130 00000000 		.4byte	.LFB101
 8045 0134 B8000000 		.4byte	.LFE101
 8046 0138 00000000 		.4byte	.LFB102
 8047 013c 4A000000 		.4byte	.LFE102
 8048 0140 00000000 		.4byte	.LFB103
 8049 0144 68000000 		.4byte	.LFE103
 8050 0148 00000000 		.4byte	.LFB104
 8051 014c 50000000 		.4byte	.LFE104
 8052 0150 00000000 		.4byte	.LFB105
 8053 0154 0C000000 		.4byte	.LFE105
 8054 0158 00000000 		.4byte	0
 8055 015c 00000000 		.4byte	0
 8056              		.section	.debug_line,"",%progbits
 8057              	.Ldebug_line0:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 165


 8058 0000 62080000 		.section	.debug_str,"MS",%progbits,1
 8058      02006701 
 8058      00000201 
 8058      FB0E0D00 
 8058      01010101 
 8059              	.LASF97:
 8060 0000 696E6974 		.ascii	"initTrackU\000"
 8060      54726163 
 8060      6B5500
 8061              	.LASF56:
 8062 000b 67325F73 		.ascii	"g2_speed\000"
 8062      70656564 
 8062      00
 8063              	.LASF102:
 8064 0014 6368616E 		.ascii	"changeToRF\000"
 8064      6765546F 
 8064      524600
 8065              	.LASF37:
 8066 001f 51554144 		.ascii	"QUAD_STOP\000"
 8066      5F53544F 
 8066      5000
 8067              	.LASF63:
 8068 0029 62757474 		.ascii	"button\000"
 8068      6F6E00
 8069              	.LASF128:
 8070 0030 74735F73 		.ascii	"ts_speed\000"
 8070      70656564 
 8070      00
 8071              	.LASF197:
 8072 0039 6C656674 		.ascii	"leftTurnCount\000"
 8072      5475726E 
 8072      436F756E 
 8072      7400
 8073              	.LASF166:
 8074 0047 696E6974 		.ascii	"initial_y_pos\000"
 8074      69616C5F 
 8074      795F706F 
 8074      7300
 8075              	.LASF65:
 8076 0055 6973725F 		.ascii	"isr_deadzone\000"
 8076      64656164 
 8076      7A6F6E65 
 8076      00
 8077              	.LASF142:
 8078 0062 64697265 		.ascii	"direction\000"
 8078      6374696F 
 8078      6E00
 8079              	.LASF189:
 8080 006c 70617468 		.ascii	"path\000"
 8080      00
 8081              	.LASF95:
 8082 0071 696E6974 		.ascii	"initBrake\000"
 8082      4272616B 
 8082      6500
 8083              	.LASF49:
 8084 007b 67305F64 		.ascii	"g0_direction\000"
 8084      69726563 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 166


 8084      74696F6E 
 8084      00
 8085              	.LASF61:
 8086 0088 64697374 		.ascii	"distTurned\000"
 8086      5475726E 
 8086      656400
 8087              	.LASF176:
 8088 0093 656E7472 		.ascii	"entry\000"
 8088      7900
 8089              	.LASF9:
 8090 0099 6C6F6E67 		.ascii	"long long unsigned int\000"
 8090      206C6F6E 
 8090      6720756E 
 8090      7369676E 
 8090      65642069 
 8091              	.LASF192:
 8092 00b0 726F626F 		.ascii	"robot_direction\000"
 8092      745F6469 
 8092      72656374 
 8092      696F6E00 
 8093              	.LASF135:
 8094 00c0 666C6167 		.ascii	"flag_packet\000"
 8094      5F706163 
 8094      6B657400 
 8095              	.LASF88:
 8096 00cc 7475726E 		.ascii	"turnRight\000"
 8096      52696768 
 8096      7400
 8097              	.LASF46:
 8098 00d6 67305F78 		.ascii	"g0_xpos\000"
 8098      706F7300 
 8099              	.LASF125:
 8100 00de 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8100      52784275 
 8100      66666572 
 8100      00
 8101              	.LASF158:
 8102 00eb 74617267 		.ascii	"target_distance_cm\000"
 8102      65745F64 
 8102      69737461 
 8102      6E63655F 
 8102      636D00
 8103              	.LASF127:
 8104 00fe 74735F75 		.ascii	"ts_update\000"
 8104      70646174 
 8104      6500
 8105              	.LASF35:
 8106 0108 555F5452 		.ascii	"U_TRACK\000"
 8106      41434B00 
 8107              	.LASF40:
 8108 0110 4D41505F 		.ascii	"MAP_TRAVERSE\000"
 8108      54524156 
 8108      45525345 
 8108      00
 8109              	.LASF81:
 8110 011d 72696768 		.ascii	"right\000"
 8110      7400
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 167


 8111              	.LASF121:
 8112 0123 73656E73 		.ascii	"sensorVals\000"
 8112      6F725661 
 8112      6C7300
 8113              	.LASF8:
 8114 012e 6C6F6E67 		.ascii	"long long int\000"
 8114      206C6F6E 
 8114      6720696E 
 8114      7400
 8115              	.LASF0:
 8116 013c 7369676E 		.ascii	"signed char\000"
 8116      65642063 
 8116      68617200 
 8117              	.LASF106:
 8118 0148 72696768 		.ascii	"rightSpeed\000"
 8118      74537065 
 8118      656400
 8119              	.LASF45:
 8120 0153 726F626F 		.ascii	"robot_orientation\000"
 8120      745F6F72 
 8120      69656E74 
 8120      6174696F 
 8120      6E00
 8121              	.LASF169:
 8122 0165 66726F6E 		.ascii	"frontSensors\000"
 8122      7453656E 
 8122      736F7273 
 8122      00
 8123              	.LASF113:
 8124 0172 74726163 		.ascii	"trackLineU\000"
 8124      6B4C696E 
 8124      655500
 8125              	.LASF130:
 8126 017d 666C6167 		.ascii	"flag_ts_enc\000"
 8126      5F74735F 
 8126      656E6300 
 8127              	.LASF178:
 8128 0189 62756666 		.ascii	"buffer_state\000"
 8128      65725F73 
 8128      74617465 
 8128      00
 8129              	.LASF92:
 8130 0196 696E6974 		.ascii	"initTurnRight\000"
 8130      5475726E 
 8130      52696768 
 8130      7400
 8131              	.LASF152:
 8132 01a4 64656164 		.ascii	"deadzone\000"
 8132      7A6F6E65 
 8132      00
 8133              	.LASF136:
 8134 01ad 666C6167 		.ascii	"flag_KB_string\000"
 8134      5F4B425F 
 8134      73747269 
 8134      6E6700
 8135              	.LASF112:
 8136 01bc 74726163 		.ascii	"trackLineZ\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 168


 8136      6B4C696E 
 8136      655A00
 8137              	.LASF89:
 8138 01c7 7475726E 		.ascii	"turnLeft\000"
 8138      4C656674 
 8138      00
 8139              	.LASF31:
 8140 01d0 73746174 		.ascii	"state\000"
 8140      6500
 8141              	.LASF4:
 8142 01d6 6C6F6E67 		.ascii	"long int\000"
 8142      20696E74 
 8142      00
 8143              	.LASF30:
 8144 01df 55545552 		.ascii	"UTURN\000"
 8144      4E00
 8145              	.LASF163:
 8146 01e5 71756164 		.ascii	"quad_per_cm\000"
 8146      5F706572 
 8146      5F636D00 
 8147              	.LASF15:
 8148 01f1 75696E74 		.ascii	"uint8\000"
 8148      3800
 8149              	.LASF116:
 8150 01f7 636F6E76 		.ascii	"converted_val\000"
 8150      65727465 
 8150      645F7661 
 8150      6C00
 8151              	.LASF75:
 8152 0205 7365744C 		.ascii	"setLeftDir\000"
 8152      65667444 
 8152      697200
 8153              	.LASF21:
 8154 0210 646F7562 		.ascii	"double\000"
 8154      6C6500
 8155              	.LASF137:
 8156 0217 64617461 		.ascii	"dataready_flag\000"
 8156      72656164 
 8156      795F666C 
 8156      616700
 8157              	.LASF59:
 8158 0226 6164635F 		.ascii	"adc_isr\000"
 8158      69737200 
 8159              	.LASF126:
 8160 022e 74735F65 		.ascii	"ts_enc\000"
 8160      6E6300
 8161              	.LASF134:
 8162 0235 666C6167 		.ascii	"flag_rx\000"
 8162      5F727800 
 8163              	.LASF17:
 8164 023d 75696E74 		.ascii	"uint32\000"
 8164      333200
 8165              	.LASF71:
 8166 0244 6E657874 		.ascii	"nextInstruction\000"
 8166      496E7374 
 8166      72756374 
 8166      696F6E00 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 169


 8167              	.LASF73:
 8168 0254 62797465 		.ascii	"byte_packet\000"
 8168      5F706163 
 8168      6B657400 
 8169              	.LASF175:
 8170 0260 6C696E65 		.ascii	"line\000"
 8170      00
 8171              	.LASF145:
 8172 0265 666C6167 		.ascii	"flag_calc_wheelspeed\000"
 8172      5F63616C 
 8172      635F7768 
 8172      65656C73 
 8172      70656564 
 8173              	.LASF57:
 8174 027a 67325F64 		.ascii	"g2_direction\000"
 8174      69726563 
 8174      74696F6E 
 8174      00
 8175              	.LASF172:
 8176 0287 70726576 		.ascii	"prevVoltage\000"
 8176      566F6C74 
 8176      61676500 
 8177              	.LASF146:
 8178 0293 71756164 		.ascii	"quad_count1\000"
 8178      5F636F75 
 8178      6E743100 
 8179              	.LASF147:
 8180 029f 71756164 		.ascii	"quad_count2\000"
 8180      5F636F75 
 8180      6E743200 
 8181              	.LASF157:
 8182 02ab 72696768 		.ascii	"rightSpeedLimit\000"
 8182      74537065 
 8182      65644C69 
 8182      6D697400 
 8183              	.LASF196:
 8184 02bb 696E7374 		.ascii	"instructionLength\000"
 8184      72756374 
 8184      696F6E4C 
 8184      656E6774 
 8184      6800
 8185              	.LASF39:
 8186 02cd 44455354 		.ascii	"DEST_TEST\000"
 8186      5F544553 
 8186      5400
 8187              	.LASF182:
 8188 02d7 74726163 		.ascii	"track_mode\000"
 8188      6B5F6D6F 
 8188      646500
 8189              	.LASF25:
 8190 02e2 52545552 		.ascii	"RTURN\000"
 8190      4E00
 8191              	.LASF191:
 8192 02e8 64657374 		.ascii	"destination\000"
 8192      696E6174 
 8192      696F6E00 
 8193              	.LASF60:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 170


 8194 02f4 6973725F 		.ascii	"isr_quad1\000"
 8194      71756164 
 8194      3100
 8195              	.LASF10:
 8196 02fe 756E7369 		.ascii	"unsigned int\000"
 8196      676E6564 
 8196      20696E74 
 8196      00
 8197              	.LASF155:
 8198 030b 72696768 		.ascii	"right_duty_cycle\000"
 8198      745F6475 
 8198      74795F63 
 8198      79636C65 
 8198      00
 8199              	.LASF202:
 8200 031c 64617461 		.ascii	"data_main\000"
 8200      5F6D6169 
 8200      6E00
 8201              	.LASF141:
 8202 0326 6164635F 		.ascii	"adc_result\000"
 8202      72657375 
 8202      6C7400
 8203              	.LASF187:
 8204 0331 73656E73 		.ascii	"sensorsDisabled\000"
 8204      6F727344 
 8204      69736162 
 8204      6C656400 
 8205              	.LASF140:
 8206 0341 666C6167 		.ascii	"flag_receive_ADC\000"
 8206      5F726563 
 8206      65697665 
 8206      5F414443 
 8206      00
 8207              	.LASF7:
 8208 0352 6C6F6E67 		.ascii	"long unsigned int\000"
 8208      20756E73 
 8208      69676E65 
 8208      6420696E 
 8208      7400
 8209              	.LASF96:
 8210 0364 696E6974 		.ascii	"initTrack\000"
 8210      54726163 
 8210      6B00
 8211              	.LASF93:
 8212 036e 696E6974 		.ascii	"initTurnU\000"
 8212      5475726E 
 8212      5500
 8213              	.LASF115:
 8214 0378 7363616C 		.ascii	"scalingFactor\000"
 8214      696E6746 
 8214      6163746F 
 8214      7200
 8215              	.LASF194:
 8216 0386 666F6F64 		.ascii	"food_length\000"
 8216      5F6C656E 
 8216      67746800 
 8217              	.LASF3:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 171


 8218 0392 73686F72 		.ascii	"short unsigned int\000"
 8218      7420756E 
 8218      7369676E 
 8218      65642069 
 8218      6E7400
 8219              	.LASF79:
 8220 03a5 73657453 		.ascii	"setSpeed\000"
 8220      70656564 
 8220      00
 8221              	.LASF18:
 8222 03ae 696E7438 		.ascii	"int8\000"
 8222      00
 8223              	.LASF23:
 8224 03b3 44524956 		.ascii	"DRIVE\000"
 8224      4500
 8225              	.LASF91:
 8226 03b9 696E6974 		.ascii	"initTurnLeft\000"
 8226      5475726E 
 8226      4C656674 
 8226      00
 8227              	.LASF103:
 8228 03c6 6368616E 		.ascii	"changeToBT\000"
 8228      6765546F 
 8228      425400
 8229              	.LASF27:
 8230 03d1 54524143 		.ascii	"TRACKING\000"
 8230      4B494E47 
 8230      00
 8231              	.LASF186:
 8232 03da 696E7374 		.ascii	"instructionCount\000"
 8232      72756374 
 8232      696F6E43 
 8232      6F756E74 
 8232      00
 8233              	.LASF170:
 8234 03eb 6C656674 		.ascii	"leftOn\000"
 8234      4F6E00
 8235              	.LASF122:
 8236 03f2 75736250 		.ascii	"usbPutString\000"
 8236      75745374 
 8236      72696E67 
 8236      00
 8237              	.LASF62:
 8238 03ff 53746F70 		.ascii	"Stop_on_line\000"
 8238      5F6F6E5F 
 8238      6C696E65 
 8238      00
 8239              	.LASF34:
 8240 040c 43555256 		.ascii	"CURVE_TRACK\000"
 8240      455F5452 
 8240      41434B00 
 8241              	.LASF5:
 8242 0418 5F5F696E 		.ascii	"__int32_t\000"
 8242      7433325F 
 8242      7400
 8243              	.LASF36:
 8244 0422 53515541 		.ascii	"SQUARE_TRACK\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 172


 8244      52455F54 
 8244      5241434B 
 8244      00
 8245              	.LASF129:
 8246 042f 74735F64 		.ascii	"ts_display\000"
 8246      6973706C 
 8246      617900
 8247              	.LASF124:
 8248 043a 75617274 		.ascii	"uart_set_PWM\000"
 8248      5F736574 
 8248      5F50574D 
 8248      00
 8249              	.LASF198:
 8250 0447 72696768 		.ascii	"rightTurnCount\000"
 8250      74547572 
 8250      6E436F75 
 8250      6E7400
 8251              	.LASF66:
 8252 0456 6973725F 		.ascii	"isr_turn_timer\000"
 8252      7475726E 
 8252      5F74696D 
 8252      657200
 8253              	.LASF109:
 8254 0465 696E7465 		.ascii	"interCalc\000"
 8254      7243616C 
 8254      6300
 8255              	.LASF132:
 8256 046f 666C6167 		.ascii	"flag_ts_speed\000"
 8256      5F74735F 
 8256      73706565 
 8256      6400
 8257              	.LASF41:
 8258 047d 72737369 		.ascii	"rssi\000"
 8258      00
 8259              	.LASF52:
 8260 0482 67315F73 		.ascii	"g1_speed\000"
 8260      70656564 
 8260      00
 8261              	.LASF11:
 8262 048b 73697A65 		.ascii	"sizetype\000"
 8262      74797065 
 8262      00
 8263              	.LASF139:
 8264 0494 666C6167 		.ascii	"flag_print_rf\000"
 8264      5F707269 
 8264      6E745F72 
 8264      6600
 8265              	.LASF179:
 8266 04a2 73797374 		.ascii	"system_state\000"
 8266      656D5F73 
 8266      74617465 
 8266      00
 8267              	.LASF51:
 8268 04af 67315F79 		.ascii	"g1_ypos\000"
 8268      706F7300 
 8269              	.LASF53:
 8270 04b7 67315F64 		.ascii	"g1_direction\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 173


 8270      69726563 
 8270      74696F6E 
 8270      00
 8271              	.LASF104:
 8272 04c4 51756164 		.ascii	"Quad_Dec_response\000"
 8272      5F446563 
 8272      5F726573 
 8272      706F6E73 
 8272      6500
 8273              	.LASF24:
 8274 04d6 4C545552 		.ascii	"LTURN\000"
 8274      4E00
 8275              	.LASF167:
 8276 04dc 6272616B 		.ascii	"brakeFlag\000"
 8276      65466C61 
 8276      6700
 8277              	.LASF55:
 8278 04e6 67325F79 		.ascii	"g2_ypos\000"
 8278      706F7300 
 8279              	.LASF117:
 8280 04ee 72657375 		.ascii	"result_str\000"
 8280      6C745F73 
 8280      747200
 8281              	.LASF180:
 8282 04f9 70726576 		.ascii	"prev_movement_state\000"
 8282      5F6D6F76 
 8282      656D656E 
 8282      745F7374 
 8282      61746500 
 8283              	.LASF199:
 8284 050d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 8284      4320342E 
 8284      392E3320 
 8284      32303135 
 8284      30333033 
 8285 0540 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 8285      20726576 
 8285      6973696F 
 8285      6E203232 
 8285      31323230 
 8286 0573 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8286      66756E63 
 8286      74696F6E 
 8286      2D736563 
 8286      74696F6E 
 8287              	.LASF101:
 8288 059b 42545F72 		.ascii	"BT_rxInt\000"
 8288      78496E74 
 8288      00
 8289              	.LASF160:
 8290 05a4 74617267 		.ascii	"target_distance_quad\000"
 8290      65745F64 
 8290      69737461 
 8290      6E63655F 
 8290      71756164 
 8291              	.LASF138:
 8292 05b9 666C6167 		.ascii	"flag_rf_transmission_active\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 174


 8292      5F72665F 
 8292      7472616E 
 8292      736D6973 
 8292      73696F6E 
 8293              	.LASF74:
 8294 05d5 73747269 		.ascii	"string_packet\000"
 8294      6E675F70 
 8294      61636B65 
 8294      7400
 8295              	.LASF20:
 8296 05e3 666C6F61 		.ascii	"float\000"
 8296      7400
 8297              	.LASF28:
 8298 05e9 54524143 		.ascii	"TRACKING_U\000"
 8298      4B494E47 
 8298      5F5500
 8299              	.LASF165:
 8300 05f4 696E6974 		.ascii	"initial_x_pos\000"
 8300      69616C5F 
 8300      785F706F 
 8300      7300
 8301              	.LASF87:
 8302 0602 64726976 		.ascii	"driveForwards\000"
 8302      65466F72 
 8302      77617264 
 8302      7300
 8303              	.LASF119:
 8304 0610 7072696E 		.ascii	"printString\000"
 8304      74537472 
 8304      696E6700 
 8305              	.LASF168:
 8306 061c 706F7274 		.ascii	"portOpen\000"
 8306      4F70656E 
 8306      00
 8307              	.LASF76:
 8308 0625 73657452 		.ascii	"setRightDir\000"
 8308      69676874 
 8308      44697200 
 8309              	.LASF148:
 8310 0631 6C617374 		.ascii	"last_quad_count1\000"
 8310      5F717561 
 8310      645F636F 
 8310      756E7431 
 8310      00
 8311              	.LASF149:
 8312 0642 6C617374 		.ascii	"last_quad_count2\000"
 8312      5F717561 
 8312      645F636F 
 8312      756E7432 
 8312      00
 8313              	.LASF29:
 8314 0653 54524143 		.ascii	"TRACKING_SOFT\000"
 8314      4B494E47 
 8314      5F534F46 
 8314      5400
 8315              	.LASF143:
 8316 0661 42494E5F 		.ascii	"BIN_ENABLED\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 175


 8316      454E4142 
 8316      4C454400 
 8317              	.LASF13:
 8318 066d 696E7433 		.ascii	"int32_t\000"
 8318      325F7400 
 8319              	.LASF1:
 8320 0675 756E7369 		.ascii	"unsigned char\000"
 8320      676E6564 
 8320      20636861 
 8320      7200
 8321              	.LASF16:
 8322 0683 75696E74 		.ascii	"uint16\000"
 8322      313600
 8323              	.LASF38:
 8324 068a 52465F53 		.ascii	"RF_STOP\000"
 8324      544F5000 
 8325              	.LASF86:
 8326 0692 6272616B 		.ascii	"brakeMotor\000"
 8326      654D6F74 
 8326      6F7200
 8327              	.LASF54:
 8328 069d 67325F78 		.ascii	"g2_xpos\000"
 8328      706F7300 
 8329              	.LASF110:
 8330 06a5 6E657874 		.ascii	"nextSpeed\000"
 8330      53706565 
 8330      6400
 8331              	.LASF2:
 8332 06af 73686F72 		.ascii	"short int\000"
 8332      7420696E 
 8332      7400
 8333              	.LASF33:
 8334 06b9 4E4F5F54 		.ascii	"NO_TRACK\000"
 8334      5241434B 
 8334      00
 8335              	.LASF107:
 8336 06c2 7363616C 		.ascii	"scalingLeft\000"
 8336      696E674C 
 8336      65667400 
 8337              	.LASF77:
 8338 06ce 68616E64 		.ascii	"handle_rx_binary\000"
 8338      6C655F72 
 8338      785F6269 
 8338      6E617279 
 8338      00
 8339              	.LASF99:
 8340 06df 7278496E 		.ascii	"rxInt\000"
 8340      7400
 8341              	.LASF183:
 8342 06e5 62797465 		.ascii	"byteCount\000"
 8342      436F756E 
 8342      7400
 8343              	.LASF64:
 8344 06ef 6973725F 		.ascii	"isr_adcTimer\000"
 8344      61646354 
 8344      696D6572 
 8344      00
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 176


 8345              	.LASF111:
 8346 06fc 74726163 		.ascii	"trackLine\000"
 8346      6B4C696E 
 8346      6500
 8347              	.LASF85:
 8348 0706 6272616B 		.ascii	"brakeRight\000"
 8348      65526967 
 8348      687400
 8349              	.LASF133:
 8350 0711 666C6167 		.ascii	"flag_ts_display\000"
 8350      5F74735F 
 8350      64697370 
 8350      6C617900 
 8351              	.LASF26:
 8352 0721 53544F50 		.ascii	"STOPPED\000"
 8352      50454400 
 8353              	.LASF72:
 8354 0729 7061636B 		.ascii	"packet_bytes\000"
 8354      65745F62 
 8354      79746573 
 8354      00
 8355              	.LASF22:
 8356 0736 6C6F6E67 		.ascii	"long double\000"
 8356      20646F75 
 8356      626C6500 
 8357              	.LASF193:
 8358 0742 74726163 		.ascii	"tracked_direction\000"
 8358      6B65645F 
 8358      64697265 
 8358      6374696F 
 8358      6E00
 8359              	.LASF12:
 8360 0754 63686172 		.ascii	"char\000"
 8360      00
 8361              	.LASF32:
 8362 0759 6D6F6465 		.ascii	"mode\000"
 8362      00
 8363              	.LASF195:
 8364 075e 696E7374 		.ascii	"instructions\000"
 8364      72756374 
 8364      696F6E73 
 8364      00
 8365              	.LASF42:
 8366 076b 696E6465 		.ascii	"index\000"
 8366      7800
 8367              	.LASF188:
 8368 0771 666F6F64 		.ascii	"food_list\000"
 8368      5F6C6973 
 8368      7400
 8369              	.LASF68:
 8370 077b 61637469 		.ascii	"actionDebounce\000"
 8370      6F6E4465 
 8370      626F756E 
 8370      636500
 8371              	.LASF105:
 8372 078a 6C656674 		.ascii	"leftSpeed\000"
 8372      53706565 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 177


 8372      6400
 8373              	.LASF6:
 8374 0794 5F5F7569 		.ascii	"__uint32_t\000"
 8374      6E743332 
 8374      5F7400
 8375              	.LASF131:
 8376 079f 666C6167 		.ascii	"flag_ts_update\000"
 8376      5F74735F 
 8376      75706461 
 8376      746500
 8377              	.LASF174:
 8378 07ae 64697370 		.ascii	"displaystring\000"
 8378      6C617973 
 8378      7472696E 
 8378      6700
 8379              	.LASF47:
 8380 07bc 67305F79 		.ascii	"g0_ypos\000"
 8380      706F7300 
 8381              	.LASF156:
 8382 07c4 6C656674 		.ascii	"leftSpeedLimit\000"
 8382      53706565 
 8382      644C696D 
 8382      697400
 8383              	.LASF43:
 8384 07d3 726F626F 		.ascii	"robot_xpos\000"
 8384      745F7870 
 8384      6F7300
 8385              	.LASF90:
 8386 07de 7475726E 		.ascii	"turnU\000"
 8386      5500
 8387              	.LASF184:
 8388 07e4 7061636B 		.ascii	"packet\000"
 8388      657400
 8389              	.LASF83:
 8390 07eb 636F756E 		.ascii	"countsRight\000"
 8390      74735269 
 8390      67687400 
 8391              	.LASF118:
 8392 07f7 7072696E 		.ascii	"print_RF\000"
 8392      745F5246 
 8392      00
 8393              	.LASF84:
 8394 0800 6272616B 		.ascii	"brakeLeft\000"
 8394      654C6566 
 8394      7400
 8395              	.LASF177:
 8396 080a 75736242 		.ascii	"usbBuffer\000"
 8396      75666665 
 8396      7200
 8397              	.LASF50:
 8398 0814 67315F78 		.ascii	"g1_xpos\000"
 8398      706F7300 
 8399              	.LASF100:
 8400 081c 72665F63 		.ascii	"rf_char\000"
 8400      68617200 
 8401              	.LASF164:
 8402 0824 696E6974 		.ascii	"initial_pos_valid\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 178


 8402      69616C5F 
 8402      706F735F 
 8402      76616C69 
 8402      6400
 8403              	.LASF78:
 8404 0836 72657665 		.ascii	"reverseDirection\000"
 8404      72736544 
 8404      69726563 
 8404      74696F6E 
 8404      00
 8405              	.LASF173:
 8406 0847 70726576 		.ascii	"prevVoltage2\000"
 8406      566F6C74 
 8406      61676532 
 8406      00
 8407              	.LASF94:
 8408 0854 696E6974 		.ascii	"initForward\000"
 8408      466F7277 
 8408      61726400 
 8409              	.LASF14:
 8410 0860 75696E74 		.ascii	"uint32_t\000"
 8410      33325F74 
 8410      00
 8411              	.LASF154:
 8412 0869 6C656674 		.ascii	"left_duty_cycle\000"
 8412      5F647574 
 8412      795F6379 
 8412      636C6500 
 8413              	.LASF70:
 8414 0879 6E657874 		.ascii	"nextStepDist\000"
 8414      53746570 
 8414      44697374 
 8414      00
 8415              	.LASF159:
 8416 0886 61636375 		.ascii	"accum_dist\000"
 8416      6D5F6469 
 8416      737400
 8417              	.LASF58:
 8418 0891 42545F74 		.ascii	"BT_txInt\000"
 8418      78496E74 
 8418      00
 8419              	.LASF181:
 8420 089a 6D6F7665 		.ascii	"movement_state\000"
 8420      6D656E74 
 8420      5F737461 
 8420      746500
 8421              	.LASF171:
 8422 08a9 72696768 		.ascii	"rightOn\000"
 8422      744F6E00 
 8423              	.LASF144:
 8424 08b1 42545F45 		.ascii	"BT_ENABLED\000"
 8424      4E41424C 
 8424      454400
 8425              	.LASF123:
 8426 08bc 75736250 		.ascii	"usbPutChar\000"
 8426      75744368 
 8426      617200
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 179


 8427              	.LASF98:
 8428 08c7 696E6974 		.ascii	"inittrackLineZ\000"
 8428      74726163 
 8428      6B4C696E 
 8428      655A00
 8429              	.LASF108:
 8430 08d6 7363616C 		.ascii	"scalingRight\000"
 8430      696E6752 
 8430      69676874 
 8430      00
 8431              	.LASF161:
 8432 08e3 72656163 		.ascii	"reached_target\000"
 8432      6865645F 
 8432      74617267 
 8432      657400
 8433              	.LASF44:
 8434 08f2 726F626F 		.ascii	"robot_ypos\000"
 8434      745F7970 
 8434      6F7300
 8435              	.LASF19:
 8436 08fd 696E7431 		.ascii	"int16\000"
 8436      3600
 8437              	.LASF82:
 8438 0903 636F756E 		.ascii	"countsLeft\000"
 8438      74734C65 
 8438      667400
 8439              	.LASF153:
 8440 090e 73746172 		.ascii	"start_turn_count\000"
 8440      745F7475 
 8440      726E5F63 
 8440      6F756E74 
 8440      00
 8441              	.LASF185:
 8442 091f 73706565 		.ascii	"speed\000"
 8442      6400
 8443              	.LASF162:
 8444 0925 6F766572 		.ascii	"overshot_target\000"
 8444      73686F74 
 8444      5F746172 
 8444      67657400 
 8445              	.LASF69:
 8446 0935 6E657874 		.ascii	"nextStep\000"
 8446      53746570 
 8446      00
 8447              	.LASF200:
 8448 093e 2E5C6D61 		.ascii	".\\main.c\000"
 8448      696E2E63 
 8448      00
 8449              	.LASF150:
 8450 0947 71756164 		.ascii	"quad_diff1\000"
 8450      5F646966 
 8450      663100
 8451              	.LASF151:
 8452 0952 71756164 		.ascii	"quad_diff2\000"
 8452      5F646966 
 8452      663200
 8453              	.LASF190:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\cc79mD98.s 			page 180


 8454 095d 73746172 		.ascii	"start\000"
 8454      7400
 8455              	.LASF67:
 8456 0963 6D61696E 		.ascii	"main\000"
 8456      00
 8457              	.LASF80:
 8458 0968 6C656674 		.ascii	"left\000"
 8458      00
 8459              	.LASF48:
 8460 096d 67305F73 		.ascii	"g0_speed\000"
 8460      70656564 
 8460      00
 8461              	.LASF201:
 8462 0976 433A5C55 		.ascii	"C:\\Users\\Logan\\Desktop\\repos\\CS301-Team-Repo\\"
 8462      73657273 
 8462      5C4C6F67 
 8462      616E5C44 
 8462      65736B74 
 8463 09a3 43533330 		.ascii	"CS301_Class.cydsn\000"
 8463      315F436C 
 8463      6173732E 
 8463      63796473 
 8463      6E00
 8464              	.LASF114:
 8465 09b5 7072696E 		.ascii	"print_ADC\000"
 8465      745F4144 
 8465      4300
 8466              	.LASF120:
 8467 09bf 72656164 		.ascii	"readFrontSensors\000"
 8467      46726F6E 
 8467      7453656E 
 8467      736F7273 
 8467      00
 8468              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
