ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	flag_print_rf
  95              		.bss
  96              		.type	flag_print_rf, %object
  97              		.size	flag_print_rf, 1
  98              	flag_print_rf:
  99 0012 00       		.space	1
 100              		.global	flag_receive_ADC
 101              		.type	flag_receive_ADC, %object
 102              		.size	flag_receive_ADC, 1
 103              	flag_receive_ADC:
 104 0013 00       		.space	1
 105              		.comm	adc_result,2,2
 106              		.global	direction
 107              		.type	direction, %object
 108              		.size	direction, 1
 109              	direction:
 110 0014 00       		.space	1
 111              		.global	BIN_ENABLED
 112              		.type	BIN_ENABLED, %object
 113              		.size	BIN_ENABLED, 1
 114              	BIN_ENABLED:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 3


 115 0015 00       		.space	1
 116              		.global	BT_ENABLED
 117              		.data
 118              		.type	BT_ENABLED, %object
 119              		.size	BT_ENABLED, 1
 120              	BT_ENABLED:
 121 0001 01       		.byte	1
 122              		.global	flag_calc_wheelspeed
 123              		.bss
 124              		.type	flag_calc_wheelspeed, %object
 125              		.size	flag_calc_wheelspeed, 1
 126              	flag_calc_wheelspeed:
 127 0016 00       		.space	1
 128              		.global	quad_count1
 129 0017 00       		.align	1
 130              		.type	quad_count1, %object
 131              		.size	quad_count1, 2
 132              	quad_count1:
 133 0018 0000     		.space	2
 134              		.global	quad_count2
 135              		.align	1
 136              		.type	quad_count2, %object
 137              		.size	quad_count2, 2
 138              	quad_count2:
 139 001a 0000     		.space	2
 140              		.global	last_quad_count1
 141              		.align	1
 142              		.type	last_quad_count1, %object
 143              		.size	last_quad_count1, 2
 144              	last_quad_count1:
 145 001c 0000     		.space	2
 146              		.global	last_quad_count2
 147              		.align	1
 148              		.type	last_quad_count2, %object
 149              		.size	last_quad_count2, 2
 150              	last_quad_count2:
 151 001e 0000     		.space	2
 152              		.global	quad_diff1
 153              		.align	1
 154              		.type	quad_diff1, %object
 155              		.size	quad_diff1, 2
 156              	quad_diff1:
 157 0020 0000     		.space	2
 158              		.global	quad_diff2
 159              		.align	1
 160              		.type	quad_diff2, %object
 161              		.size	quad_diff2, 2
 162              	quad_diff2:
 163 0022 0000     		.space	2
 164              		.global	deadzone
 165              		.type	deadzone, %object
 166              		.size	deadzone, 1
 167              	deadzone:
 168 0024 00       		.space	1
 169              		.global	start_turn_count
 170 0025 00       		.align	1
 171              		.type	start_turn_count, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 4


 172              		.size	start_turn_count, 2
 173              	start_turn_count:
 174 0026 0000     		.space	2
 175              		.global	left_duty_cycle
 176              		.align	1
 177              		.type	left_duty_cycle, %object
 178              		.size	left_duty_cycle, 2
 179              	left_duty_cycle:
 180 0028 0000     		.space	2
 181              		.global	right_duty_cycle
 182              		.align	1
 183              		.type	right_duty_cycle, %object
 184              		.size	right_duty_cycle, 2
 185              	right_duty_cycle:
 186 002a 0000     		.space	2
 187              		.global	leftSpeedLimit
 188              		.align	1
 189              		.type	leftSpeedLimit, %object
 190              		.size	leftSpeedLimit, 2
 191              	leftSpeedLimit:
 192 002c 0000     		.space	2
 193              		.global	rightSpeedLimit
 194              		.align	1
 195              		.type	rightSpeedLimit, %object
 196              		.size	rightSpeedLimit, 2
 197              	rightSpeedLimit:
 198 002e 0000     		.space	2
 199              		.global	target_distance_cm
 200              		.data
 201              		.align	1
 202              		.type	target_distance_cm, %object
 203              		.size	target_distance_cm, 2
 204              	target_distance_cm:
 205 0002 6400     		.short	100
 206              		.global	accum_dist
 207              		.bss
 208              		.align	1
 209              		.type	accum_dist, %object
 210              		.size	accum_dist, 2
 211              	accum_dist:
 212 0030 0000     		.space	2
 213              		.global	target_distance_quad
 214              		.align	1
 215              		.type	target_distance_quad, %object
 216              		.size	target_distance_quad, 2
 217              	target_distance_quad:
 218 0032 0000     		.space	2
 219              		.global	reached_target
 220              		.type	reached_target, %object
 221              		.size	reached_target, 1
 222              	reached_target:
 223 0034 00       		.space	1
 224              		.global	overshot_target
 225              		.type	overshot_target, %object
 226              		.size	overshot_target, 1
 227              	overshot_target:
 228 0035 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 5


 229              		.global	quad_per_cm
 230              		.data
 231              		.align	2
 232              		.type	quad_per_cm, %object
 233              		.size	quad_per_cm, 4
 234              	quad_per_cm:
 235 0004 F0A73241 		.word	1093838832
 236              		.global	initial_pos_valid
 237              		.bss
 238              		.type	initial_pos_valid, %object
 239              		.size	initial_pos_valid, 1
 240              	initial_pos_valid:
 241 0036 00       		.space	1
 242              		.global	initial_x_pos
 243 0037 00       		.align	1
 244              		.type	initial_x_pos, %object
 245              		.size	initial_x_pos, 2
 246              	initial_x_pos:
 247 0038 0000     		.space	2
 248              		.global	initial_y_pos
 249              		.align	1
 250              		.type	initial_y_pos, %object
 251              		.size	initial_y_pos, 2
 252              	initial_y_pos:
 253 003a 0000     		.space	2
 254              		.comm	brakeFlag,1,1
 255              		.global	portOpen
 256              		.data
 257              		.type	portOpen, %object
 258              		.size	portOpen, 1
 259              	portOpen:
 260 0008 01       		.byte	1
 261              		.comm	frontSensors,5,4
 262              		.comm	prevVoltage,2,2
 263              		.comm	prevVoltage2,2,2
 264              		.global	displaystring
 265 0009 000000   		.align	2
 266              		.type	displaystring, %object
 267              		.size	displaystring, 64
 268              	displaystring:
 269 000c 43533330 		.ascii	"CS301 2016\012\000"
 269      31203230 
 269      31360A00 
 270 0018 00000000 		.space	52
 270      00000000 
 270      00000000 
 270      00000000 
 270      00000000 
 271              		.comm	line,64,4
 272              		.comm	entry,64,4
 273              		.comm	usbBuffer,64,4
 274              		.comm	buffer_state,32,4
 275              		.comm	system_state,32,4
 276              		.global	prev_movement_state
 277              		.type	prev_movement_state, %object
 278              		.size	prev_movement_state, 1
 279              	prev_movement_state:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 6


 280 004c 03       		.byte	3
 281              		.global	movement_state
 282              		.type	movement_state, %object
 283              		.size	movement_state, 1
 284              	movement_state:
 285 004d 03       		.byte	3
 286              		.global	track_mode
 287              		.bss
 288              		.type	track_mode, %object
 289              		.size	track_mode, 1
 290              	track_mode:
 291 003c 00       		.space	1
 292              		.global	byteCount
 293              		.type	byteCount, %object
 294              		.size	byteCount, 1
 295              	byteCount:
 296 003d 00       		.space	1
 297              		.comm	packet,2,4
 298              		.global	speed
 299              		.data
 300 004e 0000     		.align	3
 301              		.type	speed, %object
 302              		.size	speed, 8
 303              	speed:
 304 0050 00000000 		.word	0
 305 0054 00002E40 		.word	1076756480
 306              		.comm	tracked_direction,4,4
 307              		.global	instructions
 308              		.bss
 309 003e 0000     		.align	2
 310              		.type	instructions, %object
 311              		.size	instructions, 800
 312              	instructions:
 313 0040 00000000 		.space	800
 313      00000000 
 313      00000000 
 313      00000000 
 313      00000000 
 314              		.global	instructionCount
 315              		.align	1
 316              		.type	instructionCount, %object
 317              		.size	instructionCount, 2
 318              	instructionCount:
 319 0360 0000     		.space	2
 320              		.global	instructionLength
 321              		.align	1
 322              		.type	instructionLength, %object
 323              		.size	instructionLength, 2
 324              	instructionLength:
 325 0362 0000     		.space	2
 326              		.global	sensorsDisabled
 327              		.align	2
 328              		.type	sensorsDisabled, %object
 329              		.size	sensorsDisabled, 4
 330              	sensorsDisabled:
 331 0364 00000000 		.space	4
 332              		.global	robot_direction
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 7


 333              		.data
 334              		.align	2
 335              		.type	robot_direction, %object
 336              		.size	robot_direction, 4
 337              	robot_direction:
 338 0058 02000000 		.word	2
 339              		.global	path
 340              		.bss
 341              		.align	2
 342              		.type	path, %object
 343              		.size	path, 9600
 344              	path:
 345 0368 00000000 		.space	9600
 345      00000000 
 345      00000000 
 345      00000000 
 345      00000000 
 346              		.global	start
 347              		.data
 348              		.align	2
 349              		.type	start, %object
 350              		.size	start, 8
 351              	start:
 352 005c 01000000 		.word	1
 353 0060 01000000 		.word	1
 354              		.global	destination
 355              		.align	2
 356              		.type	destination, %object
 357              		.size	destination, 8
 358              	destination:
 359 0064 0D000000 		.word	13
 360 0068 0B000000 		.word	11
 361              		.global	map
 362              		.align	2
 363              		.type	map, %object
 364              		.size	map, 1140
 365              	map:
 366 006c 01000000 		.word	1
 367 0070 01000000 		.word	1
 368 0074 01000000 		.word	1
 369 0078 01000000 		.word	1
 370 007c 01000000 		.word	1
 371 0080 01000000 		.word	1
 372 0084 01000000 		.word	1
 373 0088 01000000 		.word	1
 374 008c 01000000 		.word	1
 375 0090 01000000 		.word	1
 376 0094 01000000 		.word	1
 377 0098 01000000 		.word	1
 378 009c 01000000 		.word	1
 379 00a0 01000000 		.word	1
 380 00a4 01000000 		.word	1
 381 00a8 01000000 		.word	1
 382 00ac 01000000 		.word	1
 383 00b0 01000000 		.word	1
 384 00b4 01000000 		.word	1
 385 00b8 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 8


 386 00bc 00000000 		.word	0
 387 00c0 00000000 		.word	0
 388 00c4 00000000 		.word	0
 389 00c8 00000000 		.word	0
 390 00cc 00000000 		.word	0
 391 00d0 01000000 		.word	1
 392 00d4 01000000 		.word	1
 393 00d8 01000000 		.word	1
 394 00dc 00000000 		.word	0
 395 00e0 00000000 		.word	0
 396 00e4 00000000 		.word	0
 397 00e8 00000000 		.word	0
 398 00ec 00000000 		.word	0
 399 00f0 00000000 		.word	0
 400 00f4 00000000 		.word	0
 401 00f8 00000000 		.word	0
 402 00fc 00000000 		.word	0
 403 0100 01000000 		.word	1
 404 0104 01000000 		.word	1
 405 0108 01000000 		.word	1
 406 010c 01000000 		.word	1
 407 0110 01000000 		.word	1
 408 0114 01000000 		.word	1
 409 0118 00000000 		.word	0
 410 011c 00000000 		.word	0
 411 0120 00000000 		.word	0
 412 0124 00000000 		.word	0
 413 0128 00000000 		.word	0
 414 012c 01000000 		.word	1
 415 0130 00000000 		.word	0
 416 0134 01000000 		.word	1
 417 0138 00000000 		.word	0
 418 013c 01000000 		.word	1
 419 0140 00000000 		.word	0
 420 0144 01000000 		.word	1
 421 0148 01000000 		.word	1
 422 014c 01000000 		.word	1
 423 0150 01000000 		.word	1
 424 0154 01000000 		.word	1
 425 0158 01000000 		.word	1
 426 015c 01000000 		.word	1
 427 0160 01000000 		.word	1
 428 0164 00000000 		.word	0
 429 0168 01000000 		.word	1
 430 016c 01000000 		.word	1
 431 0170 01000000 		.word	1
 432 0174 00000000 		.word	0
 433 0178 00000000 		.word	0
 434 017c 00000000 		.word	0
 435 0180 01000000 		.word	1
 436 0184 00000000 		.word	0
 437 0188 01000000 		.word	1
 438 018c 00000000 		.word	0
 439 0190 01000000 		.word	1
 440 0194 01000000 		.word	1
 441 0198 01000000 		.word	1
 442 019c 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 9


 443 01a0 00000000 		.word	0
 444 01a4 00000000 		.word	0
 445 01a8 00000000 		.word	0
 446 01ac 00000000 		.word	0
 447 01b0 00000000 		.word	0
 448 01b4 00000000 		.word	0
 449 01b8 00000000 		.word	0
 450 01bc 01000000 		.word	1
 451 01c0 01000000 		.word	1
 452 01c4 01000000 		.word	1
 453 01c8 00000000 		.word	0
 454 01cc 01000000 		.word	1
 455 01d0 00000000 		.word	0
 456 01d4 01000000 		.word	1
 457 01d8 00000000 		.word	0
 458 01dc 00000000 		.word	0
 459 01e0 00000000 		.word	0
 460 01e4 01000000 		.word	1
 461 01e8 01000000 		.word	1
 462 01ec 00000000 		.word	0
 463 01f0 01000000 		.word	1
 464 01f4 01000000 		.word	1
 465 01f8 01000000 		.word	1
 466 01fc 00000000 		.word	0
 467 0200 01000000 		.word	1
 468 0204 00000000 		.word	0
 469 0208 00000000 		.word	0
 470 020c 00000000 		.word	0
 471 0210 00000000 		.word	0
 472 0214 00000000 		.word	0
 473 0218 00000000 		.word	0
 474 021c 00000000 		.word	0
 475 0220 01000000 		.word	1
 476 0224 01000000 		.word	1
 477 0228 01000000 		.word	1
 478 022c 00000000 		.word	0
 479 0230 01000000 		.word	1
 480 0234 01000000 		.word	1
 481 0238 00000000 		.word	0
 482 023c 00000000 		.word	0
 483 0240 00000000 		.word	0
 484 0244 01000000 		.word	1
 485 0248 00000000 		.word	0
 486 024c 01000000 		.word	1
 487 0250 01000000 		.word	1
 488 0254 01000000 		.word	1
 489 0258 01000000 		.word	1
 490 025c 01000000 		.word	1
 491 0260 00000000 		.word	0
 492 0264 01000000 		.word	1
 493 0268 01000000 		.word	1
 494 026c 01000000 		.word	1
 495 0270 01000000 		.word	1
 496 0274 01000000 		.word	1
 497 0278 00000000 		.word	0
 498 027c 01000000 		.word	1
 499 0280 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 10


 500 0284 00000000 		.word	0
 501 0288 01000000 		.word	1
 502 028c 00000000 		.word	0
 503 0290 01000000 		.word	1
 504 0294 00000000 		.word	0
 505 0298 00000000 		.word	0
 506 029c 00000000 		.word	0
 507 02a0 00000000 		.word	0
 508 02a4 00000000 		.word	0
 509 02a8 00000000 		.word	0
 510 02ac 00000000 		.word	0
 511 02b0 00000000 		.word	0
 512 02b4 00000000 		.word	0
 513 02b8 00000000 		.word	0
 514 02bc 00000000 		.word	0
 515 02c0 00000000 		.word	0
 516 02c4 00000000 		.word	0
 517 02c8 01000000 		.word	1
 518 02cc 01000000 		.word	1
 519 02d0 00000000 		.word	0
 520 02d4 01000000 		.word	1
 521 02d8 00000000 		.word	0
 522 02dc 00000000 		.word	0
 523 02e0 00000000 		.word	0
 524 02e4 01000000 		.word	1
 525 02e8 00000000 		.word	0
 526 02ec 01000000 		.word	1
 527 02f0 01000000 		.word	1
 528 02f4 01000000 		.word	1
 529 02f8 00000000 		.word	0
 530 02fc 01000000 		.word	1
 531 0300 01000000 		.word	1
 532 0304 01000000 		.word	1
 533 0308 00000000 		.word	0
 534 030c 01000000 		.word	1
 535 0310 01000000 		.word	1
 536 0314 01000000 		.word	1
 537 0318 01000000 		.word	1
 538 031c 00000000 		.word	0
 539 0320 01000000 		.word	1
 540 0324 01000000 		.word	1
 541 0328 01000000 		.word	1
 542 032c 00000000 		.word	0
 543 0330 01000000 		.word	1
 544 0334 00000000 		.word	0
 545 0338 01000000 		.word	1
 546 033c 01000000 		.word	1
 547 0340 01000000 		.word	1
 548 0344 00000000 		.word	0
 549 0348 01000000 		.word	1
 550 034c 01000000 		.word	1
 551 0350 01000000 		.word	1
 552 0354 00000000 		.word	0
 553 0358 00000000 		.word	0
 554 035c 00000000 		.word	0
 555 0360 01000000 		.word	1
 556 0364 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 11


 557 0368 00000000 		.word	0
 558 036c 01000000 		.word	1
 559 0370 01000000 		.word	1
 560 0374 01000000 		.word	1
 561 0378 00000000 		.word	0
 562 037c 01000000 		.word	1
 563 0380 00000000 		.word	0
 564 0384 00000000 		.word	0
 565 0388 00000000 		.word	0
 566 038c 00000000 		.word	0
 567 0390 00000000 		.word	0
 568 0394 00000000 		.word	0
 569 0398 00000000 		.word	0
 570 039c 01000000 		.word	1
 571 03a0 01000000 		.word	1
 572 03a4 01000000 		.word	1
 573 03a8 00000000 		.word	0
 574 03ac 01000000 		.word	1
 575 03b0 01000000 		.word	1
 576 03b4 00000000 		.word	0
 577 03b8 00000000 		.word	0
 578 03bc 00000000 		.word	0
 579 03c0 00000000 		.word	0
 580 03c4 00000000 		.word	0
 581 03c8 01000000 		.word	1
 582 03cc 01000000 		.word	1
 583 03d0 01000000 		.word	1
 584 03d4 00000000 		.word	0
 585 03d8 01000000 		.word	1
 586 03dc 00000000 		.word	0
 587 03e0 01000000 		.word	1
 588 03e4 00000000 		.word	0
 589 03e8 00000000 		.word	0
 590 03ec 01000000 		.word	1
 591 03f0 01000000 		.word	1
 592 03f4 00000000 		.word	0
 593 03f8 01000000 		.word	1
 594 03fc 01000000 		.word	1
 595 0400 00000000 		.word	0
 596 0404 01000000 		.word	1
 597 0408 01000000 		.word	1
 598 040c 00000000 		.word	0
 599 0410 01000000 		.word	1
 600 0414 01000000 		.word	1
 601 0418 01000000 		.word	1
 602 041c 01000000 		.word	1
 603 0420 00000000 		.word	0
 604 0424 01000000 		.word	1
 605 0428 00000000 		.word	0
 606 042c 01000000 		.word	1
 607 0430 01000000 		.word	1
 608 0434 00000000 		.word	0
 609 0438 01000000 		.word	1
 610 043c 01000000 		.word	1
 611 0440 00000000 		.word	0
 612 0444 01000000 		.word	1
 613 0448 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 12


 614 044c 00000000 		.word	0
 615 0450 01000000 		.word	1
 616 0454 01000000 		.word	1
 617 0458 00000000 		.word	0
 618 045c 00000000 		.word	0
 619 0460 00000000 		.word	0
 620 0464 00000000 		.word	0
 621 0468 00000000 		.word	0
 622 046c 00000000 		.word	0
 623 0470 01000000 		.word	1
 624 0474 00000000 		.word	0
 625 0478 00000000 		.word	0
 626 047c 00000000 		.word	0
 627 0480 00000000 		.word	0
 628 0484 00000000 		.word	0
 629 0488 00000000 		.word	0
 630 048c 00000000 		.word	0
 631 0490 01000000 		.word	1
 632 0494 01000000 		.word	1
 633 0498 01000000 		.word	1
 634 049c 01000000 		.word	1
 635 04a0 01000000 		.word	1
 636 04a4 01000000 		.word	1
 637 04a8 01000000 		.word	1
 638 04ac 01000000 		.word	1
 639 04b0 01000000 		.word	1
 640 04b4 01000000 		.word	1
 641 04b8 01000000 		.word	1
 642 04bc 01000000 		.word	1
 643 04c0 01000000 		.word	1
 644 04c4 01000000 		.word	1
 645 04c8 01000000 		.word	1
 646 04cc 01000000 		.word	1
 647 04d0 01000000 		.word	1
 648 04d4 01000000 		.word	1
 649 04d8 01000000 		.word	1
 650 04dc 01000000 		.word	1
 651              		.global	food_list
 652              		.align	2
 653              		.type	food_list, %object
 654              		.size	food_list, 48
 655              	food_list:
 656 04e0 01000000 		.word	1
 657 04e4 0A000000 		.word	10
 658 04e8 01000000 		.word	1
 659 04ec 11000000 		.word	17
 660 04f0 0D000000 		.word	13
 661 04f4 10000000 		.word	16
 662 04f8 07000000 		.word	7
 663 04fc 09000000 		.word	9
 664 0500 0D000000 		.word	13
 665 0504 01000000 		.word	1
 666 0508 00000000 		.space	8
 666      00000000 
 667              		.global	food_length
 668              		.align	2
 669              		.type	food_length, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 13


 670              		.size	food_length, 4
 671              	food_length:
 672 0510 05000000 		.word	5
 673 0514 00000000 		.section	.text.BT_txInt,"ax",%progbits
 674              		.align	2
 675              		.global	BT_txInt
 676              		.thumb
 677              		.thumb_func
 678              		.type	BT_txInt, %function
 679              	BT_txInt:
 680              	.LFB63:
 681              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *
   3:.\main.c      ****  * Copyright Univ of Auckland, 2016
   4:.\main.c      ****  * All Rights Reserved
   5:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\main.c      ****  *
   7:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   9:.\main.c      ****  *
  10:.\main.c      ****  * ========================================
  11:.\main.c      **** */
  12:.\main.c      **** #include <stdio.h>
  13:.\main.c      **** #include <string.h>
  14:.\main.c      **** #include <stdlib.h>
  15:.\main.c      **** #include <project.h>
  16:.\main.c      **** #include <math.h>
  17:.\main.c      **** //* ========================================
  18:.\main.c      **** #include "defines.h"
  19:.\main.c      **** #include "vars.h"
  20:.\main.c      **** #include "pathfinder.h"
  21:.\main.c      **** //* ========================================
  22:.\main.c      **** void usbPutString(char *s);
  23:.\main.c      **** void usbPutChar(char c);
  24:.\main.c      **** //void handle_usb();
  25:.\main.c      **** //* ========================================
  26:.\main.c      **** 
  27:.\main.c      **** #define QUAD_RATIO 0.99556
  28:.\main.c      **** #define TURN_OFFSET 134
  29:.\main.c      **** #define U_OFFSET 93
  30:.\main.c      **** 
  31:.\main.c      **** #define U_DEADZONE 90000
  32:.\main.c      **** #define TURN_DEADZONE 50000
  33:.\main.c      **** #define S_DEADZONE 10000
  34:.\main.c      **** #define QUAD_PER_UNIT 140
  35:.\main.c      **** 
  36:.\main.c      **** char instructions[DEFAULT_ARRAY_SIZE] = {0};
  37:.\main.c      **** uint16 instructionCount = 0;
  38:.\main.c      **** uint16 instructionLength = 0;
  39:.\main.c      **** uint32_t sensorsDisabled = 0;
  40:.\main.c      **** 
  41:.\main.c      **** uint32_t robot_direction = 2;
  42:.\main.c      **** 
  43:.\main.c      **** uint32_t path[DEFAULT_ARRAY_SIZE][3] = {0};
  44:.\main.c      **** uint32_t start[2] = {1, 1};//(y, x) array starts at 0
  45:.\main.c      **** uint32_t destination[2] = {13, 11};//(y, x) DON'T HARDCODE THIS
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 14


  46:.\main.c      **** 
  47:.\main.c      **** //
  48:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  49:.\main.c      **** //                    {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1},
  50:.\main.c      **** //                    {1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1},
  51:.\main.c      **** //                    {1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
  52:.\main.c      **** //                    {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
  53:.\main.c      **** //                    {1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
  54:.\main.c      **** //                    {1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1},
  55:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
  56:.\main.c      **** //                    {1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
  57:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
  58:.\main.c      **** //                    {1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1},
  59:.\main.c      **** //                    {1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
  60:.\main.c      **** //                    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
  61:.\main.c      **** //                    {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
  62:.\main.c      **** //                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  63:.\main.c      **** 
  64:.\main.c      **** uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,
  65:.\main.c      **** //first number is the y coord, second is x
  66:.\main.c      **** //first number is row, second column
  67:.\main.c      **** 
  68:.\main.c      **** //uint32_t food_list[6][2]= {{4,5},{7,1},{11,5},{10,11},{5,8},{17,2}};
  69:.\main.c      **** //uint32_t food_list[6][2] = {{5, 9},{5,3}, {13, 2}};
  70:.\main.c      **** //uint32_t food_list[6][2] ={
  71:.\main.c      **** //{4, 7},
  72:.\main.c      **** //{11, 16},
  73:.\main.c      **** //{12, 13},
  74:.\main.c      **** //{5, 17},
  75:.\main.c      **** //{9, 3}
  76:.\main.c      **** //};
  77:.\main.c      **** uint32_t food_list[6][2]= {{1,10},{1,17},{13,16},{7,9},{13,1}};
  78:.\main.c      **** uint32_t food_length = 5;
  79:.\main.c      **** 
  80:.\main.c      **** void changeToRF();
  81:.\main.c      **** void changeToBT();
  82:.\main.c      **** void brakeMotor();
  83:.\main.c      **** void driveForwards();
  84:.\main.c      **** void initTurnLeft();
  85:.\main.c      **** void initTurnRight();
  86:.\main.c      **** void inittrackLineZ();
  87:.\main.c      **** void trackLineU();
  88:.\main.c      **** void trackLine();
  89:.\main.c      **** void trackLineZ();
  90:.\main.c      **** void initTrackU();
  91:.\main.c      **** void turnLeft();
  92:.\main.c      **** void turnRight();
  93:.\main.c      **** void initForward();
  94:.\main.c      **** void initTurnU();
  95:.\main.c      **** void turnU();
  96:.\main.c      **** void initBrake();
  97:.\main.c      **** void print_ADC();
  98:.\main.c      **** void Quad_Dec_response();
  99:.\main.c      **** void handle_rx_binary();
 100:.\main.c      **** void readFrontSensors();
 101:.\main.c      **** void print_RF();
 102:.\main.c      **** 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 15


 103:.\main.c      **** /*--------------------------------------------ISRs-----------------------------------------------*/
 104:.\main.c      **** //BT
 105:.\main.c      **** CY_ISR(BT_txInt)
 106:.\main.c      **** {
 682              		.loc 1 106 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686              		@ link register save eliminated.
 687 0000 80B4     		push	{r7}
 688              		.cfi_def_cfa_offset 4
 689              		.cfi_offset 7, -4
 690 0002 00AF     		add	r7, sp, #0
 691              		.cfi_def_cfa_register 7
 107:.\main.c      ****     
 108:.\main.c      **** }
 692              		.loc 1 108 0
 693 0004 BD46     		mov	sp, r7
 694              		.cfi_def_cfa_register 13
 695              		@ sp needed
 696 0006 5DF8047B 		ldr	r7, [sp], #4
 697              		.cfi_restore 7
 698              		.cfi_def_cfa_offset 0
 699 000a 7047     		bx	lr
 700              		.cfi_endproc
 701              	.LFE63:
 702              		.size	BT_txInt, .-BT_txInt
 703              		.section	.text.adc_isr,"ax",%progbits
 704              		.align	2
 705              		.global	adc_isr
 706              		.thumb
 707              		.thumb_func
 708              		.type	adc_isr, %function
 709              	adc_isr:
 710              	.LFB64:
 109:.\main.c      **** 
 110:.\main.c      **** //ADC:
 111:.\main.c      **** CY_ISR (adc_isr)
 112:.\main.c      **** {
 711              		.loc 1 112 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 80B5     		push	{r7, lr}
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 00AF     		add	r7, sp, #0
 720              		.cfi_def_cfa_register 7
 113:.\main.c      ****     //adc_result = ADC_GetResult16(0);
 114:.\main.c      ****     adc_result = ADC_GetResult16();
 721              		.loc 1 114 0
 722 0004 FFF7FEFF 		bl	ADC_GetResult16
 723 0008 0346     		mov	r3, r0
 724 000a 1A46     		mov	r2, r3
 725 000c 044B     		ldr	r3, .L3
 726 000e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 16


 115:.\main.c      ****     flag_receive_ADC = 1;
 727              		.loc 1 115 0
 728 0010 044B     		ldr	r3, .L3+4
 729 0012 0122     		movs	r2, #1
 730 0014 1A70     		strb	r2, [r3]
 116:.\main.c      ****     flag_print_rf = 1;
 731              		.loc 1 116 0
 732 0016 044B     		ldr	r3, .L3+8
 733 0018 0122     		movs	r2, #1
 734 001a 1A70     		strb	r2, [r3]
 117:.\main.c      ****     //LED_Write(~LED_Read());
 118:.\main.c      **** }
 735              		.loc 1 118 0
 736 001c 80BD     		pop	{r7, pc}
 737              	.L4:
 738 001e 00BF     		.align	2
 739              	.L3:
 740 0020 00000000 		.word	adc_result
 741 0024 00000000 		.word	flag_receive_ADC
 742 0028 00000000 		.word	flag_print_rf
 743              		.cfi_endproc
 744              	.LFE64:
 745              		.size	adc_isr, .-adc_isr
 746              		.global	__aeabi_i2d
 747              		.global	__aeabi_dsub
 748              		.global	__aeabi_dcmpge
 749              		.global	__aeabi_dadd
 750              		.section	.text.isr_quad1,"ax",%progbits
 751              		.align	2
 752              		.global	isr_quad1
 753              		.thumb
 754              		.thumb_func
 755              		.type	isr_quad1, %function
 756              	isr_quad1:
 757              	.LFB65:
 119:.\main.c      **** 
 120:.\main.c      **** CY_ISR (isr_quad1)
 121:.\main.c      **** {
 758              		.loc 1 121 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 B0B5     		push	{r4, r5, r7, lr}
 763              		.cfi_def_cfa_offset 16
 764              		.cfi_offset 4, -16
 765              		.cfi_offset 5, -12
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 0002 00AF     		add	r7, sp, #0
 769              		.cfi_def_cfa_register 7
 122:.\main.c      ****     
 123:.\main.c      ****     //LED_Write(~LED_Read());
 124:.\main.c      ****     last_quad_count1 = quad_count1;
 770              		.loc 1 124 0
 771 0004 594B     		ldr	r3, .L12
 772 0006 1A88     		ldrh	r2, [r3]
 773 0008 594B     		ldr	r3, .L12+4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 17


 774 000a 1A80     		strh	r2, [r3]	@ movhi
 125:.\main.c      ****     last_quad_count2 = quad_count2;
 775              		.loc 1 125 0
 776 000c 594B     		ldr	r3, .L12+8
 777 000e 1A88     		ldrh	r2, [r3]
 778 0010 594B     		ldr	r3, .L12+12
 779 0012 1A80     		strh	r2, [r3]	@ movhi
 126:.\main.c      ****     quad_count1 = QuadDec_M1_GetCounter();
 780              		.loc 1 126 0
 781 0014 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 782 0018 0346     		mov	r3, r0
 783 001a 1A46     		mov	r2, r3
 784 001c 534B     		ldr	r3, .L12
 785 001e 1A80     		strh	r2, [r3]	@ movhi
 127:.\main.c      ****     quad_count2 = QuadDec_M2_GetCounter();
 786              		.loc 1 127 0
 787 0020 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 788 0024 0346     		mov	r3, r0
 789 0026 1A46     		mov	r2, r3
 790 0028 524B     		ldr	r3, .L12+8
 791 002a 1A80     		strh	r2, [r3]	@ movhi
 128:.\main.c      ****     quad_diff1 = quad_count1 - last_quad_count1;
 792              		.loc 1 128 0
 793 002c 4F4B     		ldr	r3, .L12
 794 002e 1B88     		ldrh	r3, [r3]
 795 0030 9AB2     		uxth	r2, r3
 796 0032 4F4B     		ldr	r3, .L12+4
 797 0034 1B88     		ldrh	r3, [r3]
 798 0036 9BB2     		uxth	r3, r3
 799 0038 D31A     		subs	r3, r2, r3
 800 003a 9BB2     		uxth	r3, r3
 801 003c 9AB2     		uxth	r2, r3
 802 003e 4F4B     		ldr	r3, .L12+16
 803 0040 1A80     		strh	r2, [r3]	@ movhi
 129:.\main.c      ****     quad_diff2 = quad_count2 - last_quad_count2;
 804              		.loc 1 129 0
 805 0042 4C4B     		ldr	r3, .L12+8
 806 0044 1B88     		ldrh	r3, [r3]
 807 0046 9AB2     		uxth	r2, r3
 808 0048 4B4B     		ldr	r3, .L12+12
 809 004a 1B88     		ldrh	r3, [r3]
 810 004c 9BB2     		uxth	r3, r3
 811 004e D31A     		subs	r3, r2, r3
 812 0050 9BB2     		uxth	r3, r3
 813 0052 9AB2     		uxth	r2, r3
 814 0054 4A4B     		ldr	r3, .L12+20
 815 0056 1A80     		strh	r2, [r3]	@ movhi
 130:.\main.c      ****     
 131:.\main.c      ****     if(abs(quad_count1) > 3000 && movement_state != LTURN && movement_state != RTURN && movement_st
 816              		.loc 1 131 0
 817 0058 444B     		ldr	r3, .L12
 818 005a 1B88     		ldrh	r3, [r3]
 819 005c 1BB2     		sxth	r3, r3
 820 005e 002B     		cmp	r3, #0
 821 0060 B8BF     		it	lt
 822 0062 5B42     		rsblt	r3, r3, #0
 823 0064 40F6B832 		movw	r2, #3000
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 18


 824 0068 9342     		cmp	r3, r2
 825 006a 17DD     		ble	.L6
 826              		.loc 1 131 0 is_stmt 0 discriminator 1
 827 006c 454B     		ldr	r3, .L12+24
 828 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 829 0070 012B     		cmp	r3, #1
 830 0072 13D0     		beq	.L6
 831              		.loc 1 131 0 discriminator 2
 832 0074 434B     		ldr	r3, .L12+24
 833 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834 0078 022B     		cmp	r3, #2
 835 007a 0FD0     		beq	.L6
 836              		.loc 1 131 0 discriminator 3
 837 007c 414B     		ldr	r3, .L12+24
 838 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 839 0080 072B     		cmp	r3, #7
 840 0082 0BD0     		beq	.L6
 132:.\main.c      ****     {
 133:.\main.c      ****         QuadDec_M1_SetCounter(0);
 841              		.loc 1 133 0 is_stmt 1
 842 0084 0020     		movs	r0, #0
 843 0086 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 134:.\main.c      ****         QuadDec_M2_SetCounter(0);
 844              		.loc 1 134 0
 845 008a 0020     		movs	r0, #0
 846 008c FFF7FEFF 		bl	QuadDec_M2_SetCounter
 135:.\main.c      ****         quad_count1 = 0;
 847              		.loc 1 135 0
 848 0090 364B     		ldr	r3, .L12
 849 0092 0022     		movs	r2, #0
 850 0094 1A80     		strh	r2, [r3]	@ movhi
 136:.\main.c      ****         quad_count2 = 0;
 851              		.loc 1 136 0
 852 0096 374B     		ldr	r3, .L12+8
 853 0098 0022     		movs	r2, #0
 854 009a 1A80     		strh	r2, [r3]	@ movhi
 855              	.L6:
 137:.\main.c      ****     }
 138:.\main.c      **** 
 139:.\main.c      ****     flag_calc_wheelspeed = 1;
 856              		.loc 1 139 0
 857 009c 3A4B     		ldr	r3, .L12+28
 858 009e 0122     		movs	r2, #1
 859 00a0 1A70     		strb	r2, [r3]
 140:.\main.c      ****     
 141:.\main.c      ****     
 142:.\main.c      ****     if(track_mode == DEST_TEST && movement_state == TRACKING_SOFT)
 860              		.loc 1 142 0
 861 00a2 3A4B     		ldr	r3, .L12+32
 862 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 863 00a6 062B     		cmp	r3, #6
 864 00a8 5ED1     		bne	.L5
 865              		.loc 1 142 0 is_stmt 0 discriminator 1
 866 00aa 364B     		ldr	r3, .L12+24
 867 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 868 00ae 062B     		cmp	r3, #6
 869 00b0 5AD1     		bne	.L5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 19


 143:.\main.c      ****     {
 144:.\main.c      ****         //track the distance
 145:.\main.c      ****         accum_dist += quad_diff1;
 870              		.loc 1 145 0 is_stmt 1
 871 00b2 374B     		ldr	r3, .L12+36
 872 00b4 1B88     		ldrh	r3, [r3]
 873 00b6 9AB2     		uxth	r2, r3
 874 00b8 304B     		ldr	r3, .L12+16
 875 00ba 1B88     		ldrh	r3, [r3]
 876 00bc 9BB2     		uxth	r3, r3
 877 00be 1344     		add	r3, r3, r2
 878 00c0 9BB2     		uxth	r3, r3
 879 00c2 9AB2     		uxth	r2, r3
 880 00c4 324B     		ldr	r3, .L12+36
 881 00c6 1A80     		strh	r2, [r3]	@ movhi
 146:.\main.c      ****         if(abs(accum_dist) >= (target_distance_quad - QUAD_PER_UNIT*0.5))
 882              		.loc 1 146 0
 883 00c8 314B     		ldr	r3, .L12+36
 884 00ca 1B88     		ldrh	r3, [r3]
 885 00cc 1BB2     		sxth	r3, r3
 886 00ce 002B     		cmp	r3, #0
 887 00d0 B8BF     		it	lt
 888 00d2 5B42     		rsblt	r3, r3, #0
 889 00d4 1846     		mov	r0, r3
 890 00d6 FFF7FEFF 		bl	__aeabi_i2d
 891 00da 0446     		mov	r4, r0
 892 00dc 0D46     		mov	r5, r1
 893 00de 2D4B     		ldr	r3, .L12+40
 894 00e0 1B88     		ldrh	r3, [r3]
 895 00e2 1BB2     		sxth	r3, r3
 896 00e4 1846     		mov	r0, r3
 897 00e6 FFF7FEFF 		bl	__aeabi_i2d
 898 00ea 0246     		mov	r2, r0
 899 00ec 0B46     		mov	r3, r1
 900 00ee 1046     		mov	r0, r2
 901 00f0 1946     		mov	r1, r3
 902 00f2 4FF00002 		mov	r2, #0
 903 00f6 284B     		ldr	r3, .L12+44
 904 00f8 FFF7FEFF 		bl	__aeabi_dsub
 905 00fc 0246     		mov	r2, r0
 906 00fe 0B46     		mov	r3, r1
 907 0100 2046     		mov	r0, r4
 908 0102 2946     		mov	r1, r5
 909 0104 FFF7FEFF 		bl	__aeabi_dcmpge
 910 0108 0346     		mov	r3, r0
 911 010a 002B     		cmp	r3, #0
 912 010c 02D0     		beq	.L8
 147:.\main.c      ****         {
 148:.\main.c      ****             reached_target = 1;
 913              		.loc 1 148 0
 914 010e 234B     		ldr	r3, .L12+48
 915 0110 0122     		movs	r2, #1
 916 0112 1A70     		strb	r2, [r3]
 917              	.L8:
 149:.\main.c      ****         }
 150:.\main.c      ****         if((abs(accum_dist) >= (target_distance_quad + QUAD_PER_UNIT * 0.5)) || target_distance_qua
 918              		.loc 1 150 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 20


 919 0114 1E4B     		ldr	r3, .L12+36
 920 0116 1B88     		ldrh	r3, [r3]
 921 0118 1BB2     		sxth	r3, r3
 922 011a 002B     		cmp	r3, #0
 923 011c B8BF     		it	lt
 924 011e 5B42     		rsblt	r3, r3, #0
 925 0120 1846     		mov	r0, r3
 926 0122 FFF7FEFF 		bl	__aeabi_i2d
 927 0126 0446     		mov	r4, r0
 928 0128 0D46     		mov	r5, r1
 929 012a 1A4B     		ldr	r3, .L12+40
 930 012c 1B88     		ldrh	r3, [r3]
 931 012e 1BB2     		sxth	r3, r3
 932 0130 1846     		mov	r0, r3
 933 0132 FFF7FEFF 		bl	__aeabi_i2d
 934 0136 0246     		mov	r2, r0
 935 0138 0B46     		mov	r3, r1
 936 013a 1046     		mov	r0, r2
 937 013c 1946     		mov	r1, r3
 938 013e 4FF00002 		mov	r2, #0
 939 0142 154B     		ldr	r3, .L12+44
 940 0144 FFF7FEFF 		bl	__aeabi_dadd
 941 0148 0246     		mov	r2, r0
 942 014a 0B46     		mov	r3, r1
 943 014c 2046     		mov	r0, r4
 944 014e 2946     		mov	r1, r5
 945 0150 FFF7FEFF 		bl	__aeabi_dcmpge
 946 0154 0346     		mov	r3, r0
 947 0156 002B     		cmp	r3, #0
 948 0158 03D1     		bne	.L10
 949              		.loc 1 150 0 is_stmt 0 discriminator 1
 950 015a 0E4B     		ldr	r3, .L12+40
 951 015c 1B88     		ldrh	r3, [r3]
 952 015e 002B     		cmp	r3, #0
 953 0160 02D1     		bne	.L5
 954              	.L10:
 151:.\main.c      ****         {
 152:.\main.c      ****             overshot_target = 1;
 955              		.loc 1 152 0 is_stmt 1
 956 0162 0F4B     		ldr	r3, .L12+52
 957 0164 0122     		movs	r2, #1
 958 0166 1A70     		strb	r2, [r3]
 959              	.L5:
 153:.\main.c      ****         }
 154:.\main.c      ****     }
 155:.\main.c      **** }
 960              		.loc 1 155 0
 961 0168 B0BD     		pop	{r4, r5, r7, pc}
 962              	.L13:
 963 016a 00BF     		.align	2
 964              	.L12:
 965 016c 00000000 		.word	quad_count1
 966 0170 00000000 		.word	last_quad_count1
 967 0174 00000000 		.word	quad_count2
 968 0178 00000000 		.word	last_quad_count2
 969 017c 00000000 		.word	quad_diff1
 970 0180 00000000 		.word	quad_diff2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 21


 971 0184 00000000 		.word	movement_state
 972 0188 00000000 		.word	flag_calc_wheelspeed
 973 018c 00000000 		.word	track_mode
 974 0190 00000000 		.word	accum_dist
 975 0194 00000000 		.word	target_distance_quad
 976 0198 00805140 		.word	1079083008
 977 019c 00000000 		.word	reached_target
 978 01a0 00000000 		.word	overshot_target
 979              		.cfi_endproc
 980              	.LFE65:
 981              		.size	isr_quad1, .-isr_quad1
 982              		.section	.text.isr_turn_timer,"ax",%progbits
 983              		.align	2
 984              		.global	isr_turn_timer
 985              		.thumb
 986              		.thumb_func
 987              		.type	isr_turn_timer, %function
 988              	isr_turn_timer:
 989              	.LFB66:
 156:.\main.c      **** 
 157:.\main.c      **** CY_ISR(isr_turn_timer)
 158:.\main.c      **** {
 990              		.loc 1 158 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 8
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994 0000 80B5     		push	{r7, lr}
 995              		.cfi_def_cfa_offset 8
 996              		.cfi_offset 7, -8
 997              		.cfi_offset 14, -4
 998 0002 82B0     		sub	sp, sp, #8
 999              		.cfi_def_cfa_offset 16
 1000 0004 00AF     		add	r7, sp, #0
 1001              		.cfi_def_cfa_register 7
 159:.\main.c      ****     if(movement_state == LTURN)
 1002              		.loc 1 159 0
 1003 0006 464B     		ldr	r3, .L22
 1004 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1005 000a 012B     		cmp	r3, #1
 1006 000c 33D1     		bne	.L15
 1007              	.LBB2:
 160:.\main.c      ****     {
 161:.\main.c      ****         uint16 distTurned = (abs(QuadDec_M2_GetCounter() - start_turn_count) % 832);
 1008              		.loc 1 161 0
 1009 000e FFF7FEFF 		bl	QuadDec_M2_GetCounter
 1010 0012 0346     		mov	r3, r0
 1011 0014 1A46     		mov	r2, r3
 1012 0016 434B     		ldr	r3, .L22+4
 1013 0018 1B88     		ldrh	r3, [r3]
 1014 001a 1BB2     		sxth	r3, r3
 1015 001c D31A     		subs	r3, r2, r3
 1016 001e 002B     		cmp	r3, #0
 1017 0020 B8BF     		it	lt
 1018 0022 5B42     		rsblt	r3, r3, #0
 1019 0024 404A     		ldr	r2, .L22+8
 1020 0026 82FB0312 		smull	r1, r2, r2, r3
 1021 002a 1112     		asrs	r1, r2, #8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 22


 1022 002c DA17     		asrs	r2, r3, #31
 1023 002e 8A1A     		subs	r2, r1, r2
 1024 0030 4FF45071 		mov	r1, #832
 1025 0034 01FB02F2 		mul	r2, r1, r2
 1026 0038 9A1A     		subs	r2, r3, r2
 1027 003a 1346     		mov	r3, r2	@ movhi
 1028 003c FB80     		strh	r3, [r7, #6]	@ movhi
 162:.\main.c      ****   
 163:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1029              		.loc 1 163 0
 1030 003e FB88     		ldrh	r3, [r7, #6]
 1031 0040 B82B     		cmp	r3, #184
 1032 0042 17D9     		bls	.L16
 1033              		.loc 1 163 0 is_stmt 0 discriminator 1
 1034 0044 FB88     		ldrh	r3, [r7, #6]
 1035 0046 E02B     		cmp	r3, #224
 1036 0048 14D8     		bhi	.L16
 1037              		.loc 1 163 0 discriminator 2
 1038 004a 384B     		ldr	r3, .L22+12
 1039 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1040 004e 012B     		cmp	r3, #1
 1041 0050 07D0     		beq	.L17
 1042              		.loc 1 163 0 discriminator 3
 1043 0052 364B     		ldr	r3, .L22+12
 1044 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1045 0056 012B     		cmp	r3, #1
 1046 0058 03D0     		beq	.L17
 1047              		.loc 1 163 0 discriminator 4
 1048 005a 344B     		ldr	r3, .L22+12
 1049 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1050 005e 012B     		cmp	r3, #1
 1051 0060 08D1     		bne	.L16
 1052              	.L17:
 164:.\main.c      ****         {
 165:.\main.c      ****             //movement_state = STOPPED;
 166:.\main.c      ****             brakeMotor();
 1053              		.loc 1 166 0 is_stmt 1
 1054 0062 FFF7FEFF 		bl	brakeMotor
 167:.\main.c      ****             movement_state = prev_movement_state;
 1055              		.loc 1 167 0
 1056 0066 324B     		ldr	r3, .L22+16
 1057 0068 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1058 006a 2D4B     		ldr	r3, .L22
 1059 006c 1A70     		strb	r2, [r3]
 168:.\main.c      ****             Timer_2_Stop();
 1060              		.loc 1 168 0
 1061 006e FFF7FEFF 		bl	Timer_2_Stop
 1062              	.LBE2:
 1063 0072 51E0     		b	.L14
 1064              	.L16:
 1065 0074 50E0     		b	.L14
 1066              	.L15:
 169:.\main.c      ****         }
 170:.\main.c      ****     }
 171:.\main.c      ****     else if (movement_state == RTURN)
 1067              		.loc 1 171 0
 1068 0076 2A4B     		ldr	r3, .L22
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 23


 1069 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1070 007a 022B     		cmp	r3, #2
 1071 007c 33D1     		bne	.L19
 1072              	.LBB3:
 172:.\main.c      ****     {
 173:.\main.c      ****         uint16 distTurned = abs(QuadDec_M1_GetCounter() - start_turn_count) % 832;
 1073              		.loc 1 173 0
 1074 007e FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1075 0082 0346     		mov	r3, r0
 1076 0084 1A46     		mov	r2, r3
 1077 0086 274B     		ldr	r3, .L22+4
 1078 0088 1B88     		ldrh	r3, [r3]
 1079 008a 1BB2     		sxth	r3, r3
 1080 008c D31A     		subs	r3, r2, r3
 1081 008e 002B     		cmp	r3, #0
 1082 0090 B8BF     		it	lt
 1083 0092 5B42     		rsblt	r3, r3, #0
 1084 0094 244A     		ldr	r2, .L22+8
 1085 0096 82FB0312 		smull	r1, r2, r2, r3
 1086 009a 1112     		asrs	r1, r2, #8
 1087 009c DA17     		asrs	r2, r3, #31
 1088 009e 8A1A     		subs	r2, r1, r2
 1089 00a0 4FF45071 		mov	r1, #832
 1090 00a4 01FB02F2 		mul	r2, r1, r2
 1091 00a8 9A1A     		subs	r2, r3, r2
 1092 00aa 1346     		mov	r3, r2	@ movhi
 1093 00ac BB80     		strh	r3, [r7, #4]	@ movhi
 174:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1094              		.loc 1 174 0
 1095 00ae BB88     		ldrh	r3, [r7, #4]
 1096 00b0 B82B     		cmp	r3, #184
 1097 00b2 17D9     		bls	.L20
 1098              		.loc 1 174 0 is_stmt 0 discriminator 1
 1099 00b4 BB88     		ldrh	r3, [r7, #4]
 1100 00b6 E02B     		cmp	r3, #224
 1101 00b8 14D8     		bhi	.L20
 1102              		.loc 1 174 0 discriminator 2
 1103 00ba 1C4B     		ldr	r3, .L22+12
 1104 00bc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1105 00be 012B     		cmp	r3, #1
 1106 00c0 07D0     		beq	.L21
 1107              		.loc 1 174 0 discriminator 3
 1108 00c2 1A4B     		ldr	r3, .L22+12
 1109 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1110 00c6 012B     		cmp	r3, #1
 1111 00c8 03D0     		beq	.L21
 1112              		.loc 1 174 0 discriminator 4
 1113 00ca 184B     		ldr	r3, .L22+12
 1114 00cc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1115 00ce 012B     		cmp	r3, #1
 1116 00d0 08D1     		bne	.L20
 1117              	.L21:
 175:.\main.c      ****         {
 176:.\main.c      ****             //movement_state = STOPPED;
 177:.\main.c      ****             brakeMotor();
 1118              		.loc 1 177 0 is_stmt 1
 1119 00d2 FFF7FEFF 		bl	brakeMotor
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 24


 178:.\main.c      ****             movement_state = prev_movement_state;
 1120              		.loc 1 178 0
 1121 00d6 164B     		ldr	r3, .L22+16
 1122 00d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1123 00da 114B     		ldr	r3, .L22
 1124 00dc 1A70     		strb	r2, [r3]
 179:.\main.c      ****             Timer_2_Stop();
 1125              		.loc 1 179 0
 1126 00de FFF7FEFF 		bl	Timer_2_Stop
 1127              	.LBE3:
 1128 00e2 19E0     		b	.L14
 1129              	.L20:
 1130 00e4 18E0     		b	.L14
 1131              	.L19:
 180:.\main.c      ****         }
 181:.\main.c      ****     }
 182:.\main.c      ****     else if (movement_state == UTURN)
 1132              		.loc 1 182 0
 1133 00e6 0E4B     		ldr	r3, .L22
 1134 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1135 00ea 072B     		cmp	r3, #7
 1136 00ec 14D1     		bne	.L14
 183:.\main.c      ****     {
 184:.\main.c      ****         if(abs(QuadDec_M1_GetCounter() - start_turn_count) >= 208)
 1137              		.loc 1 184 0
 1138 00ee FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1139 00f2 0346     		mov	r3, r0
 1140 00f4 1A46     		mov	r2, r3
 1141 00f6 0B4B     		ldr	r3, .L22+4
 1142 00f8 1B88     		ldrh	r3, [r3]
 1143 00fa 1BB2     		sxth	r3, r3
 1144 00fc D31A     		subs	r3, r2, r3
 1145 00fe 002B     		cmp	r3, #0
 1146 0100 B8BF     		it	lt
 1147 0102 5B42     		rsblt	r3, r3, #0
 1148 0104 CF2B     		cmp	r3, #207
 1149 0106 07DD     		ble	.L14
 185:.\main.c      ****         {
 186:.\main.c      ****             //movement_state = STOPPED;
 187:.\main.c      ****             brakeMotor();
 1150              		.loc 1 187 0
 1151 0108 FFF7FEFF 		bl	brakeMotor
 188:.\main.c      ****             movement_state = prev_movement_state;
 1152              		.loc 1 188 0
 1153 010c 084B     		ldr	r3, .L22+16
 1154 010e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1155 0110 034B     		ldr	r3, .L22
 1156 0112 1A70     		strb	r2, [r3]
 189:.\main.c      ****             Timer_2_Stop();
 1157              		.loc 1 189 0
 1158 0114 FFF7FEFF 		bl	Timer_2_Stop
 1159              	.L14:
 190:.\main.c      ****         }
 191:.\main.c      ****     }
 192:.\main.c      **** }
 1160              		.loc 1 192 0
 1161 0118 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 25


 1162              		.cfi_def_cfa_offset 8
 1163 011a BD46     		mov	sp, r7
 1164              		.cfi_def_cfa_register 13
 1165              		@ sp needed
 1166 011c 80BD     		pop	{r7, pc}
 1167              	.L23:
 1168 011e 00BF     		.align	2
 1169              	.L22:
 1170 0120 00000000 		.word	movement_state
 1171 0124 00000000 		.word	start_turn_count
 1172 0128 4FECC44E 		.word	1321528399
 1173 012c 00000000 		.word	frontSensors
 1174 0130 00000000 		.word	prev_movement_state
 1175              		.cfi_endproc
 1176              	.LFE66:
 1177              		.size	isr_turn_timer, .-isr_turn_timer
 1178              		.section	.text.Stop_on_line,"ax",%progbits
 1179              		.align	2
 1180              		.global	Stop_on_line
 1181              		.thumb
 1182              		.thumb_func
 1183              		.type	Stop_on_line, %function
 1184              	Stop_on_line:
 1185              	.LFB67:
 193:.\main.c      **** 
 194:.\main.c      **** 
 195:.\main.c      **** CY_ISR (Stop_on_line)
 196:.\main.c      **** {
 1186              		.loc 1 196 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 1, uses_anonymous_args = 0
 1190              		@ link register save eliminated.
 1191 0000 80B4     		push	{r7}
 1192              		.cfi_def_cfa_offset 4
 1193              		.cfi_offset 7, -4
 1194 0002 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 197:.\main.c      ****     movement_state = STOPPED;
 1196              		.loc 1 197 0
 1197 0004 054B     		ldr	r3, .L26
 1198 0006 0322     		movs	r2, #3
 1199 0008 1A70     		strb	r2, [r3]
 198:.\main.c      ****     if(movement_state != DRIVE) return;
 1200              		.loc 1 198 0
 1201 000a 044B     		ldr	r3, .L26
 1202 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1203 000e 002B     		cmp	r3, #0
 1204 0010 00D0     		beq	.L24
 1205 0012 00BF     		nop
 1206              	.L24:
 199:.\main.c      ****     //initTurnLeft();
 200:.\main.c      **** }
 1207              		.loc 1 200 0
 1208 0014 BD46     		mov	sp, r7
 1209              		.cfi_def_cfa_register 13
 1210              		@ sp needed
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 26


 1211 0016 5DF8047B 		ldr	r7, [sp], #4
 1212              		.cfi_restore 7
 1213              		.cfi_def_cfa_offset 0
 1214 001a 7047     		bx	lr
 1215              	.L27:
 1216              		.align	2
 1217              	.L26:
 1218 001c 00000000 		.word	movement_state
 1219              		.cfi_endproc
 1220              	.LFE67:
 1221              		.size	Stop_on_line, .-Stop_on_line
 1222              		.section	.rodata
 1223              		.align	2
 1224              	.LC0:
 1225 0000 53746172 		.ascii	"Starting robot!\015\012\000"
 1225      74696E67 
 1225      20726F62 
 1225      6F74210D 
 1225      0A00
 1226              		.section	.text.button,"ax",%progbits
 1227              		.align	2
 1228              		.global	button
 1229              		.thumb
 1230              		.thumb_func
 1231              		.type	button, %function
 1232              	button:
 1233              	.LFB68:
 201:.\main.c      **** 
 202:.\main.c      **** CY_ISR (button)
 203:.\main.c      **** {
 1234              		.loc 1 203 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 1, uses_anonymous_args = 0
 1238 0000 80B5     		push	{r7, lr}
 1239              		.cfi_def_cfa_offset 8
 1240              		.cfi_offset 7, -8
 1241              		.cfi_offset 14, -4
 1242 0002 00AF     		add	r7, sp, #0
 1243              		.cfi_def_cfa_register 7
 204:.\main.c      ****     if(BT_ENABLED)
 1244              		.loc 1 204 0
 1245 0004 054B     		ldr	r3, .L30
 1246 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1247 0008 002B     		cmp	r3, #0
 1248 000a 02D0     		beq	.L29
 205:.\main.c      ****     {
 206:.\main.c      ****         UART_PutString("Starting robot!\r\n");
 1249              		.loc 1 206 0
 1250 000c 0448     		ldr	r0, .L30+4
 1251 000e FFF7FEFF 		bl	UART_PutString
 1252              	.L29:
 207:.\main.c      ****     }
 208:.\main.c      ****     movement_state = DRIVE;
 1253              		.loc 1 208 0
 1254 0012 044B     		ldr	r3, .L30+8
 1255 0014 0022     		movs	r2, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 27


 1256 0016 1A70     		strb	r2, [r3]
 209:.\main.c      **** }
 1257              		.loc 1 209 0
 1258 0018 80BD     		pop	{r7, pc}
 1259              	.L31:
 1260 001a 00BF     		.align	2
 1261              	.L30:
 1262 001c 00000000 		.word	BT_ENABLED
 1263 0020 00000000 		.word	.LC0
 1264 0024 00000000 		.word	movement_state
 1265              		.cfi_endproc
 1266              	.LFE68:
 1267              		.size	button, .-button
 1268              		.section	.text.isr_adcTimer,"ax",%progbits
 1269              		.align	2
 1270              		.global	isr_adcTimer
 1271              		.thumb
 1272              		.thumb_func
 1273              		.type	isr_adcTimer, %function
 1274              	isr_adcTimer:
 1275              	.LFB69:
 210:.\main.c      **** 
 211:.\main.c      **** CY_ISR(isr_adcTimer)
 212:.\main.c      **** {
 1276              		.loc 1 212 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 0000 80B5     		push	{r7, lr}
 1281              		.cfi_def_cfa_offset 8
 1282              		.cfi_offset 7, -8
 1283              		.cfi_offset 14, -4
 1284 0002 00AF     		add	r7, sp, #0
 1285              		.cfi_def_cfa_register 7
 213:.\main.c      ****     ADC_StartConvert();
 1286              		.loc 1 213 0
 1287 0004 FFF7FEFF 		bl	ADC_StartConvert
 214:.\main.c      **** }
 1288              		.loc 1 214 0
 1289 0008 80BD     		pop	{r7, pc}
 1290              		.cfi_endproc
 1291              	.LFE69:
 1292              		.size	isr_adcTimer, .-isr_adcTimer
 1293 000a 00BF     		.section	.rodata
 1294 0012 0000     		.align	2
 1295              	.LC1:
 1296 0014 44656164 		.ascii	"Deadzone left\015\012\000"
 1296      7A6F6E65 
 1296      206C6566 
 1296      740D0A00 
 1297              		.section	.text.isr_deadzone,"ax",%progbits
 1298              		.align	2
 1299              		.global	isr_deadzone
 1300              		.thumb
 1301              		.thumb_func
 1302              		.type	isr_deadzone, %function
 1303              	isr_deadzone:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 28


 1304              	.LFB70:
 215:.\main.c      **** 
 216:.\main.c      **** CY_ISR(isr_deadzone)
 217:.\main.c      **** {
 1305              		.loc 1 217 0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 0
 1308              		@ frame_needed = 1, uses_anonymous_args = 0
 1309 0000 80B5     		push	{r7, lr}
 1310              		.cfi_def_cfa_offset 8
 1311              		.cfi_offset 7, -8
 1312              		.cfi_offset 14, -4
 1313 0002 00AF     		add	r7, sp, #0
 1314              		.cfi_def_cfa_register 7
 218:.\main.c      ****     sensorsDisabled = 0;
 1315              		.loc 1 218 0
 1316 0004 054B     		ldr	r3, .L34
 1317 0006 0022     		movs	r2, #0
 1318 0008 1A60     		str	r2, [r3]
 219:.\main.c      ****     deadzone = 0;
 1319              		.loc 1 219 0
 1320 000a 054B     		ldr	r3, .L34+4
 1321 000c 0022     		movs	r2, #0
 1322 000e 1A70     		strb	r2, [r3]
 220:.\main.c      ****     Timer_Deadzone_Stop();
 1323              		.loc 1 220 0
 1324 0010 FFF7FEFF 		bl	Timer_Deadzone_Stop
 221:.\main.c      ****     UART_PutString("Deadzone left\r\n");
 1325              		.loc 1 221 0
 1326 0014 0348     		ldr	r0, .L34+8
 1327 0016 FFF7FEFF 		bl	UART_PutString
 222:.\main.c      **** }
 1328              		.loc 1 222 0
 1329 001a 80BD     		pop	{r7, pc}
 1330              	.L35:
 1331              		.align	2
 1332              	.L34:
 1333 001c 00000000 		.word	sensorsDisabled
 1334 0020 00000000 		.word	deadzone
 1335 0024 14000000 		.word	.LC1
 1336              		.cfi_endproc
 1337              	.LFE70:
 1338              		.size	isr_deadzone, .-isr_deadzone
 1339              		.section	.rodata
 1340              		.align	2
 1341              	.LC2:
 1342 0024 44697374 		.ascii	"Dist travel: %d\015\012\000"
 1342      20747261 
 1342      76656C3A 
 1342      2025640D 
 1342      0A00
 1343 0036 0000     		.align	2
 1344              	.LC3:
 1345 0038 54726967 		.ascii	"Trigger intersection\015\012\000"
 1345      67657220 
 1345      696E7465 
 1345      72736563 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 29


 1345      74696F6E 
 1346 004f 00       		.align	2
 1347              	.LC4:
 1348 0050 44656164 		.ascii	"Deadzone enter\015\012\000"
 1348      7A6F6E65 
 1348      20656E74 
 1348      65720D0A 
 1348      00
 1349 0061 000000   		.align	2
 1350              	.LC5:
 1351 0064 54617267 		.ascii	"Target dist: %d\015\012\000"
 1351      65742064 
 1351      6973743A 
 1351      2025640D 
 1351      0A00
 1352 0076 0000     		.align	2
 1353              	.LC6:
 1354 0078 696E7374 		.ascii	"instr count:%d\015\012\000"
 1354      7220636F 
 1354      756E743A 
 1354      25640D0A 
 1354      00
 1355 0089 000000   		.align	2
 1356              	.LC7:
 1357 008c 54726967 		.ascii	"Trigger white light\015\012\000"
 1357      67657220 
 1357      77686974 
 1357      65206C69 
 1357      6768740D 
 1358 00a2 0000     		.align	2
 1359              	.LC8:
 1360 00a4 54726967 		.ascii	"Trigger quad\015\012\000"
 1360      67657220 
 1360      71756164 
 1360      0D0A00
 1361              		.global	__aeabi_d2iz
 1362              		.section	.text.main,"ax",%progbits
 1363              		.align	2
 1364              		.global	main
 1365              		.thumb
 1366              		.thumb_func
 1367              		.type	main, %function
 1368              	main:
 1369              	.LFB71:
 223:.\main.c      **** 
 224:.\main.c      **** /*-------------------------------------------------------------------------------------------*/
 225:.\main.c      **** 
 226:.\main.c      **** /* -----------------------------------------MAIN-----------------------------MAIN------------------
 227:.\main.c      **** int main()
 228:.\main.c      **** {  
 1370              		.loc 1 228 0
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 64
 1373              		@ frame_needed = 1, uses_anonymous_args = 0
 1374 0000 80B5     		push	{r7, lr}
 1375              		.cfi_def_cfa_offset 8
 1376              		.cfi_offset 7, -8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 30


 1377              		.cfi_offset 14, -4
 1378 0002 90B0     		sub	sp, sp, #64
 1379              		.cfi_def_cfa_offset 72
 1380 0004 00AF     		add	r7, sp, #0
 1381              		.cfi_def_cfa_register 7
 229:.\main.c      **** 
 230:.\main.c      **** // ----- INITIALIZATIONS ----------
 231:.\main.c      ****     CYGlobalIntEnable;
 1382              		.loc 1 231 0
 1383              	@ 231 ".\main.c" 1
 1384 0006 62B6     		CPSIE   i
 1385              	@ 0 "" 2
 232:.\main.c      ****     if(ENABLE_PWM)
 233:.\main.c      ****     {
 234:.\main.c      ****         PWM_1_Start();// starting the pwm
 1386              		.loc 1 234 0
 1387              		.thumb
 1388 0008 FFF7FEFF 		bl	PWM_1_Start
 235:.\main.c      ****         PWM_2_Start();// starting the pwm
 1389              		.loc 1 235 0
 1390 000c FFF7FEFF 		bl	PWM_2_Start
 236:.\main.c      ****     }
 237:.\main.c      ****     
 238:.\main.c      ****     if(ENABLE_ADC)
 239:.\main.c      ****     {
 240:.\main.c      ****         ADC_Start();
 241:.\main.c      ****         isr_eoc_StartEx(adc_isr);
 242:.\main.c      ****         //ADC_StartConvert();
 243:.\main.c      ****         
 244:.\main.c      ****         //start the ADC timer for software trigger mode
 245:.\main.c      ****         Timer_TS_Start();
 246:.\main.c      ****         isr_TS_StartEx(isr_adcTimer);
 247:.\main.c      ****     }
 248:.\main.c      ****     
 249:.\main.c      ****     if (ENABLE_QUAD)
 250:.\main.c      ****     {
 251:.\main.c      ****         QuadDec_M1_Start();
 1391              		.loc 1 251 0
 1392 0010 FFF7FEFF 		bl	QuadDec_M1_Start
 252:.\main.c      ****         QuadDec_M2_Start();
 1393              		.loc 1 252 0
 1394 0014 FFF7FEFF 		bl	QuadDec_M2_Start
 253:.\main.c      ****         
 254:.\main.c      ****         isr_quad1_StartEx(isr_quad1);
 1395              		.loc 1 254 0
 1396 0018 B148     		ldr	r0, .L103
 1397 001a FFF7FEFF 		bl	isr_quad1_StartEx
 255:.\main.c      ****         isr_turn_count_StartEx(isr_turn_timer);
 1398              		.loc 1 255 0
 1399 001e B148     		ldr	r0, .L103+4
 1400 0020 FFF7FEFF 		bl	isr_turn_count_StartEx
 256:.\main.c      ****         
 257:.\main.c      ****         Timer_1_Start();
 1401              		.loc 1 257 0
 1402 0024 FFF7FEFF 		bl	Timer_1_Start
 258:.\main.c      ****     }
 259:.\main.c      ****     
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 31


 260:.\main.c      ****     if(ENABLE_STOP){
 261:.\main.c      ****         isr_OnLine_StartEx(Stop_on_line);
 262:.\main.c      ****         
 263:.\main.c      ****     }
 264:.\main.c      ****     isr_button_StartEx(button);
 1403              		.loc 1 264 0
 1404 0028 AF48     		ldr	r0, .L103+8
 1405 002a FFF7FEFF 		bl	isr_button_StartEx
 265:.\main.c      ****     isr_action_deadzone_StartEx(isr_deadzone);
 1406              		.loc 1 265 0
 1407 002e AF48     		ldr	r0, .L103+12
 1408 0030 FFF7FEFF 		bl	isr_action_deadzone_StartEx
 266:.\main.c      **** 
 267:.\main.c      ****     // ------USB SETUP ----------------    
 268:.\main.c      ****     if (USE_USB){    
 269:.\main.c      ****         USBUART_Start(0,USBUART_5V_OPERATION);
 1409              		.loc 1 269 0
 1410 0034 0020     		movs	r0, #0
 1411 0036 0121     		movs	r1, #1
 1412 0038 FFF7FEFF 		bl	USBUART_Start
 270:.\main.c      ****         if (USBUART_GetConfiguration())
 1413              		.loc 1 270 0
 1414 003c FFF7FEFF 		bl	USBUART_GetConfiguration
 1415 0040 0346     		mov	r3, r0
 1416 0042 002B     		cmp	r3, #0
 1417 0044 01D0     		beq	.L37
 271:.\main.c      ****             {
 272:.\main.c      ****                  USBUART_CDC_Init();
 1418              		.loc 1 272 0
 1419 0046 FFF7FEFF 		bl	USBUART_CDC_Init
 1420              	.L37:
 273:.\main.c      ****             }
 274:.\main.c      ****     }
 275:.\main.c      ****     
 276:.\main.c      ****     if(BIN_ENABLED){
 1421              		.loc 1 276 0
 1422 004a A94B     		ldr	r3, .L103+16
 1423 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1424 004e 002B     		cmp	r3, #0
 1425 0050 01D0     		beq	.L38
 277:.\main.c      ****         changeToRF();
 1426              		.loc 1 277 0
 1427 0052 FFF7FEFF 		bl	changeToRF
 1428              	.L38:
 278:.\main.c      ****     }
 279:.\main.c      ****     
 280:.\main.c      ****     if(BT_ENABLED){
 1429              		.loc 1 280 0
 1430 0056 A74B     		ldr	r3, .L103+20
 1431 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1432 005a 002B     		cmp	r3, #0
 1433 005c 01D0     		beq	.L39
 281:.\main.c      ****         changeToBT();
 1434              		.loc 1 281 0
 1435 005e FFF7FEFF 		bl	changeToBT
 1436              	.L39:
 282:.\main.c      ****     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 32


 283:.\main.c      ****     
 284:.\main.c      ****     uint16 actionDebounce = 0;
 1437              		.loc 1 284 0
 1438 0062 0023     		movs	r3, #0
 1439 0064 FB87     		strh	r3, [r7, #62]	@ movhi
 1440              	.L100:
 285:.\main.c      ****     
 286:.\main.c      ****     //usbPutString("Started");
 287:.\main.c      ****     for(;;)
 288:.\main.c      ****     {
 289:.\main.c      ****         if(ENABLE_ADC) print_ADC();
 290:.\main.c      ****         if(ENABLE_QUAD) Quad_Dec_response();
 1441              		.loc 1 290 0
 1442 0066 FFF7FEFF 		bl	Quad_Dec_response
 291:.\main.c      ****         if(BIN_ENABLED == 1)
 1443              		.loc 1 291 0
 1444 006a A14B     		ldr	r3, .L103+16
 1445 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1446 006e 012B     		cmp	r3, #1
 1447 0070 03D1     		bne	.L40
 292:.\main.c      ****         {
 293:.\main.c      ****             handle_rx_binary();
 1448              		.loc 1 293 0
 1449 0072 FFF7FEFF 		bl	handle_rx_binary
 294:.\main.c      ****             print_RF();
 1450              		.loc 1 294 0
 1451 0076 FFF7FEFF 		bl	print_RF
 1452              	.L40:
 295:.\main.c      ****         }
 296:.\main.c      ****         // NO_TRACK, CURVE_TRACK, U_TRACK, SQUARE_TRACK
 297:.\main.c      ****        
 298:.\main.c      ****         readFrontSensors(frontSensors);
 1453              		.loc 1 298 0
 1454 007a 9F48     		ldr	r0, .L103+24
 1455 007c FFF7FEFF 		bl	readFrontSensors
 299:.\main.c      ****         
 300:.\main.c      ****         switch(track_mode)
 1456              		.loc 1 300 0
 1457 0080 9E4B     		ldr	r3, .L103+28
 1458 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1459 0084 072B     		cmp	r3, #7
 1460 0086 00F24783 		bhi	.L41
 1461 008a 01A2     		adr	r2, .L43
 1462 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1463              		.p2align 2
 1464              	.L43:
 1465 0090 19070000 		.word	.L41+1
 1466 0094 19070000 		.word	.L41+1
 1467 0098 19070000 		.word	.L41+1
 1468 009c B1000000 		.word	.L46+1
 1469 00a0 19070000 		.word	.L41+1
 1470 00a4 F5000000 		.word	.L48+1
 1471 00a8 1B010000 		.word	.L49+1
 1472 00ac 1B010000 		.word	.L49+1
 1473              		.p2align 1
 1474              	.L46:
 301:.\main.c      ****         {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 33


 302:.\main.c      ****             case SQUARE_TRACK:
 303:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN)
 1475              		.loc 1 303 0
 1476 00b0 934B     		ldr	r3, .L103+32
 1477 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1478 00b4 012B     		cmp	r3, #1
 1479 00b6 1CD0     		beq	.L50
 1480              		.loc 1 303 0 is_stmt 0 discriminator 1
 1481 00b8 914B     		ldr	r3, .L103+32
 1482 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1483 00bc 022B     		cmp	r3, #2
 1484 00be 18D0     		beq	.L50
 304:.\main.c      ****                 {
 305:.\main.c      ****                     if(frontSensors[0] == 1 && frontSensors[2] == 1){ //left turn
 1485              		.loc 1 305 0 is_stmt 1
 1486 00c0 8D4B     		ldr	r3, .L103+24
 1487 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1488 00c4 012B     		cmp	r3, #1
 1489 00c6 06D1     		bne	.L51
 1490              		.loc 1 305 0 is_stmt 0 discriminator 1
 1491 00c8 8B4B     		ldr	r3, .L103+24
 1492 00ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1493 00cc 012B     		cmp	r3, #1
 1494 00ce 02D1     		bne	.L51
 306:.\main.c      ****                         initTurnLeft();
 1495              		.loc 1 306 0 is_stmt 1
 1496 00d0 FFF7FEFF 		bl	initTurnLeft
 1497 00d4 0DE0     		b	.L50
 1498              	.L51:
 307:.\main.c      ****                     }
 308:.\main.c      ****                     else if (frontSensors[4] == 1 && frontSensors[2] == 1) //right turn
 1499              		.loc 1 308 0
 1500 00d6 884B     		ldr	r3, .L103+24
 1501 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1502 00da 012B     		cmp	r3, #1
 1503 00dc 06D1     		bne	.L52
 1504              		.loc 1 308 0 is_stmt 0 discriminator 1
 1505 00de 864B     		ldr	r3, .L103+24
 1506 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1507 00e2 012B     		cmp	r3, #1
 1508 00e4 02D1     		bne	.L52
 309:.\main.c      ****                     {
 310:.\main.c      ****                         initTurnRight();
 1509              		.loc 1 310 0 is_stmt 1
 1510 00e6 FFF7FEFF 		bl	initTurnRight
 1511 00ea 02E0     		b	.L50
 1512              	.L52:
 311:.\main.c      ****                     }
 312:.\main.c      ****                     else inittrackLineZ();
 1513              		.loc 1 312 0
 1514 00ec FFF7FEFF 		bl	inittrackLineZ
 313:.\main.c      ****                 }
 314:.\main.c      ****             break;
 1515              		.loc 1 314 0
 1516 00f0 12E3     		b	.L41
 1517              	.L50:
 1518 00f2 11E3     		b	.L41
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 34


 1519              	.L48:
 315:.\main.c      ****             case NO_TRACK:
 316:.\main.c      ****             break;
 317:.\main.c      ****             case CURVE_TRACK:
 318:.\main.c      ****             break;
 319:.\main.c      ****             case U_TRACK:
 320:.\main.c      ****             break;
 321:.\main.c      ****             case QUAD_STOP:
 322:.\main.c      ****             break;
 323:.\main.c      ****             case RF_STOP:
 324:.\main.c      ****                 if(initial_pos_valid == 1)
 1520              		.loc 1 324 0
 1521 00f4 834B     		ldr	r3, .L103+36
 1522 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1523 00f8 012B     		cmp	r3, #1
 1524 00fa 0DD1     		bne	.L53
 325:.\main.c      ****                 {
 326:.\main.c      ****                     //changeToBT();
 327:.\main.c      ****                    // UART_PutString("Valid RF detected!");
 328:.\main.c      ****                     //changeToRF();
 329:.\main.c      ****                     initial_x_pos = system_state.robot_xpos;
 1525              		.loc 1 329 0
 1526 00fc 824B     		ldr	r3, .L103+40
 1527 00fe 5A88     		ldrh	r2, [r3, #2]
 1528 0100 824B     		ldr	r3, .L103+44
 1529 0102 1A80     		strh	r2, [r3]	@ movhi
 330:.\main.c      ****                     initial_y_pos = system_state.robot_ypos;
 1530              		.loc 1 330 0
 1531 0104 804B     		ldr	r3, .L103+40
 1532 0106 9A88     		ldrh	r2, [r3, #4]
 1533 0108 814B     		ldr	r3, .L103+48
 1534 010a 1A80     		strh	r2, [r3]	@ movhi
 331:.\main.c      ****                     initial_pos_valid = 2;
 1535              		.loc 1 331 0
 1536 010c 7D4B     		ldr	r3, .L103+36
 1537 010e 0222     		movs	r2, #2
 1538 0110 1A70     		strb	r2, [r3]
 332:.\main.c      ****                     initForward();
 1539              		.loc 1 332 0
 1540 0112 FFF7FEFF 		bl	initForward
 333:.\main.c      ****                 }
 334:.\main.c      ****             break;
 1541              		.loc 1 334 0
 1542 0116 FFE2     		b	.L41
 1543              	.L53:
 1544 0118 FEE2     		b	.L41
 1545              	.L49:
 335:.\main.c      ****             case MAP_TRAVERSE:
 336:.\main.c      ****             case DEST_TEST:
 337:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN && movement_state != UTURN){
 1546              		.loc 1 337 0
 1547 011a 794B     		ldr	r3, .L103+32
 1548 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1549 011e 012B     		cmp	r3, #1
 1550 0120 00F0F982 		beq	.L54
 1551              		.loc 1 337 0 is_stmt 0 discriminator 1
 1552 0124 764B     		ldr	r3, .L103+32
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 35


 1553 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1554 0128 022B     		cmp	r3, #2
 1555 012a 00F0F482 		beq	.L54
 1556              		.loc 1 337 0 discriminator 2
 1557 012e 744B     		ldr	r3, .L103+32
 1558 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1559 0132 072B     		cmp	r3, #7
 1560 0134 00F0EF82 		beq	.L54
 1561              	.LBB4:
 338:.\main.c      ****                     //when we hit an intersection, verify the next step then evaluate
 339:.\main.c      ****                     char nextStep = instructions[instructionCount];
 1562              		.loc 1 339 0 is_stmt 1
 1563 0138 764B     		ldr	r3, .L103+52
 1564 013a 1B88     		ldrh	r3, [r3]
 1565 013c 1A46     		mov	r2, r3
 1566 013e 764B     		ldr	r3, .L103+56
 1567 0140 9B5C     		ldrb	r3, [r3, r2]
 1568 0142 87F83D30 		strb	r3, [r7, #61]
 340:.\main.c      ****                     uint8 leftOn = frontSensors[0] && frontSensors[2];
 1569              		.loc 1 340 0
 1570 0146 6C4B     		ldr	r3, .L103+24
 1571 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1572 014a 002B     		cmp	r3, #0
 1573 014c 05D0     		beq	.L55
 1574              		.loc 1 340 0 is_stmt 0 discriminator 1
 1575 014e 6A4B     		ldr	r3, .L103+24
 1576 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1577 0152 002B     		cmp	r3, #0
 1578 0154 01D0     		beq	.L55
 1579              		.loc 1 340 0 discriminator 3
 1580 0156 0123     		movs	r3, #1
 1581 0158 00E0     		b	.L56
 1582              	.L55:
 1583              		.loc 1 340 0 discriminator 4
 1584 015a 0023     		movs	r3, #0
 1585              	.L56:
 1586              		.loc 1 340 0 discriminator 6
 1587 015c 87F83930 		strb	r3, [r7, #57]
 341:.\main.c      ****                     uint8 rightOn = frontSensors[4] && frontSensors[2];
 1588              		.loc 1 341 0 is_stmt 1 discriminator 6
 1589 0160 654B     		ldr	r3, .L103+24
 1590 0162 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1591 0164 002B     		cmp	r3, #0
 1592 0166 05D0     		beq	.L57
 1593              		.loc 1 341 0 is_stmt 0 discriminator 1
 1594 0168 634B     		ldr	r3, .L103+24
 1595 016a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1596 016c 002B     		cmp	r3, #0
 1597 016e 01D0     		beq	.L57
 1598              		.loc 1 341 0 discriminator 3
 1599 0170 0123     		movs	r3, #1
 1600 0172 00E0     		b	.L58
 1601              	.L57:
 1602              		.loc 1 341 0 discriminator 4
 1603 0174 0023     		movs	r3, #0
 1604              	.L58:
 1605              		.loc 1 341 0 discriminator 6
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 36


 1606 0176 87F83830 		strb	r3, [r7, #56]
 342:.\main.c      ****                     if((leftOn && (nextStep != 'R')) || (rightOn && (nextStep != 'L'))){ //intersec
 1607              		.loc 1 342 0 is_stmt 1 discriminator 6
 1608 017a 97F83930 		ldrb	r3, [r7, #57]	@ zero_extendqisi2
 1609 017e 002B     		cmp	r3, #0
 1610 0180 03D0     		beq	.L59
 1611              		.loc 1 342 0 is_stmt 0 discriminator 1
 1612 0182 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1613 0186 522B     		cmp	r3, #82
 1614 0188 09D1     		bne	.L60
 1615              	.L59:
 1616              		.loc 1 342 0 discriminator 3
 1617 018a 97F83830 		ldrb	r3, [r7, #56]	@ zero_extendqisi2
 1618 018e 002B     		cmp	r3, #0
 1619 0190 00F00E81 		beq	.L61
 1620              		.loc 1 342 0 discriminator 4
 1621 0194 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1622 0198 4C2B     		cmp	r3, #76
 1623 019a 00F00981 		beq	.L61
 1624              	.L60:
 343:.\main.c      ****                         if(sensorsDisabled == 0)
 1625              		.loc 1 343 0 is_stmt 1
 1626 019e 5F4B     		ldr	r3, .L103+60
 1627 01a0 1B68     		ldr	r3, [r3]
 1628 01a2 002B     		cmp	r3, #0
 1629 01a4 40F00381 		bne	.L62
 344:.\main.c      ****                         {
 345:.\main.c      ****                             actionDebounce++;
 1630              		.loc 1 345 0
 1631 01a8 FB8F     		ldrh	r3, [r7, #62]
 1632 01aa 0133     		adds	r3, r3, #1
 1633 01ac FB87     		strh	r3, [r7, #62]	@ movhi
 346:.\main.c      ****                             if(actionDebounce >= 400)
 1634              		.loc 1 346 0
 1635 01ae FB8F     		ldrh	r3, [r7, #62]
 1636 01b0 B3F5C87F 		cmp	r3, #400
 1637 01b4 C0F0FB80 		bcc	.L62
 1638              	.LBB5:
 347:.\main.c      ****                             {
 348:.\main.c      ****                                 char mes[16];
 349:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1639              		.loc 1 349 0
 1640 01b8 594B     		ldr	r3, .L103+64
 1641 01ba 1B88     		ldrh	r3, [r3]
 1642 01bc 1BB2     		sxth	r3, r3
 1643 01be 07F12402 		add	r2, r7, #36
 1644 01c2 1046     		mov	r0, r2
 1645 01c4 5749     		ldr	r1, .L103+68
 1646 01c6 1A46     		mov	r2, r3
 1647 01c8 FFF7FEFF 		bl	sprintf
 350:.\main.c      ****                                  UART_PutString(mes);
 1648              		.loc 1 350 0
 1649 01cc 07F12403 		add	r3, r7, #36
 1650 01d0 1846     		mov	r0, r3
 1651 01d2 FFF7FEFF 		bl	UART_PutString
 351:.\main.c      ****                             if(reached_target == 1)
 1652              		.loc 1 351 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 37


 1653 01d6 544B     		ldr	r3, .L103+72
 1654 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1655 01da 012B     		cmp	r3, #1
 1656 01dc 40F0E780 		bne	.L62
 1657              	.LBB6:
 352:.\main.c      ****                             {
 353:.\main.c      **** //                                if(nextStep == 'D')
 354:.\main.c      **** //                                {
 355:.\main.c      **** //                                    instructionCount += 2;
 356:.\main.c      **** //                                    nextStep = instructions[instructionCount]; 
 357:.\main.c      **** //                                }
 358:.\main.c      ****                                 
 359:.\main.c      ****                                 sensorsDisabled = 1;
 1658              		.loc 1 359 0
 1659 01e0 4E4B     		ldr	r3, .L103+60
 1660 01e2 0122     		movs	r2, #1
 1661 01e4 1A60     		str	r2, [r3]
 360:.\main.c      ****                                 UART_PutString("Trigger intersection\r\n");
 1662              		.loc 1 360 0
 1663 01e6 5148     		ldr	r0, .L103+76
 1664 01e8 FFF7FEFF 		bl	UART_PutString
 361:.\main.c      ****                                 UART_PutString("Deadzone enter\r\n");
 1665              		.loc 1 361 0
 1666 01ec 5048     		ldr	r0, .L103+80
 1667 01ee FFF7FEFF 		bl	UART_PutString
 362:.\main.c      ****                                 deadzone = 1;
 1668              		.loc 1 362 0
 1669 01f2 504B     		ldr	r3, .L103+84
 1670 01f4 0122     		movs	r2, #1
 1671 01f6 1A70     		strb	r2, [r3]
 363:.\main.c      ****                                 
 364:.\main.c      ****                                 accum_dist = 0;
 1672              		.loc 1 364 0
 1673 01f8 494B     		ldr	r3, .L103+64
 1674 01fa 0022     		movs	r2, #0
 1675 01fc 1A80     		strh	r2, [r3]	@ movhi
 365:.\main.c      ****                                 uint8 nextStepDist;
 366:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 1676              		.loc 1 366 0
 1677 01fe 454B     		ldr	r3, .L103+52
 1678 0200 1B88     		ldrh	r3, [r3]
 1679 0202 1A46     		mov	r2, r3
 1680 0204 4C4B     		ldr	r3, .L103+88
 1681 0206 1B88     		ldrh	r3, [r3]
 1682 0208 053B     		subs	r3, r3, #5
 1683 020a 9A42     		cmp	r2, r3
 1684 020c 07DC     		bgt	.L64
 1685              		.loc 1 366 0 is_stmt 0 discriminator 1
 1686 020e 414B     		ldr	r3, .L103+52
 1687 0210 1B88     		ldrh	r3, [r3]
 1688 0212 0333     		adds	r3, r3, #3
 1689 0214 404A     		ldr	r2, .L103+56
 1690 0216 D35C     		ldrb	r3, [r2, r3]
 1691 0218 87F83C30 		strb	r3, [r7, #60]
 1692 021c 02E0     		b	.L65
 1693              	.L64:
 367:.\main.c      ****                                 else nextStepDist = 0;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 38


 1694              		.loc 1 367 0 is_stmt 1
 1695 021e 0023     		movs	r3, #0
 1696 0220 87F83C30 		strb	r3, [r7, #60]
 1697              	.L65:
 368:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 1698              		.loc 1 368 0
 1699 0224 97F83C30 		ldrb	r3, [r7, #60]	@ zero_extendqisi2
 1700 0228 9BB2     		uxth	r3, r3
 1701 022a 1A46     		mov	r2, r3	@ movhi
 1702 022c 9200     		lsls	r2, r2, #2
 1703 022e 1344     		add	r3, r3, r2
 1704 0230 1A46     		mov	r2, r3	@ movhi
 1705 0232 D200     		lsls	r2, r2, #3
 1706 0234 D31A     		subs	r3, r2, r3
 1707 0236 9B00     		lsls	r3, r3, #2
 1708 0238 9BB2     		uxth	r3, r3
 1709 023a 9AB2     		uxth	r2, r3
 1710 023c 3F4B     		ldr	r3, .L103+92
 1711 023e 1A80     		strh	r2, [r3]	@ movhi
 369:.\main.c      ****                                 
 370:.\main.c      ****                                 
 371:.\main.c      ****                                 
 372:.\main.c      ****                                 switch(nextStep)
 1712              		.loc 1 372 0
 1713 0240 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1714 0244 4C3B     		subs	r3, r3, #76
 1715 0246 092B     		cmp	r3, #9
 1716 0248 7CD8     		bhi	.L101
 1717 024a 01A2     		adr	r2, .L68
 1718 024c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1719              		.p2align 2
 1720              	.L68:
 1721 0250 87020000 		.word	.L67+1
 1722 0254 45030000 		.word	.L101+1
 1723 0258 45030000 		.word	.L101+1
 1724 025c 45030000 		.word	.L101+1
 1725 0260 45030000 		.word	.L101+1
 1726 0264 45030000 		.word	.L101+1
 1727 0268 A5020000 		.word	.L69+1
 1728 026c 79020000 		.word	.L70+1
 1729 0270 45030000 		.word	.L101+1
 1730 0274 C3020000 		.word	.L71+1
 1731              		.p2align 1
 1732              	.L70:
 373:.\main.c      ****                                 {
 374:.\main.c      ****                                     case 'S':
 375:.\main.c      ****                                         inittrackLineZ();
 1733              		.loc 1 375 0
 1734 0278 FFF7FEFF 		bl	inittrackLineZ
 376:.\main.c      ****                                          Timer_Deadzone_WriteCounter(S_DEADZONE);
 1735              		.loc 1 376 0
 1736 027c 42F21070 		movw	r0, #10000
 1737 0280 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 377:.\main.c      ****                                         //do nothing
 378:.\main.c      ****                                     break;
 1738              		.loc 1 378 0
 1739 0284 5FE0     		b	.L72
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 39


 1740              	.L67:
 379:.\main.c      ****                                     case 'L':
 380:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 381:.\main.c      ****                                         initTurnLeft();
 1741              		.loc 1 381 0
 1742 0286 FFF7FEFF 		bl	initTurnLeft
 382:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1743              		.loc 1 382 0
 1744 028a 4CF25030 		movw	r0, #50000
 1745 028e FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 383:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1746              		.loc 1 383 0
 1747 0292 2A4B     		ldr	r3, .L103+92
 1748 0294 1B88     		ldrh	r3, [r3]
 1749 0296 9BB2     		uxth	r3, r3
 1750 0298 863B     		subs	r3, r3, #134
 1751 029a 9BB2     		uxth	r3, r3
 1752 029c 9AB2     		uxth	r2, r3
 1753 029e 274B     		ldr	r3, .L103+92
 1754 02a0 1A80     		strh	r2, [r3]	@ movhi
 384:.\main.c      ****                                     break;
 1755              		.loc 1 384 0
 1756 02a2 50E0     		b	.L72
 1757              	.L69:
 385:.\main.c      ****                                     case 'R':
 386:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 387:.\main.c      ****                                         initTurnRight();
 1758              		.loc 1 387 0
 1759 02a4 FFF7FEFF 		bl	initTurnRight
 388:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1760              		.loc 1 388 0
 1761 02a8 244B     		ldr	r3, .L103+92
 1762 02aa 1B88     		ldrh	r3, [r3]
 1763 02ac 9BB2     		uxth	r3, r3
 1764 02ae 863B     		subs	r3, r3, #134
 1765 02b0 9BB2     		uxth	r3, r3
 1766 02b2 9AB2     		uxth	r2, r3
 1767 02b4 214B     		ldr	r3, .L103+92
 1768 02b6 1A80     		strh	r2, [r3]	@ movhi
 389:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 390:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1769              		.loc 1 390 0
 1770 02b8 4CF25030 		movw	r0, #50000
 1771 02bc FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 391:.\main.c      ****                                     break;
 1772              		.loc 1 391 0
 1773 02c0 41E0     		b	.L72
 1774              	.L71:
 392:.\main.c      ****                                     case 'U':
 393:.\main.c      ****                                         // Direction not tracked any more
 394:.\main.c      ****                                         initTurnU();
 1775              		.loc 1 394 0
 1776 02c2 FFF7FEFF 		bl	initTurnU
 395:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 1777              		.loc 1 395 0
 1778 02c6 1E48     		ldr	r0, .L103+96
 1779 02c8 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 40


 396:.\main.c      ****                                         target_distance_quad -= U_OFFSET;
 1780              		.loc 1 396 0
 1781 02cc 1B4B     		ldr	r3, .L103+92
 1782 02ce 1B88     		ldrh	r3, [r3]
 1783 02d0 9BB2     		uxth	r3, r3
 1784 02d2 5D3B     		subs	r3, r3, #93
 1785 02d4 9BB2     		uxth	r3, r3
 1786 02d6 9AB2     		uxth	r2, r3
 1787 02d8 184B     		ldr	r3, .L103+92
 1788 02da 1A80     		strh	r2, [r3]	@ movhi
 397:.\main.c      ****                                         //target_distance_quad += 208;
 398:.\main.c      ****                                     break;
 1789              		.loc 1 398 0
 1790 02dc 33E0     		b	.L72
 1791              	.L104:
 1792 02de 00BF     		.align	2
 1793              	.L103:
 1794 02e0 00000000 		.word	isr_quad1
 1795 02e4 00000000 		.word	isr_turn_timer
 1796 02e8 00000000 		.word	button
 1797 02ec 00000000 		.word	isr_deadzone
 1798 02f0 00000000 		.word	BIN_ENABLED
 1799 02f4 00000000 		.word	BT_ENABLED
 1800 02f8 00000000 		.word	frontSensors
 1801 02fc 00000000 		.word	track_mode
 1802 0300 00000000 		.word	movement_state
 1803 0304 00000000 		.word	initial_pos_valid
 1804 0308 00000000 		.word	system_state
 1805 030c 00000000 		.word	initial_x_pos
 1806 0310 00000000 		.word	initial_y_pos
 1807 0314 00000000 		.word	instructionCount
 1808 0318 00000000 		.word	instructions
 1809 031c 00000000 		.word	sensorsDisabled
 1810 0320 00000000 		.word	accum_dist
 1811 0324 24000000 		.word	.LC2
 1812 0328 00000000 		.word	reached_target
 1813 032c 38000000 		.word	.LC3
 1814 0330 50000000 		.word	.LC4
 1815 0334 00000000 		.word	deadzone
 1816 0338 00000000 		.word	instructionLength
 1817 033c 00000000 		.word	target_distance_quad
 1818 0340 905F0100 		.word	90000
 1819              	.L101:
 399:.\main.c      ****                                     
 400:.\main.c      ****                                     default:
 401:.\main.c      ****                                         //do nothing
 402:.\main.c      ****                                         break;
 1820              		.loc 1 402 0
 1821 0344 00BF     		nop
 1822              	.L72:
 403:.\main.c      ****                                 }
 404:.\main.c      ****                                 if(target_distance_quad < 0) target_distance_quad = 0;
 1823              		.loc 1 404 0
 1824 0346 AD4B     		ldr	r3, .L105
 1825 0348 1B88     		ldrh	r3, [r3]
 1826 034a 1BB2     		sxth	r3, r3
 1827 034c 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 41


 1828 034e 02DA     		bge	.L73
 1829              		.loc 1 404 0 is_stmt 0 discriminator 1
 1830 0350 AA4B     		ldr	r3, .L105
 1831 0352 0022     		movs	r2, #0
 1832 0354 1A80     		strh	r2, [r3]	@ movhi
 1833              	.L73:
 405:.\main.c      ****                                 sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 1834              		.loc 1 405 0 is_stmt 1
 1835 0356 A94B     		ldr	r3, .L105
 1836 0358 1B88     		ldrh	r3, [r3]
 1837 035a 1BB2     		sxth	r3, r3
 1838 035c 07F12402 		add	r2, r7, #36
 1839 0360 1046     		mov	r0, r2
 1840 0362 A749     		ldr	r1, .L105+4
 1841 0364 1A46     		mov	r2, r3
 1842 0366 FFF7FEFF 		bl	sprintf
 406:.\main.c      ****                                  UART_PutString(mes);
 1843              		.loc 1 406 0
 1844 036a 07F12403 		add	r3, r7, #36
 1845 036e 1846     		mov	r0, r3
 1846 0370 FFF7FEFF 		bl	UART_PutString
 407:.\main.c      ****                                 
 408:.\main.c      ****                                 Timer_Deadzone_Start();
 1847              		.loc 1 408 0
 1848 0374 FFF7FEFF 		bl	Timer_Deadzone_Start
 409:.\main.c      ****                                 reached_target = 0;
 1849              		.loc 1 409 0
 1850 0378 A24B     		ldr	r3, .L105+8
 1851 037a 0022     		movs	r2, #0
 1852 037c 1A70     		strb	r2, [r3]
 410:.\main.c      ****                                 overshot_target = 0;
 1853              		.loc 1 410 0
 1854 037e A24B     		ldr	r3, .L105+12
 1855 0380 0022     		movs	r2, #0
 1856 0382 1A70     		strb	r2, [r3]
 411:.\main.c      ****                                 instructionCount += 2;
 1857              		.loc 1 411 0
 1858 0384 A14B     		ldr	r3, .L105+16
 1859 0386 1B88     		ldrh	r3, [r3]
 1860 0388 0233     		adds	r3, r3, #2
 1861 038a 9AB2     		uxth	r2, r3
 1862 038c 9F4B     		ldr	r3, .L105+16
 1863 038e 1A80     		strh	r2, [r3]	@ movhi
 412:.\main.c      ****                                 sprintf(mes, "instr count:%d\r\n", instructionCount);
 1864              		.loc 1 412 0
 1865 0390 9E4B     		ldr	r3, .L105+16
 1866 0392 1B88     		ldrh	r3, [r3]
 1867 0394 1A46     		mov	r2, r3
 1868 0396 07F12403 		add	r3, r7, #36
 1869 039a 1846     		mov	r0, r3
 1870 039c 9C49     		ldr	r1, .L105+20
 1871 039e FFF7FEFF 		bl	sprintf
 413:.\main.c      ****                                 UART_PutString(mes);
 1872              		.loc 1 413 0
 1873 03a2 07F12403 		add	r3, r7, #36
 1874 03a6 1846     		mov	r0, r3
 1875 03a8 FFF7FEFF 		bl	UART_PutString
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 42


 1876              	.LBE6:
 1877              	.LBE5:
 343:.\main.c      ****                         {
 1878              		.loc 1 343 0
 1879 03ac B3E1     		b	.L54
 1880              	.L62:
 343:.\main.c      ****                         {
 1881              		.loc 1 343 0 is_stmt 0 discriminator 1
 1882 03ae B2E1     		b	.L54
 1883              	.L61:
 414:.\main.c      ****                                 
 415:.\main.c      ****                             }
 416:.\main.c      ****                             }
 417:.\main.c      ****                         }
 418:.\main.c      ****                     }
 419:.\main.c      ****                     else if (frontSensors[0] == 0 && frontSensors[1] == 0 && frontSensors[2] == 0 &
 1884              		.loc 1 419 0 is_stmt 1
 1885 03b0 984B     		ldr	r3, .L105+24
 1886 03b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1887 03b4 002B     		cmp	r3, #0
 1888 03b6 40F0D380 		bne	.L74
 1889              		.loc 1 419 0 is_stmt 0 discriminator 1
 1890 03ba 964B     		ldr	r3, .L105+24
 1891 03bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1892 03be 002B     		cmp	r3, #0
 1893 03c0 40F0CE80 		bne	.L74
 1894              		.loc 1 419 0 discriminator 2
 1895 03c4 934B     		ldr	r3, .L105+24
 1896 03c6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1897 03c8 002B     		cmp	r3, #0
 1898 03ca 40F0C980 		bne	.L74
 1899              		.loc 1 419 0 discriminator 3
 1900 03ce 914B     		ldr	r3, .L105+24
 1901 03d0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1902 03d2 002B     		cmp	r3, #0
 1903 03d4 40F0C480 		bne	.L74
 1904              		.loc 1 419 0 discriminator 4
 1905 03d8 8E4B     		ldr	r3, .L105+24
 1906 03da 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1907 03dc 002B     		cmp	r3, #0
 1908 03de 40F0BF80 		bne	.L74
 1909              		.loc 1 419 0 discriminator 5
 1910 03e2 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1911 03e6 552B     		cmp	r3, #85
 1912 03e8 04D0     		beq	.L75
 1913              		.loc 1 419 0 discriminator 6
 1914 03ea 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1915 03ee 442B     		cmp	r3, #68
 1916 03f0 40F0B680 		bne	.L74
 1917              	.L75:
 420:.\main.c      ****                     {
 421:.\main.c      ****                         if(sensorsDisabled == 0)
 1918              		.loc 1 421 0 is_stmt 1
 1919 03f4 884B     		ldr	r3, .L105+28
 1920 03f6 1B68     		ldr	r3, [r3]
 1921 03f8 002B     		cmp	r3, #0
 1922 03fa 40F0B080 		bne	.L76
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 43


 422:.\main.c      ****                         {
 423:.\main.c      ****                                 if(nextStep == 'D')
 1923              		.loc 1 423 0
 1924 03fe 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1925 0402 442B     		cmp	r3, #68
 1926 0404 17D1     		bne	.L77
 1927              	.LBB7:
 424:.\main.c      ****                                 {
 425:.\main.c      ****                                     char nextInstruction = instructions[instructionCount+2];
 1928              		.loc 1 425 0
 1929 0406 814B     		ldr	r3, .L105+16
 1930 0408 1B88     		ldrh	r3, [r3]
 1931 040a 0233     		adds	r3, r3, #2
 1932 040c 834A     		ldr	r2, .L105+32
 1933 040e D35C     		ldrb	r3, [r2, r3]
 1934 0410 87F83730 		strb	r3, [r7, #55]
 426:.\main.c      ****                                     if(nextInstruction == 'U')
 1935              		.loc 1 426 0
 1936 0414 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 1937 0418 552B     		cmp	r3, #85
 1938 041a 0CD1     		bne	.L77
 427:.\main.c      ****                                     {
 428:.\main.c      ****                                         instructionCount += 2;
 1939              		.loc 1 428 0
 1940 041c 7B4B     		ldr	r3, .L105+16
 1941 041e 1B88     		ldrh	r3, [r3]
 1942 0420 0233     		adds	r3, r3, #2
 1943 0422 9AB2     		uxth	r2, r3
 1944 0424 794B     		ldr	r3, .L105+16
 1945 0426 1A80     		strh	r2, [r3]	@ movhi
 429:.\main.c      ****                                         nextStep = instructions[instructionCount];
 1946              		.loc 1 429 0
 1947 0428 784B     		ldr	r3, .L105+16
 1948 042a 1B88     		ldrh	r3, [r3]
 1949 042c 1A46     		mov	r2, r3
 1950 042e 7B4B     		ldr	r3, .L105+32
 1951 0430 9B5C     		ldrb	r3, [r3, r2]
 1952 0432 87F83D30 		strb	r3, [r7, #61]
 1953              	.L77:
 1954              	.LBE7:
 430:.\main.c      ****                                     }
 431:.\main.c      ****                                 }
 432:.\main.c      ****                                 
 433:.\main.c      ****                                 if(nextStep == 'U')
 1955              		.loc 1 433 0
 1956 0436 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 1957 043a 552B     		cmp	r3, #85
 1958 043c 40F08F80 		bne	.L76
 434:.\main.c      ****                                 {
 435:.\main.c      ****                                     actionDebounce++;
 1959              		.loc 1 435 0
 1960 0440 FB8F     		ldrh	r3, [r7, #62]
 1961 0442 0133     		adds	r3, r3, #1
 1962 0444 FB87     		strh	r3, [r7, #62]	@ movhi
 436:.\main.c      ****                                     if(actionDebounce >= 2400)
 1963              		.loc 1 436 0
 1964 0446 FB8F     		ldrh	r3, [r7, #62]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 44


 1965 0448 B3F5166F 		cmp	r3, #2400
 1966 044c C0F08780 		bcc	.L76
 437:.\main.c      ****                                     {
 438:.\main.c      ****                                         if(reached_target == 1)
 1967              		.loc 1 438 0
 1968 0450 6C4B     		ldr	r3, .L105+8
 1969 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1970 0454 012B     		cmp	r3, #1
 1971 0456 40F08280 		bne	.L76
 1972              	.LBB8:
 439:.\main.c      ****                                         {
 440:.\main.c      ****                                     char mes[16];
 441:.\main.c      ****                                     sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1973              		.loc 1 441 0
 1974 045a 714B     		ldr	r3, .L105+36
 1975 045c 1B88     		ldrh	r3, [r3]
 1976 045e 1BB2     		sxth	r3, r3
 1977 0460 07F11402 		add	r2, r7, #20
 1978 0464 1046     		mov	r0, r2
 1979 0466 6F49     		ldr	r1, .L105+40
 1980 0468 1A46     		mov	r2, r3
 1981 046a FFF7FEFF 		bl	sprintf
 442:.\main.c      ****                                      UART_PutString(mes);
 1982              		.loc 1 442 0
 1983 046e 07F11403 		add	r3, r7, #20
 1984 0472 1846     		mov	r0, r3
 1985 0474 FFF7FEFF 		bl	UART_PutString
 443:.\main.c      ****                                          accum_dist = 0;
 1986              		.loc 1 443 0
 1987 0478 694B     		ldr	r3, .L105+36
 1988 047a 0022     		movs	r2, #0
 1989 047c 1A80     		strh	r2, [r3]	@ movhi
 444:.\main.c      ****                                     uint8 nextStepDist;
 445:.\main.c      ****                                     if(instructionCount <= instructionLength - 5) nextStepDist = in
 1990              		.loc 1 445 0
 1991 047e 634B     		ldr	r3, .L105+16
 1992 0480 1B88     		ldrh	r3, [r3]
 1993 0482 1A46     		mov	r2, r3
 1994 0484 684B     		ldr	r3, .L105+44
 1995 0486 1B88     		ldrh	r3, [r3]
 1996 0488 053B     		subs	r3, r3, #5
 1997 048a 9A42     		cmp	r2, r3
 1998 048c 07DC     		bgt	.L78
 1999              		.loc 1 445 0 is_stmt 0 discriminator 1
 2000 048e 5F4B     		ldr	r3, .L105+16
 2001 0490 1B88     		ldrh	r3, [r3]
 2002 0492 0333     		adds	r3, r3, #3
 2003 0494 614A     		ldr	r2, .L105+32
 2004 0496 D35C     		ldrb	r3, [r2, r3]
 2005 0498 87F83B30 		strb	r3, [r7, #59]
 2006 049c 02E0     		b	.L79
 2007              	.L78:
 446:.\main.c      ****                                     else nextStepDist = 0;
 2008              		.loc 1 446 0 is_stmt 1
 2009 049e 0023     		movs	r3, #0
 2010 04a0 87F83B30 		strb	r3, [r7, #59]
 2011              	.L79:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 45


 447:.\main.c      ****                                     
 448:.\main.c      ****                                     target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 2012              		.loc 1 448 0
 2013 04a4 97F83B30 		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 2014 04a8 9BB2     		uxth	r3, r3
 2015 04aa 1A46     		mov	r2, r3	@ movhi
 2016 04ac 9200     		lsls	r2, r2, #2
 2017 04ae 1344     		add	r3, r3, r2
 2018 04b0 1A46     		mov	r2, r3	@ movhi
 2019 04b2 D200     		lsls	r2, r2, #3
 2020 04b4 D31A     		subs	r3, r2, r3
 2021 04b6 9B00     		lsls	r3, r3, #2
 2022 04b8 9BB2     		uxth	r3, r3
 2023 04ba 9AB2     		uxth	r2, r3
 2024 04bc 4F4B     		ldr	r3, .L105
 2025 04be 1A80     		strh	r2, [r3]	@ movhi
 449:.\main.c      ****                                     target_distance_quad -= U_OFFSET;
 2026              		.loc 1 449 0
 2027 04c0 4E4B     		ldr	r3, .L105
 2028 04c2 1B88     		ldrh	r3, [r3]
 2029 04c4 9BB2     		uxth	r3, r3
 2030 04c6 5D3B     		subs	r3, r3, #93
 2031 04c8 9BB2     		uxth	r3, r3
 2032 04ca 9AB2     		uxth	r2, r3
 2033 04cc 4B4B     		ldr	r3, .L105
 2034 04ce 1A80     		strh	r2, [r3]	@ movhi
 450:.\main.c      ****                                     //target_distance_quad += 208;
 451:.\main.c      ****                                     
 452:.\main.c      ****                                         UART_PutString("Trigger white light\r\n");
 2035              		.loc 1 452 0
 2036 04d0 5648     		ldr	r0, .L105+48
 2037 04d2 FFF7FEFF 		bl	UART_PutString
 453:.\main.c      ****                                         UART_PutString("Deadzone enter\r\n");
 2038              		.loc 1 453 0
 2039 04d6 5648     		ldr	r0, .L105+52
 2040 04d8 FFF7FEFF 		bl	UART_PutString
 454:.\main.c      ****                                         
 455:.\main.c      ****                                         deadzone = 1;
 2041              		.loc 1 455 0
 2042 04dc 554B     		ldr	r3, .L105+56
 2043 04de 0122     		movs	r2, #1
 2044 04e0 1A70     		strb	r2, [r3]
 456:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 2045              		.loc 1 456 0
 2046 04e2 5548     		ldr	r0, .L105+60
 2047 04e4 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 457:.\main.c      ****                                         if(target_distance_quad < 0) target_distance_quad = 0;
 2048              		.loc 1 457 0
 2049 04e8 444B     		ldr	r3, .L105
 2050 04ea 1B88     		ldrh	r3, [r3]
 2051 04ec 1BB2     		sxth	r3, r3
 2052 04ee 002B     		cmp	r3, #0
 2053 04f0 02DA     		bge	.L80
 2054              		.loc 1 457 0 is_stmt 0 discriminator 1
 2055 04f2 424B     		ldr	r3, .L105
 2056 04f4 0022     		movs	r2, #0
 2057 04f6 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 46


 2058              	.L80:
 458:.\main.c      ****                                         Timer_Deadzone_Start();
 2059              		.loc 1 458 0 is_stmt 1
 2060 04f8 FFF7FEFF 		bl	Timer_Deadzone_Start
 459:.\main.c      ****                                         actionDebounce = 0;
 2061              		.loc 1 459 0
 2062 04fc 0023     		movs	r3, #0
 2063 04fe FB87     		strh	r3, [r7, #62]	@ movhi
 460:.\main.c      ****                                         sensorsDisabled = 1;
 2064              		.loc 1 460 0
 2065 0500 454B     		ldr	r3, .L105+28
 2066 0502 0122     		movs	r2, #1
 2067 0504 1A60     		str	r2, [r3]
 461:.\main.c      ****                                         initTurnU();
 2068              		.loc 1 461 0
 2069 0506 FFF7FEFF 		bl	initTurnU
 462:.\main.c      ****                                         reached_target = 0;
 2070              		.loc 1 462 0
 2071 050a 3E4B     		ldr	r3, .L105+8
 2072 050c 0022     		movs	r2, #0
 2073 050e 1A70     		strb	r2, [r3]
 463:.\main.c      ****                                         overshot_target = 0;
 2074              		.loc 1 463 0
 2075 0510 3D4B     		ldr	r3, .L105+12
 2076 0512 0022     		movs	r2, #0
 2077 0514 1A70     		strb	r2, [r3]
 464:.\main.c      ****                                         instructionCount += 2;
 2078              		.loc 1 464 0
 2079 0516 3D4B     		ldr	r3, .L105+16
 2080 0518 1B88     		ldrh	r3, [r3]
 2081 051a 0233     		adds	r3, r3, #2
 2082 051c 9AB2     		uxth	r2, r3
 2083 051e 3B4B     		ldr	r3, .L105+16
 2084 0520 1A80     		strh	r2, [r3]	@ movhi
 465:.\main.c      ****                                         
 466:.\main.c      ****                                         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2085              		.loc 1 466 0
 2086 0522 364B     		ldr	r3, .L105
 2087 0524 1B88     		ldrh	r3, [r3]
 2088 0526 1BB2     		sxth	r3, r3
 2089 0528 07F11402 		add	r2, r7, #20
 2090 052c 1046     		mov	r0, r2
 2091 052e 3449     		ldr	r1, .L105+4
 2092 0530 1A46     		mov	r2, r3
 2093 0532 FFF7FEFF 		bl	sprintf
 467:.\main.c      ****                                         UART_PutString(mes);
 2094              		.loc 1 467 0
 2095 0536 07F11403 		add	r3, r7, #20
 2096 053a 1846     		mov	r0, r3
 2097 053c FFF7FEFF 		bl	UART_PutString
 468:.\main.c      ****                                         sprintf(mes, "instr count:%d\r\n", instructionCount);
 2098              		.loc 1 468 0
 2099 0540 324B     		ldr	r3, .L105+16
 2100 0542 1B88     		ldrh	r3, [r3]
 2101 0544 1A46     		mov	r2, r3
 2102 0546 07F11403 		add	r3, r7, #20
 2103 054a 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 47


 2104 054c 3049     		ldr	r1, .L105+20
 2105 054e FFF7FEFF 		bl	sprintf
 469:.\main.c      ****                                         UART_PutString(mes);
 2106              		.loc 1 469 0
 2107 0552 07F11403 		add	r3, r7, #20
 2108 0556 1846     		mov	r0, r3
 2109 0558 FFF7FEFF 		bl	UART_PutString
 2110              	.LBE8:
 421:.\main.c      ****                         {
 2111              		.loc 1 421 0
 2112 055c DBE0     		b	.L54
 2113              	.L76:
 421:.\main.c      ****                         {
 2114              		.loc 1 421 0 is_stmt 0 discriminator 3
 2115 055e DAE0     		b	.L54
 2116              	.L74:
 470:.\main.c      ****                                 }
 471:.\main.c      ****                                 }
 472:.\main.c      ****                             }
 473:.\main.c      ****                         }
 474:.\main.c      ****                     }
 475:.\main.c      ****                     else if (overshot_target == 1 && (nextStep == 'D' || nextStep == 'U' || nextSte
 2117              		.loc 1 475 0 is_stmt 1
 2118 0560 294B     		ldr	r3, .L105+12
 2119 0562 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2120 0564 012B     		cmp	r3, #1
 2121 0566 40F0D180 		bne	.L81
 2122              		.loc 1 475 0 is_stmt 0 discriminator 1
 2123 056a 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 2124 056e 442B     		cmp	r3, #68
 2125 0570 08D0     		beq	.L82
 2126              		.loc 1 475 0 discriminator 2
 2127 0572 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 2128 0576 552B     		cmp	r3, #85
 2129 0578 04D0     		beq	.L82
 2130              		.loc 1 475 0 discriminator 3
 2131 057a 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 2132 057e 532B     		cmp	r3, #83
 2133 0580 40F0C480 		bne	.L81
 2134              	.L82:
 2135              	.LBB9:
 476:.\main.c      ****                     {
 477:.\main.c      ****                         
 478:.\main.c      ****                                 //instructionCount += 2;
 479:.\main.c      ****                                 //nextStep = instructions[instructionCount]; 
 480:.\main.c      ****                                 char mes[16];
 481:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 2136              		.loc 1 481 0 is_stmt 1
 2137 0584 264B     		ldr	r3, .L105+36
 2138 0586 1B88     		ldrh	r3, [r3]
 2139 0588 1BB2     		sxth	r3, r3
 2140 058a 3A1D     		adds	r2, r7, #4
 2141 058c 1046     		mov	r0, r2
 2142 058e 2549     		ldr	r1, .L105+40
 2143 0590 1A46     		mov	r2, r3
 2144 0592 FFF7FEFF 		bl	sprintf
 482:.\main.c      ****                                  UART_PutString(mes);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 48


 2145              		.loc 1 482 0
 2146 0596 3B1D     		adds	r3, r7, #4
 2147 0598 1846     		mov	r0, r3
 2148 059a FFF7FEFF 		bl	UART_PutString
 483:.\main.c      ****                                  accum_dist = 0;
 2149              		.loc 1 483 0
 2150 059e 204B     		ldr	r3, .L105+36
 2151 05a0 0022     		movs	r2, #0
 2152 05a2 1A80     		strh	r2, [r3]	@ movhi
 484:.\main.c      ****                                 uint8 nextStepDist;
 485:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 2153              		.loc 1 485 0
 2154 05a4 194B     		ldr	r3, .L105+16
 2155 05a6 1B88     		ldrh	r3, [r3]
 2156 05a8 1A46     		mov	r2, r3
 2157 05aa 1F4B     		ldr	r3, .L105+44
 2158 05ac 1B88     		ldrh	r3, [r3]
 2159 05ae 053B     		subs	r3, r3, #5
 2160 05b0 9A42     		cmp	r2, r3
 2161 05b2 07DC     		bgt	.L83
 2162              		.loc 1 485 0 is_stmt 0 discriminator 1
 2163 05b4 154B     		ldr	r3, .L105+16
 2164 05b6 1B88     		ldrh	r3, [r3]
 2165 05b8 0333     		adds	r3, r3, #3
 2166 05ba 184A     		ldr	r2, .L105+32
 2167 05bc D35C     		ldrb	r3, [r2, r3]
 2168 05be 87F83A30 		strb	r3, [r7, #58]
 2169 05c2 02E0     		b	.L84
 2170              	.L83:
 486:.\main.c      ****                                 else nextStepDist = 0;
 2171              		.loc 1 486 0 is_stmt 1
 2172 05c4 0023     		movs	r3, #0
 2173 05c6 87F83A30 		strb	r3, [r7, #58]
 2174              	.L84:
 487:.\main.c      ****                                 
 488:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 2175              		.loc 1 488 0
 2176 05ca 97F83A30 		ldrb	r3, [r7, #58]	@ zero_extendqisi2
 2177 05ce 9BB2     		uxth	r3, r3
 2178 05d0 1A46     		mov	r2, r3	@ movhi
 2179 05d2 9200     		lsls	r2, r2, #2
 2180 05d4 1344     		add	r3, r3, r2
 2181 05d6 1A46     		mov	r2, r3	@ movhi
 2182 05d8 D200     		lsls	r2, r2, #3
 2183 05da D31A     		subs	r3, r2, r3
 2184 05dc 9B00     		lsls	r3, r3, #2
 2185 05de 9BB2     		uxth	r3, r3
 2186 05e0 9AB2     		uxth	r2, r3
 2187 05e2 064B     		ldr	r3, .L105
 2188 05e4 1A80     		strh	r2, [r3]	@ movhi
 489:.\main.c      ****                                 
 490:.\main.c      ****                                 
 491:.\main.c      ****                                     UART_PutString("Trigger quad\r\n");
 2189              		.loc 1 491 0
 2190 05e6 1548     		ldr	r0, .L105+64
 2191 05e8 FFF7FEFF 		bl	UART_PutString
 492:.\main.c      ****                                     switch(nextStep)
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 49


 2192              		.loc 1 492 0
 2193 05ec 97F83D30 		ldrb	r3, [r7, #61]	@ zero_extendqisi2
 2194 05f0 532B     		cmp	r3, #83
 2195 05f2 38D0     		beq	.L86
 2196 05f4 552B     		cmp	r3, #85
 2197 05f6 23D0     		beq	.L87
 2198 05f8 442B     		cmp	r3, #68
 493:.\main.c      ****                                     {
 494:.\main.c      ****                                         case 'U':
 495:.\main.c      ****                                              Timer_Deadzone_WriteCounter(U_DEADZONE);
 496:.\main.c      ****                                             initTurnU();
 497:.\main.c      ****                                             //target_distance_quad += 208;
 498:.\main.c      ****                                             target_distance_quad -= U_OFFSET;
 499:.\main.c      ****                                             Timer_Deadzone_Start();
 500:.\main.c      ****                                              deadzone = 1;
 501:.\main.c      ****                                         break;
 502:.\main.c      ****                                         case 'D':
 503:.\main.c      ****                                             //do nothing
 504:.\main.c      ****                                         break;
 2199              		.loc 1 504 0
 2200 05fa 59E0     		b	.L85
 2201              	.L106:
 2202              		.align	2
 2203              	.L105:
 2204 05fc 00000000 		.word	target_distance_quad
 2205 0600 64000000 		.word	.LC5
 2206 0604 00000000 		.word	reached_target
 2207 0608 00000000 		.word	overshot_target
 2208 060c 00000000 		.word	instructionCount
 2209 0610 78000000 		.word	.LC6
 2210 0614 00000000 		.word	frontSensors
 2211 0618 00000000 		.word	sensorsDisabled
 2212 061c 00000000 		.word	instructions
 2213 0620 00000000 		.word	accum_dist
 2214 0624 24000000 		.word	.LC2
 2215 0628 00000000 		.word	instructionLength
 2216 062c 8C000000 		.word	.LC7
 2217 0630 50000000 		.word	.LC4
 2218 0634 00000000 		.word	deadzone
 2219 0638 905F0100 		.word	90000
 2220 063c A4000000 		.word	.LC8
 2221              	.L87:
 495:.\main.c      ****                                             initTurnU();
 2222              		.loc 1 495 0
 2223 0640 4D48     		ldr	r0, .L107
 2224 0642 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 496:.\main.c      ****                                             //target_distance_quad += 208;
 2225              		.loc 1 496 0
 2226 0646 FFF7FEFF 		bl	initTurnU
 498:.\main.c      ****                                             Timer_Deadzone_Start();
 2227              		.loc 1 498 0
 2228 064a 4C4B     		ldr	r3, .L107+4
 2229 064c 1B88     		ldrh	r3, [r3]
 2230 064e 9BB2     		uxth	r3, r3
 2231 0650 5D3B     		subs	r3, r3, #93
 2232 0652 9BB2     		uxth	r3, r3
 2233 0654 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 50


 2234 0656 494B     		ldr	r3, .L107+4
 2235 0658 1A80     		strh	r2, [r3]	@ movhi
 499:.\main.c      ****                                              deadzone = 1;
 2236              		.loc 1 499 0
 2237 065a FFF7FEFF 		bl	Timer_Deadzone_Start
 500:.\main.c      ****                                         break;
 2238              		.loc 1 500 0
 2239 065e 484B     		ldr	r3, .L107+8
 2240 0660 0122     		movs	r2, #1
 2241 0662 1A70     		strb	r2, [r3]
 501:.\main.c      ****                                         case 'D':
 2242              		.loc 1 501 0
 2243 0664 24E0     		b	.L85
 2244              	.L86:
 505:.\main.c      ****                                         case 'S':
 506:.\main.c      ****                                             inittrackLineZ();
 2245              		.loc 1 506 0
 2246 0666 FFF7FEFF 		bl	inittrackLineZ
 507:.\main.c      ****                                             Timer_Deadzone_WriteCounter(S_DEADZONE);
 2247              		.loc 1 507 0
 2248 066a 42F21070 		movw	r0, #10000
 2249 066e FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 508:.\main.c      ****                                              target_distance_quad -= (QUAD_PER_UNIT * 0.5);
 2250              		.loc 1 508 0
 2251 0672 424B     		ldr	r3, .L107+4
 2252 0674 1B88     		ldrh	r3, [r3]
 2253 0676 1BB2     		sxth	r3, r3
 2254 0678 1846     		mov	r0, r3
 2255 067a FFF7FEFF 		bl	__aeabi_i2d
 2256 067e 0246     		mov	r2, r0
 2257 0680 0B46     		mov	r3, r1
 2258 0682 1046     		mov	r0, r2
 2259 0684 1946     		mov	r1, r3
 2260 0686 4FF00002 		mov	r2, #0
 2261 068a 3E4B     		ldr	r3, .L107+12
 2262 068c FFF7FEFF 		bl	__aeabi_dsub
 2263 0690 0246     		mov	r2, r0
 2264 0692 0B46     		mov	r3, r1
 2265 0694 1046     		mov	r0, r2
 2266 0696 1946     		mov	r1, r3
 2267 0698 FFF7FEFF 		bl	__aeabi_d2iz
 2268 069c 0346     		mov	r3, r0
 2269 069e 9AB2     		uxth	r2, r3
 2270 06a0 364B     		ldr	r3, .L107+4
 2271 06a2 1A80     		strh	r2, [r3]	@ movhi
 509:.\main.c      ****                                             Timer_Deadzone_Start();
 2272              		.loc 1 509 0
 2273 06a4 FFF7FEFF 		bl	Timer_Deadzone_Start
 510:.\main.c      ****                                             deadzone = 1;
 2274              		.loc 1 510 0
 2275 06a8 354B     		ldr	r3, .L107+8
 2276 06aa 0122     		movs	r2, #1
 2277 06ac 1A70     		strb	r2, [r3]
 511:.\main.c      ****                                         break;
 2278              		.loc 1 511 0
 2279 06ae 00BF     		nop
 2280              	.L85:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 51


 512:.\main.c      ****                                     }                                   
 513:.\main.c      ****                                     reached_target = 0;
 2281              		.loc 1 513 0
 2282 06b0 354B     		ldr	r3, .L107+16
 2283 06b2 0022     		movs	r2, #0
 2284 06b4 1A70     		strb	r2, [r3]
 514:.\main.c      ****                                     overshot_target = 0;
 2285              		.loc 1 514 0
 2286 06b6 354B     		ldr	r3, .L107+20
 2287 06b8 0022     		movs	r2, #0
 2288 06ba 1A70     		strb	r2, [r3]
 515:.\main.c      ****                                     instructionCount += 2;
 2289              		.loc 1 515 0
 2290 06bc 344B     		ldr	r3, .L107+24
 2291 06be 1B88     		ldrh	r3, [r3]
 2292 06c0 0233     		adds	r3, r3, #2
 2293 06c2 9AB2     		uxth	r2, r3
 2294 06c4 324B     		ldr	r3, .L107+24
 2295 06c6 1A80     		strh	r2, [r3]	@ movhi
 516:.\main.c      ****                                     if(target_distance_quad < 0) target_distance_quad = 0;
 2296              		.loc 1 516 0
 2297 06c8 2C4B     		ldr	r3, .L107+4
 2298 06ca 1B88     		ldrh	r3, [r3]
 2299 06cc 1BB2     		sxth	r3, r3
 2300 06ce 002B     		cmp	r3, #0
 2301 06d0 02DA     		bge	.L89
 2302              		.loc 1 516 0 is_stmt 0 discriminator 1
 2303 06d2 2A4B     		ldr	r3, .L107+4
 2304 06d4 0022     		movs	r2, #0
 2305 06d6 1A80     		strh	r2, [r3]	@ movhi
 2306              	.L89:
 517:.\main.c      ****                                     //Timer_Deadzone_Start();
 518:.\main.c      ****                                     //deadzone = 1;
 519:.\main.c      ****                                     sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2307              		.loc 1 519 0 is_stmt 1 discriminator 5
 2308 06d8 284B     		ldr	r3, .L107+4
 2309 06da 1B88     		ldrh	r3, [r3]
 2310 06dc 1BB2     		sxth	r3, r3
 2311 06de 3A1D     		adds	r2, r7, #4
 2312 06e0 1046     		mov	r0, r2
 2313 06e2 2C49     		ldr	r1, .L107+28
 2314 06e4 1A46     		mov	r2, r3
 2315 06e6 FFF7FEFF 		bl	sprintf
 520:.\main.c      ****                                     UART_PutString(mes);
 2316              		.loc 1 520 0 discriminator 5
 2317 06ea 3B1D     		adds	r3, r7, #4
 2318 06ec 1846     		mov	r0, r3
 2319 06ee FFF7FEFF 		bl	UART_PutString
 521:.\main.c      ****                                     sprintf(mes, "instr count:%d\r\n", instructionCount);
 2320              		.loc 1 521 0 discriminator 5
 2321 06f2 274B     		ldr	r3, .L107+24
 2322 06f4 1B88     		ldrh	r3, [r3]
 2323 06f6 1A46     		mov	r2, r3
 2324 06f8 3B1D     		adds	r3, r7, #4
 2325 06fa 1846     		mov	r0, r3
 2326 06fc 2649     		ldr	r1, .L107+32
 2327 06fe FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 52


 522:.\main.c      ****                                     UART_PutString(mes);
 2328              		.loc 1 522 0 discriminator 5
 2329 0702 3B1D     		adds	r3, r7, #4
 2330 0704 1846     		mov	r0, r3
 2331 0706 FFF7FEFF 		bl	UART_PutString
 2332              	.LBE9:
 476:.\main.c      ****                         
 2333              		.loc 1 476 0 discriminator 5
 2334 070a 04E0     		b	.L54
 2335              	.L81:
 523:.\main.c      ****                     }
 524:.\main.c      ****                     else
 525:.\main.c      ****                     {
 526:.\main.c      ****                         inittrackLineZ();
 2336              		.loc 1 526 0
 2337 070c FFF7FEFF 		bl	inittrackLineZ
 527:.\main.c      ****                         actionDebounce = 0;
 2338              		.loc 1 527 0
 2339 0710 0023     		movs	r3, #0
 2340 0712 FB87     		strh	r3, [r7, #62]	@ movhi
 2341              	.LBE4:
 528:.\main.c      ****                     }
 529:.\main.c      ****                 }
 530:.\main.c      ****                 break;
 2342              		.loc 1 530 0
 2343 0714 FFE7     		b	.L102
 2344              	.L54:
 2345              	.L102:
 2346 0716 00BF     		nop
 2347              	.L41:
 531:.\main.c      ****         }
 532:.\main.c      ****         
 533:.\main.c      ****         switch(movement_state)
 2348              		.loc 1 533 0
 2349 0718 204B     		ldr	r3, .L107+36
 2350 071a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2351 071c 072B     		cmp	r3, #7
 2352 071e 3FF6A2AC 		bhi	.L100
 2353 0722 01A2     		adr	r2, .L92
 2354 0724 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2355              		.p2align 2
 2356              	.L92:
 2357 0728 49070000 		.word	.L91+1
 2358 072c 4F070000 		.word	.L93+1
 2359 0730 55070000 		.word	.L94+1
 2360 0734 61070000 		.word	.L95+1
 2361 0738 67070000 		.word	.L96+1
 2362 073c 6D070000 		.word	.L97+1
 2363 0740 73070000 		.word	.L98+1
 2364 0744 5B070000 		.word	.L99+1
 2365              		.p2align 1
 2366              	.L91:
 534:.\main.c      ****         {
 535:.\main.c      ****             case DRIVE:
 536:.\main.c      ****                 driveForwards();
 2367              		.loc 1 536 0
 2368 0748 FFF7FEFF 		bl	driveForwards
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 53


 537:.\main.c      ****             break;
 2369              		.loc 1 537 0
 2370 074c 13E0     		b	.L90
 2371              	.L93:
 538:.\main.c      ****             case LTURN:
 539:.\main.c      ****                 turnLeft();
 2372              		.loc 1 539 0
 2373 074e FFF7FEFF 		bl	turnLeft
 540:.\main.c      ****             break;
 2374              		.loc 1 540 0
 2375 0752 10E0     		b	.L90
 2376              	.L94:
 541:.\main.c      ****             case RTURN:
 542:.\main.c      ****                 turnRight();
 2377              		.loc 1 542 0
 2378 0754 FFF7FEFF 		bl	turnRight
 543:.\main.c      ****             break;
 2379              		.loc 1 543 0
 2380 0758 0DE0     		b	.L90
 2381              	.L99:
 544:.\main.c      ****             case UTURN:
 545:.\main.c      ****                 turnU();
 2382              		.loc 1 545 0
 2383 075a FFF7FEFF 		bl	turnU
 546:.\main.c      ****             break;
 2384              		.loc 1 546 0
 2385 075e 0AE0     		b	.L90
 2386              	.L95:
 547:.\main.c      ****             case STOPPED:
 548:.\main.c      ****                 brakeMotor();
 2387              		.loc 1 548 0
 2388 0760 FFF7FEFF 		bl	brakeMotor
 549:.\main.c      ****             break;
 2389              		.loc 1 549 0
 2390 0764 07E0     		b	.L90
 2391              	.L96:
 550:.\main.c      ****             case TRACKING:
 551:.\main.c      ****                 trackLine();
 2392              		.loc 1 551 0
 2393 0766 FFF7FEFF 		bl	trackLine
 552:.\main.c      ****             break;
 2394              		.loc 1 552 0
 2395 076a 04E0     		b	.L90
 2396              	.L97:
 553:.\main.c      ****             case TRACKING_U:
 554:.\main.c      ****                 trackLineU();
 2397              		.loc 1 554 0
 2398 076c FFF7FEFF 		bl	trackLineU
 555:.\main.c      ****             break;
 2399              		.loc 1 555 0
 2400 0770 01E0     		b	.L90
 2401              	.L98:
 556:.\main.c      ****             case TRACKING_SOFT:
 557:.\main.c      ****                 trackLineZ();
 2402              		.loc 1 557 0
 2403 0772 FFF7FEFF 		bl	trackLineZ
 2404              	.L90:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 54


 558:.\main.c      ****         }      
 559:.\main.c      ****     }   
 2405              		.loc 1 559 0
 2406 0776 76E4     		b	.L100
 2407              	.L108:
 2408              		.align	2
 2409              	.L107:
 2410 0778 905F0100 		.word	90000
 2411 077c 00000000 		.word	target_distance_quad
 2412 0780 00000000 		.word	deadzone
 2413 0784 00805140 		.word	1079083008
 2414 0788 00000000 		.word	reached_target
 2415 078c 00000000 		.word	overshot_target
 2416 0790 00000000 		.word	instructionCount
 2417 0794 64000000 		.word	.LC5
 2418 0798 78000000 		.word	.LC6
 2419 079c 00000000 		.word	movement_state
 2420              		.cfi_endproc
 2421              	.LFE71:
 2422              		.size	main, .-main
 2423              		.section	.text.handle_rx_binary,"ax",%progbits
 2424              		.align	2
 2425              		.global	handle_rx_binary
 2426              		.thumb
 2427              		.thumb_func
 2428              		.type	handle_rx_binary, %function
 2429              	handle_rx_binary:
 2430              	.LFB72:
 560:.\main.c      **** }
 561:.\main.c      **** 
 562:.\main.c      **** /*-------------------------------------------------------------------------------------------------
 563:.\main.c      **** 
 564:.\main.c      **** void handle_rx_binary()
 565:.\main.c      **** {
 2431              		.loc 1 565 0
 2432              		.cfi_startproc
 2433              		@ args = 0, pretend = 0, frame = 32
 2434              		@ frame_needed = 1, uses_anonymous_args = 0
 2435              		@ link register save eliminated.
 2436 0000 80B4     		push	{r7}
 2437              		.cfi_def_cfa_offset 4
 2438              		.cfi_offset 7, -4
 2439 0002 89B0     		sub	sp, sp, #36
 2440              		.cfi_def_cfa_offset 40
 2441 0004 00AF     		add	r7, sp, #0
 2442              		.cfi_def_cfa_register 7
 566:.\main.c      ****     if(flag_rx == 1)
 2443              		.loc 1 566 0
 2444 0006 524B     		ldr	r3, .L129
 2445 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2446 000a 012B     		cmp	r3, #1
 2447 000c 40F09A80 		bne	.L109
 2448              	.LBB10:
 567:.\main.c      ****     {    
 568:.\main.c      ****         flag_rx = 0;
 2449              		.loc 1 568 0
 2450 0010 4F4B     		ldr	r3, .L129
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 55


 2451 0012 0022     		movs	r2, #0
 2452 0014 1A70     		strb	r2, [r3]
 569:.\main.c      ****         
 570:.\main.c      ****         uint16 packet_bytes = (packet[1] << 8) | (packet[0]);
 2453              		.loc 1 570 0
 2454 0016 4F4B     		ldr	r3, .L129+4
 2455 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2456 001a 1B02     		lsls	r3, r3, #8
 2457 001c 9AB2     		uxth	r2, r3
 2458 001e 4D4B     		ldr	r3, .L129+4
 2459 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2460 0022 9BB2     		uxth	r3, r3
 2461 0024 1343     		orrs	r3, r3, r2
 2462 0026 9BB2     		uxth	r3, r3
 2463 0028 FB83     		strh	r3, [r7, #30]	@ movhi
 571:.\main.c      ****         char byte_packet[12];
 572:.\main.c      ****         char string_packet[12];
 573:.\main.c      ****         
 574:.\main.c      ****         switch(byteCount)
 2464              		.loc 1 574 0
 2465 002a 4B4B     		ldr	r3, .L129+8
 2466 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2467 002e 043B     		subs	r3, r3, #4
 2468 0030 1E2B     		cmp	r3, #30
 2469 0032 00F28780 		bhi	.L109
 2470 0036 01A2     		adr	r2, .L113
 2471 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2472              		.p2align 2
 2473              	.L113:
 2474 003c B9000000 		.word	.L112+1
 2475 0040 45010000 		.word	.L109+1
 2476 0044 CD000000 		.word	.L114+1
 2477 0048 45010000 		.word	.L109+1
 2478 004c D5000000 		.word	.L115+1
 2479 0050 45010000 		.word	.L109+1
 2480 0054 DD000000 		.word	.L116+1
 2481 0058 45010000 		.word	.L109+1
 2482 005c E5000000 		.word	.L117+1
 2483 0060 45010000 		.word	.L109+1
 2484 0064 ED000000 		.word	.L118+1
 2485 0068 45010000 		.word	.L109+1
 2486 006c F5000000 		.word	.L119+1
 2487 0070 45010000 		.word	.L109+1
 2488 0074 FD000000 		.word	.L120+1
 2489 0078 45010000 		.word	.L109+1
 2490 007c 05010000 		.word	.L121+1
 2491 0080 45010000 		.word	.L109+1
 2492 0084 0D010000 		.word	.L122+1
 2493 0088 45010000 		.word	.L109+1
 2494 008c 15010000 		.word	.L123+1
 2495 0090 45010000 		.word	.L109+1
 2496 0094 1D010000 		.word	.L124+1
 2497 0098 45010000 		.word	.L109+1
 2498 009c 25010000 		.word	.L125+1
 2499 00a0 45010000 		.word	.L109+1
 2500 00a4 2D010000 		.word	.L126+1
 2501 00a8 45010000 		.word	.L109+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 56


 2502 00ac 35010000 		.word	.L127+1
 2503 00b0 45010000 		.word	.L109+1
 2504 00b4 3D010000 		.word	.L128+1
 2505              		.p2align 1
 2506              	.L112:
 575:.\main.c      ****         {
 576:.\main.c      ****             case 4:
 577:.\main.c      ****                 buffer_state.rssi = packet[0];
 2507              		.loc 1 577 0
 2508 00b8 264B     		ldr	r3, .L129+4
 2509 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2510 00bc DAB2     		uxtb	r2, r3
 2511 00be 274B     		ldr	r3, .L129+12
 2512 00c0 1A70     		strb	r2, [r3]
 578:.\main.c      ****                 buffer_state.index = packet[1];
 2513              		.loc 1 578 0
 2514 00c2 244B     		ldr	r3, .L129+4
 2515 00c4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2516 00c6 254B     		ldr	r3, .L129+12
 2517 00c8 5A70     		strb	r2, [r3, #1]
 579:.\main.c      ****             break;
 2518              		.loc 1 579 0
 2519 00ca 3BE0     		b	.L109
 2520              	.L114:
 580:.\main.c      ****             case 6:
 581:.\main.c      ****                 buffer_state.robot_xpos = packet_bytes;
 2521              		.loc 1 581 0
 2522 00cc FA8B     		ldrh	r2, [r7, #30]
 2523 00ce 234B     		ldr	r3, .L129+12
 2524 00d0 5A80     		strh	r2, [r3, #2]	@ movhi
 582:.\main.c      ****             break;
 2525              		.loc 1 582 0
 2526 00d2 37E0     		b	.L109
 2527              	.L115:
 583:.\main.c      ****             case 8:
 584:.\main.c      ****                 buffer_state.robot_ypos = packet_bytes;
 2528              		.loc 1 584 0
 2529 00d4 FA8B     		ldrh	r2, [r7, #30]
 2530 00d6 214B     		ldr	r3, .L129+12
 2531 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 585:.\main.c      ****             break;
 2532              		.loc 1 585 0
 2533 00da 33E0     		b	.L109
 2534              	.L116:
 586:.\main.c      ****             case 10:
 587:.\main.c      ****                 buffer_state.robot_orientation = packet_bytes;
 2535              		.loc 1 587 0
 2536 00dc FA8B     		ldrh	r2, [r7, #30]
 2537 00de 1F4B     		ldr	r3, .L129+12
 2538 00e0 DA80     		strh	r2, [r3, #6]	@ movhi
 588:.\main.c      ****             break;
 2539              		.loc 1 588 0
 2540 00e2 2FE0     		b	.L109
 2541              	.L117:
 589:.\main.c      ****             case 12:
 590:.\main.c      ****                 buffer_state.g0_xpos = packet_bytes;
 2542              		.loc 1 590 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 57


 2543 00e4 FA8B     		ldrh	r2, [r7, #30]
 2544 00e6 1D4B     		ldr	r3, .L129+12
 2545 00e8 1A81     		strh	r2, [r3, #8]	@ movhi
 591:.\main.c      ****             break;
 2546              		.loc 1 591 0
 2547 00ea 2BE0     		b	.L109
 2548              	.L118:
 592:.\main.c      ****             case 14:
 593:.\main.c      ****                 buffer_state.g0_ypos = packet_bytes;
 2549              		.loc 1 593 0
 2550 00ec FA8B     		ldrh	r2, [r7, #30]
 2551 00ee 1B4B     		ldr	r3, .L129+12
 2552 00f0 5A81     		strh	r2, [r3, #10]	@ movhi
 594:.\main.c      ****             break;
 2553              		.loc 1 594 0
 2554 00f2 27E0     		b	.L109
 2555              	.L119:
 595:.\main.c      ****             case 16:
 596:.\main.c      ****                 buffer_state.g0_speed = packet_bytes;
 2556              		.loc 1 596 0
 2557 00f4 FA8B     		ldrh	r2, [r7, #30]
 2558 00f6 194B     		ldr	r3, .L129+12
 2559 00f8 9A81     		strh	r2, [r3, #12]	@ movhi
 597:.\main.c      ****             break;
 2560              		.loc 1 597 0
 2561 00fa 23E0     		b	.L109
 2562              	.L120:
 598:.\main.c      ****             case 18:
 599:.\main.c      ****                 buffer_state.g0_direction = packet_bytes;
 2563              		.loc 1 599 0
 2564 00fc FA8B     		ldrh	r2, [r7, #30]
 2565 00fe 174B     		ldr	r3, .L129+12
 2566 0100 DA81     		strh	r2, [r3, #14]	@ movhi
 600:.\main.c      ****             break;
 2567              		.loc 1 600 0
 2568 0102 1FE0     		b	.L109
 2569              	.L121:
 601:.\main.c      ****             case 20:
 602:.\main.c      ****                 buffer_state.g1_xpos = packet_bytes;
 2570              		.loc 1 602 0
 2571 0104 FA8B     		ldrh	r2, [r7, #30]
 2572 0106 154B     		ldr	r3, .L129+12
 2573 0108 1A82     		strh	r2, [r3, #16]	@ movhi
 603:.\main.c      ****             break;
 2574              		.loc 1 603 0
 2575 010a 1BE0     		b	.L109
 2576              	.L122:
 604:.\main.c      ****             case 22:
 605:.\main.c      ****                 buffer_state.g1_ypos = packet_bytes;
 2577              		.loc 1 605 0
 2578 010c FA8B     		ldrh	r2, [r7, #30]
 2579 010e 134B     		ldr	r3, .L129+12
 2580 0110 5A82     		strh	r2, [r3, #18]	@ movhi
 606:.\main.c      ****             break;
 2581              		.loc 1 606 0
 2582 0112 17E0     		b	.L109
 2583              	.L123:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 58


 607:.\main.c      ****             case 24:
 608:.\main.c      ****                 buffer_state.g1_speed = packet_bytes;
 2584              		.loc 1 608 0
 2585 0114 FA8B     		ldrh	r2, [r7, #30]
 2586 0116 114B     		ldr	r3, .L129+12
 2587 0118 9A82     		strh	r2, [r3, #20]	@ movhi
 609:.\main.c      ****             break;
 2588              		.loc 1 609 0
 2589 011a 13E0     		b	.L109
 2590              	.L124:
 610:.\main.c      ****             case 26:
 611:.\main.c      ****                 buffer_state.g1_direction = packet_bytes;
 2591              		.loc 1 611 0
 2592 011c FA8B     		ldrh	r2, [r7, #30]
 2593 011e 0F4B     		ldr	r3, .L129+12
 2594 0120 DA82     		strh	r2, [r3, #22]	@ movhi
 612:.\main.c      ****             break;
 2595              		.loc 1 612 0
 2596 0122 0FE0     		b	.L109
 2597              	.L125:
 613:.\main.c      ****             case 28:
 614:.\main.c      ****                 buffer_state.g2_xpos = packet_bytes;
 2598              		.loc 1 614 0
 2599 0124 FA8B     		ldrh	r2, [r7, #30]
 2600 0126 0D4B     		ldr	r3, .L129+12
 2601 0128 1A83     		strh	r2, [r3, #24]	@ movhi
 615:.\main.c      ****             break;
 2602              		.loc 1 615 0
 2603 012a 0BE0     		b	.L109
 2604              	.L126:
 616:.\main.c      ****             case 30:
 617:.\main.c      ****                 buffer_state.g2_ypos = packet_bytes;
 2605              		.loc 1 617 0
 2606 012c FA8B     		ldrh	r2, [r7, #30]
 2607 012e 0B4B     		ldr	r3, .L129+12
 2608 0130 5A83     		strh	r2, [r3, #26]	@ movhi
 618:.\main.c      ****             break;
 2609              		.loc 1 618 0
 2610 0132 07E0     		b	.L109
 2611              	.L127:
 619:.\main.c      ****             case 32:
 620:.\main.c      ****                 buffer_state.g2_speed = packet_bytes;
 2612              		.loc 1 620 0
 2613 0134 FA8B     		ldrh	r2, [r7, #30]
 2614 0136 094B     		ldr	r3, .L129+12
 2615 0138 9A83     		strh	r2, [r3, #28]	@ movhi
 621:.\main.c      ****             break;
 2616              		.loc 1 621 0
 2617 013a 03E0     		b	.L109
 2618              	.L128:
 622:.\main.c      ****             case 34:
 623:.\main.c      ****                 buffer_state.g2_direction = packet_bytes;
 2619              		.loc 1 623 0
 2620 013c FA8B     		ldrh	r2, [r7, #30]
 2621 013e 074B     		ldr	r3, .L129+12
 2622 0140 DA83     		strh	r2, [r3, #30]	@ movhi
 624:.\main.c      ****             break;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 59


 2623              		.loc 1 624 0
 2624 0142 00BF     		nop
 2625              	.L109:
 2626              	.LBE10:
 625:.\main.c      ****         }
 626:.\main.c      ****     }
 627:.\main.c      **** }
 2627              		.loc 1 627 0
 2628 0144 2437     		adds	r7, r7, #36
 2629              		.cfi_def_cfa_offset 4
 2630 0146 BD46     		mov	sp, r7
 2631              		.cfi_def_cfa_register 13
 2632              		@ sp needed
 2633 0148 5DF8047B 		ldr	r7, [sp], #4
 2634              		.cfi_restore 7
 2635              		.cfi_def_cfa_offset 0
 2636 014c 7047     		bx	lr
 2637              	.L130:
 2638 014e 00BF     		.align	2
 2639              	.L129:
 2640 0150 00000000 		.word	flag_rx
 2641 0154 00000000 		.word	packet
 2642 0158 00000000 		.word	byteCount
 2643 015c 00000000 		.word	buffer_state
 2644              		.cfi_endproc
 2645              	.LFE72:
 2646              		.size	handle_rx_binary, .-handle_rx_binary
 2647              		.section	.text.setLeftDir,"ax",%progbits
 2648              		.align	2
 2649              		.global	setLeftDir
 2650              		.thumb
 2651              		.thumb_func
 2652              		.type	setLeftDir, %function
 2653              	setLeftDir:
 2654              	.LFB73:
 628:.\main.c      **** 
 629:.\main.c      **** void setLeftDir(uint8 dir)
 630:.\main.c      **** {
 2655              		.loc 1 630 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 8
 2658              		@ frame_needed = 1, uses_anonymous_args = 0
 2659 0000 80B5     		push	{r7, lr}
 2660              		.cfi_def_cfa_offset 8
 2661              		.cfi_offset 7, -8
 2662              		.cfi_offset 14, -4
 2663 0002 82B0     		sub	sp, sp, #8
 2664              		.cfi_def_cfa_offset 16
 2665 0004 00AF     		add	r7, sp, #0
 2666              		.cfi_def_cfa_register 7
 2667 0006 0346     		mov	r3, r0
 2668 0008 FB71     		strb	r3, [r7, #7]
 631:.\main.c      ****     M2_IN2_Write(dir);
 2669              		.loc 1 631 0
 2670 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2671 000c 1846     		mov	r0, r3
 2672 000e FFF7FEFF 		bl	M2_IN2_Write
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 60


 632:.\main.c      **** }
 2673              		.loc 1 632 0
 2674 0012 0837     		adds	r7, r7, #8
 2675              		.cfi_def_cfa_offset 8
 2676 0014 BD46     		mov	sp, r7
 2677              		.cfi_def_cfa_register 13
 2678              		@ sp needed
 2679 0016 80BD     		pop	{r7, pc}
 2680              		.cfi_endproc
 2681              	.LFE73:
 2682              		.size	setLeftDir, .-setLeftDir
 2683              		.section	.text.setRightDir,"ax",%progbits
 2684              		.align	2
 2685              		.global	setRightDir
 2686              		.thumb
 2687              		.thumb_func
 2688              		.type	setRightDir, %function
 2689              	setRightDir:
 2690              	.LFB74:
 633:.\main.c      **** 
 634:.\main.c      **** void setRightDir(uint8 dir)
 635:.\main.c      **** {
 2691              		.loc 1 635 0
 2692              		.cfi_startproc
 2693              		@ args = 0, pretend = 0, frame = 8
 2694              		@ frame_needed = 1, uses_anonymous_args = 0
 2695 0000 80B5     		push	{r7, lr}
 2696              		.cfi_def_cfa_offset 8
 2697              		.cfi_offset 7, -8
 2698              		.cfi_offset 14, -4
 2699 0002 82B0     		sub	sp, sp, #8
 2700              		.cfi_def_cfa_offset 16
 2701 0004 00AF     		add	r7, sp, #0
 2702              		.cfi_def_cfa_register 7
 2703 0006 0346     		mov	r3, r0
 2704 0008 FB71     		strb	r3, [r7, #7]
 636:.\main.c      ****     M1_IN2_Write(dir);
 2705              		.loc 1 636 0
 2706 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2707 000c 1846     		mov	r0, r3
 2708 000e FFF7FEFF 		bl	M1_IN2_Write
 637:.\main.c      **** }
 2709              		.loc 1 637 0
 2710 0012 0837     		adds	r7, r7, #8
 2711              		.cfi_def_cfa_offset 8
 2712 0014 BD46     		mov	sp, r7
 2713              		.cfi_def_cfa_register 13
 2714              		@ sp needed
 2715 0016 80BD     		pop	{r7, pc}
 2716              		.cfi_endproc
 2717              	.LFE74:
 2718              		.size	setRightDir, .-setRightDir
 2719              		.section	.rodata
 2720 00b3 00       		.align	2
 2721              	.LC9:
 2722 00b4 6469723A 		.ascii	"dir: %d\015\012\000"
 2722      2025640D 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 61


 2722      0A00
 2723              		.section	.text.reverseDirection,"ax",%progbits
 2724              		.align	2
 2725              		.global	reverseDirection
 2726              		.thumb
 2727              		.thumb_func
 2728              		.type	reverseDirection, %function
 2729              	reverseDirection:
 2730              	.LFB75:
 638:.\main.c      **** 
 639:.\main.c      **** void reverseDirection()
 640:.\main.c      **** {
 2731              		.loc 1 640 0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 16
 2734              		@ frame_needed = 1, uses_anonymous_args = 0
 2735 0000 80B5     		push	{r7, lr}
 2736              		.cfi_def_cfa_offset 8
 2737              		.cfi_offset 7, -8
 2738              		.cfi_offset 14, -4
 2739 0002 84B0     		sub	sp, sp, #16
 2740              		.cfi_def_cfa_offset 24
 2741 0004 00AF     		add	r7, sp, #0
 2742              		.cfi_def_cfa_register 7
 641:.\main.c      ****     direction = !direction;
 2743              		.loc 1 641 0
 2744 0006 114B     		ldr	r3, .L134
 2745 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2746 000a 002B     		cmp	r3, #0
 2747 000c 0CBF     		ite	eq
 2748 000e 0123     		moveq	r3, #1
 2749 0010 0023     		movne	r3, #0
 2750 0012 DBB2     		uxtb	r3, r3
 2751 0014 1A46     		mov	r2, r3
 2752 0016 0D4B     		ldr	r3, .L134
 2753 0018 1A70     		strb	r2, [r3]
 642:.\main.c      ****     setLeftDir(direction);
 2754              		.loc 1 642 0
 2755 001a 0C4B     		ldr	r3, .L134
 2756 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2757 001e 1846     		mov	r0, r3
 2758 0020 FFF7FEFF 		bl	setLeftDir
 643:.\main.c      ****     setRightDir(direction);
 2759              		.loc 1 643 0
 2760 0024 094B     		ldr	r3, .L134
 2761 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2762 0028 1846     		mov	r0, r3
 2763 002a FFF7FEFF 		bl	setRightDir
 644:.\main.c      ****     char mes[16];
 645:.\main.c      ****      sprintf(mes, "dir: %d\r\n", direction);
 2764              		.loc 1 645 0
 2765 002e 074B     		ldr	r3, .L134
 2766 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2767 0032 1A46     		mov	r2, r3
 2768 0034 3B46     		mov	r3, r7
 2769 0036 1846     		mov	r0, r3
 2770 0038 0549     		ldr	r1, .L134+4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 62


 2771 003a FFF7FEFF 		bl	sprintf
 646:.\main.c      ****     UART_PutString(mes);
 2772              		.loc 1 646 0
 2773 003e 3B46     		mov	r3, r7
 2774 0040 1846     		mov	r0, r3
 2775 0042 FFF7FEFF 		bl	UART_PutString
 647:.\main.c      **** }
 2776              		.loc 1 647 0
 2777 0046 1037     		adds	r7, r7, #16
 2778              		.cfi_def_cfa_offset 8
 2779 0048 BD46     		mov	sp, r7
 2780              		.cfi_def_cfa_register 13
 2781              		@ sp needed
 2782 004a 80BD     		pop	{r7, pc}
 2783              	.L135:
 2784              		.align	2
 2785              	.L134:
 2786 004c 00000000 		.word	direction
 2787 0050 B4000000 		.word	.LC9
 2788              		.cfi_endproc
 2789              	.LFE75:
 2790              		.size	reverseDirection, .-reverseDirection
 2791              		.global	__aeabi_dcmplt
 2792              		.global	__aeabi_ddiv
 2793              		.section	.text.setSpeed,"ax",%progbits
 2794              		.align	2
 2795              		.global	setSpeed
 2796              		.thumb
 2797              		.thumb_func
 2798              		.type	setSpeed, %function
 2799              	setSpeed:
 2800              	.LFB76:
 648:.\main.c      **** 
 649:.\main.c      **** void setSpeed(double left, double right){
 2801              		.loc 1 649 0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 24
 2804              		@ frame_needed = 1, uses_anonymous_args = 0
 2805 0000 80B5     		push	{r7, lr}
 2806              		.cfi_def_cfa_offset 8
 2807              		.cfi_offset 7, -8
 2808              		.cfi_offset 14, -4
 2809 0002 86B0     		sub	sp, sp, #24
 2810              		.cfi_def_cfa_offset 32
 2811 0004 00AF     		add	r7, sp, #0
 2812              		.cfi_def_cfa_register 7
 2813 0006 C7E90201 		strd	r0, [r7, #8]
 2814 000a C7E90023 		strd	r2, [r7]
 650:.\main.c      ****     if(right < 0.0)
 2815              		.loc 1 650 0
 2816 000e D7E90001 		ldrd	r0, [r7]
 2817 0012 4FF00002 		mov	r2, #0
 2818 0016 4FF00003 		mov	r3, #0
 2819 001a FFF7FEFF 		bl	__aeabi_dcmplt
 2820 001e 0346     		mov	r3, r0
 2821 0020 002B     		cmp	r3, #0
 2822 0022 10D0     		beq	.L145
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 63


 651:.\main.c      ****     {
 652:.\main.c      ****         //char mes[16];
 653:.\main.c      ****        // sprintf(mes, "right dir: %d\r\n", !direction);
 654:.\main.c      ****        // UART_PutString(mes);
 655:.\main.c      ****         setRightDir(!direction);
 2823              		.loc 1 655 0
 2824 0024 304B     		ldr	r3, .L147+8
 2825 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2826 0028 002B     		cmp	r3, #0
 2827 002a 0CBF     		ite	eq
 2828 002c 0123     		moveq	r3, #1
 2829 002e 0023     		movne	r3, #0
 2830 0030 DBB2     		uxtb	r3, r3
 2831 0032 1846     		mov	r0, r3
 2832 0034 FFF7FEFF 		bl	setRightDir
 656:.\main.c      ****         right = -right;
 2833              		.loc 1 656 0
 2834 0038 3B68     		ldr	r3, [r7]
 2835 003a 3B60     		str	r3, [r7]
 2836 003c 7B68     		ldr	r3, [r7, #4]
 2837 003e 83F00043 		eor	r3, r3, #-2147483648
 2838 0042 7B60     		str	r3, [r7, #4]
 2839 0044 04E0     		b	.L139
 2840              	.L145:
 657:.\main.c      ****     }
 658:.\main.c      ****     else setRightDir(direction);
 2841              		.loc 1 658 0
 2842 0046 284B     		ldr	r3, .L147+8
 2843 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2844 004a 1846     		mov	r0, r3
 2845 004c FFF7FEFF 		bl	setRightDir
 2846              	.L139:
 659:.\main.c      ****     
 660:.\main.c      ****     if(left < 0.0)
 2847              		.loc 1 660 0
 2848 0050 D7E90201 		ldrd	r0, [r7, #8]
 2849 0054 4FF00002 		mov	r2, #0
 2850 0058 4FF00003 		mov	r3, #0
 2851 005c FFF7FEFF 		bl	__aeabi_dcmplt
 2852 0060 0346     		mov	r3, r0
 2853 0062 002B     		cmp	r3, #0
 2854 0064 10D0     		beq	.L146
 661:.\main.c      ****     {
 662:.\main.c      ****        // char mes[16];
 663:.\main.c      ****         //sprintf(mes, "left dir: %d\r\n", !direction);
 664:.\main.c      ****         //UART_PutString(mes);
 665:.\main.c      ****         setLeftDir(!direction);
 2855              		.loc 1 665 0
 2856 0066 204B     		ldr	r3, .L147+8
 2857 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2858 006a 002B     		cmp	r3, #0
 2859 006c 0CBF     		ite	eq
 2860 006e 0123     		moveq	r3, #1
 2861 0070 0023     		movne	r3, #0
 2862 0072 DBB2     		uxtb	r3, r3
 2863 0074 1846     		mov	r0, r3
 2864 0076 FFF7FEFF 		bl	setLeftDir
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 64


 666:.\main.c      ****         left = -left;
 2865              		.loc 1 666 0
 2866 007a BB68     		ldr	r3, [r7, #8]
 2867 007c BB60     		str	r3, [r7, #8]
 2868 007e FB68     		ldr	r3, [r7, #12]
 2869 0080 83F00043 		eor	r3, r3, #-2147483648
 2870 0084 FB60     		str	r3, [r7, #12]
 2871 0086 04E0     		b	.L142
 2872              	.L146:
 667:.\main.c      ****     }
 668:.\main.c      ****     else setLeftDir(direction);
 2873              		.loc 1 668 0
 2874 0088 174B     		ldr	r3, .L147+8
 2875 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2876 008c 1846     		mov	r0, r3
 2877 008e FFF7FEFF 		bl	setLeftDir
 2878              	.L142:
 669:.\main.c      ****     
 670:.\main.c      ****     int16 countsLeft = left/QUAD_RATIO;
 2879              		.loc 1 670 0
 2880 0092 D7E90201 		ldrd	r0, [r7, #8]
 2881 0096 12A3     		adr	r3, .L147
 2882 0098 D3E90023 		ldrd	r2, [r3]
 2883 009c FFF7FEFF 		bl	__aeabi_ddiv
 2884 00a0 0246     		mov	r2, r0
 2885 00a2 0B46     		mov	r3, r1
 2886 00a4 1046     		mov	r0, r2
 2887 00a6 1946     		mov	r1, r3
 2888 00a8 FFF7FEFF 		bl	__aeabi_d2iz
 2889 00ac 0346     		mov	r3, r0
 2890 00ae FB82     		strh	r3, [r7, #22]	@ movhi
 671:.\main.c      ****     int16 countsRight = right/QUAD_RATIO;
 2891              		.loc 1 671 0
 2892 00b0 D7E90001 		ldrd	r0, [r7]
 2893 00b4 0AA3     		adr	r3, .L147
 2894 00b6 D3E90023 		ldrd	r2, [r3]
 2895 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2896 00be 0246     		mov	r2, r0
 2897 00c0 0B46     		mov	r3, r1
 2898 00c2 1046     		mov	r0, r2
 2899 00c4 1946     		mov	r1, r3
 2900 00c6 FFF7FEFF 		bl	__aeabi_d2iz
 2901 00ca 0346     		mov	r3, r0
 2902 00cc BB82     		strh	r3, [r7, #20]	@ movhi
 672:.\main.c      ****     
 673:.\main.c      ****     leftSpeedLimit = countsRight;
 2903              		.loc 1 673 0
 2904 00ce 074A     		ldr	r2, .L147+12
 2905 00d0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2906 00d2 1380     		strh	r3, [r2]	@ movhi
 674:.\main.c      ****     rightSpeedLimit = countsLeft;
 2907              		.loc 1 674 0
 2908 00d4 064A     		ldr	r2, .L147+16
 2909 00d6 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2910 00d8 1380     		strh	r3, [r2]	@ movhi
 675:.\main.c      **** }
 2911              		.loc 1 675 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 65


 2912 00da 1837     		adds	r7, r7, #24
 2913              		.cfi_def_cfa_offset 8
 2914 00dc BD46     		mov	sp, r7
 2915              		.cfi_def_cfa_register 13
 2916              		@ sp needed
 2917 00de 80BD     		pop	{r7, pc}
 2918              	.L148:
 2919              		.align	3
 2920              	.L147:
 2921 00e0 969526A5 		.word	-1524197994
 2922 00e4 A0DBEF3F 		.word	1072683936
 2923 00e8 00000000 		.word	direction
 2924 00ec 00000000 		.word	leftSpeedLimit
 2925 00f0 00000000 		.word	rightSpeedLimit
 2926              		.cfi_endproc
 2927              	.LFE76:
 2928              		.size	setSpeed, .-setSpeed
 2929 00f4 AFF30080 		.section	.text.brakeLeft,"ax",%progbits
 2930              		.align	2
 2931              		.global	brakeLeft
 2932              		.thumb
 2933              		.thumb_func
 2934              		.type	brakeLeft, %function
 2935              	brakeLeft:
 2936              	.LFB77:
 676:.\main.c      **** 
 677:.\main.c      **** void brakeLeft()
 678:.\main.c      **** {
 2937              		.loc 1 678 0
 2938              		.cfi_startproc
 2939              		@ args = 0, pretend = 0, frame = 0
 2940              		@ frame_needed = 1, uses_anonymous_args = 0
 2941 0000 80B5     		push	{r7, lr}
 2942              		.cfi_def_cfa_offset 8
 2943              		.cfi_offset 7, -8
 2944              		.cfi_offset 14, -4
 2945 0002 00AF     		add	r7, sp, #0
 2946              		.cfi_def_cfa_register 7
 679:.\main.c      ****     PWM_1_WriteCompare(0);
 2947              		.loc 1 679 0
 2948 0004 0020     		movs	r0, #0
 2949 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 680:.\main.c      ****     left_duty_cycle = 0;
 2950              		.loc 1 680 0
 2951 000a 024B     		ldr	r3, .L150
 2952 000c 0022     		movs	r2, #0
 2953 000e 1A80     		strh	r2, [r3]	@ movhi
 681:.\main.c      **** }
 2954              		.loc 1 681 0
 2955 0010 80BD     		pop	{r7, pc}
 2956              	.L151:
 2957 0012 00BF     		.align	2
 2958              	.L150:
 2959 0014 00000000 		.word	left_duty_cycle
 2960              		.cfi_endproc
 2961              	.LFE77:
 2962              		.size	brakeLeft, .-brakeLeft
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 66


 2963              		.section	.text.brakeRight,"ax",%progbits
 2964              		.align	2
 2965              		.global	brakeRight
 2966              		.thumb
 2967              		.thumb_func
 2968              		.type	brakeRight, %function
 2969              	brakeRight:
 2970              	.LFB78:
 682:.\main.c      **** 
 683:.\main.c      **** void brakeRight()
 684:.\main.c      **** {
 2971              		.loc 1 684 0
 2972              		.cfi_startproc
 2973              		@ args = 0, pretend = 0, frame = 0
 2974              		@ frame_needed = 1, uses_anonymous_args = 0
 2975 0000 80B5     		push	{r7, lr}
 2976              		.cfi_def_cfa_offset 8
 2977              		.cfi_offset 7, -8
 2978              		.cfi_offset 14, -4
 2979 0002 00AF     		add	r7, sp, #0
 2980              		.cfi_def_cfa_register 7
 685:.\main.c      ****      PWM_2_WriteCompare(0);
 2981              		.loc 1 685 0
 2982 0004 0020     		movs	r0, #0
 2983 0006 FFF7FEFF 		bl	PWM_2_WriteCompare
 686:.\main.c      ****      right_duty_cycle = 0;
 2984              		.loc 1 686 0
 2985 000a 024B     		ldr	r3, .L153
 2986 000c 0022     		movs	r2, #0
 2987 000e 1A80     		strh	r2, [r3]	@ movhi
 687:.\main.c      **** }
 2988              		.loc 1 687 0
 2989 0010 80BD     		pop	{r7, pc}
 2990              	.L154:
 2991 0012 00BF     		.align	2
 2992              	.L153:
 2993 0014 00000000 		.word	right_duty_cycle
 2994              		.cfi_endproc
 2995              	.LFE78:
 2996              		.size	brakeRight, .-brakeRight
 2997              		.section	.text.brakeMotor,"ax",%progbits
 2998              		.align	2
 2999              		.global	brakeMotor
 3000              		.thumb
 3001              		.thumb_func
 3002              		.type	brakeMotor, %function
 3003              	brakeMotor:
 3004              	.LFB79:
 688:.\main.c      **** 
 689:.\main.c      **** void brakeMotor(){
 3005              		.loc 1 689 0
 3006              		.cfi_startproc
 3007              		@ args = 0, pretend = 0, frame = 0
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009 0000 80B5     		push	{r7, lr}
 3010              		.cfi_def_cfa_offset 8
 3011              		.cfi_offset 7, -8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 67


 3012              		.cfi_offset 14, -4
 3013 0002 00AF     		add	r7, sp, #0
 3014              		.cfi_def_cfa_register 7
 690:.\main.c      ****     setSpeed(0, 0);
 3015              		.loc 1 690 0
 3016 0004 4FF00000 		mov	r0, #0
 3017 0008 4FF00001 		mov	r1, #0
 3018 000c 4FF00002 		mov	r2, #0
 3019 0010 4FF00003 		mov	r3, #0
 3020 0014 FFF7FEFF 		bl	setSpeed
 691:.\main.c      ****     brakeLeft();
 3021              		.loc 1 691 0
 3022 0018 FFF7FEFF 		bl	brakeLeft
 692:.\main.c      ****     brakeRight();
 3023              		.loc 1 692 0
 3024 001c FFF7FEFF 		bl	brakeRight
 693:.\main.c      **** }
 3025              		.loc 1 693 0
 3026 0020 80BD     		pop	{r7, pc}
 3027              		.cfi_endproc
 3028              	.LFE79:
 3029              		.size	brakeMotor, .-brakeMotor
 3030 0022 00BF     		.section	.text.driveForwards,"ax",%progbits
 3031              		.align	2
 3032              		.global	driveForwards
 3033              		.thumb
 3034              		.thumb_func
 3035              		.type	driveForwards, %function
 3036              	driveForwards:
 3037              	.LFB80:
 694:.\main.c      **** 
 695:.\main.c      **** void driveForwards()
 696:.\main.c      **** {
 3038              		.loc 1 696 0
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 0
 3041              		@ frame_needed = 1, uses_anonymous_args = 0
 3042 0000 80B5     		push	{r7, lr}
 3043              		.cfi_def_cfa_offset 8
 3044              		.cfi_offset 7, -8
 3045              		.cfi_offset 14, -4
 3046 0002 00AF     		add	r7, sp, #0
 3047              		.cfi_def_cfa_register 7
 697:.\main.c      ****     setSpeed(speed, speed);
 3048              		.loc 1 697 0
 3049 0004 044B     		ldr	r3, .L157
 3050 0006 D3E90001 		ldrd	r0, [r3]
 3051 000a 034B     		ldr	r3, .L157
 3052 000c D3E90023 		ldrd	r2, [r3]
 3053 0010 FFF7FEFF 		bl	setSpeed
 698:.\main.c      **** }
 3054              		.loc 1 698 0
 3055 0014 80BD     		pop	{r7, pc}
 3056              	.L158:
 3057 0016 00BF     		.align	2
 3058              	.L157:
 3059 0018 00000000 		.word	speed
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 68


 3060              		.cfi_endproc
 3061              	.LFE80:
 3062              		.size	driveForwards, .-driveForwards
 3063              		.global	__aeabi_dmul
 3064              		.section	.text.turnRight,"ax",%progbits
 3065              		.align	2
 3066              		.global	turnRight
 3067              		.thumb
 3068              		.thumb_func
 3069              		.type	turnRight, %function
 3070              	turnRight:
 3071              	.LFB81:
 699:.\main.c      **** 
 700:.\main.c      **** void turnRight()
 701:.\main.c      **** {
 3072              		.loc 1 701 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 0
 3075              		@ frame_needed = 1, uses_anonymous_args = 0
 3076 0000 80B5     		push	{r7, lr}
 3077              		.cfi_def_cfa_offset 8
 3078              		.cfi_offset 7, -8
 3079              		.cfi_offset 14, -4
 3080 0002 00AF     		add	r7, sp, #0
 3081              		.cfi_def_cfa_register 7
 702:.\main.c      ****     setSpeed(0,speed * 1.5);
 3082              		.loc 1 702 0
 3083 0004 094B     		ldr	r3, .L160
 3084 0006 D3E90023 		ldrd	r2, [r3]
 3085 000a 1046     		mov	r0, r2
 3086 000c 1946     		mov	r1, r3
 3087 000e 4FF00002 		mov	r2, #0
 3088 0012 074B     		ldr	r3, .L160+4
 3089 0014 FFF7FEFF 		bl	__aeabi_dmul
 3090 0018 0246     		mov	r2, r0
 3091 001a 0B46     		mov	r3, r1
 3092 001c 4FF00000 		mov	r0, #0
 3093 0020 4FF00001 		mov	r1, #0
 3094 0024 FFF7FEFF 		bl	setSpeed
 703:.\main.c      **** }
 3095              		.loc 1 703 0
 3096 0028 80BD     		pop	{r7, pc}
 3097              	.L161:
 3098 002a 00BF     		.align	2
 3099              	.L160:
 3100 002c 00000000 		.word	speed
 3101 0030 0000F83F 		.word	1073217536
 3102              		.cfi_endproc
 3103              	.LFE81:
 3104              		.size	turnRight, .-turnRight
 3105              		.section	.text.turnLeft,"ax",%progbits
 3106              		.align	2
 3107              		.global	turnLeft
 3108              		.thumb
 3109              		.thumb_func
 3110              		.type	turnLeft, %function
 3111              	turnLeft:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 69


 3112              	.LFB82:
 704:.\main.c      **** 
 705:.\main.c      **** void turnLeft()
 706:.\main.c      **** {
 3113              		.loc 1 706 0
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 0
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0000 80B5     		push	{r7, lr}
 3118              		.cfi_def_cfa_offset 8
 3119              		.cfi_offset 7, -8
 3120              		.cfi_offset 14, -4
 3121 0002 00AF     		add	r7, sp, #0
 3122              		.cfi_def_cfa_register 7
 707:.\main.c      ****     setSpeed(speed * 1.5,0);
 3123              		.loc 1 707 0
 3124 0004 0A4B     		ldr	r3, .L163
 3125 0006 D3E90023 		ldrd	r2, [r3]
 3126 000a 1046     		mov	r0, r2
 3127 000c 1946     		mov	r1, r3
 3128 000e 4FF00002 		mov	r2, #0
 3129 0012 084B     		ldr	r3, .L163+4
 3130 0014 FFF7FEFF 		bl	__aeabi_dmul
 3131 0018 0246     		mov	r2, r0
 3132 001a 0B46     		mov	r3, r1
 3133 001c 1046     		mov	r0, r2
 3134 001e 1946     		mov	r1, r3
 3135 0020 4FF00002 		mov	r2, #0
 3136 0024 4FF00003 		mov	r3, #0
 3137 0028 FFF7FEFF 		bl	setSpeed
 708:.\main.c      **** }
 3138              		.loc 1 708 0
 3139 002c 80BD     		pop	{r7, pc}
 3140              	.L164:
 3141 002e 00BF     		.align	2
 3142              	.L163:
 3143 0030 00000000 		.word	speed
 3144 0034 0000F83F 		.word	1073217536
 3145              		.cfi_endproc
 3146              	.LFE82:
 3147              		.size	turnLeft, .-turnLeft
 3148              		.section	.text.turnU,"ax",%progbits
 3149              		.align	2
 3150              		.global	turnU
 3151              		.thumb
 3152              		.thumb_func
 3153              		.type	turnU, %function
 3154              	turnU:
 3155              	.LFB83:
 709:.\main.c      **** 
 710:.\main.c      **** void turnU()
 711:.\main.c      **** {
 3156              		.loc 1 711 0
 3157              		.cfi_startproc
 3158              		@ args = 0, pretend = 0, frame = 0
 3159              		@ frame_needed = 1, uses_anonymous_args = 0
 3160 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 70


 3161              		.cfi_def_cfa_offset 16
 3162              		.cfi_offset 4, -16
 3163              		.cfi_offset 5, -12
 3164              		.cfi_offset 7, -8
 3165              		.cfi_offset 14, -4
 3166 0002 00AF     		add	r7, sp, #0
 3167              		.cfi_def_cfa_register 7
 712:.\main.c      ****     setSpeed(-speed*1.5,speed*1.5);
 3168              		.loc 1 712 0
 3169 0004 0F4B     		ldr	r3, .L166
 3170 0006 D3E90023 		ldrd	r2, [r3]
 3171 000a 1046     		mov	r0, r2
 3172 000c 83F00041 		eor	r1, r3, #-2147483648
 3173 0010 4FF00002 		mov	r2, #0
 3174 0014 0C4B     		ldr	r3, .L166+4
 3175 0016 FFF7FEFF 		bl	__aeabi_dmul
 3176 001a 0246     		mov	r2, r0
 3177 001c 0B46     		mov	r3, r1
 3178 001e 1446     		mov	r4, r2
 3179 0020 1D46     		mov	r5, r3
 3180 0022 084B     		ldr	r3, .L166
 3181 0024 D3E90023 		ldrd	r2, [r3]
 3182 0028 1046     		mov	r0, r2
 3183 002a 1946     		mov	r1, r3
 3184 002c 4FF00002 		mov	r2, #0
 3185 0030 054B     		ldr	r3, .L166+4
 3186 0032 FFF7FEFF 		bl	__aeabi_dmul
 3187 0036 0246     		mov	r2, r0
 3188 0038 0B46     		mov	r3, r1
 3189 003a 2046     		mov	r0, r4
 3190 003c 2946     		mov	r1, r5
 3191 003e FFF7FEFF 		bl	setSpeed
 713:.\main.c      **** }
 3192              		.loc 1 713 0
 3193 0042 B0BD     		pop	{r4, r5, r7, pc}
 3194              	.L167:
 3195              		.align	2
 3196              	.L166:
 3197 0044 00000000 		.word	speed
 3198 0048 0000F83F 		.word	1073217536
 3199              		.cfi_endproc
 3200              	.LFE83:
 3201              		.size	turnU, .-turnU
 3202              		.section	.text.initTurnLeft,"ax",%progbits
 3203              		.align	2
 3204              		.global	initTurnLeft
 3205              		.thumb
 3206              		.thumb_func
 3207              		.type	initTurnLeft, %function
 3208              	initTurnLeft:
 3209              	.LFB84:
 714:.\main.c      **** 
 715:.\main.c      **** void initTurnLeft(){
 3210              		.loc 1 715 0
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 0
 3213              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 71


 3214 0000 80B5     		push	{r7, lr}
 3215              		.cfi_def_cfa_offset 8
 3216              		.cfi_offset 7, -8
 3217              		.cfi_offset 14, -4
 3218 0002 00AF     		add	r7, sp, #0
 3219              		.cfi_def_cfa_register 7
 716:.\main.c      ****     Timer_2_Stop();
 3220              		.loc 1 716 0
 3221 0004 FFF7FEFF 		bl	Timer_2_Stop
 717:.\main.c      ****     prev_movement_state = movement_state;
 3222              		.loc 1 717 0
 3223 0008 084B     		ldr	r3, .L169
 3224 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3225 000c 084B     		ldr	r3, .L169+4
 3226 000e 1A70     		strb	r2, [r3]
 718:.\main.c      ****     movement_state = LTURN;
 3227              		.loc 1 718 0
 3228 0010 064B     		ldr	r3, .L169
 3229 0012 0122     		movs	r2, #1
 3230 0014 1A70     		strb	r2, [r3]
 719:.\main.c      ****     brakeLeft();
 3231              		.loc 1 719 0
 3232 0016 FFF7FEFF 		bl	brakeLeft
 720:.\main.c      ****     start_turn_count = QuadDec_M2_GetCounter();
 3233              		.loc 1 720 0
 3234 001a FFF7FEFF 		bl	QuadDec_M2_GetCounter
 3235 001e 0346     		mov	r3, r0
 3236 0020 1A46     		mov	r2, r3
 3237 0022 044B     		ldr	r3, .L169+8
 3238 0024 1A80     		strh	r2, [r3]	@ movhi
 721:.\main.c      ****     Timer_2_Start();
 3239              		.loc 1 721 0
 3240 0026 FFF7FEFF 		bl	Timer_2_Start
 722:.\main.c      **** }
 3241              		.loc 1 722 0
 3242 002a 80BD     		pop	{r7, pc}
 3243              	.L170:
 3244              		.align	2
 3245              	.L169:
 3246 002c 00000000 		.word	movement_state
 3247 0030 00000000 		.word	prev_movement_state
 3248 0034 00000000 		.word	start_turn_count
 3249              		.cfi_endproc
 3250              	.LFE84:
 3251              		.size	initTurnLeft, .-initTurnLeft
 3252              		.section	.text.initTurnRight,"ax",%progbits
 3253              		.align	2
 3254              		.global	initTurnRight
 3255              		.thumb
 3256              		.thumb_func
 3257              		.type	initTurnRight, %function
 3258              	initTurnRight:
 3259              	.LFB85:
 723:.\main.c      **** 
 724:.\main.c      **** void initTurnRight(){
 3260              		.loc 1 724 0
 3261              		.cfi_startproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 72


 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 1, uses_anonymous_args = 0
 3264 0000 80B5     		push	{r7, lr}
 3265              		.cfi_def_cfa_offset 8
 3266              		.cfi_offset 7, -8
 3267              		.cfi_offset 14, -4
 3268 0002 00AF     		add	r7, sp, #0
 3269              		.cfi_def_cfa_register 7
 725:.\main.c      ****     Timer_2_Stop();
 3270              		.loc 1 725 0
 3271 0004 FFF7FEFF 		bl	Timer_2_Stop
 726:.\main.c      ****     prev_movement_state = movement_state;
 3272              		.loc 1 726 0
 3273 0008 084B     		ldr	r3, .L172
 3274 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3275 000c 084B     		ldr	r3, .L172+4
 3276 000e 1A70     		strb	r2, [r3]
 727:.\main.c      ****     movement_state = RTURN;
 3277              		.loc 1 727 0
 3278 0010 064B     		ldr	r3, .L172
 3279 0012 0222     		movs	r2, #2
 3280 0014 1A70     		strb	r2, [r3]
 728:.\main.c      ****     brakeRight();
 3281              		.loc 1 728 0
 3282 0016 FFF7FEFF 		bl	brakeRight
 729:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3283              		.loc 1 729 0
 3284 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3285 001e 0346     		mov	r3, r0
 3286 0020 1A46     		mov	r2, r3
 3287 0022 044B     		ldr	r3, .L172+8
 3288 0024 1A80     		strh	r2, [r3]	@ movhi
 730:.\main.c      ****     Timer_2_Start();
 3289              		.loc 1 730 0
 3290 0026 FFF7FEFF 		bl	Timer_2_Start
 731:.\main.c      **** }
 3291              		.loc 1 731 0
 3292 002a 80BD     		pop	{r7, pc}
 3293              	.L173:
 3294              		.align	2
 3295              	.L172:
 3296 002c 00000000 		.word	movement_state
 3297 0030 00000000 		.word	prev_movement_state
 3298 0034 00000000 		.word	start_turn_count
 3299              		.cfi_endproc
 3300              	.LFE85:
 3301              		.size	initTurnRight, .-initTurnRight
 3302              		.section	.text.initTurnU,"ax",%progbits
 3303              		.align	2
 3304              		.global	initTurnU
 3305              		.thumb
 3306              		.thumb_func
 3307              		.type	initTurnU, %function
 3308              	initTurnU:
 3309              	.LFB86:
 732:.\main.c      **** 
 733:.\main.c      **** void initTurnU(){
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 73


 3310              		.loc 1 733 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314 0000 80B5     		push	{r7, lr}
 3315              		.cfi_def_cfa_offset 8
 3316              		.cfi_offset 7, -8
 3317              		.cfi_offset 14, -4
 3318 0002 00AF     		add	r7, sp, #0
 3319              		.cfi_def_cfa_register 7
 734:.\main.c      ****     Timer_2_Stop();
 3320              		.loc 1 734 0
 3321 0004 FFF7FEFF 		bl	Timer_2_Stop
 735:.\main.c      ****     prev_movement_state = movement_state;
 3322              		.loc 1 735 0
 3323 0008 084B     		ldr	r3, .L175
 3324 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3325 000c 084B     		ldr	r3, .L175+4
 3326 000e 1A70     		strb	r2, [r3]
 736:.\main.c      ****     movement_state = UTURN;
 3327              		.loc 1 736 0
 3328 0010 064B     		ldr	r3, .L175
 3329 0012 0722     		movs	r2, #7
 3330 0014 1A70     		strb	r2, [r3]
 737:.\main.c      ****     brakeMotor();
 3331              		.loc 1 737 0
 3332 0016 FFF7FEFF 		bl	brakeMotor
 738:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3333              		.loc 1 738 0
 3334 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3335 001e 0346     		mov	r3, r0
 3336 0020 1A46     		mov	r2, r3
 3337 0022 044B     		ldr	r3, .L175+8
 3338 0024 1A80     		strh	r2, [r3]	@ movhi
 739:.\main.c      ****     Timer_2_Start();
 3339              		.loc 1 739 0
 3340 0026 FFF7FEFF 		bl	Timer_2_Start
 740:.\main.c      **** }
 3341              		.loc 1 740 0
 3342 002a 80BD     		pop	{r7, pc}
 3343              	.L176:
 3344              		.align	2
 3345              	.L175:
 3346 002c 00000000 		.word	movement_state
 3347 0030 00000000 		.word	prev_movement_state
 3348 0034 00000000 		.word	start_turn_count
 3349              		.cfi_endproc
 3350              	.LFE86:
 3351              		.size	initTurnU, .-initTurnU
 3352              		.section	.text.initForward,"ax",%progbits
 3353              		.align	2
 3354              		.global	initForward
 3355              		.thumb
 3356              		.thumb_func
 3357              		.type	initForward, %function
 3358              	initForward:
 3359              	.LFB87:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 74


 741:.\main.c      **** 
 742:.\main.c      **** void initForward(){
 3360              		.loc 1 742 0
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 0
 3363              		@ frame_needed = 1, uses_anonymous_args = 0
 3364 0000 80B5     		push	{r7, lr}
 3365              		.cfi_def_cfa_offset 8
 3366              		.cfi_offset 7, -8
 3367              		.cfi_offset 14, -4
 3368 0002 00AF     		add	r7, sp, #0
 3369              		.cfi_def_cfa_register 7
 743:.\main.c      ****     brakeMotor();
 3370              		.loc 1 743 0
 3371 0004 FFF7FEFF 		bl	brakeMotor
 744:.\main.c      ****     movement_state = DRIVE;
 3372              		.loc 1 744 0
 3373 0008 014B     		ldr	r3, .L178
 3374 000a 0022     		movs	r2, #0
 3375 000c 1A70     		strb	r2, [r3]
 745:.\main.c      **** }
 3376              		.loc 1 745 0
 3377 000e 80BD     		pop	{r7, pc}
 3378              	.L179:
 3379              		.align	2
 3380              	.L178:
 3381 0010 00000000 		.word	movement_state
 3382              		.cfi_endproc
 3383              	.LFE87:
 3384              		.size	initForward, .-initForward
 3385              		.section	.text.initBrake,"ax",%progbits
 3386              		.align	2
 3387              		.global	initBrake
 3388              		.thumb
 3389              		.thumb_func
 3390              		.type	initBrake, %function
 3391              	initBrake:
 3392              	.LFB88:
 746:.\main.c      **** 
 747:.\main.c      **** void initBrake(){
 3393              		.loc 1 747 0
 3394              		.cfi_startproc
 3395              		@ args = 0, pretend = 0, frame = 0
 3396              		@ frame_needed = 1, uses_anonymous_args = 0
 3397              		@ link register save eliminated.
 3398 0000 80B4     		push	{r7}
 3399              		.cfi_def_cfa_offset 4
 3400              		.cfi_offset 7, -4
 3401 0002 00AF     		add	r7, sp, #0
 3402              		.cfi_def_cfa_register 7
 748:.\main.c      ****     movement_state = STOPPED;
 3403              		.loc 1 748 0
 3404 0004 034B     		ldr	r3, .L181
 3405 0006 0322     		movs	r2, #3
 3406 0008 1A70     		strb	r2, [r3]
 749:.\main.c      **** }
 3407              		.loc 1 749 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 75


 3408 000a BD46     		mov	sp, r7
 3409              		.cfi_def_cfa_register 13
 3410              		@ sp needed
 3411 000c 5DF8047B 		ldr	r7, [sp], #4
 3412              		.cfi_restore 7
 3413              		.cfi_def_cfa_offset 0
 3414 0010 7047     		bx	lr
 3415              	.L182:
 3416 0012 00BF     		.align	2
 3417              	.L181:
 3418 0014 00000000 		.word	movement_state
 3419              		.cfi_endproc
 3420              	.LFE88:
 3421              		.size	initBrake, .-initBrake
 3422              		.section	.text.initTrack,"ax",%progbits
 3423              		.align	2
 3424              		.global	initTrack
 3425              		.thumb
 3426              		.thumb_func
 3427              		.type	initTrack, %function
 3428              	initTrack:
 3429              	.LFB89:
 750:.\main.c      **** 
 751:.\main.c      **** void initTrack()
 752:.\main.c      **** {
 3430              		.loc 1 752 0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 0
 3433              		@ frame_needed = 1, uses_anonymous_args = 0
 3434              		@ link register save eliminated.
 3435 0000 80B4     		push	{r7}
 3436              		.cfi_def_cfa_offset 4
 3437              		.cfi_offset 7, -4
 3438 0002 00AF     		add	r7, sp, #0
 3439              		.cfi_def_cfa_register 7
 753:.\main.c      ****     movement_state = TRACKING;
 3440              		.loc 1 753 0
 3441 0004 034B     		ldr	r3, .L184
 3442 0006 0422     		movs	r2, #4
 3443 0008 1A70     		strb	r2, [r3]
 754:.\main.c      **** }
 3444              		.loc 1 754 0
 3445 000a BD46     		mov	sp, r7
 3446              		.cfi_def_cfa_register 13
 3447              		@ sp needed
 3448 000c 5DF8047B 		ldr	r7, [sp], #4
 3449              		.cfi_restore 7
 3450              		.cfi_def_cfa_offset 0
 3451 0010 7047     		bx	lr
 3452              	.L185:
 3453 0012 00BF     		.align	2
 3454              	.L184:
 3455 0014 00000000 		.word	movement_state
 3456              		.cfi_endproc
 3457              	.LFE89:
 3458              		.size	initTrack, .-initTrack
 3459              		.section	.text.initTrackU,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 76


 3460              		.align	2
 3461              		.global	initTrackU
 3462              		.thumb
 3463              		.thumb_func
 3464              		.type	initTrackU, %function
 3465              	initTrackU:
 3466              	.LFB90:
 755:.\main.c      **** 
 756:.\main.c      **** void initTrackU(){
 3467              		.loc 1 756 0
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 0
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471              		@ link register save eliminated.
 3472 0000 80B4     		push	{r7}
 3473              		.cfi_def_cfa_offset 4
 3474              		.cfi_offset 7, -4
 3475 0002 00AF     		add	r7, sp, #0
 3476              		.cfi_def_cfa_register 7
 757:.\main.c      ****     movement_state = TRACKING_U;
 3477              		.loc 1 757 0
 3478 0004 034B     		ldr	r3, .L187
 3479 0006 0522     		movs	r2, #5
 3480 0008 1A70     		strb	r2, [r3]
 758:.\main.c      **** }
 3481              		.loc 1 758 0
 3482 000a BD46     		mov	sp, r7
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 000c 5DF8047B 		ldr	r7, [sp], #4
 3486              		.cfi_restore 7
 3487              		.cfi_def_cfa_offset 0
 3488 0010 7047     		bx	lr
 3489              	.L188:
 3490 0012 00BF     		.align	2
 3491              	.L187:
 3492 0014 00000000 		.word	movement_state
 3493              		.cfi_endproc
 3494              	.LFE90:
 3495              		.size	initTrackU, .-initTrackU
 3496              		.section	.text.inittrackLineZ,"ax",%progbits
 3497              		.align	2
 3498              		.global	inittrackLineZ
 3499              		.thumb
 3500              		.thumb_func
 3501              		.type	inittrackLineZ, %function
 3502              	inittrackLineZ:
 3503              	.LFB91:
 759:.\main.c      **** 
 760:.\main.c      **** void inittrackLineZ(){
 3504              		.loc 1 760 0
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 0
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508              		@ link register save eliminated.
 3509 0000 80B4     		push	{r7}
 3510              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 77


 3511              		.cfi_offset 7, -4
 3512 0002 00AF     		add	r7, sp, #0
 3513              		.cfi_def_cfa_register 7
 761:.\main.c      ****     movement_state = TRACKING_SOFT;
 3514              		.loc 1 761 0
 3515 0004 034B     		ldr	r3, .L190
 3516 0006 0622     		movs	r2, #6
 3517 0008 1A70     		strb	r2, [r3]
 762:.\main.c      **** }
 3518              		.loc 1 762 0
 3519 000a BD46     		mov	sp, r7
 3520              		.cfi_def_cfa_register 13
 3521              		@ sp needed
 3522 000c 5DF8047B 		ldr	r7, [sp], #4
 3523              		.cfi_restore 7
 3524              		.cfi_def_cfa_offset 0
 3525 0010 7047     		bx	lr
 3526              	.L191:
 3527 0012 00BF     		.align	2
 3528              	.L190:
 3529 0014 00000000 		.word	movement_state
 3530              		.cfi_endproc
 3531              	.LFE91:
 3532              		.size	inittrackLineZ, .-inittrackLineZ
 3533              		.section	.text.rxInt,"ax",%progbits
 3534              		.align	2
 3535              		.global	rxInt
 3536              		.thumb
 3537              		.thumb_func
 3538              		.type	rxInt, %function
 3539              	rxInt:
 3540              	.LFB92:
 763:.\main.c      **** 
 764:.\main.c      **** 
 765:.\main.c      **** 
 766:.\main.c      **** //Binary RF Data
 767:.\main.c      **** CY_ISR(rxInt){
 3541              		.loc 1 767 0
 3542              		.cfi_startproc
 3543              		@ args = 0, pretend = 0, frame = 8
 3544              		@ frame_needed = 1, uses_anonymous_args = 0
 3545 0000 B0B5     		push	{r4, r5, r7, lr}
 3546              		.cfi_def_cfa_offset 16
 3547              		.cfi_offset 4, -16
 3548              		.cfi_offset 5, -12
 3549              		.cfi_offset 7, -8
 3550              		.cfi_offset 14, -4
 3551 0002 82B0     		sub	sp, sp, #8
 3552              		.cfi_def_cfa_offset 24
 3553 0004 00AF     		add	r7, sp, #0
 3554              		.cfi_def_cfa_register 7
 768:.\main.c      ****     char rf_char = UART_GetChar();
 3555              		.loc 1 768 0
 3556 0006 FFF7FEFF 		bl	UART_GetChar
 3557 000a 0346     		mov	r3, r0
 3558 000c FB71     		strb	r3, [r7, #7]
 769:.\main.c      ****     if(rf_char == SOP){
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 78


 3559              		.loc 1 769 0
 3560 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3561 0010 AA2B     		cmp	r3, #170
 3562 0012 2BD1     		bne	.L193
 770:.\main.c      ****             //we should evalute whether the last packet was valid by measuring the length of data
 771:.\main.c      ****             if(byteCount == 34)
 3563              		.loc 1 771 0
 3564 0014 224B     		ldr	r3, .L197
 3565 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3566 0018 222B     		cmp	r3, #34
 3567 001a 20D1     		bne	.L194
 772:.\main.c      ****             {
 773:.\main.c      ****                 system_state = buffer_state;
 3568              		.loc 1 773 0
 3569 001c 214B     		ldr	r3, .L197+4
 3570 001e 224A     		ldr	r2, .L197+8
 3571 0020 1568     		ldr	r5, [r2]	@ unaligned
 3572 0022 5468     		ldr	r4, [r2, #4]	@ unaligned
 3573 0024 9068     		ldr	r0, [r2, #8]	@ unaligned
 3574 0026 D168     		ldr	r1, [r2, #12]	@ unaligned
 3575 0028 1D60     		str	r5, [r3]	@ unaligned
 3576 002a 5C60     		str	r4, [r3, #4]	@ unaligned
 3577 002c 9860     		str	r0, [r3, #8]	@ unaligned
 3578 002e D960     		str	r1, [r3, #12]	@ unaligned
 3579 0030 1569     		ldr	r5, [r2, #16]	@ unaligned
 3580 0032 5469     		ldr	r4, [r2, #20]	@ unaligned
 3581 0034 9069     		ldr	r0, [r2, #24]	@ unaligned
 3582 0036 D169     		ldr	r1, [r2, #28]	@ unaligned
 3583 0038 1D61     		str	r5, [r3, #16]	@ unaligned
 3584 003a 5C61     		str	r4, [r3, #20]	@ unaligned
 3585 003c 9861     		str	r0, [r3, #24]	@ unaligned
 3586 003e D961     		str	r1, [r3, #28]	@ unaligned
 774:.\main.c      ****                 if(initial_pos_valid == 0)
 3587              		.loc 1 774 0
 3588 0040 1A4B     		ldr	r3, .L197+12
 3589 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3590 0044 002B     		cmp	r3, #0
 3591 0046 0AD1     		bne	.L194
 775:.\main.c      ****                 {
 776:.\main.c      ****                     LED_Write(~LED_Read());
 3592              		.loc 1 776 0
 3593 0048 FFF7FEFF 		bl	LED_Read
 3594 004c 0346     		mov	r3, r0
 3595 004e DB43     		mvns	r3, r3
 3596 0050 DBB2     		uxtb	r3, r3
 3597 0052 1846     		mov	r0, r3
 3598 0054 FFF7FEFF 		bl	LED_Write
 777:.\main.c      ****                     initial_pos_valid = 1;
 3599              		.loc 1 777 0
 3600 0058 144B     		ldr	r3, .L197+12
 3601 005a 0122     		movs	r2, #1
 3602 005c 1A70     		strb	r2, [r3]
 3603              	.L194:
 778:.\main.c      ****                 }
 779:.\main.c      ****             }
 780:.\main.c      ****             byteCount = 2; //2 for legacy purposes - fix this
 3604              		.loc 1 780 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 79


 3605 005e 104B     		ldr	r3, .L197
 3606 0060 0222     		movs	r2, #2
 3607 0062 1A70     		strb	r2, [r3]
 781:.\main.c      ****             flag_rx = 0;
 3608              		.loc 1 781 0
 3609 0064 124B     		ldr	r3, .L197+16
 3610 0066 0022     		movs	r2, #0
 3611 0068 1A70     		strb	r2, [r3]
 3612 006a 16E0     		b	.L192
 3613              	.L193:
 782:.\main.c      ****              //LED_Write(~LED_Read()); //flash an LED so we know the interrupt is called
 783:.\main.c      ****         }
 784:.\main.c      ****         else
 785:.\main.c      ****         {
 786:.\main.c      ****             packet[byteCount % 2] = rf_char;
 3614              		.loc 1 786 0
 3615 006c 0C4B     		ldr	r3, .L197
 3616 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3617 0070 03F00103 		and	r3, r3, #1
 3618 0074 0F49     		ldr	r1, .L197+20
 3619 0076 FA79     		ldrb	r2, [r7, #7]
 3620 0078 CA54     		strb	r2, [r1, r3]
 787:.\main.c      ****            
 788:.\main.c      ****             if(byteCount % 2 == 1) //we have received a whole 16-bit packet
 3621              		.loc 1 788 0
 3622 007a 094B     		ldr	r3, .L197
 3623 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3624 007e 03F00103 		and	r3, r3, #1
 3625 0082 DBB2     		uxtb	r3, r3
 3626 0084 002B     		cmp	r3, #0
 3627 0086 02D0     		beq	.L196
 789:.\main.c      ****             {
 790:.\main.c      ****                 flag_rx = 1;
 3628              		.loc 1 790 0
 3629 0088 094B     		ldr	r3, .L197+16
 3630 008a 0122     		movs	r2, #1
 3631 008c 1A70     		strb	r2, [r3]
 3632              	.L196:
 791:.\main.c      ****             }
 792:.\main.c      ****             byteCount = (byteCount + 1);
 3633              		.loc 1 792 0
 3634 008e 044B     		ldr	r3, .L197
 3635 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3636 0092 0133     		adds	r3, r3, #1
 3637 0094 DAB2     		uxtb	r2, r3
 3638 0096 024B     		ldr	r3, .L197
 3639 0098 1A70     		strb	r2, [r3]
 3640              	.L192:
 793:.\main.c      ****         }
 794:.\main.c      **** }
 3641              		.loc 1 794 0
 3642 009a 0837     		adds	r7, r7, #8
 3643              		.cfi_def_cfa_offset 16
 3644 009c BD46     		mov	sp, r7
 3645              		.cfi_def_cfa_register 13
 3646              		@ sp needed
 3647 009e B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 80


 3648              	.L198:
 3649              		.align	2
 3650              	.L197:
 3651 00a0 00000000 		.word	byteCount
 3652 00a4 00000000 		.word	system_state
 3653 00a8 00000000 		.word	buffer_state
 3654 00ac 00000000 		.word	initial_pos_valid
 3655 00b0 00000000 		.word	flag_rx
 3656 00b4 00000000 		.word	packet
 3657              		.cfi_endproc
 3658              	.LFE92:
 3659              		.size	rxInt, .-rxInt
 3660              		.global	__aeabi_i2f
 3661              		.global	__aeabi_fmul
 3662              		.global	__aeabi_f2iz
 3663              		.section	.rodata
 3664 00be 0000     		.align	2
 3665              	.LC10:
 3666 00c0 74617267 		.ascii	"target quad: %d\015\012\000"
 3666      65742071 
 3666      7561643A 
 3666      2025640D 
 3666      0A00
 3667 00d2 0000     		.align	2
 3668              	.LC11:
 3669 00d4 72656365 		.ascii	"received: \000"
 3669      69766564 
 3669      3A2000
 3670 00df 00       		.align	2
 3671              	.LC12:
 3672 00e0 0D0A00   		.ascii	"\015\012\000"
 3673 00e3 00       		.align	2
 3674              	.LC13:
 3675 00e4 73746172 		.ascii	"starting from instruction %d\015\012\000"
 3675      74696E67 
 3675      2066726F 
 3675      6D20696E 
 3675      73747275 
 3676              		.section	.text.BT_rxInt,"ax",%progbits
 3677              		.align	2
 3678              		.global	BT_rxInt
 3679              		.thumb
 3680              		.thumb_func
 3681              		.type	BT_rxInt, %function
 3682              	BT_rxInt:
 3683              	.LFB93:
 795:.\main.c      **** 
 796:.\main.c      **** CY_ISR(BT_rxInt)
 797:.\main.c      **** {
 3684              		.loc 1 797 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 32
 3687              		@ frame_needed = 1, uses_anonymous_args = 0
 3688 0000 80B5     		push	{r7, lr}
 3689              		.cfi_def_cfa_offset 8
 3690              		.cfi_offset 7, -8
 3691              		.cfi_offset 14, -4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 81


 3692 0002 88B0     		sub	sp, sp, #32
 3693              		.cfi_def_cfa_offset 40
 3694 0004 00AF     		add	r7, sp, #0
 3695              		.cfi_def_cfa_register 7
 798:.\main.c      ****     char rf_char = UART_GetChar();
 3696              		.loc 1 798 0
 3697 0006 FFF7FEFF 		bl	UART_GetChar
 3698 000a 0346     		mov	r3, r0
 3699 000c FB77     		strb	r3, [r7, #31]
 799:.\main.c      ****     switch(rf_char){
 3700              		.loc 1 799 0
 3701 000e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3702 0010 313B     		subs	r3, r3, #49
 3703 0012 492B     		cmp	r3, #73
 3704 0014 00F28682 		bhi	.L199
 3705 0018 01A2     		adr	r2, .L202
 3706 001a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3707 001e 00BF     		.p2align 2
 3708              	.L202:
 3709 0020 77030000 		.word	.L201+1
 3710 0024 15020000 		.word	.L203+1
 3711 0028 25050000 		.word	.L199+1
 3712 002c 25050000 		.word	.L199+1
 3713 0030 25050000 		.word	.L199+1
 3714 0034 25050000 		.word	.L199+1
 3715 0038 25050000 		.word	.L199+1
 3716 003c 25050000 		.word	.L199+1
 3717 0040 25050000 		.word	.L199+1
 3718 0044 25050000 		.word	.L199+1
 3719 0048 25050000 		.word	.L199+1
 3720 004c 25050000 		.word	.L199+1
 3721 0050 25050000 		.word	.L199+1
 3722 0054 25050000 		.word	.L199+1
 3723 0058 25050000 		.word	.L199+1
 3724 005c 25050000 		.word	.L199+1
 3725 0060 25050000 		.word	.L199+1
 3726 0064 25050000 		.word	.L199+1
 3727 0068 25050000 		.word	.L199+1
 3728 006c 25050000 		.word	.L199+1
 3729 0070 25050000 		.word	.L199+1
 3730 0074 25050000 		.word	.L199+1
 3731 0078 25050000 		.word	.L199+1
 3732 007c 25050000 		.word	.L199+1
 3733 0080 25050000 		.word	.L199+1
 3734 0084 25050000 		.word	.L199+1
 3735 0088 25050000 		.word	.L199+1
 3736 008c 25050000 		.word	.L199+1
 3737 0090 25050000 		.word	.L199+1
 3738 0094 25050000 		.word	.L199+1
 3739 0098 25050000 		.word	.L199+1
 3740 009c 25050000 		.word	.L199+1
 3741 00a0 25050000 		.word	.L199+1
 3742 00a4 25050000 		.word	.L199+1
 3743 00a8 25050000 		.word	.L199+1
 3744 00ac 25050000 		.word	.L199+1
 3745 00b0 25050000 		.word	.L199+1
 3746 00b4 25050000 		.word	.L199+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 82


 3747 00b8 25050000 		.word	.L199+1
 3748 00bc 25050000 		.word	.L199+1
 3749 00c0 25050000 		.word	.L199+1
 3750 00c4 25050000 		.word	.L199+1
 3751 00c8 25050000 		.word	.L199+1
 3752 00cc 25050000 		.word	.L199+1
 3753 00d0 25050000 		.word	.L199+1
 3754 00d4 25050000 		.word	.L199+1
 3755 00d8 25050000 		.word	.L199+1
 3756 00dc 25050000 		.word	.L199+1
 3757 00e0 49010000 		.word	.L204+1
 3758 00e4 25050000 		.word	.L199+1
 3759 00e8 25050000 		.word	.L199+1
 3760 00ec 6D010000 		.word	.L205+1
 3761 00f0 25050000 		.word	.L199+1
 3762 00f4 79010000 		.word	.L206+1
 3763 00f8 25050000 		.word	.L199+1
 3764 00fc 25050000 		.word	.L199+1
 3765 0100 25050000 		.word	.L199+1
 3766 0104 25050000 		.word	.L199+1
 3767 0108 25050000 		.word	.L199+1
 3768 010c 25050000 		.word	.L199+1
 3769 0110 25050000 		.word	.L199+1
 3770 0114 25050000 		.word	.L199+1
 3771 0118 25050000 		.word	.L199+1
 3772 011c 25050000 		.word	.L199+1
 3773 0120 A9010000 		.word	.L207+1
 3774 0124 FF010000 		.word	.L208+1
 3775 0128 61010000 		.word	.L209+1
 3776 012c 85010000 		.word	.L210+1
 3777 0130 91010000 		.word	.L211+1
 3778 0134 25050000 		.word	.L199+1
 3779 0138 55010000 		.word	.L212+1
 3780 013c 25050000 		.word	.L199+1
 3781 0140 25050000 		.word	.L199+1
 3782 0144 9D010000 		.word	.L213+1
 3783              		.p2align 1
 3784              	.L204:
 3785              	.LBB11:
 800:.\main.c      ****     case 'a':
 801:.\main.c      ****         initTurnLeft();
 3786              		.loc 1 801 0
 3787 0148 FFF7FEFF 		bl	initTurnLeft
 802:.\main.c      ****         track_mode = NO_TRACK;
 3788              		.loc 1 802 0
 3789 014c 9D4B     		ldr	r3, .L233
 3790 014e 0022     		movs	r2, #0
 3791 0150 1A70     		strb	r2, [r3]
 803:.\main.c      ****         break;
 3792              		.loc 1 803 0
 3793 0152 E7E1     		b	.L199
 3794              	.L212:
 804:.\main.c      ****     case 'w':
 805:.\main.c      ****         initForward();
 3795              		.loc 1 805 0
 3796 0154 FFF7FEFF 		bl	initForward
 806:.\main.c      ****         track_mode = NO_TRACK;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 83


 3797              		.loc 1 806 0
 3798 0158 9A4B     		ldr	r3, .L233
 3799 015a 0022     		movs	r2, #0
 3800 015c 1A70     		strb	r2, [r3]
 807:.\main.c      ****         break;
 3801              		.loc 1 807 0
 3802 015e E1E1     		b	.L199
 3803              	.L209:
 808:.\main.c      ****     case 's': 
 809:.\main.c      ****         reverseDirection();
 3804              		.loc 1 809 0
 3805 0160 FFF7FEFF 		bl	reverseDirection
 810:.\main.c      ****         track_mode = NO_TRACK;
 3806              		.loc 1 810 0
 3807 0164 974B     		ldr	r3, .L233
 3808 0166 0022     		movs	r2, #0
 3809 0168 1A70     		strb	r2, [r3]
 811:.\main.c      ****         break;
 3810              		.loc 1 811 0
 3811 016a DBE1     		b	.L199
 3812              	.L205:
 812:.\main.c      ****     case 'd':
 813:.\main.c      ****         initTurnRight();
 3813              		.loc 1 813 0
 3814 016c FFF7FEFF 		bl	initTurnRight
 814:.\main.c      ****         track_mode = NO_TRACK;
 3815              		.loc 1 814 0
 3816 0170 944B     		ldr	r3, .L233
 3817 0172 0022     		movs	r2, #0
 3818 0174 1A70     		strb	r2, [r3]
 815:.\main.c      ****         break;
 3819              		.loc 1 815 0
 3820 0176 D5E1     		b	.L199
 3821              	.L206:
 816:.\main.c      ****     case 'f':
 817:.\main.c      ****         initBrake();
 3822              		.loc 1 817 0
 3823 0178 FFF7FEFF 		bl	initBrake
 818:.\main.c      ****         track_mode = NO_TRACK;
 3824              		.loc 1 818 0
 3825 017c 914B     		ldr	r3, .L233
 3826 017e 0022     		movs	r2, #0
 3827 0180 1A70     		strb	r2, [r3]
 819:.\main.c      ****         break;
 3828              		.loc 1 819 0
 3829 0182 CFE1     		b	.L199
 3830              	.L210:
 820:.\main.c      ****     case('t'):
 821:.\main.c      ****         track_mode = CURVE_TRACK;
 3831              		.loc 1 821 0
 3832 0184 8F4B     		ldr	r3, .L233
 3833 0186 0122     		movs	r2, #1
 3834 0188 1A70     		strb	r2, [r3]
 822:.\main.c      ****         initTrack();
 3835              		.loc 1 822 0
 3836 018a FFF7FEFF 		bl	initTrack
 823:.\main.c      ****         break;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 84


 3837              		.loc 1 823 0
 3838 018e C9E1     		b	.L199
 3839              	.L211:
 824:.\main.c      ****     case('u'):
 825:.\main.c      ****         initTrackU();
 3840              		.loc 1 825 0
 3841 0190 FFF7FEFF 		bl	initTrackU
 826:.\main.c      ****         track_mode = U_TRACK;
 3842              		.loc 1 826 0
 3843 0194 8B4B     		ldr	r3, .L233
 3844 0196 0222     		movs	r2, #2
 3845 0198 1A70     		strb	r2, [r3]
 827:.\main.c      ****         break;
 3846              		.loc 1 827 0
 3847 019a C3E1     		b	.L199
 3848              	.L213:
 828:.\main.c      ****     case('z'):
 829:.\main.c      ****         track_mode = SQUARE_TRACK;
 3849              		.loc 1 829 0
 3850 019c 894B     		ldr	r3, .L233
 3851 019e 0322     		movs	r2, #3
 3852 01a0 1A70     		strb	r2, [r3]
 830:.\main.c      ****         inittrackLineZ();
 3853              		.loc 1 830 0
 3854 01a2 FFF7FEFF 		bl	inittrackLineZ
 831:.\main.c      ****         break;
 3855              		.loc 1 831 0
 3856 01a6 BDE1     		b	.L199
 3857              	.L207:
 832:.\main.c      ****     case('q'):
 833:.\main.c      ****         track_mode = QUAD_STOP;
 3858              		.loc 1 833 0
 3859 01a8 864B     		ldr	r3, .L233
 3860 01aa 0422     		movs	r2, #4
 3861 01ac 1A70     		strb	r2, [r3]
 834:.\main.c      ****         accum_dist = 0;
 3862              		.loc 1 834 0
 3863 01ae 864B     		ldr	r3, .L233+4
 3864 01b0 0022     		movs	r2, #0
 3865 01b2 1A80     		strh	r2, [r3]	@ movhi
 835:.\main.c      ****         target_distance_quad = target_distance_cm * quad_per_cm;
 3866              		.loc 1 835 0
 3867 01b4 854B     		ldr	r3, .L233+8
 3868 01b6 1B88     		ldrh	r3, [r3]
 3869 01b8 1BB2     		sxth	r3, r3
 3870 01ba 1846     		mov	r0, r3
 3871 01bc FFF7FEFF 		bl	__aeabi_i2f
 3872 01c0 0246     		mov	r2, r0
 3873 01c2 834B     		ldr	r3, .L233+12
 3874 01c4 1B68     		ldr	r3, [r3]	@ float
 3875 01c6 1046     		mov	r0, r2
 3876 01c8 1946     		mov	r1, r3
 3877 01ca FFF7FEFF 		bl	__aeabi_fmul
 3878 01ce 0346     		mov	r3, r0
 3879 01d0 1846     		mov	r0, r3
 3880 01d2 FFF7FEFF 		bl	__aeabi_f2iz
 3881 01d6 0346     		mov	r3, r0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 85


 3882 01d8 9AB2     		uxth	r2, r3
 3883 01da 7E4B     		ldr	r3, .L233+16
 3884 01dc 1A80     		strh	r2, [r3]	@ movhi
 836:.\main.c      ****         char mes[16];
 837:.\main.c      ****         sprintf(mes, "target quad: %d\r\n", target_distance_quad);
 3885              		.loc 1 837 0
 3886 01de 7D4B     		ldr	r3, .L233+16
 3887 01e0 1B88     		ldrh	r3, [r3]
 3888 01e2 1BB2     		sxth	r3, r3
 3889 01e4 3A46     		mov	r2, r7
 3890 01e6 1046     		mov	r0, r2
 3891 01e8 7B49     		ldr	r1, .L233+20
 3892 01ea 1A46     		mov	r2, r3
 3893 01ec FFF7FEFF 		bl	sprintf
 838:.\main.c      ****         UART_PutString(mes);
 3894              		.loc 1 838 0
 3895 01f0 3B46     		mov	r3, r7
 3896 01f2 1846     		mov	r0, r3
 3897 01f4 FFF7FEFF 		bl	UART_PutString
 839:.\main.c      ****         initForward();
 3898              		.loc 1 839 0
 3899 01f8 FFF7FEFF 		bl	initForward
 840:.\main.c      ****         break;
 3900              		.loc 1 840 0
 3901 01fc 92E1     		b	.L199
 3902              	.L208:
 841:.\main.c      ****     case ('r'):
 842:.\main.c      ****         track_mode = RF_STOP;
 3903              		.loc 1 842 0
 3904 01fe 714B     		ldr	r3, .L233
 3905 0200 0522     		movs	r2, #5
 3906 0202 1A70     		strb	r2, [r3]
 843:.\main.c      ****         changeToRF();
 3907              		.loc 1 843 0
 3908 0204 FFF7FEFF 		bl	changeToRF
 844:.\main.c      ****         // Make initial position
 845:.\main.c      ****         initial_pos_valid = 0;
 3909              		.loc 1 845 0
 3910 0208 744B     		ldr	r3, .L233+24
 3911 020a 0022     		movs	r2, #0
 3912 020c 1A70     		strb	r2, [r3]
 846:.\main.c      ****         initBrake();
 3913              		.loc 1 846 0
 3914 020e FFF7FEFF 		bl	initBrake
 847:.\main.c      ****         break;
 3915              		.loc 1 847 0
 3916 0212 87E1     		b	.L199
 3917              	.L203:
 848:.\main.c      ****     case ('2'):
 849:.\main.c      ****         track_mode = DEST_TEST;
 3918              		.loc 1 849 0
 3919 0214 6B4B     		ldr	r3, .L233
 3920 0216 0622     		movs	r2, #6
 3921 0218 1A70     		strb	r2, [r3]
 850:.\main.c      ****         tracked_direction = robot_direction;
 3922              		.loc 1 850 0
 3923 021a 714B     		ldr	r3, .L233+28
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 86


 3924 021c 1B68     		ldr	r3, [r3]
 3925 021e 714A     		ldr	r2, .L233+32
 3926 0220 1360     		str	r3, [r2]
 851:.\main.c      ****         instructionLength = generateDirections();
 3927              		.loc 1 851 0
 3928 0222 FFF7FEFF 		bl	generateDirections
 3929 0226 0346     		mov	r3, r0
 3930 0228 9AB2     		uxth	r2, r3
 3931 022a 6F4B     		ldr	r3, .L233+36
 3932 022c 1A80     		strh	r2, [r3]	@ movhi
 852:.\main.c      ****         //instructionLength = generateEntireMapDirections();
 853:.\main.c      ****         //char message[128];
 854:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 855:.\main.c      ****         
 856:.\main.c      ****         last_quad_count1 = 0;
 3933              		.loc 1 856 0
 3934 022e 6F4B     		ldr	r3, .L233+40
 3935 0230 0022     		movs	r2, #0
 3936 0232 1A80     		strh	r2, [r3]	@ movhi
 857:.\main.c      ****         last_quad_count2 = 0;
 3937              		.loc 1 857 0
 3938 0234 6E4B     		ldr	r3, .L233+44
 3939 0236 0022     		movs	r2, #0
 3940 0238 1A80     		strh	r2, [r3]	@ movhi
 858:.\main.c      ****         QuadDec_M1_SetCounter(0);
 3941              		.loc 1 858 0
 3942 023a 0020     		movs	r0, #0
 3943 023c FFF7FEFF 		bl	QuadDec_M1_SetCounter
 859:.\main.c      ****         QuadDec_M2_SetCounter(0);
 3944              		.loc 1 859 0
 3945 0240 0020     		movs	r0, #0
 3946 0242 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 860:.\main.c      ****         instructionCount = 0;
 3947              		.loc 1 860 0
 3948 0246 6B4B     		ldr	r3, .L233+48
 3949 0248 0022     		movs	r2, #0
 3950 024a 1A80     		strh	r2, [r3]	@ movhi
 861:.\main.c      ****         isrRF_RX_Disable();
 3951              		.loc 1 861 0
 3952 024c FFF7FEFF 		bl	isrRF_RX_Disable
 862:.\main.c      ****         while(rf_char != 'F')
 3953              		.loc 1 862 0
 3954 0250 26E0     		b	.L215
 3955              	.L218:
 863:.\main.c      ****         {
 864:.\main.c      ****             rf_char = UART_GetChar();
 3956              		.loc 1 864 0
 3957 0252 FFF7FEFF 		bl	UART_GetChar
 3958 0256 0346     		mov	r3, r0
 3959 0258 FB77     		strb	r3, [r7, #31]
 865:.\main.c      ****             if(rf_char == 'F') break;
 3960              		.loc 1 865 0
 3961 025a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3962 025c 462B     		cmp	r3, #70
 3963 025e 00D1     		bne	.L216
 3964 0260 21E0     		b	.L217
 3965              	.L216:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 87


 866:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 3966              		.loc 1 866 0
 3967 0262 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3968 0264 2F2B     		cmp	r3, #47
 3969 0266 1BD9     		bls	.L215
 3970              		.loc 1 866 0 is_stmt 0 discriminator 1
 3971 0268 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3972 026a 392B     		cmp	r3, #57
 3973 026c 18D8     		bhi	.L215
 867:.\main.c      ****             {
 868:.\main.c      ****                 UART_PutString("received: ");
 3974              		.loc 1 868 0 is_stmt 1
 3975 026e 6248     		ldr	r0, .L233+52
 3976 0270 FFF7FEFF 		bl	UART_PutString
 869:.\main.c      ****                 UART_PutChar(rf_char);
 3977              		.loc 1 869 0
 3978 0274 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3979 0276 1846     		mov	r0, r3
 3980 0278 FFF7FEFF 		bl	UART_PutChar
 870:.\main.c      ****                 UART_PutString("\r\n");
 3981              		.loc 1 870 0
 3982 027c 5F48     		ldr	r0, .L233+56
 3983 027e FFF7FEFF 		bl	UART_PutString
 871:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 3984              		.loc 1 871 0
 3985 0282 5C4B     		ldr	r3, .L233+48
 3986 0284 1B88     		ldrh	r3, [r3]
 3987 0286 1A46     		mov	r2, r3	@ movhi
 3988 0288 9200     		lsls	r2, r2, #2
 3989 028a 1344     		add	r3, r3, r2
 3990 028c 5B00     		lsls	r3, r3, #1
 3991 028e 9AB2     		uxth	r2, r3
 3992 0290 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 3993 0292 9BB2     		uxth	r3, r3
 3994 0294 1344     		add	r3, r3, r2
 3995 0296 9BB2     		uxth	r3, r3
 3996 0298 303B     		subs	r3, r3, #48
 3997 029a 9AB2     		uxth	r2, r3
 3998 029c 554B     		ldr	r3, .L233+48
 3999 029e 1A80     		strh	r2, [r3]	@ movhi
 4000              	.L215:
 862:.\main.c      ****         {
 4001              		.loc 1 862 0
 4002 02a0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4003 02a2 462B     		cmp	r3, #70
 4004 02a4 D5D1     		bne	.L218
 4005              	.L217:
 872:.\main.c      ****             }
 873:.\main.c      ****             
 874:.\main.c      ****         }
 875:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4006              		.loc 1 875 0
 4007 02a6 5648     		ldr	r0, .L233+60
 4008 02a8 FFF7FEFF 		bl	isrRF_RX_StartEx
 876:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4009              		.loc 1 876 0
 4010 02ac 514B     		ldr	r3, .L233+48
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 88


 4011 02ae 1B88     		ldrh	r3, [r3]
 4012 02b0 1A46     		mov	r2, r3
 4013 02b2 3B46     		mov	r3, r7
 4014 02b4 1846     		mov	r0, r3
 4015 02b6 5349     		ldr	r1, .L233+64
 4016 02b8 FFF7FEFF 		bl	sprintf
 877:.\main.c      ****         UART_PutString(mes);
 4017              		.loc 1 877 0
 4018 02bc 3B46     		mov	r3, r7
 4019 02be 1846     		mov	r0, r3
 4020 02c0 FFF7FEFF 		bl	UART_PutString
 878:.\main.c      ****         
 879:.\main.c      ****         int i;
 880:.\main.c      ****         for(i = instructionCount;i < instructionLength; i++)
 4021              		.loc 1 880 0
 4022 02c4 4B4B     		ldr	r3, .L233+48
 4023 02c6 1B88     		ldrh	r3, [r3]
 4024 02c8 BB61     		str	r3, [r7, #24]
 4025 02ca 18E0     		b	.L219
 4026              	.L222:
 881:.\main.c      ****         {
 882:.\main.c      ****             if(i%2 == 0)
 4027              		.loc 1 882 0
 4028 02cc BB69     		ldr	r3, [r7, #24]
 4029 02ce 03F00103 		and	r3, r3, #1
 4030 02d2 002B     		cmp	r3, #0
 4031 02d4 07D1     		bne	.L220
 883:.\main.c      ****             {
 884:.\main.c      ****                 UART_PutChar(instructions[i]);
 4032              		.loc 1 884 0
 4033 02d6 4C4A     		ldr	r2, .L233+68
 4034 02d8 BB69     		ldr	r3, [r7, #24]
 4035 02da 1344     		add	r3, r3, r2
 4036 02dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4037 02de 1846     		mov	r0, r3
 4038 02e0 FFF7FEFF 		bl	UART_PutChar
 4039 02e4 08E0     		b	.L221
 4040              	.L220:
 885:.\main.c      ****             }
 886:.\main.c      ****             else UART_PutChar(instructions[i] + 48);
 4041              		.loc 1 886 0
 4042 02e6 484A     		ldr	r2, .L233+68
 4043 02e8 BB69     		ldr	r3, [r7, #24]
 4044 02ea 1344     		add	r3, r3, r2
 4045 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4046 02ee 3033     		adds	r3, r3, #48
 4047 02f0 DBB2     		uxtb	r3, r3
 4048 02f2 1846     		mov	r0, r3
 4049 02f4 FFF7FEFF 		bl	UART_PutChar
 4050              	.L221:
 880:.\main.c      ****         {
 4051              		.loc 1 880 0 discriminator 2
 4052 02f8 BB69     		ldr	r3, [r7, #24]
 4053 02fa 0133     		adds	r3, r3, #1
 4054 02fc BB61     		str	r3, [r7, #24]
 4055              	.L219:
 880:.\main.c      ****         {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 89


 4056              		.loc 1 880 0 is_stmt 0 discriminator 1
 4057 02fe 3A4B     		ldr	r3, .L233+36
 4058 0300 1B88     		ldrh	r3, [r3]
 4059 0302 1A46     		mov	r2, r3
 4060 0304 BB69     		ldr	r3, [r7, #24]
 4061 0306 9A42     		cmp	r2, r3
 4062 0308 E0DC     		bgt	.L222
 887:.\main.c      **** 
 888:.\main.c      ****         }
 889:.\main.c      ****         
 890:.\main.c      ****         UART_PutString("\r\n");
 4063              		.loc 1 890 0 is_stmt 1
 4064 030a 3C48     		ldr	r0, .L233+56
 4065 030c FFF7FEFF 		bl	UART_PutString
 891:.\main.c      ****         
 892:.\main.c      ****         char nextStep = instructions[instructionCount];
 4066              		.loc 1 892 0
 4067 0310 384B     		ldr	r3, .L233+48
 4068 0312 1B88     		ldrh	r3, [r3]
 4069 0314 1A46     		mov	r2, r3
 4070 0316 3C4B     		ldr	r3, .L233+68
 4071 0318 9B5C     		ldrb	r3, [r3, r2]
 4072 031a FB74     		strb	r3, [r7, #19]
 893:.\main.c      ****         
 894:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1];
 4073              		.loc 1 894 0
 4074 031c 354B     		ldr	r3, .L233+48
 4075 031e 1B88     		ldrh	r3, [r3]
 4076 0320 0133     		adds	r3, r3, #1
 4077 0322 394A     		ldr	r2, .L233+68
 4078 0324 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4079 0326 9BB2     		uxth	r3, r3
 4080 0328 1A46     		mov	r2, r3	@ movhi
 4081 032a 9200     		lsls	r2, r2, #2
 4082 032c 1344     		add	r3, r3, r2
 4083 032e 1A46     		mov	r2, r3	@ movhi
 4084 0330 D200     		lsls	r2, r2, #3
 4085 0332 D31A     		subs	r3, r2, r3
 4086 0334 9B00     		lsls	r3, r3, #2
 4087 0336 9BB2     		uxth	r3, r3
 4088 0338 9AB2     		uxth	r2, r3
 4089 033a 264B     		ldr	r3, .L233+16
 4090 033c 1A80     		strh	r2, [r3]	@ movhi
 895:.\main.c      ****         if(instructionCount == 0) target_distance_quad -= QUAD_PER_UNIT; 
 4091              		.loc 1 895 0
 4092 033e 2D4B     		ldr	r3, .L233+48
 4093 0340 1B88     		ldrh	r3, [r3]
 4094 0342 002B     		cmp	r3, #0
 4095 0344 07D1     		bne	.L223
 4096              		.loc 1 895 0 is_stmt 0 discriminator 1
 4097 0346 234B     		ldr	r3, .L233+16
 4098 0348 1B88     		ldrh	r3, [r3]
 4099 034a 9BB2     		uxth	r3, r3
 4100 034c 8C3B     		subs	r3, r3, #140
 4101 034e 9BB2     		uxth	r3, r3
 4102 0350 9AB2     		uxth	r2, r3
 4103 0352 204B     		ldr	r3, .L233+16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 90


 4104 0354 1A80     		strh	r2, [r3]	@ movhi
 4105              	.L223:
 896:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4106              		.loc 1 896 0 is_stmt 1
 4107 0356 1F4B     		ldr	r3, .L233+16
 4108 0358 1B88     		ldrh	r3, [r3]
 4109 035a 1BB2     		sxth	r3, r3
 4110 035c 3A46     		mov	r2, r7
 4111 035e 1046     		mov	r0, r2
 4112 0360 2A49     		ldr	r1, .L233+72
 4113 0362 1A46     		mov	r2, r3
 4114 0364 FFF7FEFF 		bl	sprintf
 897:.\main.c      ****         UART_PutString(mes);
 4115              		.loc 1 897 0
 4116 0368 3B46     		mov	r3, r7
 4117 036a 1846     		mov	r0, r3
 4118 036c FFF7FEFF 		bl	UART_PutString
 898:.\main.c      ****         inittrackLineZ();
 4119              		.loc 1 898 0
 4120 0370 FFF7FEFF 		bl	inittrackLineZ
 899:.\main.c      ****         break;
 4121              		.loc 1 899 0
 4122 0374 D6E0     		b	.L199
 4123              	.L201:
 900:.\main.c      ****     case ('1'):
 901:.\main.c      ****         track_mode = DEST_TEST;
 4124              		.loc 1 901 0
 4125 0376 134B     		ldr	r3, .L233
 4126 0378 0622     		movs	r2, #6
 4127 037a 1A70     		strb	r2, [r3]
 902:.\main.c      ****         tracked_direction = robot_direction;
 4128              		.loc 1 902 0
 4129 037c 184B     		ldr	r3, .L233+28
 4130 037e 1B68     		ldr	r3, [r3]
 4131 0380 184A     		ldr	r2, .L233+32
 4132 0382 1360     		str	r3, [r2]
 903:.\main.c      ****         //instructionLength = generateDirections();
 904:.\main.c      ****         instructionLength = generateEntireMapDirections();
 4133              		.loc 1 904 0
 4134 0384 FFF7FEFF 		bl	generateEntireMapDirections
 4135 0388 0346     		mov	r3, r0
 4136 038a 9AB2     		uxth	r2, r3
 4137 038c 164B     		ldr	r3, .L233+36
 4138 038e 1A80     		strh	r2, [r3]	@ movhi
 905:.\main.c      ****         //char message[128];
 906:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 907:.\main.c      ****         instructionCount = 0;
 4139              		.loc 1 907 0
 4140 0390 184B     		ldr	r3, .L233+48
 4141 0392 0022     		movs	r2, #0
 4142 0394 1A80     		strh	r2, [r3]	@ movhi
 908:.\main.c      ****         QuadDec_M1_SetCounter(0);
 4143              		.loc 1 908 0
 4144 0396 0020     		movs	r0, #0
 4145 0398 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 909:.\main.c      ****         QuadDec_M2_SetCounter(0);
 4146              		.loc 1 909 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 91


 4147 039c 0020     		movs	r0, #0
 4148 039e FFF7FEFF 		bl	QuadDec_M2_SetCounter
 910:.\main.c      ****         last_quad_count1 = 0;
 4149              		.loc 1 910 0
 4150 03a2 124B     		ldr	r3, .L233+40
 4151 03a4 0022     		movs	r2, #0
 4152 03a6 1A80     		strh	r2, [r3]	@ movhi
 911:.\main.c      ****         last_quad_count2 = 0;
 4153              		.loc 1 911 0
 4154 03a8 114B     		ldr	r3, .L233+44
 4155 03aa 0022     		movs	r2, #0
 4156 03ac 1A80     		strh	r2, [r3]	@ movhi
 912:.\main.c      ****         isrRF_RX_Disable();
 4157              		.loc 1 912 0
 4158 03ae FFF7FEFF 		bl	isrRF_RX_Disable
 913:.\main.c      ****         while(rf_char != 'F')
 4159              		.loc 1 913 0
 4160 03b2 4CE0     		b	.L224
 4161              	.L227:
 914:.\main.c      ****         {
 915:.\main.c      ****             rf_char = UART_GetChar();
 4162              		.loc 1 915 0
 4163 03b4 FFF7FEFF 		bl	UART_GetChar
 4164 03b8 0346     		mov	r3, r0
 4165 03ba FB77     		strb	r3, [r7, #31]
 916:.\main.c      ****             if(rf_char == 'F') break;
 4166              		.loc 1 916 0
 4167 03bc FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4168 03be 462B     		cmp	r3, #70
 4169 03c0 26D1     		bne	.L225
 4170 03c2 47E0     		b	.L226
 4171              	.L234:
 4172              		.align	2
 4173              	.L233:
 4174 03c4 00000000 		.word	track_mode
 4175 03c8 00000000 		.word	accum_dist
 4176 03cc 00000000 		.word	target_distance_cm
 4177 03d0 00000000 		.word	quad_per_cm
 4178 03d4 00000000 		.word	target_distance_quad
 4179 03d8 C0000000 		.word	.LC10
 4180 03dc 00000000 		.word	initial_pos_valid
 4181 03e0 00000000 		.word	robot_direction
 4182 03e4 00000000 		.word	tracked_direction
 4183 03e8 00000000 		.word	instructionLength
 4184 03ec 00000000 		.word	last_quad_count1
 4185 03f0 00000000 		.word	last_quad_count2
 4186 03f4 00000000 		.word	instructionCount
 4187 03f8 D4000000 		.word	.LC11
 4188 03fc E0000000 		.word	.LC12
 4189 0400 00000000 		.word	BT_rxInt
 4190 0404 E4000000 		.word	.LC13
 4191 0408 00000000 		.word	instructions
 4192 040c 64000000 		.word	.LC5
 4193              	.L225:
 917:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 4194              		.loc 1 917 0
 4195 0410 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 92


 4196 0412 2F2B     		cmp	r3, #47
 4197 0414 1BD9     		bls	.L224
 4198              		.loc 1 917 0 is_stmt 0 discriminator 1
 4199 0416 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4200 0418 392B     		cmp	r3, #57
 4201 041a 18D8     		bhi	.L224
 918:.\main.c      ****             {
 919:.\main.c      ****                 UART_PutString("received: ");
 4202              		.loc 1 919 0 is_stmt 1
 4203 041c 4348     		ldr	r0, .L235
 4204 041e FFF7FEFF 		bl	UART_PutString
 920:.\main.c      ****                 UART_PutChar(rf_char);
 4205              		.loc 1 920 0
 4206 0422 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4207 0424 1846     		mov	r0, r3
 4208 0426 FFF7FEFF 		bl	UART_PutChar
 921:.\main.c      ****                 UART_PutString("\r\n");
 4209              		.loc 1 921 0
 4210 042a 4148     		ldr	r0, .L235+4
 4211 042c FFF7FEFF 		bl	UART_PutString
 922:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 4212              		.loc 1 922 0
 4213 0430 404B     		ldr	r3, .L235+8
 4214 0432 1B88     		ldrh	r3, [r3]
 4215 0434 1A46     		mov	r2, r3	@ movhi
 4216 0436 9200     		lsls	r2, r2, #2
 4217 0438 1344     		add	r3, r3, r2
 4218 043a 5B00     		lsls	r3, r3, #1
 4219 043c 9AB2     		uxth	r2, r3
 4220 043e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4221 0440 9BB2     		uxth	r3, r3
 4222 0442 1344     		add	r3, r3, r2
 4223 0444 9BB2     		uxth	r3, r3
 4224 0446 303B     		subs	r3, r3, #48
 4225 0448 9AB2     		uxth	r2, r3
 4226 044a 3A4B     		ldr	r3, .L235+8
 4227 044c 1A80     		strh	r2, [r3]	@ movhi
 4228              	.L224:
 913:.\main.c      ****         {
 4229              		.loc 1 913 0
 4230 044e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4231 0450 462B     		cmp	r3, #70
 4232 0452 AFD1     		bne	.L227
 4233              	.L226:
 923:.\main.c      ****             }
 924:.\main.c      ****             
 925:.\main.c      ****         }
 926:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4234              		.loc 1 926 0
 4235 0454 3848     		ldr	r0, .L235+12
 4236 0456 FFF7FEFF 		bl	isrRF_RX_StartEx
 927:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4237              		.loc 1 927 0
 4238 045a 364B     		ldr	r3, .L235+8
 4239 045c 1B88     		ldrh	r3, [r3]
 4240 045e 1A46     		mov	r2, r3
 4241 0460 3B46     		mov	r3, r7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 93


 4242 0462 1846     		mov	r0, r3
 4243 0464 3549     		ldr	r1, .L235+16
 4244 0466 FFF7FEFF 		bl	sprintf
 928:.\main.c      ****         UART_PutString(mes);
 4245              		.loc 1 928 0
 4246 046a 3B46     		mov	r3, r7
 4247 046c 1846     		mov	r0, r3
 4248 046e FFF7FEFF 		bl	UART_PutString
 929:.\main.c      ****         //instructionCount = instructionLength - 22;
 930:.\main.c      ****         int x;
 931:.\main.c      ****         for(x = instructionCount;x < instructionLength; x++)
 4249              		.loc 1 931 0
 4250 0472 304B     		ldr	r3, .L235+8
 4251 0474 1B88     		ldrh	r3, [r3]
 4252 0476 7B61     		str	r3, [r7, #20]
 4253 0478 18E0     		b	.L228
 4254              	.L231:
 932:.\main.c      ****         {
 933:.\main.c      ****             if(x%2 == 0)
 4255              		.loc 1 933 0
 4256 047a 7B69     		ldr	r3, [r7, #20]
 4257 047c 03F00103 		and	r3, r3, #1
 4258 0480 002B     		cmp	r3, #0
 4259 0482 07D1     		bne	.L229
 934:.\main.c      ****             {
 935:.\main.c      ****                 UART_PutChar(instructions[x]);
 4260              		.loc 1 935 0
 4261 0484 2E4A     		ldr	r2, .L235+20
 4262 0486 7B69     		ldr	r3, [r7, #20]
 4263 0488 1344     		add	r3, r3, r2
 4264 048a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4265 048c 1846     		mov	r0, r3
 4266 048e FFF7FEFF 		bl	UART_PutChar
 4267 0492 08E0     		b	.L230
 4268              	.L229:
 936:.\main.c      ****             }
 937:.\main.c      ****             else UART_PutChar(instructions[x] + 48);
 4269              		.loc 1 937 0
 4270 0494 2A4A     		ldr	r2, .L235+20
 4271 0496 7B69     		ldr	r3, [r7, #20]
 4272 0498 1344     		add	r3, r3, r2
 4273 049a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4274 049c 3033     		adds	r3, r3, #48
 4275 049e DBB2     		uxtb	r3, r3
 4276 04a0 1846     		mov	r0, r3
 4277 04a2 FFF7FEFF 		bl	UART_PutChar
 4278              	.L230:
 931:.\main.c      ****         {
 4279              		.loc 1 931 0 discriminator 2
 4280 04a6 7B69     		ldr	r3, [r7, #20]
 4281 04a8 0133     		adds	r3, r3, #1
 4282 04aa 7B61     		str	r3, [r7, #20]
 4283              	.L228:
 931:.\main.c      ****         {
 4284              		.loc 1 931 0 is_stmt 0 discriminator 1
 4285 04ac 254B     		ldr	r3, .L235+24
 4286 04ae 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 94


 4287 04b0 1A46     		mov	r2, r3
 4288 04b2 7B69     		ldr	r3, [r7, #20]
 4289 04b4 9A42     		cmp	r2, r3
 4290 04b6 E0DC     		bgt	.L231
 938:.\main.c      **** 
 939:.\main.c      ****         }
 940:.\main.c      ****         
 941:.\main.c      ****         UART_PutString("\r\n");
 4291              		.loc 1 941 0 is_stmt 1
 4292 04b8 1D48     		ldr	r0, .L235+4
 4293 04ba FFF7FEFF 		bl	UART_PutString
 942:.\main.c      **** 
 943:.\main.c      ****         nextStep = instructions[instructionCount];
 4294              		.loc 1 943 0
 4295 04be 1D4B     		ldr	r3, .L235+8
 4296 04c0 1B88     		ldrh	r3, [r3]
 4297 04c2 1A46     		mov	r2, r3
 4298 04c4 1E4B     		ldr	r3, .L235+20
 4299 04c6 9B5C     		ldrb	r3, [r3, r2]
 4300 04c8 FB74     		strb	r3, [r7, #19]
 944:.\main.c      ****         
 945:.\main.c      ****         
 946:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1]; 
 4301              		.loc 1 946 0
 4302 04ca 1A4B     		ldr	r3, .L235+8
 4303 04cc 1B88     		ldrh	r3, [r3]
 4304 04ce 0133     		adds	r3, r3, #1
 4305 04d0 1B4A     		ldr	r2, .L235+20
 4306 04d2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4307 04d4 9BB2     		uxth	r3, r3
 4308 04d6 1A46     		mov	r2, r3	@ movhi
 4309 04d8 9200     		lsls	r2, r2, #2
 4310 04da 1344     		add	r3, r3, r2
 4311 04dc 1A46     		mov	r2, r3	@ movhi
 4312 04de D200     		lsls	r2, r2, #3
 4313 04e0 D31A     		subs	r3, r2, r3
 4314 04e2 9B00     		lsls	r3, r3, #2
 4315 04e4 9BB2     		uxth	r3, r3
 4316 04e6 9AB2     		uxth	r2, r3
 4317 04e8 174B     		ldr	r3, .L235+28
 4318 04ea 1A80     		strh	r2, [r3]	@ movhi
 947:.\main.c      ****         if(instructionCount == 0) target_distance_quad += QUAD_PER_UNIT; 
 4319              		.loc 1 947 0
 4320 04ec 114B     		ldr	r3, .L235+8
 4321 04ee 1B88     		ldrh	r3, [r3]
 4322 04f0 002B     		cmp	r3, #0
 4323 04f2 07D1     		bne	.L232
 4324              		.loc 1 947 0 is_stmt 0 discriminator 1
 4325 04f4 144B     		ldr	r3, .L235+28
 4326 04f6 1B88     		ldrh	r3, [r3]
 4327 04f8 9BB2     		uxth	r3, r3
 4328 04fa 8C33     		adds	r3, r3, #140
 4329 04fc 9BB2     		uxth	r3, r3
 4330 04fe 9AB2     		uxth	r2, r3
 4331 0500 114B     		ldr	r3, .L235+28
 4332 0502 1A80     		strh	r2, [r3]	@ movhi
 4333              	.L232:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 95


 948:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4334              		.loc 1 948 0 is_stmt 1
 4335 0504 104B     		ldr	r3, .L235+28
 4336 0506 1B88     		ldrh	r3, [r3]
 4337 0508 1BB2     		sxth	r3, r3
 4338 050a 3A46     		mov	r2, r7
 4339 050c 1046     		mov	r0, r2
 4340 050e 0F49     		ldr	r1, .L235+32
 4341 0510 1A46     		mov	r2, r3
 4342 0512 FFF7FEFF 		bl	sprintf
 949:.\main.c      ****         UART_PutString(mes);
 4343              		.loc 1 949 0
 4344 0516 3B46     		mov	r3, r7
 4345 0518 1846     		mov	r0, r3
 4346 051a FFF7FEFF 		bl	UART_PutString
 950:.\main.c      ****         inittrackLineZ();
 4347              		.loc 1 950 0
 4348 051e FFF7FEFF 		bl	inittrackLineZ
 951:.\main.c      ****         break;
 4349              		.loc 1 951 0
 4350 0522 00BF     		nop
 4351              	.L199:
 4352              	.LBE11:
 952:.\main.c      ****     }
 953:.\main.c      **** }
 4353              		.loc 1 953 0
 4354 0524 2037     		adds	r7, r7, #32
 4355              		.cfi_def_cfa_offset 8
 4356 0526 BD46     		mov	sp, r7
 4357              		.cfi_def_cfa_register 13
 4358              		@ sp needed
 4359 0528 80BD     		pop	{r7, pc}
 4360              	.L236:
 4361 052a 00BF     		.align	2
 4362              	.L235:
 4363 052c D4000000 		.word	.LC11
 4364 0530 E0000000 		.word	.LC12
 4365 0534 00000000 		.word	instructionCount
 4366 0538 00000000 		.word	BT_rxInt
 4367 053c E4000000 		.word	.LC13
 4368 0540 00000000 		.word	instructions
 4369 0544 00000000 		.word	instructionLength
 4370 0548 00000000 		.word	target_distance_quad
 4371 054c 64000000 		.word	.LC5
 4372              		.cfi_endproc
 4373              	.LFE93:
 4374              		.size	BT_rxInt, .-BT_rxInt
 4375              		.section	.text.changeToRF,"ax",%progbits
 4376              		.align	2
 4377              		.global	changeToRF
 4378              		.thumb
 4379              		.thumb_func
 4380              		.type	changeToRF, %function
 4381              	changeToRF:
 4382              	.LFB94:
 954:.\main.c      **** 
 955:.\main.c      **** 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 96


 956:.\main.c      **** void changeToRF()
 957:.\main.c      **** {
 4383              		.loc 1 957 0
 4384              		.cfi_startproc
 4385              		@ args = 0, pretend = 0, frame = 0
 4386              		@ frame_needed = 1, uses_anonymous_args = 0
 4387 0000 80B5     		push	{r7, lr}
 4388              		.cfi_def_cfa_offset 8
 4389              		.cfi_offset 7, -8
 4390              		.cfi_offset 14, -4
 4391 0002 00AF     		add	r7, sp, #0
 4392              		.cfi_def_cfa_register 7
 958:.\main.c      ****         //disable BT
 959:.\main.c      ****         BT_ENABLED = 0;
 4393              		.loc 1 959 0
 4394 0004 0B4B     		ldr	r3, .L238
 4395 0006 0022     		movs	r2, #0
 4396 0008 1A70     		strb	r2, [r3]
 960:.\main.c      ****         isrRF_RX_Stop();
 4397              		.loc 1 960 0
 4398 000a FFF7FEFF 		bl	isrRF_RX_Stop
 961:.\main.c      ****         UART_Stop();
 4399              		.loc 1 961 0
 4400 000e FFF7FEFF 		bl	UART_Stop
 962:.\main.c      ****         
 963:.\main.c      ****         //enable RF
 964:.\main.c      ****         BIN_ENABLED = 1;
 4401              		.loc 1 964 0
 4402 0012 094B     		ldr	r3, .L238+4
 4403 0014 0122     		movs	r2, #1
 4404 0016 1A70     		strb	r2, [r3]
 965:.\main.c      ****         UART_clk_SetDividerValue(130);
 4405              		.loc 1 965 0
 4406 0018 8120     		movs	r0, #129
 4407 001a 0121     		movs	r1, #1
 4408 001c FFF7FEFF 		bl	UART_clk_SetDividerRegister
 966:.\main.c      ****         isrRF_RX_StartEx(rxInt);
 4409              		.loc 1 966 0
 4410 0020 0648     		ldr	r0, .L238+8
 4411 0022 FFF7FEFF 		bl	isrRF_RX_StartEx
 967:.\main.c      ****         UART_Start();
 4412              		.loc 1 967 0
 4413 0026 FFF7FEFF 		bl	UART_Start
 968:.\main.c      ****         RF_BT_SELECT_Write(0);
 4414              		.loc 1 968 0
 4415 002a 0020     		movs	r0, #0
 4416 002c FFF7FEFF 		bl	RF_BT_SELECT_Write
 969:.\main.c      **** }
 4417              		.loc 1 969 0
 4418 0030 80BD     		pop	{r7, pc}
 4419              	.L239:
 4420 0032 00BF     		.align	2
 4421              	.L238:
 4422 0034 00000000 		.word	BT_ENABLED
 4423 0038 00000000 		.word	BIN_ENABLED
 4424 003c 00000000 		.word	rxInt
 4425              		.cfi_endproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 97


 4426              	.LFE94:
 4427              		.size	changeToRF, .-changeToRF
 4428              		.section	.text.changeToBT,"ax",%progbits
 4429              		.align	2
 4430              		.global	changeToBT
 4431              		.thumb
 4432              		.thumb_func
 4433              		.type	changeToBT, %function
 4434              	changeToBT:
 4435              	.LFB95:
 970:.\main.c      **** 
 971:.\main.c      **** void changeToBT()
 972:.\main.c      **** {
 4436              		.loc 1 972 0
 4437              		.cfi_startproc
 4438              		@ args = 0, pretend = 0, frame = 0
 4439              		@ frame_needed = 1, uses_anonymous_args = 0
 4440 0000 80B5     		push	{r7, lr}
 4441              		.cfi_def_cfa_offset 8
 4442              		.cfi_offset 7, -8
 4443              		.cfi_offset 14, -4
 4444 0002 00AF     		add	r7, sp, #0
 4445              		.cfi_def_cfa_register 7
 973:.\main.c      ****         //disable RF
 974:.\main.c      ****         BIN_ENABLED = 0;
 4446              		.loc 1 974 0
 4447 0004 0B4B     		ldr	r3, .L241
 4448 0006 0022     		movs	r2, #0
 4449 0008 1A70     		strb	r2, [r3]
 975:.\main.c      ****         isrRF_RX_Stop();
 4450              		.loc 1 975 0
 4451 000a FFF7FEFF 		bl	isrRF_RX_Stop
 976:.\main.c      ****         UART_Stop();
 4452              		.loc 1 976 0
 4453 000e FFF7FEFF 		bl	UART_Stop
 977:.\main.c      ****         
 978:.\main.c      ****         //enable BT
 979:.\main.c      ****         BT_ENABLED = 1;
 4454              		.loc 1 979 0
 4455 0012 094B     		ldr	r3, .L241+4
 4456 0014 0122     		movs	r2, #1
 4457 0016 1A70     		strb	r2, [r3]
 980:.\main.c      ****         UART_clk_SetDividerValue(781);
 4458              		.loc 1 980 0
 4459 0018 4FF44370 		mov	r0, #780
 4460 001c 0121     		movs	r1, #1
 4461 001e FFF7FEFF 		bl	UART_clk_SetDividerRegister
 981:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4462              		.loc 1 981 0
 4463 0022 0648     		ldr	r0, .L241+8
 4464 0024 FFF7FEFF 		bl	isrRF_RX_StartEx
 982:.\main.c      ****         UART_Start();
 4465              		.loc 1 982 0
 4466 0028 FFF7FEFF 		bl	UART_Start
 983:.\main.c      ****         RF_BT_SELECT_Write(1);
 4467              		.loc 1 983 0
 4468 002c 0120     		movs	r0, #1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 98


 4469 002e FFF7FEFF 		bl	RF_BT_SELECT_Write
 984:.\main.c      **** }
 4470              		.loc 1 984 0
 4471 0032 80BD     		pop	{r7, pc}
 4472              	.L242:
 4473              		.align	2
 4474              	.L241:
 4475 0034 00000000 		.word	BIN_ENABLED
 4476 0038 00000000 		.word	BT_ENABLED
 4477 003c 00000000 		.word	BT_rxInt
 4478              		.cfi_endproc
 4479              	.LFE95:
 4480              		.size	changeToBT, .-changeToBT
 4481              		.section	.text.Quad_Dec_response,"ax",%progbits
 4482              		.align	2
 4483              		.global	Quad_Dec_response
 4484              		.thumb
 4485              		.thumb_func
 4486              		.type	Quad_Dec_response, %function
 4487              	Quad_Dec_response:
 4488              	.LFB96:
 985:.\main.c      **** 
 986:.\main.c      **** 
 987:.\main.c      **** void Quad_Dec_response()
 988:.\main.c      **** {
 4489              		.loc 1 988 0
 4490              		.cfi_startproc
 4491              		@ args = 0, pretend = 0, frame = 32
 4492              		@ frame_needed = 1, uses_anonymous_args = 0
 4493 0000 B0B5     		push	{r4, r5, r7, lr}
 4494              		.cfi_def_cfa_offset 16
 4495              		.cfi_offset 4, -16
 4496              		.cfi_offset 5, -12
 4497              		.cfi_offset 7, -8
 4498              		.cfi_offset 14, -4
 4499 0002 88B0     		sub	sp, sp, #32
 4500              		.cfi_def_cfa_offset 48
 4501 0004 00AF     		add	r7, sp, #0
 4502              		.cfi_def_cfa_register 7
 989:.\main.c      ****     //Check if the flag has been set
 990:.\main.c      ****     if (!flag_calc_wheelspeed) return;
 4503              		.loc 1 990 0
 4504 0006 824B     		ldr	r3, .L251
 4505 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4506 000a 002B     		cmp	r3, #0
 4507 000c 00D1     		bne	.L244
 4508 000e FCE0     		b	.L243
 4509              	.L244:
 991:.\main.c      ****     flag_calc_wheelspeed = 0;
 4510              		.loc 1 991 0
 4511 0010 7F4B     		ldr	r3, .L251
 4512 0012 0022     		movs	r2, #0
 4513 0014 1A70     		strb	r2, [r3]
 992:.\main.c      ****     
 993:.\main.c      ****     //char wheel_1_str [64];
 994:.\main.c      ****     //char wheel_2_str [64];
 995:.\main.c      ****     //sprintf(wheel_1_str, "quad count 1 is: %d\n\r", quad_diff1);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 99


 996:.\main.c      ****     //usbPutString(wheel_1_str);
 997:.\main.c      ****     //sprintf(wheel_2_str, "quad count 2 is: %d\n\r", quad_diff2);
 998:.\main.c      ****     
 999:.\main.c      ****     //usbPutString(wheel_2_str);
1000:.\main.c      ****     
1001:.\main.c      ****     int16 leftSpeed = quad_diff1;
 4514              		.loc 1 1001 0
 4515 0016 7F4B     		ldr	r3, .L251+4
 4516 0018 1B88     		ldrh	r3, [r3]	@ movhi
 4517 001a FB81     		strh	r3, [r7, #14]	@ movhi
1002:.\main.c      ****     int16 rightSpeed = quad_diff2;
 4518              		.loc 1 1002 0
 4519 001c 7E4B     		ldr	r3, .L251+8
 4520 001e 1B88     		ldrh	r3, [r3]	@ movhi
 4521 0020 BB81     		strh	r3, [r7, #12]	@ movhi
1003:.\main.c      ****     double scalingLeft = 1;
 4522              		.loc 1 1003 0
 4523 0022 4FF00002 		mov	r2, #0
 4524 0026 7D4B     		ldr	r3, .L251+12
 4525 0028 C7E90623 		strd	r2, [r7, #24]
1004:.\main.c      ****     double scalingRight = 1;
 4526              		.loc 1 1004 0
 4527 002c 4FF00002 		mov	r2, #0
 4528 0030 7A4B     		ldr	r3, .L251+12
 4529 0032 C7E90423 		strd	r2, [r7, #16]
1005:.\main.c      ****     
1006:.\main.c      ****     //there's an initial right tilt by default, so we want to decrease the initial left speed
1007:.\main.c      ****     if(leftSpeed == 0 && rightSpeed == 0){ 
 4530              		.loc 1 1007 0
 4531 0036 B7F90E30 		ldrsh	r3, [r7, #14]
 4532 003a 002B     		cmp	r3, #0
 4533 003c 0FD1     		bne	.L246
 4534              		.loc 1 1007 0 is_stmt 0 discriminator 1
 4535 003e B7F90C30 		ldrsh	r3, [r7, #12]
 4536 0042 002B     		cmp	r3, #0
 4537 0044 0BD1     		bne	.L246
1008:.\main.c      ****        //leftSpeed = 3;
1009:.\main.c      ****         scalingLeft = 2;
 4538              		.loc 1 1009 0 is_stmt 1
 4539 0046 4FF00002 		mov	r2, #0
 4540 004a 4FF08043 		mov	r3, #1073741824
 4541 004e C7E90623 		strd	r2, [r7, #24]
1010:.\main.c      ****         scalingRight = 2;
 4542              		.loc 1 1010 0
 4543 0052 4FF00002 		mov	r2, #0
 4544 0056 4FF08043 		mov	r3, #1073741824
 4545 005a C7E90423 		strd	r2, [r7, #16]
 4546              	.L246:
1011:.\main.c      ****     }
1012:.\main.c      **** 
1013:.\main.c      ****     int interCalc = leftSpeedLimit - abs(leftSpeed);
 4547              		.loc 1 1013 0
 4548 005e 704B     		ldr	r3, .L251+16
 4549 0060 1B88     		ldrh	r3, [r3]
 4550 0062 1AB2     		sxth	r2, r3
 4551 0064 B7F90E30 		ldrsh	r3, [r7, #14]
 4552 0068 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 100


 4553 006a B8BF     		it	lt
 4554 006c 5B42     		rsblt	r3, r3, #0
 4555 006e D31A     		subs	r3, r2, r3
 4556 0070 BB60     		str	r3, [r7, #8]
1014:.\main.c      ****     int nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs((int)(interCalc)));
 4557              		.loc 1 1014 0
 4558 0072 BB68     		ldr	r3, [r7, #8]
 4559 0074 83EAE372 		eor	r2, r3, r3, asr #31
 4560 0078 A2EBE372 		sub	r2, r2, r3, asr #31
 4561 007c BB68     		ldr	r3, [r7, #8]
 4562 007e 92FBF3F3 		sdiv	r3, r2, r3
 4563 0082 1846     		mov	r0, r3
 4564 0084 FFF7FEFF 		bl	__aeabi_i2d
 4565 0088 0446     		mov	r4, r0
 4566 008a 0D46     		mov	r5, r1
 4567 008c BB68     		ldr	r3, [r7, #8]
 4568 008e 002B     		cmp	r3, #0
 4569 0090 B8BF     		it	lt
 4570 0092 5B42     		rsblt	r3, r3, #0
 4571 0094 1846     		mov	r0, r3
 4572 0096 FFF7FEFF 		bl	__aeabi_i2d
 4573 009a 0246     		mov	r2, r0
 4574 009c 0B46     		mov	r3, r1
 4575 009e 1046     		mov	r0, r2
 4576 00a0 1946     		mov	r1, r3
 4577 00a2 FFF7FEFF 		bl	sqrt
 4578 00a6 0246     		mov	r2, r0
 4579 00a8 0B46     		mov	r3, r1
 4580 00aa 2046     		mov	r0, r4
 4581 00ac 2946     		mov	r1, r5
 4582 00ae FFF7FEFF 		bl	__aeabi_dmul
 4583 00b2 0246     		mov	r2, r0
 4584 00b4 0B46     		mov	r3, r1
 4585 00b6 1046     		mov	r0, r2
 4586 00b8 1946     		mov	r1, r3
 4587 00ba FFF7FEFF 		bl	__aeabi_d2iz
 4588 00be 0346     		mov	r3, r0
 4589 00c0 7B60     		str	r3, [r7, #4]
1015:.\main.c      ****     left_duty_cycle = left_duty_cycle + scalingLeft*nextSpeed;
 4590              		.loc 1 1015 0
 4591 00c2 584B     		ldr	r3, .L251+20
 4592 00c4 1B88     		ldrh	r3, [r3]
 4593 00c6 1BB2     		sxth	r3, r3
 4594 00c8 1846     		mov	r0, r3
 4595 00ca FFF7FEFF 		bl	__aeabi_i2d
 4596 00ce 0446     		mov	r4, r0
 4597 00d0 0D46     		mov	r5, r1
 4598 00d2 7868     		ldr	r0, [r7, #4]
 4599 00d4 FFF7FEFF 		bl	__aeabi_i2d
 4600 00d8 0246     		mov	r2, r0
 4601 00da 0B46     		mov	r3, r1
 4602 00dc 1046     		mov	r0, r2
 4603 00de 1946     		mov	r1, r3
 4604 00e0 D7E90623 		ldrd	r2, [r7, #24]
 4605 00e4 FFF7FEFF 		bl	__aeabi_dmul
 4606 00e8 0246     		mov	r2, r0
 4607 00ea 0B46     		mov	r3, r1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 101


 4608 00ec 2046     		mov	r0, r4
 4609 00ee 2946     		mov	r1, r5
 4610 00f0 FFF7FEFF 		bl	__aeabi_dadd
 4611 00f4 0246     		mov	r2, r0
 4612 00f6 0B46     		mov	r3, r1
 4613 00f8 1046     		mov	r0, r2
 4614 00fa 1946     		mov	r1, r3
 4615 00fc FFF7FEFF 		bl	__aeabi_d2iz
 4616 0100 0346     		mov	r3, r0
 4617 0102 9AB2     		uxth	r2, r3
 4618 0104 474B     		ldr	r3, .L251+20
 4619 0106 1A80     		strh	r2, [r3]	@ movhi
1016:.\main.c      ****     interCalc = rightSpeedLimit - abs(rightSpeed);
 4620              		.loc 1 1016 0
 4621 0108 474B     		ldr	r3, .L251+24
 4622 010a 1B88     		ldrh	r3, [r3]
 4623 010c 1AB2     		sxth	r2, r3
 4624 010e B7F90C30 		ldrsh	r3, [r7, #12]
 4625 0112 002B     		cmp	r3, #0
 4626 0114 B8BF     		it	lt
 4627 0116 5B42     		rsblt	r3, r3, #0
 4628 0118 D31A     		subs	r3, r2, r3
 4629 011a BB60     		str	r3, [r7, #8]
1017:.\main.c      ****     nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs(interCalc));
 4630              		.loc 1 1017 0
 4631 011c BB68     		ldr	r3, [r7, #8]
 4632 011e 83EAE372 		eor	r2, r3, r3, asr #31
 4633 0122 A2EBE372 		sub	r2, r2, r3, asr #31
 4634 0126 BB68     		ldr	r3, [r7, #8]
 4635 0128 92FBF3F3 		sdiv	r3, r2, r3
 4636 012c 1846     		mov	r0, r3
 4637 012e FFF7FEFF 		bl	__aeabi_i2d
 4638 0132 0446     		mov	r4, r0
 4639 0134 0D46     		mov	r5, r1
 4640 0136 BB68     		ldr	r3, [r7, #8]
 4641 0138 002B     		cmp	r3, #0
 4642 013a B8BF     		it	lt
 4643 013c 5B42     		rsblt	r3, r3, #0
 4644 013e 1846     		mov	r0, r3
 4645 0140 FFF7FEFF 		bl	__aeabi_i2d
 4646 0144 0246     		mov	r2, r0
 4647 0146 0B46     		mov	r3, r1
 4648 0148 1046     		mov	r0, r2
 4649 014a 1946     		mov	r1, r3
 4650 014c FFF7FEFF 		bl	sqrt
 4651 0150 0246     		mov	r2, r0
 4652 0152 0B46     		mov	r3, r1
 4653 0154 2046     		mov	r0, r4
 4654 0156 2946     		mov	r1, r5
 4655 0158 FFF7FEFF 		bl	__aeabi_dmul
 4656 015c 0246     		mov	r2, r0
 4657 015e 0B46     		mov	r3, r1
 4658 0160 1046     		mov	r0, r2
 4659 0162 1946     		mov	r1, r3
 4660 0164 FFF7FEFF 		bl	__aeabi_d2iz
 4661 0168 0346     		mov	r3, r0
 4662 016a 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 102


1018:.\main.c      ****     right_duty_cycle = right_duty_cycle + scalingRight*nextSpeed;
 4663              		.loc 1 1018 0
 4664 016c 2F4B     		ldr	r3, .L251+28
 4665 016e 1B88     		ldrh	r3, [r3]
 4666 0170 1BB2     		sxth	r3, r3
 4667 0172 1846     		mov	r0, r3
 4668 0174 FFF7FEFF 		bl	__aeabi_i2d
 4669 0178 0446     		mov	r4, r0
 4670 017a 0D46     		mov	r5, r1
 4671 017c 7868     		ldr	r0, [r7, #4]
 4672 017e FFF7FEFF 		bl	__aeabi_i2d
 4673 0182 0246     		mov	r2, r0
 4674 0184 0B46     		mov	r3, r1
 4675 0186 1046     		mov	r0, r2
 4676 0188 1946     		mov	r1, r3
 4677 018a D7E90423 		ldrd	r2, [r7, #16]
 4678 018e FFF7FEFF 		bl	__aeabi_dmul
 4679 0192 0246     		mov	r2, r0
 4680 0194 0B46     		mov	r3, r1
 4681 0196 2046     		mov	r0, r4
 4682 0198 2946     		mov	r1, r5
 4683 019a FFF7FEFF 		bl	__aeabi_dadd
 4684 019e 0246     		mov	r2, r0
 4685 01a0 0B46     		mov	r3, r1
 4686 01a2 1046     		mov	r0, r2
 4687 01a4 1946     		mov	r1, r3
 4688 01a6 FFF7FEFF 		bl	__aeabi_d2iz
 4689 01aa 0346     		mov	r3, r0
 4690 01ac 9AB2     		uxth	r2, r3
 4691 01ae 1F4B     		ldr	r3, .L251+28
 4692 01b0 1A80     		strh	r2, [r3]	@ movhi
1019:.\main.c      ****     
1020:.\main.c      ****     if(right_duty_cycle < 0) right_duty_cycle = 0;
 4693              		.loc 1 1020 0
 4694 01b2 1E4B     		ldr	r3, .L251+28
 4695 01b4 1B88     		ldrh	r3, [r3]
 4696 01b6 1BB2     		sxth	r3, r3
 4697 01b8 002B     		cmp	r3, #0
 4698 01ba 02DA     		bge	.L247
 4699              		.loc 1 1020 0 is_stmt 0 discriminator 1
 4700 01bc 1B4B     		ldr	r3, .L251+28
 4701 01be 0022     		movs	r2, #0
 4702 01c0 1A80     		strh	r2, [r3]	@ movhi
 4703              	.L247:
1021:.\main.c      ****     if(left_duty_cycle < 0) left_duty_cycle = 0;
 4704              		.loc 1 1021 0 is_stmt 1
 4705 01c2 184B     		ldr	r3, .L251+20
 4706 01c4 1B88     		ldrh	r3, [r3]
 4707 01c6 1BB2     		sxth	r3, r3
 4708 01c8 002B     		cmp	r3, #0
 4709 01ca 02DA     		bge	.L248
 4710              		.loc 1 1021 0 is_stmt 0 discriminator 1
 4711 01cc 154B     		ldr	r3, .L251+20
 4712 01ce 0022     		movs	r2, #0
 4713 01d0 1A80     		strh	r2, [r3]	@ movhi
 4714              	.L248:
1022:.\main.c      ****     if(right_duty_cycle > 100) right_duty_cycle = 100;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 103


 4715              		.loc 1 1022 0 is_stmt 1
 4716 01d2 164B     		ldr	r3, .L251+28
 4717 01d4 1B88     		ldrh	r3, [r3]
 4718 01d6 1BB2     		sxth	r3, r3
 4719 01d8 642B     		cmp	r3, #100
 4720 01da 02DD     		ble	.L249
 4721              		.loc 1 1022 0 is_stmt 0 discriminator 1
 4722 01dc 134B     		ldr	r3, .L251+28
 4723 01de 6422     		movs	r2, #100
 4724 01e0 1A80     		strh	r2, [r3]	@ movhi
 4725              	.L249:
1023:.\main.c      ****     if(left_duty_cycle > 100) left_duty_cycle = 100;
 4726              		.loc 1 1023 0 is_stmt 1
 4727 01e2 104B     		ldr	r3, .L251+20
 4728 01e4 1B88     		ldrh	r3, [r3]
 4729 01e6 1BB2     		sxth	r3, r3
 4730 01e8 642B     		cmp	r3, #100
 4731 01ea 02DD     		ble	.L250
 4732              		.loc 1 1023 0 is_stmt 0 discriminator 1
 4733 01ec 0D4B     		ldr	r3, .L251+20
 4734 01ee 6422     		movs	r2, #100
 4735 01f0 1A80     		strh	r2, [r3]	@ movhi
 4736              	.L250:
1024:.\main.c      ****     PWM_1_WriteCompare(left_duty_cycle);
 4737              		.loc 1 1024 0 is_stmt 1
 4738 01f2 0C4B     		ldr	r3, .L251+20
 4739 01f4 1B88     		ldrh	r3, [r3]
 4740 01f6 DBB2     		uxtb	r3, r3
 4741 01f8 1846     		mov	r0, r3
 4742 01fa FFF7FEFF 		bl	PWM_1_WriteCompare
1025:.\main.c      ****     PWM_2_WriteCompare(right_duty_cycle);
 4743              		.loc 1 1025 0
 4744 01fe 0B4B     		ldr	r3, .L251+28
 4745 0200 1B88     		ldrh	r3, [r3]
 4746 0202 DBB2     		uxtb	r3, r3
 4747 0204 1846     		mov	r0, r3
 4748 0206 FFF7FEFF 		bl	PWM_2_WriteCompare
 4749              	.L243:
1026:.\main.c      **** }
 4750              		.loc 1 1026 0
 4751 020a 2037     		adds	r7, r7, #32
 4752              		.cfi_def_cfa_offset 16
 4753 020c BD46     		mov	sp, r7
 4754              		.cfi_def_cfa_register 13
 4755              		@ sp needed
 4756 020e B0BD     		pop	{r4, r5, r7, pc}
 4757              	.L252:
 4758              		.align	2
 4759              	.L251:
 4760 0210 00000000 		.word	flag_calc_wheelspeed
 4761 0214 00000000 		.word	quad_diff1
 4762 0218 00000000 		.word	quad_diff2
 4763 021c 0000F03F 		.word	1072693248
 4764 0220 00000000 		.word	leftSpeedLimit
 4765 0224 00000000 		.word	left_duty_cycle
 4766 0228 00000000 		.word	rightSpeedLimit
 4767 022c 00000000 		.word	right_duty_cycle
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 104


 4768              		.cfi_endproc
 4769              	.LFE96:
 4770              		.size	Quad_Dec_response, .-Quad_Dec_response
 4771              		.section	.text.trackLine,"ax",%progbits
 4772              		.align	2
 4773              		.global	trackLine
 4774              		.thumb
 4775              		.thumb_func
 4776              		.type	trackLine, %function
 4777              	trackLine:
 4778              	.LFB97:
1027:.\main.c      **** 
1028:.\main.c      **** void trackLine()
1029:.\main.c      **** {
 4779              		.loc 1 1029 0
 4780              		.cfi_startproc
 4781              		@ args = 0, pretend = 0, frame = 0
 4782              		@ frame_needed = 1, uses_anonymous_args = 0
 4783              		@ link register save eliminated.
 4784 0000 80B4     		push	{r7}
 4785              		.cfi_def_cfa_offset 4
 4786              		.cfi_offset 7, -4
 4787 0002 00AF     		add	r7, sp, #0
 4788              		.cfi_def_cfa_register 7
1030:.\main.c      ****  //removed from implementation
1031:.\main.c      **** }
 4789              		.loc 1 1031 0
 4790 0004 BD46     		mov	sp, r7
 4791              		.cfi_def_cfa_register 13
 4792              		@ sp needed
 4793 0006 5DF8047B 		ldr	r7, [sp], #4
 4794              		.cfi_restore 7
 4795              		.cfi_def_cfa_offset 0
 4796 000a 7047     		bx	lr
 4797              		.cfi_endproc
 4798              	.LFE97:
 4799              		.size	trackLine, .-trackLine
 4800              		.global	leftTurnCount
 4801              		.bss
 4802              		.align	1
 4803              		.type	leftTurnCount, %object
 4804              		.size	leftTurnCount, 2
 4805              	leftTurnCount:
 4806 28e8 0000     		.space	2
 4807              		.global	rightTurnCount
 4808              		.align	1
 4809              		.type	rightTurnCount, %object
 4810              		.size	rightTurnCount, 2
 4811              	rightTurnCount:
 4812 28ea 0000     		.space	2
 4813              		.section	.text.trackLineZ,"ax",%progbits
 4814              		.align	2
 4815              		.global	trackLineZ
 4816              		.thumb
 4817              		.thumb_func
 4818              		.type	trackLineZ, %function
 4819              	trackLineZ:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 105


 4820              	.LFB98:
1032:.\main.c      **** uint16 leftTurnCount = 0;
1033:.\main.c      **** uint16 rightTurnCount = 0;
1034:.\main.c      **** void trackLineZ()
1035:.\main.c      **** {
 4821              		.loc 1 1035 0
 4822              		.cfi_startproc
 4823              		@ args = 0, pretend = 0, frame = 8
 4824              		@ frame_needed = 1, uses_anonymous_args = 0
 4825 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 4826              		.cfi_def_cfa_offset 24
 4827              		.cfi_offset 4, -24
 4828              		.cfi_offset 5, -20
 4829              		.cfi_offset 7, -16
 4830              		.cfi_offset 8, -12
 4831              		.cfi_offset 9, -8
 4832              		.cfi_offset 14, -4
 4833 0004 82B0     		sub	sp, sp, #8
 4834              		.cfi_def_cfa_offset 32
 4835 0006 00AF     		add	r7, sp, #0
 4836              		.cfi_def_cfa_register 7
1036:.\main.c      ****     //read the value of the three central-front sensors
1037:.\main.c      ****     
1038:.\main.c      ****     uint8 nl = NLSens_out_Read();
 4837              		.loc 1 1038 0
 4838 0008 FFF7FEFF 		bl	NLSens_out_Read
 4839 000c 0346     		mov	r3, r0
 4840 000e FB71     		strb	r3, [r7, #7]
1039:.\main.c      ****     uint8 nr = NRSens_out_Read();
 4841              		.loc 1 1039 0
 4842 0010 FFF7FEFF 		bl	NRSens_out_Read
 4843 0014 0346     		mov	r3, r0
 4844 0016 BB71     		strb	r3, [r7, #6]
1040:.\main.c      ****     uint8 mid = MSens_out_Read();
 4845              		.loc 1 1040 0
 4846 0018 FFF7FEFF 		bl	MSens_out_Read
 4847 001c 0346     		mov	r3, r0
 4848 001e 7B71     		strb	r3, [r7, #5]
1041:.\main.c      ****     
1042:.\main.c      ****         //if only the left one, hard left
1043:.\main.c      ****     if(nl && !nr && !mid)// && trackTurnCount > 0)
 4849              		.loc 1 1043 0
 4850 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4851 0022 002B     		cmp	r3, #0
 4852 0024 27D0     		beq	.L255
 4853              		.loc 1 1043 0 is_stmt 0 discriminator 1
 4854 0026 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4855 0028 002B     		cmp	r3, #0
 4856 002a 24D1     		bne	.L255
 4857              		.loc 1 1043 0 discriminator 2
 4858 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4859 002e 002B     		cmp	r3, #0
 4860 0030 21D1     		bne	.L255
1044:.\main.c      ****     {
1045:.\main.c      ****         setSpeed(speed / 1.6,-speed / 1.6);
 4861              		.loc 1 1045 0 is_stmt 1
 4862 0032 454B     		ldr	r3, .L260+8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 106


 4863 0034 D3E90023 		ldrd	r2, [r3]
 4864 0038 1046     		mov	r0, r2
 4865 003a 1946     		mov	r1, r3
 4866 003c 40A3     		adr	r3, .L260
 4867 003e D3E90023 		ldrd	r2, [r3]
 4868 0042 FFF7FEFF 		bl	__aeabi_ddiv
 4869 0046 0246     		mov	r2, r0
 4870 0048 0B46     		mov	r3, r1
 4871 004a 1446     		mov	r4, r2
 4872 004c 1D46     		mov	r5, r3
 4873 004e 3E4B     		ldr	r3, .L260+8
 4874 0050 D3E90023 		ldrd	r2, [r3]
 4875 0054 9046     		mov	r8, r2
 4876 0056 83F00049 		eor	r9, r3, #-2147483648
 4877 005a 4046     		mov	r0, r8
 4878 005c 4946     		mov	r1, r9
 4879 005e 38A3     		adr	r3, .L260
 4880 0060 D3E90023 		ldrd	r2, [r3]
 4881 0064 FFF7FEFF 		bl	__aeabi_ddiv
 4882 0068 0246     		mov	r2, r0
 4883 006a 0B46     		mov	r3, r1
 4884 006c 2046     		mov	r0, r4
 4885 006e 2946     		mov	r1, r5
 4886 0070 FFF7FEFF 		bl	setSpeed
 4887 0074 5FE0     		b	.L254
 4888              	.L255:
1046:.\main.c      ****     }
1047:.\main.c      ****     else if(nl && mid && !nr)   //if centre/middle, soft left
 4889              		.loc 1 1047 0
 4890 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4891 0078 002B     		cmp	r3, #0
 4892 007a 0ED0     		beq	.L257
 4893              		.loc 1 1047 0 is_stmt 0 discriminator 1
 4894 007c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4895 007e 002B     		cmp	r3, #0
 4896 0080 0BD0     		beq	.L257
 4897              		.loc 1 1047 0 discriminator 2
 4898 0082 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4899 0084 002B     		cmp	r3, #0
 4900 0086 08D1     		bne	.L257
1048:.\main.c      ****     {
1049:.\main.c      ****         setSpeed(speed,speed);
 4901              		.loc 1 1049 0 is_stmt 1
 4902 0088 2F4B     		ldr	r3, .L260+8
 4903 008a D3E90001 		ldrd	r0, [r3]
 4904 008e 2E4B     		ldr	r3, .L260+8
 4905 0090 D3E90023 		ldrd	r2, [r3]
 4906 0094 FFF7FEFF 		bl	setSpeed
 4907 0098 4DE0     		b	.L254
 4908              	.L257:
1050:.\main.c      ****     }
1051:.\main.c      ****     else if (nr && mid && !nl)//if centre/right, soft right
 4909              		.loc 1 1051 0
 4910 009a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4911 009c 002B     		cmp	r3, #0
 4912 009e 0ED0     		beq	.L258
 4913              		.loc 1 1051 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 107


 4914 00a0 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4915 00a2 002B     		cmp	r3, #0
 4916 00a4 0BD0     		beq	.L258
 4917              		.loc 1 1051 0 discriminator 2
 4918 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4919 00a8 002B     		cmp	r3, #0
 4920 00aa 08D1     		bne	.L258
1052:.\main.c      ****     {
1053:.\main.c      ****         setSpeed(speed ,speed);
 4921              		.loc 1 1053 0 is_stmt 1
 4922 00ac 264B     		ldr	r3, .L260+8
 4923 00ae D3E90001 		ldrd	r0, [r3]
 4924 00b2 254B     		ldr	r3, .L260+8
 4925 00b4 D3E90023 		ldrd	r2, [r3]
 4926 00b8 FFF7FEFF 		bl	setSpeed
 4927 00bc 3BE0     		b	.L254
 4928              	.L258:
1054:.\main.c      ****     }
1055:.\main.c      ****    else if (nr && !mid && !nl)    //if only right, hard right
 4929              		.loc 1 1055 0
 4930 00be BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4931 00c0 002B     		cmp	r3, #0
 4932 00c2 27D0     		beq	.L259
 4933              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4934 00c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4935 00c6 002B     		cmp	r3, #0
 4936 00c8 24D1     		bne	.L259
 4937              		.loc 1 1055 0 discriminator 2
 4938 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4939 00cc 002B     		cmp	r3, #0
 4940 00ce 21D1     		bne	.L259
1056:.\main.c      ****     {
1057:.\main.c      ****         setSpeed(-speed / 1.6,speed / 1.6);
 4941              		.loc 1 1057 0 is_stmt 1
 4942 00d0 1D4B     		ldr	r3, .L260+8
 4943 00d2 D3E90023 		ldrd	r2, [r3]
 4944 00d6 1446     		mov	r4, r2
 4945 00d8 83F00045 		eor	r5, r3, #-2147483648
 4946 00dc 2046     		mov	r0, r4
 4947 00de 2946     		mov	r1, r5
 4948 00e0 17A3     		adr	r3, .L260
 4949 00e2 D3E90023 		ldrd	r2, [r3]
 4950 00e6 FFF7FEFF 		bl	__aeabi_ddiv
 4951 00ea 0246     		mov	r2, r0
 4952 00ec 0B46     		mov	r3, r1
 4953 00ee 1446     		mov	r4, r2
 4954 00f0 1D46     		mov	r5, r3
 4955 00f2 154B     		ldr	r3, .L260+8
 4956 00f4 D3E90023 		ldrd	r2, [r3]
 4957 00f8 1046     		mov	r0, r2
 4958 00fa 1946     		mov	r1, r3
 4959 00fc 10A3     		adr	r3, .L260
 4960 00fe D3E90023 		ldrd	r2, [r3]
 4961 0102 FFF7FEFF 		bl	__aeabi_ddiv
 4962 0106 0246     		mov	r2, r0
 4963 0108 0B46     		mov	r3, r1
 4964 010a 2046     		mov	r0, r4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 108


 4965 010c 2946     		mov	r1, r5
 4966 010e FFF7FEFF 		bl	setSpeed
 4967 0112 10E0     		b	.L254
 4968              	.L259:
1058:.\main.c      ****     }
1059:.\main.c      ****     else if (mid && !nr && !nl)
 4969              		.loc 1 1059 0
 4970 0114 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4971 0116 002B     		cmp	r3, #0
 4972 0118 0DD0     		beq	.L254
 4973              		.loc 1 1059 0 is_stmt 0 discriminator 1
 4974 011a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4975 011c 002B     		cmp	r3, #0
 4976 011e 0AD1     		bne	.L254
 4977              		.loc 1 1059 0 discriminator 2
 4978 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4979 0122 002B     		cmp	r3, #0
 4980 0124 07D1     		bne	.L254
1060:.\main.c      ****     {
1061:.\main.c      ****         setSpeed(speed,speed);
 4981              		.loc 1 1061 0 is_stmt 1
 4982 0126 084B     		ldr	r3, .L260+8
 4983 0128 D3E90001 		ldrd	r0, [r3]
 4984 012c 064B     		ldr	r3, .L260+8
 4985 012e D3E90023 		ldrd	r2, [r3]
 4986 0132 FFF7FEFF 		bl	setSpeed
 4987              	.L254:
1062:.\main.c      ****     }
1063:.\main.c      **** }
 4988              		.loc 1 1063 0
 4989 0136 0837     		adds	r7, r7, #8
 4990              		.cfi_def_cfa_offset 24
 4991 0138 BD46     		mov	sp, r7
 4992              		.cfi_def_cfa_register 13
 4993              		@ sp needed
 4994 013a BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 4995              	.L261:
 4996 013e 00BF     		.align	3
 4997              	.L260:
 4998 0140 9A999999 		.word	-1717986918
 4999 0144 9999F93F 		.word	1073322393
 5000 0148 00000000 		.word	speed
 5001              		.cfi_endproc
 5002              	.LFE98:
 5003              		.size	trackLineZ, .-trackLineZ
 5004 014c AFF30080 		.section	.text.trackLineU,"ax",%progbits
 5005              		.align	2
 5006              		.global	trackLineU
 5007              		.thumb
 5008              		.thumb_func
 5009              		.type	trackLineU, %function
 5010              	trackLineU:
 5011              	.LFB99:
1064:.\main.c      **** 
1065:.\main.c      **** 
1066:.\main.c      **** void trackLineU()
1067:.\main.c      **** { 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 109


 5012              		.loc 1 1067 0
 5013              		.cfi_startproc
 5014              		@ args = 0, pretend = 0, frame = 0
 5015              		@ frame_needed = 1, uses_anonymous_args = 0
 5016              		@ link register save eliminated.
 5017 0000 80B4     		push	{r7}
 5018              		.cfi_def_cfa_offset 4
 5019              		.cfi_offset 7, -4
 5020 0002 00AF     		add	r7, sp, #0
 5021              		.cfi_def_cfa_register 7
1068:.\main.c      **** //removed from final implementation
1069:.\main.c      **** }
 5022              		.loc 1 1069 0
 5023 0004 BD46     		mov	sp, r7
 5024              		.cfi_def_cfa_register 13
 5025              		@ sp needed
 5026 0006 5DF8047B 		ldr	r7, [sp], #4
 5027              		.cfi_restore 7
 5028              		.cfi_def_cfa_offset 0
 5029 000a 7047     		bx	lr
 5030              		.cfi_endproc
 5031              	.LFE99:
 5032              		.size	trackLineU, .-trackLineU
 5033              		.global	__aeabi_fadd
 5034              		.section	.rodata
 5035 0103 00       		.align	2
 5036              	.LC14:
 5037 0104 42617474 		.ascii	"Battery Voltage: %dmv\012\015\000"
 5037      65727920 
 5037      566F6C74 
 5037      6167653A 
 5037      2025646D 
 5038              		.section	.text.print_ADC,"ax",%progbits
 5039              		.align	2
 5040              		.global	print_ADC
 5041              		.thumb
 5042              		.thumb_func
 5043              		.type	print_ADC, %function
 5044              	print_ADC:
 5045              	.LFB100:
1070:.\main.c      **** 
1071:.\main.c      **** void print_ADC()
1072:.\main.c      **** {
 5046              		.loc 1 1072 0
 5047              		.cfi_startproc
 5048              		@ args = 0, pretend = 0, frame = 24
 5049              		@ frame_needed = 1, uses_anonymous_args = 0
 5050 0000 80B5     		push	{r7, lr}
 5051              		.cfi_def_cfa_offset 8
 5052              		.cfi_offset 7, -8
 5053              		.cfi_offset 14, -4
 5054 0002 86B0     		sub	sp, sp, #24
 5055              		.cfi_def_cfa_offset 32
 5056 0004 00AF     		add	r7, sp, #0
 5057              		.cfi_def_cfa_register 7
1073:.\main.c      ****    //usbPutString("HII\n");
1074:.\main.c      ****     if(flag_receive_ADC == 1)
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 110


 5058              		.loc 1 1074 0
 5059 0006 274B     		ldr	r3, .L266
 5060 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5061 000a 012B     		cmp	r3, #1
 5062 000c 46D1     		bne	.L263
 5063              	.LBB12:
1075:.\main.c      ****     {
1076:.\main.c      ****         //usbPutString("AAA\r\n");
1077:.\main.c      ****         flag_receive_ADC = 0;
 5064              		.loc 1 1077 0
 5065 000e 254B     		ldr	r3, .L266
 5066 0010 0022     		movs	r2, #0
 5067 0012 1A70     		strb	r2, [r3]
1078:.\main.c      ****         
1079:.\main.c      ****        // int8 channel = ADC_
1080:.\main.c      ****         float scalingFactor = 0.972;
 5068              		.loc 1 1080 0
 5069 0014 244B     		ldr	r3, .L266+4
 5070 0016 7B61     		str	r3, [r7, #20]	@ float
1081:.\main.c      ****         int16 converted_val = (5000 * adc_result) / 4096 * scalingFactor * 2;
 5071              		.loc 1 1081 0
 5072 0018 244B     		ldr	r3, .L266+8
 5073 001a 1B88     		ldrh	r3, [r3]
 5074 001c 1BB2     		sxth	r3, r3
 5075 001e 41F28832 		movw	r2, #5000
 5076 0022 02FB03F3 		mul	r3, r2, r3
 5077 0026 002B     		cmp	r3, #0
 5078 0028 01DA     		bge	.L265
 5079 002a 03F6FF73 		addw	r3, r3, #4095
 5080              	.L265:
 5081 002e 1B13     		asrs	r3, r3, #12
 5082 0030 1846     		mov	r0, r3
 5083 0032 FFF7FEFF 		bl	__aeabi_i2f
 5084 0036 0346     		mov	r3, r0
 5085 0038 1846     		mov	r0, r3
 5086 003a 7969     		ldr	r1, [r7, #20]	@ float
 5087 003c FFF7FEFF 		bl	__aeabi_fmul
 5088 0040 0346     		mov	r3, r0
 5089 0042 1846     		mov	r0, r3
 5090 0044 1946     		mov	r1, r3
 5091 0046 FFF7FEFF 		bl	__aeabi_fadd
 5092 004a 0346     		mov	r3, r0
 5093 004c 1846     		mov	r0, r3
 5094 004e FFF7FEFF 		bl	__aeabi_f2iz
 5095 0052 0346     		mov	r3, r0
 5096 0054 7B82     		strh	r3, [r7, #18]	@ movhi
1082:.\main.c      ****         converted_val = (converted_val + prevVoltage + prevVoltage2) / 3; //smooth rapid changes in
 5097              		.loc 1 1082 0
 5098 0056 B7F91220 		ldrsh	r2, [r7, #18]
 5099 005a 154B     		ldr	r3, .L266+12
 5100 005c 1B88     		ldrh	r3, [r3]
 5101 005e 1BB2     		sxth	r3, r3
 5102 0060 1A44     		add	r2, r2, r3
 5103 0062 144B     		ldr	r3, .L266+16
 5104 0064 1B88     		ldrh	r3, [r3]
 5105 0066 1BB2     		sxth	r3, r3
 5106 0068 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 111


 5107 006a 134A     		ldr	r2, .L266+20
 5108 006c 82FB0312 		smull	r1, r2, r2, r3
 5109 0070 DB17     		asrs	r3, r3, #31
 5110 0072 D31A     		subs	r3, r2, r3
 5111 0074 7B82     		strh	r3, [r7, #18]	@ movhi
1083:.\main.c      ****         prevVoltage2 = prevVoltage;
 5112              		.loc 1 1083 0
 5113 0076 0E4B     		ldr	r3, .L266+12
 5114 0078 1A88     		ldrh	r2, [r3]
 5115 007a 0E4B     		ldr	r3, .L266+16
 5116 007c 1A80     		strh	r2, [r3]	@ movhi
1084:.\main.c      ****         prevVoltage = converted_val;
 5117              		.loc 1 1084 0
 5118 007e 0C4A     		ldr	r2, .L266+12
 5119 0080 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 5120 0082 1380     		strh	r3, [r2]	@ movhi
1085:.\main.c      ****         
1086:.\main.c      ****         char result_str[16];
1087:.\main.c      ****         sprintf(result_str, "Battery Voltage: %dmv\n\r", converted_val);
 5121              		.loc 1 1087 0
 5122 0084 B7F91230 		ldrsh	r3, [r7, #18]
 5123 0088 3A46     		mov	r2, r7
 5124 008a 1046     		mov	r0, r2
 5125 008c 0B49     		ldr	r1, .L266+24
 5126 008e 1A46     		mov	r2, r3
 5127 0090 FFF7FEFF 		bl	sprintf
1088:.\main.c      ****         
1089:.\main.c      ****         usbPutString(result_str);
 5128              		.loc 1 1089 0
 5129 0094 3B46     		mov	r3, r7
 5130 0096 1846     		mov	r0, r3
 5131 0098 FFF7FEFF 		bl	usbPutString
 5132              	.L263:
 5133              	.LBE12:
1090:.\main.c      ****     }
1091:.\main.c      **** }
 5134              		.loc 1 1091 0
 5135 009c 1837     		adds	r7, r7, #24
 5136              		.cfi_def_cfa_offset 8
 5137 009e BD46     		mov	sp, r7
 5138              		.cfi_def_cfa_register 13
 5139              		@ sp needed
 5140 00a0 80BD     		pop	{r7, pc}
 5141              	.L267:
 5142 00a2 00BF     		.align	2
 5143              	.L266:
 5144 00a4 00000000 		.word	flag_receive_ADC
 5145 00a8 FED4783F 		.word	1064883454
 5146 00ac 00000000 		.word	adc_result
 5147 00b0 00000000 		.word	prevVoltage
 5148 00b4 00000000 		.word	prevVoltage2
 5149 00b8 56555555 		.word	1431655766
 5150 00bc 04010000 		.word	.LC14
 5151              		.cfi_endproc
 5152              	.LFE100:
 5153              		.size	print_ADC, .-print_ADC
 5154              		.section	.rodata
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 112


 5155              		.align	2
 5156              	.LC15:
 5157 011c 52535349 		.ascii	"RSSI:\000"
 5157      3A00
 5158 0122 0000     		.align	2
 5159              	.LC16:
 5160 0124 25640D0A 		.ascii	"%d\015\012\000"
 5160      00
 5161 0129 000000   		.align	2
 5162              	.LC17:
 5163 012c 726F626F 		.ascii	"robot_x:\000"
 5163      745F783A 
 5163      00
 5164 0135 000000   		.align	2
 5165              	.LC18:
 5166 0138 726F626F 		.ascii	"robot_y:\000"
 5166      745F793A 
 5166      00
 5167 0141 000000   		.align	2
 5168              	.LC19:
 5169 0144 726F626F 		.ascii	"robot_dir:\000"
 5169      745F6469 
 5169      723A00
 5170 014f 00       		.section	.text.print_RF,"ax",%progbits
 5171              		.align	2
 5172              		.global	print_RF
 5173              		.thumb
 5174              		.thumb_func
 5175              		.type	print_RF, %function
 5176              	print_RF:
 5177              	.LFB101:
1092:.\main.c      **** 
1093:.\main.c      **** void print_RF()
1094:.\main.c      **** {
 5178              		.loc 1 1094 0
 5179              		.cfi_startproc
 5180              		@ args = 0, pretend = 0, frame = 16
 5181              		@ frame_needed = 1, uses_anonymous_args = 0
 5182 0000 80B5     		push	{r7, lr}
 5183              		.cfi_def_cfa_offset 8
 5184              		.cfi_offset 7, -8
 5185              		.cfi_offset 14, -4
 5186 0002 84B0     		sub	sp, sp, #16
 5187              		.cfi_def_cfa_offset 24
 5188 0004 00AF     		add	r7, sp, #0
 5189              		.cfi_def_cfa_register 7
1095:.\main.c      ****     if(flag_print_rf == 1)
 5190              		.loc 1 1095 0
 5191 0006 254B     		ldr	r3, .L270
 5192 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5193 000a 012B     		cmp	r3, #1
 5194 000c 42D1     		bne	.L268
 5195              	.LBB13:
1096:.\main.c      ****     {
1097:.\main.c      ****         char printString[16];
1098:.\main.c      ****         flag_print_rf = 0;
 5196              		.loc 1 1098 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 113


 5197 000e 234B     		ldr	r3, .L270
 5198 0010 0022     		movs	r2, #0
 5199 0012 1A70     		strb	r2, [r3]
1099:.\main.c      ****         usbPutString("RSSI:");
 5200              		.loc 1 1099 0
 5201 0014 2248     		ldr	r0, .L270+4
 5202 0016 FFF7FEFF 		bl	usbPutString
1100:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.rssi);
 5203              		.loc 1 1100 0
 5204 001a 224B     		ldr	r3, .L270+8
 5205 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5206 001e 5BB2     		sxtb	r3, r3
 5207 0020 3A46     		mov	r2, r7
 5208 0022 1046     		mov	r0, r2
 5209 0024 2049     		ldr	r1, .L270+12
 5210 0026 1A46     		mov	r2, r3
 5211 0028 FFF7FEFF 		bl	sprintf
1101:.\main.c      ****         usbPutString(printString);
 5212              		.loc 1 1101 0
 5213 002c 3B46     		mov	r3, r7
 5214 002e 1846     		mov	r0, r3
 5215 0030 FFF7FEFF 		bl	usbPutString
1102:.\main.c      ****         usbPutString("robot_x:");
 5216              		.loc 1 1102 0
 5217 0034 1D48     		ldr	r0, .L270+16
 5218 0036 FFF7FEFF 		bl	usbPutString
1103:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_xpos);
 5219              		.loc 1 1103 0
 5220 003a 1A4B     		ldr	r3, .L270+8
 5221 003c 5B88     		ldrh	r3, [r3, #2]
 5222 003e 1BB2     		sxth	r3, r3
 5223 0040 3A46     		mov	r2, r7
 5224 0042 1046     		mov	r0, r2
 5225 0044 1849     		ldr	r1, .L270+12
 5226 0046 1A46     		mov	r2, r3
 5227 0048 FFF7FEFF 		bl	sprintf
1104:.\main.c      ****         usbPutString(printString);
 5228              		.loc 1 1104 0
 5229 004c 3B46     		mov	r3, r7
 5230 004e 1846     		mov	r0, r3
 5231 0050 FFF7FEFF 		bl	usbPutString
1105:.\main.c      ****         usbPutString("robot_y:");
 5232              		.loc 1 1105 0
 5233 0054 1648     		ldr	r0, .L270+20
 5234 0056 FFF7FEFF 		bl	usbPutString
1106:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_ypos);
 5235              		.loc 1 1106 0
 5236 005a 124B     		ldr	r3, .L270+8
 5237 005c 9B88     		ldrh	r3, [r3, #4]
 5238 005e 1BB2     		sxth	r3, r3
 5239 0060 3A46     		mov	r2, r7
 5240 0062 1046     		mov	r0, r2
 5241 0064 1049     		ldr	r1, .L270+12
 5242 0066 1A46     		mov	r2, r3
 5243 0068 FFF7FEFF 		bl	sprintf
1107:.\main.c      ****         usbPutString(printString);
 5244              		.loc 1 1107 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 114


 5245 006c 3B46     		mov	r3, r7
 5246 006e 1846     		mov	r0, r3
 5247 0070 FFF7FEFF 		bl	usbPutString
1108:.\main.c      ****         usbPutString("robot_dir:");
 5248              		.loc 1 1108 0
 5249 0074 0F48     		ldr	r0, .L270+24
 5250 0076 FFF7FEFF 		bl	usbPutString
1109:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_orientation);
 5251              		.loc 1 1109 0
 5252 007a 0A4B     		ldr	r3, .L270+8
 5253 007c DB88     		ldrh	r3, [r3, #6]
 5254 007e 1BB2     		sxth	r3, r3
 5255 0080 3A46     		mov	r2, r7
 5256 0082 1046     		mov	r0, r2
 5257 0084 0849     		ldr	r1, .L270+12
 5258 0086 1A46     		mov	r2, r3
 5259 0088 FFF7FEFF 		bl	sprintf
1110:.\main.c      ****         usbPutString(printString);
 5260              		.loc 1 1110 0
 5261 008c 3B46     		mov	r3, r7
 5262 008e 1846     		mov	r0, r3
 5263 0090 FFF7FEFF 		bl	usbPutString
 5264              	.L268:
 5265              	.LBE13:
1111:.\main.c      ****     }
1112:.\main.c      **** }
 5266              		.loc 1 1112 0
 5267 0094 1037     		adds	r7, r7, #16
 5268              		.cfi_def_cfa_offset 8
 5269 0096 BD46     		mov	sp, r7
 5270              		.cfi_def_cfa_register 13
 5271              		@ sp needed
 5272 0098 80BD     		pop	{r7, pc}
 5273              	.L271:
 5274 009a 00BF     		.align	2
 5275              	.L270:
 5276 009c 00000000 		.word	flag_print_rf
 5277 00a0 1C010000 		.word	.LC15
 5278 00a4 00000000 		.word	system_state
 5279 00a8 24010000 		.word	.LC16
 5280 00ac 2C010000 		.word	.LC17
 5281 00b0 38010000 		.word	.LC18
 5282 00b4 44010000 		.word	.LC19
 5283              		.cfi_endproc
 5284              	.LFE101:
 5285              		.size	print_RF, .-print_RF
 5286              		.section	.text.readFrontSensors,"ax",%progbits
 5287              		.align	2
 5288              		.global	readFrontSensors
 5289              		.thumb
 5290              		.thumb_func
 5291              		.type	readFrontSensors, %function
 5292              	readFrontSensors:
 5293              	.LFB102:
1113:.\main.c      **** 
1114:.\main.c      **** void readFrontSensors(uint8 sensorVals[5])
1115:.\main.c      **** {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 115


 5294              		.loc 1 1115 0
 5295              		.cfi_startproc
 5296              		@ args = 0, pretend = 0, frame = 8
 5297              		@ frame_needed = 1, uses_anonymous_args = 0
 5298 0000 90B5     		push	{r4, r7, lr}
 5299              		.cfi_def_cfa_offset 12
 5300              		.cfi_offset 4, -12
 5301              		.cfi_offset 7, -8
 5302              		.cfi_offset 14, -4
 5303 0002 83B0     		sub	sp, sp, #12
 5304              		.cfi_def_cfa_offset 24
 5305 0004 00AF     		add	r7, sp, #0
 5306              		.cfi_def_cfa_register 7
 5307 0006 7860     		str	r0, [r7, #4]
1116:.\main.c      ****     sensorVals[0] = FLSens_out_Read();
 5308              		.loc 1 1116 0
 5309 0008 FFF7FEFF 		bl	FLSens_out_Read
 5310 000c 0346     		mov	r3, r0
 5311 000e 1A46     		mov	r2, r3
 5312 0010 7B68     		ldr	r3, [r7, #4]
 5313 0012 1A70     		strb	r2, [r3]
1117:.\main.c      ****     sensorVals[1] = NLSens_out_Read();
 5314              		.loc 1 1117 0
 5315 0014 7B68     		ldr	r3, [r7, #4]
 5316 0016 5C1C     		adds	r4, r3, #1
 5317 0018 FFF7FEFF 		bl	NLSens_out_Read
 5318 001c 0346     		mov	r3, r0
 5319 001e 2370     		strb	r3, [r4]
1118:.\main.c      ****     sensorVals[2] = MSens_out_Read();
 5320              		.loc 1 1118 0
 5321 0020 7B68     		ldr	r3, [r7, #4]
 5322 0022 9C1C     		adds	r4, r3, #2
 5323 0024 FFF7FEFF 		bl	MSens_out_Read
 5324 0028 0346     		mov	r3, r0
 5325 002a 2370     		strb	r3, [r4]
1119:.\main.c      ****     sensorVals[3] = NRSens_out_Read();
 5326              		.loc 1 1119 0
 5327 002c 7B68     		ldr	r3, [r7, #4]
 5328 002e DC1C     		adds	r4, r3, #3
 5329 0030 FFF7FEFF 		bl	NRSens_out_Read
 5330 0034 0346     		mov	r3, r0
 5331 0036 2370     		strb	r3, [r4]
1120:.\main.c      ****     sensorVals[4] = FRSens_out_Read();
 5332              		.loc 1 1120 0
 5333 0038 7B68     		ldr	r3, [r7, #4]
 5334 003a 1C1D     		adds	r4, r3, #4
 5335 003c FFF7FEFF 		bl	FRSens_out_Read
 5336 0040 0346     		mov	r3, r0
 5337 0042 2370     		strb	r3, [r4]
1121:.\main.c      **** }
 5338              		.loc 1 1121 0
 5339 0044 0C37     		adds	r7, r7, #12
 5340              		.cfi_def_cfa_offset 12
 5341 0046 BD46     		mov	sp, r7
 5342              		.cfi_def_cfa_register 13
 5343              		@ sp needed
 5344 0048 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 116


 5345              		.cfi_endproc
 5346              	.LFE102:
 5347              		.size	readFrontSensors, .-readFrontSensors
 5348 004a 00BF     		.section	.text.usbPutString,"ax",%progbits
 5349              		.align	2
 5350              		.global	usbPutString
 5351              		.thumb
 5352              		.thumb_func
 5353              		.type	usbPutString, %function
 5354              	usbPutString:
 5355              	.LFB103:
1122:.\main.c      **** 
1123:.\main.c      **** 
1124:.\main.c      **** //* ========================================
1125:.\main.c      **** void usbPutString(char *s)
1126:.\main.c      **** {
 5356              		.loc 1 1126 0
 5357              		.cfi_startproc
 5358              		@ args = 0, pretend = 0, frame = 16
 5359              		@ frame_needed = 1, uses_anonymous_args = 0
 5360 0000 80B5     		push	{r7, lr}
 5361              		.cfi_def_cfa_offset 8
 5362              		.cfi_offset 7, -8
 5363              		.cfi_offset 14, -4
 5364 0002 84B0     		sub	sp, sp, #16
 5365              		.cfi_def_cfa_offset 24
 5366 0004 00AF     		add	r7, sp, #0
 5367              		.cfi_def_cfa_register 7
 5368 0006 7860     		str	r0, [r7, #4]
1127:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
1128:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
1129:.\main.c      **** //  length to 62 char (63rd char is a '!')
1130:.\main.c      ****     if (USE_USB && portOpen)
 5369              		.loc 1 1130 0
 5370 0008 154B     		ldr	r3, .L277
 5371 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5372 000c 002B     		cmp	r3, #0
 5373 000e 23D0     		beq	.L273
 5374              	.LBB14:
1131:.\main.c      ****     {
1132:.\main.c      ****             uint32 cnt = 0;
 5375              		.loc 1 1132 0
 5376 0010 0023     		movs	r3, #0
 5377 0012 FB60     		str	r3, [r7, #12]
1133:.\main.c      ****             while (USBUART_CDCIsReady() == 0)
 5378              		.loc 1 1133 0
 5379 0014 0AE0     		b	.L275
 5380              	.L276:
1134:.\main.c      ****             {
1135:.\main.c      ****                 cnt++;
 5381              		.loc 1 1135 0
 5382 0016 FB68     		ldr	r3, [r7, #12]
 5383 0018 0133     		adds	r3, r3, #1
 5384 001a FB60     		str	r3, [r7, #12]
1136:.\main.c      ****                 if(cnt == 3000000){
 5385              		.loc 1 1136 0
 5386 001c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 117


 5387 001e 114A     		ldr	r2, .L277+4
 5388 0020 9342     		cmp	r3, r2
 5389 0022 03D1     		bne	.L275
1137:.\main.c      ****                     portOpen = 0;
 5390              		.loc 1 1137 0
 5391 0024 0E4B     		ldr	r3, .L277
 5392 0026 0022     		movs	r2, #0
 5393 0028 1A70     		strb	r2, [r3]
1138:.\main.c      ****                     return;
 5394              		.loc 1 1138 0
 5395 002a 15E0     		b	.L273
 5396              	.L275:
1133:.\main.c      ****             {
 5397              		.loc 1 1133 0
 5398 002c FFF7FEFF 		bl	USBUART_CDCIsReady
 5399 0030 0346     		mov	r3, r0
 5400 0032 002B     		cmp	r3, #0
 5401 0034 EFD0     		beq	.L276
1139:.\main.c      ****                 }
1140:.\main.c      ****             }
1141:.\main.c      ****             s[63]='\0';
 5402              		.loc 1 1141 0
 5403 0036 7B68     		ldr	r3, [r7, #4]
 5404 0038 3F33     		adds	r3, r3, #63
 5405 003a 0022     		movs	r2, #0
 5406 003c 1A70     		strb	r2, [r3]
1142:.\main.c      ****             s[62]='!';
 5407              		.loc 1 1142 0
 5408 003e 7B68     		ldr	r3, [r7, #4]
 5409 0040 3E33     		adds	r3, r3, #62
 5410 0042 2122     		movs	r2, #33
 5411 0044 1A70     		strb	r2, [r3]
1143:.\main.c      ****             USBUART_PutData((uint8*)s,strlen(s));
 5412              		.loc 1 1143 0
 5413 0046 7868     		ldr	r0, [r7, #4]
 5414 0048 FFF7FEFF 		bl	strlen
 5415 004c 0346     		mov	r3, r0
 5416 004e 9BB2     		uxth	r3, r3
 5417 0050 7868     		ldr	r0, [r7, #4]
 5418 0052 1946     		mov	r1, r3
 5419 0054 FFF7FEFF 		bl	USBUART_PutData
 5420              	.L273:
 5421              	.LBE14:
1144:.\main.c      ****     }
1145:.\main.c      **** }
 5422              		.loc 1 1145 0
 5423 0058 1037     		adds	r7, r7, #16
 5424              		.cfi_def_cfa_offset 8
 5425 005a BD46     		mov	sp, r7
 5426              		.cfi_def_cfa_register 13
 5427              		@ sp needed
 5428 005c 80BD     		pop	{r7, pc}
 5429              	.L278:
 5430 005e 00BF     		.align	2
 5431              	.L277:
 5432 0060 00000000 		.word	portOpen
 5433 0064 C0C62D00 		.word	3000000
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 118


 5434              		.cfi_endproc
 5435              	.LFE103:
 5436              		.size	usbPutString, .-usbPutString
 5437              		.section	.text.usbPutChar,"ax",%progbits
 5438              		.align	2
 5439              		.global	usbPutChar
 5440              		.thumb
 5441              		.thumb_func
 5442              		.type	usbPutChar, %function
 5443              	usbPutChar:
 5444              	.LFB104:
1146:.\main.c      **** //* ========================================
1147:.\main.c      **** void usbPutChar(char c)
1148:.\main.c      **** {
 5445              		.loc 1 1148 0
 5446              		.cfi_startproc
 5447              		@ args = 0, pretend = 0, frame = 16
 5448              		@ frame_needed = 1, uses_anonymous_args = 0
 5449 0000 80B5     		push	{r7, lr}
 5450              		.cfi_def_cfa_offset 8
 5451              		.cfi_offset 7, -8
 5452              		.cfi_offset 14, -4
 5453 0002 84B0     		sub	sp, sp, #16
 5454              		.cfi_def_cfa_offset 24
 5455 0004 00AF     		add	r7, sp, #0
 5456              		.cfi_def_cfa_register 7
 5457 0006 0346     		mov	r3, r0
 5458 0008 FB71     		strb	r3, [r7, #7]
1149:.\main.c      ****     if (USE_USB && portOpen)    
 5459              		.loc 1 1149 0
 5460 000a 0F4B     		ldr	r3, .L283
 5461 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5462 000e 002B     		cmp	r3, #0
 5463 0010 16D0     		beq	.L279
 5464              	.LBB15:
1150:.\main.c      ****     {    
1151:.\main.c      ****         uint32 cnt = 0;
 5465              		.loc 1 1151 0
 5466 0012 0023     		movs	r3, #0
 5467 0014 FB60     		str	r3, [r7, #12]
1152:.\main.c      ****         while (USBUART_CDCIsReady() == 0){
 5468              		.loc 1 1152 0
 5469 0016 0AE0     		b	.L281
 5470              	.L282:
1153:.\main.c      ****             cnt++;
 5471              		.loc 1 1153 0
 5472 0018 FB68     		ldr	r3, [r7, #12]
 5473 001a 0133     		adds	r3, r3, #1
 5474 001c FB60     		str	r3, [r7, #12]
1154:.\main.c      ****             if(cnt == 3000000){
 5475              		.loc 1 1154 0
 5476 001e FB68     		ldr	r3, [r7, #12]
 5477 0020 0A4A     		ldr	r2, .L283+4
 5478 0022 9342     		cmp	r3, r2
 5479 0024 03D1     		bne	.L281
1155:.\main.c      ****                 portOpen = 0;
 5480              		.loc 1 1155 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 119


 5481 0026 084B     		ldr	r3, .L283
 5482 0028 0022     		movs	r2, #0
 5483 002a 1A70     		strb	r2, [r3]
1156:.\main.c      ****                 return;
 5484              		.loc 1 1156 0
 5485 002c 08E0     		b	.L279
 5486              	.L281:
1152:.\main.c      ****             cnt++;
 5487              		.loc 1 1152 0
 5488 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 5489 0032 0346     		mov	r3, r0
 5490 0034 002B     		cmp	r3, #0
 5491 0036 EFD0     		beq	.L282
1157:.\main.c      ****             }
1158:.\main.c      ****         }
1159:.\main.c      ****         USBUART_PutChar(c);
 5492              		.loc 1 1159 0
 5493 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5494 003a 1846     		mov	r0, r3
 5495 003c FFF7FEFF 		bl	USBUART_PutChar
 5496              	.L279:
 5497              	.LBE15:
1160:.\main.c      ****     }    
1161:.\main.c      **** }
 5498              		.loc 1 1161 0
 5499 0040 1037     		adds	r7, r7, #16
 5500              		.cfi_def_cfa_offset 8
 5501 0042 BD46     		mov	sp, r7
 5502              		.cfi_def_cfa_register 13
 5503              		@ sp needed
 5504 0044 80BD     		pop	{r7, pc}
 5505              	.L284:
 5506 0046 00BF     		.align	2
 5507              	.L283:
 5508 0048 00000000 		.word	portOpen
 5509 004c C0C62D00 		.word	3000000
 5510              		.cfi_endproc
 5511              	.LFE104:
 5512              		.size	usbPutChar, .-usbPutChar
 5513              		.section	.text.uart_set_PWM,"ax",%progbits
 5514              		.align	2
 5515              		.global	uart_set_PWM
 5516              		.thumb
 5517              		.thumb_func
 5518              		.type	uart_set_PWM, %function
 5519              	uart_set_PWM:
 5520              	.LFB105:
1162:.\main.c      **** //* ========================================
1163:.\main.c      **** 
1164:.\main.c      **** void uart_set_PWM()
1165:.\main.c      **** {
 5521              		.loc 1 1165 0
 5522              		.cfi_startproc
 5523              		@ args = 0, pretend = 0, frame = 0
 5524              		@ frame_needed = 1, uses_anonymous_args = 0
 5525              		@ link register save eliminated.
 5526 0000 80B4     		push	{r7}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 120


 5527              		.cfi_def_cfa_offset 4
 5528              		.cfi_offset 7, -4
 5529 0002 00AF     		add	r7, sp, #0
 5530              		.cfi_def_cfa_register 7
1166:.\main.c      ****     //removed from final implementation
1167:.\main.c      **** }
 5531              		.loc 1 1167 0
 5532 0004 BD46     		mov	sp, r7
 5533              		.cfi_def_cfa_register 13
 5534              		@ sp needed
 5535 0006 5DF8047B 		ldr	r7, [sp], #4
 5536              		.cfi_restore 7
 5537              		.cfi_def_cfa_offset 0
 5538 000a 7047     		bx	lr
 5539              		.cfi_endproc
 5540              	.LFE105:
 5541              		.size	uart_set_PWM, .-uart_set_PWM
 5542              		.text
 5543              	.Letext0:
 5544              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5545              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5546              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5547              		.file 5 ".\\vars.h"
 5548              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 5549              		.file 7 ".\\pathfinder.h"
 5550              		.section	.debug_info,"",%progbits
 5551              	.Ldebug_info0:
 5552 0000 A40E0000 		.4byte	0xea4
 5553 0004 0400     		.2byte	0x4
 5554 0006 00000000 		.4byte	.Ldebug_abbrev0
 5555 000a 04       		.byte	0x4
 5556 000b 01       		.uleb128 0x1
 5557 000c 0D050000 		.4byte	.LASF199
 5558 0010 01       		.byte	0x1
 5559 0011 3E090000 		.4byte	.LASF200
 5560 0015 76090000 		.4byte	.LASF201
 5561 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5562 001d 00000000 		.4byte	0
 5563 0021 00000000 		.4byte	.Ldebug_line0
 5564 0025 02       		.uleb128 0x2
 5565 0026 01       		.byte	0x1
 5566 0027 06       		.byte	0x6
 5567 0028 3C010000 		.4byte	.LASF0
 5568 002c 02       		.uleb128 0x2
 5569 002d 01       		.byte	0x1
 5570 002e 08       		.byte	0x8
 5571 002f 75060000 		.4byte	.LASF1
 5572 0033 02       		.uleb128 0x2
 5573 0034 02       		.byte	0x2
 5574 0035 05       		.byte	0x5
 5575 0036 AF060000 		.4byte	.LASF2
 5576 003a 02       		.uleb128 0x2
 5577 003b 02       		.byte	0x2
 5578 003c 07       		.byte	0x7
 5579 003d 92030000 		.4byte	.LASF3
 5580 0041 03       		.uleb128 0x3
 5581 0042 18040000 		.4byte	.LASF5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 121


 5582 0046 02       		.byte	0x2
 5583 0047 3F       		.byte	0x3f
 5584 0048 4C000000 		.4byte	0x4c
 5585 004c 02       		.uleb128 0x2
 5586 004d 04       		.byte	0x4
 5587 004e 05       		.byte	0x5
 5588 004f D6010000 		.4byte	.LASF4
 5589 0053 03       		.uleb128 0x3
 5590 0054 94070000 		.4byte	.LASF6
 5591 0058 02       		.byte	0x2
 5592 0059 41       		.byte	0x41
 5593 005a 5E000000 		.4byte	0x5e
 5594 005e 02       		.uleb128 0x2
 5595 005f 04       		.byte	0x4
 5596 0060 07       		.byte	0x7
 5597 0061 52030000 		.4byte	.LASF7
 5598 0065 02       		.uleb128 0x2
 5599 0066 08       		.byte	0x8
 5600 0067 05       		.byte	0x5
 5601 0068 2E010000 		.4byte	.LASF8
 5602 006c 02       		.uleb128 0x2
 5603 006d 08       		.byte	0x8
 5604 006e 07       		.byte	0x7
 5605 006f 99000000 		.4byte	.LASF9
 5606 0073 04       		.uleb128 0x4
 5607 0074 04       		.byte	0x4
 5608 0075 05       		.byte	0x5
 5609 0076 696E7400 		.ascii	"int\000"
 5610 007a 02       		.uleb128 0x2
 5611 007b 04       		.byte	0x4
 5612 007c 07       		.byte	0x7
 5613 007d FE020000 		.4byte	.LASF10
 5614 0081 02       		.uleb128 0x2
 5615 0082 04       		.byte	0x4
 5616 0083 07       		.byte	0x7
 5617 0084 8B040000 		.4byte	.LASF11
 5618 0088 05       		.uleb128 0x5
 5619 0089 04       		.byte	0x4
 5620 008a 8E000000 		.4byte	0x8e
 5621 008e 02       		.uleb128 0x2
 5622 008f 01       		.byte	0x1
 5623 0090 08       		.byte	0x8
 5624 0091 54070000 		.4byte	.LASF12
 5625 0095 03       		.uleb128 0x3
 5626 0096 6D060000 		.4byte	.LASF13
 5627 009a 03       		.byte	0x3
 5628 009b 2C       		.byte	0x2c
 5629 009c 41000000 		.4byte	0x41
 5630 00a0 03       		.uleb128 0x3
 5631 00a1 60080000 		.4byte	.LASF14
 5632 00a5 03       		.byte	0x3
 5633 00a6 2D       		.byte	0x2d
 5634 00a7 53000000 		.4byte	0x53
 5635 00ab 06       		.uleb128 0x6
 5636 00ac F1010000 		.4byte	.LASF15
 5637 00b0 04       		.byte	0x4
 5638 00b1 9201     		.2byte	0x192
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 122


 5639 00b3 2C000000 		.4byte	0x2c
 5640 00b7 06       		.uleb128 0x6
 5641 00b8 83060000 		.4byte	.LASF16
 5642 00bc 04       		.byte	0x4
 5643 00bd 9301     		.2byte	0x193
 5644 00bf 3A000000 		.4byte	0x3a
 5645 00c3 06       		.uleb128 0x6
 5646 00c4 3D020000 		.4byte	.LASF17
 5647 00c8 04       		.byte	0x4
 5648 00c9 9401     		.2byte	0x194
 5649 00cb 5E000000 		.4byte	0x5e
 5650 00cf 06       		.uleb128 0x6
 5651 00d0 AE030000 		.4byte	.LASF18
 5652 00d4 04       		.byte	0x4
 5653 00d5 9501     		.2byte	0x195
 5654 00d7 25000000 		.4byte	0x25
 5655 00db 06       		.uleb128 0x6
 5656 00dc FD080000 		.4byte	.LASF19
 5657 00e0 04       		.byte	0x4
 5658 00e1 9601     		.2byte	0x196
 5659 00e3 33000000 		.4byte	0x33
 5660 00e7 02       		.uleb128 0x2
 5661 00e8 04       		.byte	0x4
 5662 00e9 04       		.byte	0x4
 5663 00ea E3050000 		.4byte	.LASF20
 5664 00ee 02       		.uleb128 0x2
 5665 00ef 08       		.byte	0x8
 5666 00f0 04       		.byte	0x4
 5667 00f1 10020000 		.4byte	.LASF21
 5668 00f5 07       		.uleb128 0x7
 5669 00f6 A0000000 		.4byte	0xa0
 5670 00fa 05010000 		.4byte	0x105
 5671 00fe 08       		.uleb128 0x8
 5672 00ff 81000000 		.4byte	0x81
 5673 0103 01       		.byte	0x1
 5674 0104 00       		.byte	0
 5675 0105 02       		.uleb128 0x2
 5676 0106 08       		.byte	0x8
 5677 0107 04       		.byte	0x4
 5678 0108 36070000 		.4byte	.LASF22
 5679 010c 09       		.uleb128 0x9
 5680 010d D0010000 		.4byte	.LASF31
 5681 0111 01       		.byte	0x1
 5682 0112 05       		.byte	0x5
 5683 0113 61       		.byte	0x61
 5684 0114 49010000 		.4byte	0x149
 5685 0118 0A       		.uleb128 0xa
 5686 0119 B3030000 		.4byte	.LASF23
 5687 011d 00       		.sleb128 0
 5688 011e 0A       		.uleb128 0xa
 5689 011f D6040000 		.4byte	.LASF24
 5690 0123 01       		.sleb128 1
 5691 0124 0A       		.uleb128 0xa
 5692 0125 E2020000 		.4byte	.LASF25
 5693 0129 02       		.sleb128 2
 5694 012a 0A       		.uleb128 0xa
 5695 012b 21070000 		.4byte	.LASF26
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 123


 5696 012f 03       		.sleb128 3
 5697 0130 0A       		.uleb128 0xa
 5698 0131 D1030000 		.4byte	.LASF27
 5699 0135 04       		.sleb128 4
 5700 0136 0A       		.uleb128 0xa
 5701 0137 E9050000 		.4byte	.LASF28
 5702 013b 05       		.sleb128 5
 5703 013c 0A       		.uleb128 0xa
 5704 013d 53060000 		.4byte	.LASF29
 5705 0141 06       		.sleb128 6
 5706 0142 0A       		.uleb128 0xa
 5707 0143 DF010000 		.4byte	.LASF30
 5708 0147 07       		.sleb128 7
 5709 0148 00       		.byte	0
 5710 0149 09       		.uleb128 0x9
 5711 014a 59070000 		.4byte	.LASF32
 5712 014e 01       		.byte	0x1
 5713 014f 05       		.byte	0x5
 5714 0150 62       		.byte	0x62
 5715 0151 86010000 		.4byte	0x186
 5716 0155 0A       		.uleb128 0xa
 5717 0156 B9060000 		.4byte	.LASF33
 5718 015a 00       		.sleb128 0
 5719 015b 0A       		.uleb128 0xa
 5720 015c 0C040000 		.4byte	.LASF34
 5721 0160 01       		.sleb128 1
 5722 0161 0A       		.uleb128 0xa
 5723 0162 08010000 		.4byte	.LASF35
 5724 0166 02       		.sleb128 2
 5725 0167 0A       		.uleb128 0xa
 5726 0168 22040000 		.4byte	.LASF36
 5727 016c 03       		.sleb128 3
 5728 016d 0A       		.uleb128 0xa
 5729 016e 1F000000 		.4byte	.LASF37
 5730 0172 04       		.sleb128 4
 5731 0173 0A       		.uleb128 0xa
 5732 0174 8A060000 		.4byte	.LASF38
 5733 0178 05       		.sleb128 5
 5734 0179 0A       		.uleb128 0xa
 5735 017a CD020000 		.4byte	.LASF39
 5736 017e 06       		.sleb128 6
 5737 017f 0A       		.uleb128 0xa
 5738 0180 10010000 		.4byte	.LASF40
 5739 0184 07       		.sleb128 7
 5740 0185 00       		.byte	0
 5741 0186 0B       		.uleb128 0xb
 5742 0187 1C030000 		.4byte	.LASF202
 5743 018b 20       		.byte	0x20
 5744 018c 05       		.byte	0x5
 5745 018d 68       		.byte	0x68
 5746 018e 5F020000 		.4byte	0x25f
 5747 0192 0C       		.uleb128 0xc
 5748 0193 7D040000 		.4byte	.LASF41
 5749 0197 05       		.byte	0x5
 5750 0198 69       		.byte	0x69
 5751 0199 CF000000 		.4byte	0xcf
 5752 019d 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 124


 5753 019e 0C       		.uleb128 0xc
 5754 019f 6B070000 		.4byte	.LASF42
 5755 01a3 05       		.byte	0x5
 5756 01a4 6A       		.byte	0x6a
 5757 01a5 AB000000 		.4byte	0xab
 5758 01a9 01       		.byte	0x1
 5759 01aa 0C       		.uleb128 0xc
 5760 01ab D3070000 		.4byte	.LASF43
 5761 01af 05       		.byte	0x5
 5762 01b0 6B       		.byte	0x6b
 5763 01b1 DB000000 		.4byte	0xdb
 5764 01b5 02       		.byte	0x2
 5765 01b6 0C       		.uleb128 0xc
 5766 01b7 F2080000 		.4byte	.LASF44
 5767 01bb 05       		.byte	0x5
 5768 01bc 6C       		.byte	0x6c
 5769 01bd DB000000 		.4byte	0xdb
 5770 01c1 04       		.byte	0x4
 5771 01c2 0C       		.uleb128 0xc
 5772 01c3 53010000 		.4byte	.LASF45
 5773 01c7 05       		.byte	0x5
 5774 01c8 6D       		.byte	0x6d
 5775 01c9 DB000000 		.4byte	0xdb
 5776 01cd 06       		.byte	0x6
 5777 01ce 0C       		.uleb128 0xc
 5778 01cf D6000000 		.4byte	.LASF46
 5779 01d3 05       		.byte	0x5
 5780 01d4 6E       		.byte	0x6e
 5781 01d5 DB000000 		.4byte	0xdb
 5782 01d9 08       		.byte	0x8
 5783 01da 0C       		.uleb128 0xc
 5784 01db BC070000 		.4byte	.LASF47
 5785 01df 05       		.byte	0x5
 5786 01e0 6F       		.byte	0x6f
 5787 01e1 DB000000 		.4byte	0xdb
 5788 01e5 0A       		.byte	0xa
 5789 01e6 0C       		.uleb128 0xc
 5790 01e7 6D090000 		.4byte	.LASF48
 5791 01eb 05       		.byte	0x5
 5792 01ec 70       		.byte	0x70
 5793 01ed DB000000 		.4byte	0xdb
 5794 01f1 0C       		.byte	0xc
 5795 01f2 0C       		.uleb128 0xc
 5796 01f3 7B000000 		.4byte	.LASF49
 5797 01f7 05       		.byte	0x5
 5798 01f8 71       		.byte	0x71
 5799 01f9 DB000000 		.4byte	0xdb
 5800 01fd 0E       		.byte	0xe
 5801 01fe 0C       		.uleb128 0xc
 5802 01ff 14080000 		.4byte	.LASF50
 5803 0203 05       		.byte	0x5
 5804 0204 72       		.byte	0x72
 5805 0205 DB000000 		.4byte	0xdb
 5806 0209 10       		.byte	0x10
 5807 020a 0C       		.uleb128 0xc
 5808 020b AF040000 		.4byte	.LASF51
 5809 020f 05       		.byte	0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 125


 5810 0210 73       		.byte	0x73
 5811 0211 DB000000 		.4byte	0xdb
 5812 0215 12       		.byte	0x12
 5813 0216 0C       		.uleb128 0xc
 5814 0217 82040000 		.4byte	.LASF52
 5815 021b 05       		.byte	0x5
 5816 021c 74       		.byte	0x74
 5817 021d DB000000 		.4byte	0xdb
 5818 0221 14       		.byte	0x14
 5819 0222 0C       		.uleb128 0xc
 5820 0223 B7040000 		.4byte	.LASF53
 5821 0227 05       		.byte	0x5
 5822 0228 75       		.byte	0x75
 5823 0229 DB000000 		.4byte	0xdb
 5824 022d 16       		.byte	0x16
 5825 022e 0C       		.uleb128 0xc
 5826 022f 9D060000 		.4byte	.LASF54
 5827 0233 05       		.byte	0x5
 5828 0234 76       		.byte	0x76
 5829 0235 DB000000 		.4byte	0xdb
 5830 0239 18       		.byte	0x18
 5831 023a 0C       		.uleb128 0xc
 5832 023b E6040000 		.4byte	.LASF55
 5833 023f 05       		.byte	0x5
 5834 0240 77       		.byte	0x77
 5835 0241 DB000000 		.4byte	0xdb
 5836 0245 1A       		.byte	0x1a
 5837 0246 0C       		.uleb128 0xc
 5838 0247 0B000000 		.4byte	.LASF56
 5839 024b 05       		.byte	0x5
 5840 024c 78       		.byte	0x78
 5841 024d DB000000 		.4byte	0xdb
 5842 0251 1C       		.byte	0x1c
 5843 0252 0C       		.uleb128 0xc
 5844 0253 7A020000 		.4byte	.LASF57
 5845 0257 05       		.byte	0x5
 5846 0258 79       		.byte	0x79
 5847 0259 DB000000 		.4byte	0xdb
 5848 025d 1E       		.byte	0x1e
 5849 025e 00       		.byte	0
 5850 025f 0D       		.uleb128 0xd
 5851 0260 91080000 		.4byte	.LASF58
 5852 0264 01       		.byte	0x1
 5853 0265 69       		.byte	0x69
 5854 0266 00000000 		.4byte	.LFB63
 5855 026a 0C000000 		.4byte	.LFE63-.LFB63
 5856 026e 01       		.uleb128 0x1
 5857 026f 9C       		.byte	0x9c
 5858 0270 0E       		.uleb128 0xe
 5859 0271 26020000 		.4byte	.LASF59
 5860 0275 01       		.byte	0x1
 5861 0276 6F       		.byte	0x6f
 5862 0277 00000000 		.4byte	.LFB64
 5863 027b 2C000000 		.4byte	.LFE64-.LFB64
 5864 027f 01       		.uleb128 0x1
 5865 0280 9C       		.byte	0x9c
 5866 0281 0E       		.uleb128 0xe
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 126


 5867 0282 F4020000 		.4byte	.LASF60
 5868 0286 01       		.byte	0x1
 5869 0287 78       		.byte	0x78
 5870 0288 00000000 		.4byte	.LFB65
 5871 028c A4010000 		.4byte	.LFE65-.LFB65
 5872 0290 01       		.uleb128 0x1
 5873 0291 9C       		.byte	0x9c
 5874 0292 0F       		.uleb128 0xf
 5875 0293 56040000 		.4byte	.LASF66
 5876 0297 01       		.byte	0x1
 5877 0298 9D       		.byte	0x9d
 5878 0299 00000000 		.4byte	.LFB66
 5879 029d 34010000 		.4byte	.LFE66-.LFB66
 5880 02a1 01       		.uleb128 0x1
 5881 02a2 9C       		.byte	0x9c
 5882 02a3 DC020000 		.4byte	0x2dc
 5883 02a7 10       		.uleb128 0x10
 5884 02a8 0E000000 		.4byte	.LBB2
 5885 02ac 64000000 		.4byte	.LBE2-.LBB2
 5886 02b0 C3020000 		.4byte	0x2c3
 5887 02b4 11       		.uleb128 0x11
 5888 02b5 88000000 		.4byte	.LASF61
 5889 02b9 01       		.byte	0x1
 5890 02ba A1       		.byte	0xa1
 5891 02bb B7000000 		.4byte	0xb7
 5892 02bf 02       		.uleb128 0x2
 5893 02c0 91       		.byte	0x91
 5894 02c1 76       		.sleb128 -10
 5895 02c2 00       		.byte	0
 5896 02c3 12       		.uleb128 0x12
 5897 02c4 7E000000 		.4byte	.LBB3
 5898 02c8 64000000 		.4byte	.LBE3-.LBB3
 5899 02cc 11       		.uleb128 0x11
 5900 02cd 88000000 		.4byte	.LASF61
 5901 02d1 01       		.byte	0x1
 5902 02d2 AD       		.byte	0xad
 5903 02d3 B7000000 		.4byte	0xb7
 5904 02d7 02       		.uleb128 0x2
 5905 02d8 91       		.byte	0x91
 5906 02d9 74       		.sleb128 -12
 5907 02da 00       		.byte	0
 5908 02db 00       		.byte	0
 5909 02dc 0D       		.uleb128 0xd
 5910 02dd FF030000 		.4byte	.LASF62
 5911 02e1 01       		.byte	0x1
 5912 02e2 C3       		.byte	0xc3
 5913 02e3 00000000 		.4byte	.LFB67
 5914 02e7 20000000 		.4byte	.LFE67-.LFB67
 5915 02eb 01       		.uleb128 0x1
 5916 02ec 9C       		.byte	0x9c
 5917 02ed 0E       		.uleb128 0xe
 5918 02ee 29000000 		.4byte	.LASF63
 5919 02f2 01       		.byte	0x1
 5920 02f3 CA       		.byte	0xca
 5921 02f4 00000000 		.4byte	.LFB68
 5922 02f8 28000000 		.4byte	.LFE68-.LFB68
 5923 02fc 01       		.uleb128 0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 127


 5924 02fd 9C       		.byte	0x9c
 5925 02fe 0E       		.uleb128 0xe
 5926 02ff EF060000 		.4byte	.LASF64
 5927 0303 01       		.byte	0x1
 5928 0304 D3       		.byte	0xd3
 5929 0305 00000000 		.4byte	.LFB69
 5930 0309 0A000000 		.4byte	.LFE69-.LFB69
 5931 030d 01       		.uleb128 0x1
 5932 030e 9C       		.byte	0x9c
 5933 030f 0E       		.uleb128 0xe
 5934 0310 55000000 		.4byte	.LASF65
 5935 0314 01       		.byte	0x1
 5936 0315 D8       		.byte	0xd8
 5937 0316 00000000 		.4byte	.LFB70
 5938 031a 28000000 		.4byte	.LFE70-.LFB70
 5939 031e 01       		.uleb128 0x1
 5940 031f 9C       		.byte	0x9c
 5941 0320 13       		.uleb128 0x13
 5942 0321 63090000 		.4byte	.LASF67
 5943 0325 01       		.byte	0x1
 5944 0326 E3       		.byte	0xe3
 5945 0327 73000000 		.4byte	0x73
 5946 032b 00000000 		.4byte	.LFB71
 5947 032f A0070000 		.4byte	.LFE71-.LFB71
 5948 0333 01       		.uleb128 0x1
 5949 0334 9C       		.byte	0x9c
 5950 0335 28040000 		.4byte	0x428
 5951 0339 14       		.uleb128 0x14
 5952 033a 7B070000 		.4byte	.LASF68
 5953 033e 01       		.byte	0x1
 5954 033f 1C01     		.2byte	0x11c
 5955 0341 B7000000 		.4byte	0xb7
 5956 0345 02       		.uleb128 0x2
 5957 0346 91       		.byte	0x91
 5958 0347 76       		.sleb128 -10
 5959 0348 12       		.uleb128 0x12
 5960 0349 38010000 		.4byte	.LBB4
 5961 034d DC050000 		.4byte	.LBE4-.LBB4
 5962 0351 14       		.uleb128 0x14
 5963 0352 35090000 		.4byte	.LASF69
 5964 0356 01       		.byte	0x1
 5965 0357 5301     		.2byte	0x153
 5966 0359 8E000000 		.4byte	0x8e
 5967 035d 02       		.uleb128 0x2
 5968 035e 91       		.byte	0x91
 5969 035f 75       		.sleb128 -11
 5970 0360 14       		.uleb128 0x14
 5971 0361 EB030000 		.4byte	.LASF70
 5972 0365 01       		.byte	0x1
 5973 0366 5401     		.2byte	0x154
 5974 0368 AB000000 		.4byte	0xab
 5975 036c 02       		.uleb128 0x2
 5976 036d 91       		.byte	0x91
 5977 036e 71       		.sleb128 -15
 5978 036f 14       		.uleb128 0x14
 5979 0370 A9080000 		.4byte	.LASF71
 5980 0374 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 128


 5981 0375 5501     		.2byte	0x155
 5982 0377 AB000000 		.4byte	0xab
 5983 037b 02       		.uleb128 0x2
 5984 037c 91       		.byte	0x91
 5985 037d 70       		.sleb128 -16
 5986 037e 10       		.uleb128 0x10
 5987 037f B8010000 		.4byte	.LBB5
 5988 0383 F4010000 		.4byte	.LBE5-.LBB5
 5989 0387 B4030000 		.4byte	0x3b4
 5990 038b 15       		.uleb128 0x15
 5991 038c 6D657300 		.ascii	"mes\000"
 5992 0390 01       		.byte	0x1
 5993 0391 5C01     		.2byte	0x15c
 5994 0393 28040000 		.4byte	0x428
 5995 0397 02       		.uleb128 0x2
 5996 0398 91       		.byte	0x91
 5997 0399 5C       		.sleb128 -36
 5998 039a 12       		.uleb128 0x12
 5999 039b E0010000 		.4byte	.LBB6
 6000 039f CC010000 		.4byte	.LBE6-.LBB6
 6001 03a3 14       		.uleb128 0x14
 6002 03a4 79080000 		.4byte	.LASF72
 6003 03a8 01       		.byte	0x1
 6004 03a9 6D01     		.2byte	0x16d
 6005 03ab AB000000 		.4byte	0xab
 6006 03af 02       		.uleb128 0x2
 6007 03b0 91       		.byte	0x91
 6008 03b1 74       		.sleb128 -12
 6009 03b2 00       		.byte	0
 6010 03b3 00       		.byte	0
 6011 03b4 10       		.uleb128 0x10
 6012 03b5 06040000 		.4byte	.LBB7
 6013 03b9 30000000 		.4byte	.LBE7-.LBB7
 6014 03bd D1030000 		.4byte	0x3d1
 6015 03c1 14       		.uleb128 0x14
 6016 03c2 44020000 		.4byte	.LASF73
 6017 03c6 01       		.byte	0x1
 6018 03c7 A901     		.2byte	0x1a9
 6019 03c9 8E000000 		.4byte	0x8e
 6020 03cd 02       		.uleb128 0x2
 6021 03ce 91       		.byte	0x91
 6022 03cf 6F       		.sleb128 -17
 6023 03d0 00       		.byte	0
 6024 03d1 10       		.uleb128 0x10
 6025 03d2 5A040000 		.4byte	.LBB8
 6026 03d6 02010000 		.4byte	.LBE8-.LBB8
 6027 03da FD030000 		.4byte	0x3fd
 6028 03de 15       		.uleb128 0x15
 6029 03df 6D657300 		.ascii	"mes\000"
 6030 03e3 01       		.byte	0x1
 6031 03e4 B801     		.2byte	0x1b8
 6032 03e6 28040000 		.4byte	0x428
 6033 03ea 02       		.uleb128 0x2
 6034 03eb 91       		.byte	0x91
 6035 03ec 4C       		.sleb128 -52
 6036 03ed 14       		.uleb128 0x14
 6037 03ee 79080000 		.4byte	.LASF72
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 129


 6038 03f2 01       		.byte	0x1
 6039 03f3 BC01     		.2byte	0x1bc
 6040 03f5 AB000000 		.4byte	0xab
 6041 03f9 02       		.uleb128 0x2
 6042 03fa 91       		.byte	0x91
 6043 03fb 73       		.sleb128 -13
 6044 03fc 00       		.byte	0
 6045 03fd 12       		.uleb128 0x12
 6046 03fe 84050000 		.4byte	.LBB9
 6047 0402 86010000 		.4byte	.LBE9-.LBB9
 6048 0406 15       		.uleb128 0x15
 6049 0407 6D657300 		.ascii	"mes\000"
 6050 040b 01       		.byte	0x1
 6051 040c E001     		.2byte	0x1e0
 6052 040e 28040000 		.4byte	0x428
 6053 0412 03       		.uleb128 0x3
 6054 0413 91       		.byte	0x91
 6055 0414 BC7F     		.sleb128 -68
 6056 0416 14       		.uleb128 0x14
 6057 0417 79080000 		.4byte	.LASF72
 6058 041b 01       		.byte	0x1
 6059 041c E401     		.2byte	0x1e4
 6060 041e AB000000 		.4byte	0xab
 6061 0422 02       		.uleb128 0x2
 6062 0423 91       		.byte	0x91
 6063 0424 72       		.sleb128 -14
 6064 0425 00       		.byte	0
 6065 0426 00       		.byte	0
 6066 0427 00       		.byte	0
 6067 0428 07       		.uleb128 0x7
 6068 0429 8E000000 		.4byte	0x8e
 6069 042d 38040000 		.4byte	0x438
 6070 0431 08       		.uleb128 0x8
 6071 0432 81000000 		.4byte	0x81
 6072 0436 0F       		.byte	0xf
 6073 0437 00       		.byte	0
 6074 0438 16       		.uleb128 0x16
 6075 0439 CE060000 		.4byte	.LASF79
 6076 043d 01       		.byte	0x1
 6077 043e 3402     		.2byte	0x234
 6078 0440 00000000 		.4byte	.LFB72
 6079 0444 60010000 		.4byte	.LFE72-.LFB72
 6080 0448 01       		.uleb128 0x1
 6081 0449 9C       		.byte	0x9c
 6082 044a 86040000 		.4byte	0x486
 6083 044e 12       		.uleb128 0x12
 6084 044f 10000000 		.4byte	.LBB10
 6085 0453 34010000 		.4byte	.LBE10-.LBB10
 6086 0457 14       		.uleb128 0x14
 6087 0458 29070000 		.4byte	.LASF74
 6088 045c 01       		.byte	0x1
 6089 045d 3A02     		.2byte	0x23a
 6090 045f B7000000 		.4byte	0xb7
 6091 0463 02       		.uleb128 0x2
 6092 0464 91       		.byte	0x91
 6093 0465 76       		.sleb128 -10
 6094 0466 14       		.uleb128 0x14
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 130


 6095 0467 54020000 		.4byte	.LASF75
 6096 046b 01       		.byte	0x1
 6097 046c 3B02     		.2byte	0x23b
 6098 046e 86040000 		.4byte	0x486
 6099 0472 02       		.uleb128 0x2
 6100 0473 91       		.byte	0x91
 6101 0474 68       		.sleb128 -24
 6102 0475 14       		.uleb128 0x14
 6103 0476 D5050000 		.4byte	.LASF76
 6104 047a 01       		.byte	0x1
 6105 047b 3C02     		.2byte	0x23c
 6106 047d 86040000 		.4byte	0x486
 6107 0481 02       		.uleb128 0x2
 6108 0482 91       		.byte	0x91
 6109 0483 5C       		.sleb128 -36
 6110 0484 00       		.byte	0
 6111 0485 00       		.byte	0
 6112 0486 07       		.uleb128 0x7
 6113 0487 8E000000 		.4byte	0x8e
 6114 048b 96040000 		.4byte	0x496
 6115 048f 08       		.uleb128 0x8
 6116 0490 81000000 		.4byte	0x81
 6117 0494 0B       		.byte	0xb
 6118 0495 00       		.byte	0
 6119 0496 17       		.uleb128 0x17
 6120 0497 05020000 		.4byte	.LASF77
 6121 049b 01       		.byte	0x1
 6122 049c 7502     		.2byte	0x275
 6123 049e 00000000 		.4byte	.LFB73
 6124 04a2 18000000 		.4byte	.LFE73-.LFB73
 6125 04a6 01       		.uleb128 0x1
 6126 04a7 9C       		.byte	0x9c
 6127 04a8 BC040000 		.4byte	0x4bc
 6128 04ac 18       		.uleb128 0x18
 6129 04ad 64697200 		.ascii	"dir\000"
 6130 04b1 01       		.byte	0x1
 6131 04b2 7502     		.2byte	0x275
 6132 04b4 AB000000 		.4byte	0xab
 6133 04b8 02       		.uleb128 0x2
 6134 04b9 91       		.byte	0x91
 6135 04ba 77       		.sleb128 -9
 6136 04bb 00       		.byte	0
 6137 04bc 17       		.uleb128 0x17
 6138 04bd 25060000 		.4byte	.LASF78
 6139 04c1 01       		.byte	0x1
 6140 04c2 7A02     		.2byte	0x27a
 6141 04c4 00000000 		.4byte	.LFB74
 6142 04c8 18000000 		.4byte	.LFE74-.LFB74
 6143 04cc 01       		.uleb128 0x1
 6144 04cd 9C       		.byte	0x9c
 6145 04ce E2040000 		.4byte	0x4e2
 6146 04d2 18       		.uleb128 0x18
 6147 04d3 64697200 		.ascii	"dir\000"
 6148 04d7 01       		.byte	0x1
 6149 04d8 7A02     		.2byte	0x27a
 6150 04da AB000000 		.4byte	0xab
 6151 04de 02       		.uleb128 0x2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 131


 6152 04df 91       		.byte	0x91
 6153 04e0 77       		.sleb128 -9
 6154 04e1 00       		.byte	0
 6155 04e2 19       		.uleb128 0x19
 6156 04e3 36080000 		.4byte	.LASF80
 6157 04e7 01       		.byte	0x1
 6158 04e8 7F02     		.2byte	0x27f
 6159 04ea 00000000 		.4byte	.LFB75
 6160 04ee 54000000 		.4byte	.LFE75-.LFB75
 6161 04f2 01       		.uleb128 0x1
 6162 04f3 9C       		.byte	0x9c
 6163 04f4 08050000 		.4byte	0x508
 6164 04f8 15       		.uleb128 0x15
 6165 04f9 6D657300 		.ascii	"mes\000"
 6166 04fd 01       		.byte	0x1
 6167 04fe 8402     		.2byte	0x284
 6168 0500 28040000 		.4byte	0x428
 6169 0504 02       		.uleb128 0x2
 6170 0505 91       		.byte	0x91
 6171 0506 68       		.sleb128 -24
 6172 0507 00       		.byte	0
 6173 0508 17       		.uleb128 0x17
 6174 0509 A5030000 		.4byte	.LASF81
 6175 050d 01       		.byte	0x1
 6176 050e 8902     		.2byte	0x289
 6177 0510 00000000 		.4byte	.LFB76
 6178 0514 F4000000 		.4byte	.LFE76-.LFB76
 6179 0518 01       		.uleb128 0x1
 6180 0519 9C       		.byte	0x9c
 6181 051a 5B050000 		.4byte	0x55b
 6182 051e 1A       		.uleb128 0x1a
 6183 051f 68090000 		.4byte	.LASF82
 6184 0523 01       		.byte	0x1
 6185 0524 8902     		.2byte	0x289
 6186 0526 EE000000 		.4byte	0xee
 6187 052a 02       		.uleb128 0x2
 6188 052b 91       		.byte	0x91
 6189 052c 68       		.sleb128 -24
 6190 052d 1A       		.uleb128 0x1a
 6191 052e 1D010000 		.4byte	.LASF83
 6192 0532 01       		.byte	0x1
 6193 0533 8902     		.2byte	0x289
 6194 0535 EE000000 		.4byte	0xee
 6195 0539 02       		.uleb128 0x2
 6196 053a 91       		.byte	0x91
 6197 053b 60       		.sleb128 -32
 6198 053c 14       		.uleb128 0x14
 6199 053d 03090000 		.4byte	.LASF84
 6200 0541 01       		.byte	0x1
 6201 0542 9E02     		.2byte	0x29e
 6202 0544 DB000000 		.4byte	0xdb
 6203 0548 02       		.uleb128 0x2
 6204 0549 91       		.byte	0x91
 6205 054a 76       		.sleb128 -10
 6206 054b 14       		.uleb128 0x14
 6207 054c EB070000 		.4byte	.LASF85
 6208 0550 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 132


 6209 0551 9F02     		.2byte	0x29f
 6210 0553 DB000000 		.4byte	0xdb
 6211 0557 02       		.uleb128 0x2
 6212 0558 91       		.byte	0x91
 6213 0559 74       		.sleb128 -12
 6214 055a 00       		.byte	0
 6215 055b 1B       		.uleb128 0x1b
 6216 055c 00080000 		.4byte	.LASF86
 6217 0560 01       		.byte	0x1
 6218 0561 A502     		.2byte	0x2a5
 6219 0563 00000000 		.4byte	.LFB77
 6220 0567 18000000 		.4byte	.LFE77-.LFB77
 6221 056b 01       		.uleb128 0x1
 6222 056c 9C       		.byte	0x9c
 6223 056d 1B       		.uleb128 0x1b
 6224 056e 06070000 		.4byte	.LASF87
 6225 0572 01       		.byte	0x1
 6226 0573 AB02     		.2byte	0x2ab
 6227 0575 00000000 		.4byte	.LFB78
 6228 0579 18000000 		.4byte	.LFE78-.LFB78
 6229 057d 01       		.uleb128 0x1
 6230 057e 9C       		.byte	0x9c
 6231 057f 1B       		.uleb128 0x1b
 6232 0580 92060000 		.4byte	.LASF88
 6233 0584 01       		.byte	0x1
 6234 0585 B102     		.2byte	0x2b1
 6235 0587 00000000 		.4byte	.LFB79
 6236 058b 22000000 		.4byte	.LFE79-.LFB79
 6237 058f 01       		.uleb128 0x1
 6238 0590 9C       		.byte	0x9c
 6239 0591 1B       		.uleb128 0x1b
 6240 0592 02060000 		.4byte	.LASF89
 6241 0596 01       		.byte	0x1
 6242 0597 B702     		.2byte	0x2b7
 6243 0599 00000000 		.4byte	.LFB80
 6244 059d 1C000000 		.4byte	.LFE80-.LFB80
 6245 05a1 01       		.uleb128 0x1
 6246 05a2 9C       		.byte	0x9c
 6247 05a3 1B       		.uleb128 0x1b
 6248 05a4 CC000000 		.4byte	.LASF90
 6249 05a8 01       		.byte	0x1
 6250 05a9 BC02     		.2byte	0x2bc
 6251 05ab 00000000 		.4byte	.LFB81
 6252 05af 34000000 		.4byte	.LFE81-.LFB81
 6253 05b3 01       		.uleb128 0x1
 6254 05b4 9C       		.byte	0x9c
 6255 05b5 1B       		.uleb128 0x1b
 6256 05b6 C7010000 		.4byte	.LASF91
 6257 05ba 01       		.byte	0x1
 6258 05bb C102     		.2byte	0x2c1
 6259 05bd 00000000 		.4byte	.LFB82
 6260 05c1 38000000 		.4byte	.LFE82-.LFB82
 6261 05c5 01       		.uleb128 0x1
 6262 05c6 9C       		.byte	0x9c
 6263 05c7 1B       		.uleb128 0x1b
 6264 05c8 DE070000 		.4byte	.LASF92
 6265 05cc 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 133


 6266 05cd C602     		.2byte	0x2c6
 6267 05cf 00000000 		.4byte	.LFB83
 6268 05d3 4C000000 		.4byte	.LFE83-.LFB83
 6269 05d7 01       		.uleb128 0x1
 6270 05d8 9C       		.byte	0x9c
 6271 05d9 1B       		.uleb128 0x1b
 6272 05da B9030000 		.4byte	.LASF93
 6273 05de 01       		.byte	0x1
 6274 05df CB02     		.2byte	0x2cb
 6275 05e1 00000000 		.4byte	.LFB84
 6276 05e5 38000000 		.4byte	.LFE84-.LFB84
 6277 05e9 01       		.uleb128 0x1
 6278 05ea 9C       		.byte	0x9c
 6279 05eb 1B       		.uleb128 0x1b
 6280 05ec 96010000 		.4byte	.LASF94
 6281 05f0 01       		.byte	0x1
 6282 05f1 D402     		.2byte	0x2d4
 6283 05f3 00000000 		.4byte	.LFB85
 6284 05f7 38000000 		.4byte	.LFE85-.LFB85
 6285 05fb 01       		.uleb128 0x1
 6286 05fc 9C       		.byte	0x9c
 6287 05fd 1B       		.uleb128 0x1b
 6288 05fe 6E030000 		.4byte	.LASF95
 6289 0602 01       		.byte	0x1
 6290 0603 DD02     		.2byte	0x2dd
 6291 0605 00000000 		.4byte	.LFB86
 6292 0609 38000000 		.4byte	.LFE86-.LFB86
 6293 060d 01       		.uleb128 0x1
 6294 060e 9C       		.byte	0x9c
 6295 060f 1B       		.uleb128 0x1b
 6296 0610 54080000 		.4byte	.LASF96
 6297 0614 01       		.byte	0x1
 6298 0615 E602     		.2byte	0x2e6
 6299 0617 00000000 		.4byte	.LFB87
 6300 061b 14000000 		.4byte	.LFE87-.LFB87
 6301 061f 01       		.uleb128 0x1
 6302 0620 9C       		.byte	0x9c
 6303 0621 1C       		.uleb128 0x1c
 6304 0622 71000000 		.4byte	.LASF97
 6305 0626 01       		.byte	0x1
 6306 0627 EB02     		.2byte	0x2eb
 6307 0629 00000000 		.4byte	.LFB88
 6308 062d 18000000 		.4byte	.LFE88-.LFB88
 6309 0631 01       		.uleb128 0x1
 6310 0632 9C       		.byte	0x9c
 6311 0633 1C       		.uleb128 0x1c
 6312 0634 64030000 		.4byte	.LASF98
 6313 0638 01       		.byte	0x1
 6314 0639 EF02     		.2byte	0x2ef
 6315 063b 00000000 		.4byte	.LFB89
 6316 063f 18000000 		.4byte	.LFE89-.LFB89
 6317 0643 01       		.uleb128 0x1
 6318 0644 9C       		.byte	0x9c
 6319 0645 1C       		.uleb128 0x1c
 6320 0646 00000000 		.4byte	.LASF99
 6321 064a 01       		.byte	0x1
 6322 064b F402     		.2byte	0x2f4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 134


 6323 064d 00000000 		.4byte	.LFB90
 6324 0651 18000000 		.4byte	.LFE90-.LFB90
 6325 0655 01       		.uleb128 0x1
 6326 0656 9C       		.byte	0x9c
 6327 0657 1C       		.uleb128 0x1c
 6328 0658 C7080000 		.4byte	.LASF100
 6329 065c 01       		.byte	0x1
 6330 065d F802     		.2byte	0x2f8
 6331 065f 00000000 		.4byte	.LFB91
 6332 0663 18000000 		.4byte	.LFE91-.LFB91
 6333 0667 01       		.uleb128 0x1
 6334 0668 9C       		.byte	0x9c
 6335 0669 17       		.uleb128 0x17
 6336 066a DF060000 		.4byte	.LASF101
 6337 066e 01       		.byte	0x1
 6338 066f FF02     		.2byte	0x2ff
 6339 0671 00000000 		.4byte	.LFB92
 6340 0675 B8000000 		.4byte	.LFE92-.LFB92
 6341 0679 01       		.uleb128 0x1
 6342 067a 9C       		.byte	0x9c
 6343 067b 8F060000 		.4byte	0x68f
 6344 067f 14       		.uleb128 0x14
 6345 0680 1C080000 		.4byte	.LASF102
 6346 0684 01       		.byte	0x1
 6347 0685 0003     		.2byte	0x300
 6348 0687 8E000000 		.4byte	0x8e
 6349 068b 02       		.uleb128 0x2
 6350 068c 91       		.byte	0x91
 6351 068d 6F       		.sleb128 -17
 6352 068e 00       		.byte	0
 6353 068f 17       		.uleb128 0x17
 6354 0690 9B050000 		.4byte	.LASF103
 6355 0694 01       		.byte	0x1
 6356 0695 1C03     		.2byte	0x31c
 6357 0697 00000000 		.4byte	.LFB93
 6358 069b 50050000 		.4byte	.LFE93-.LFB93
 6359 069f 01       		.uleb128 0x1
 6360 06a0 9C       		.byte	0x9c
 6361 06a1 F7060000 		.4byte	0x6f7
 6362 06a5 14       		.uleb128 0x14
 6363 06a6 1C080000 		.4byte	.LASF102
 6364 06aa 01       		.byte	0x1
 6365 06ab 1E03     		.2byte	0x31e
 6366 06ad 8E000000 		.4byte	0x8e
 6367 06b1 02       		.uleb128 0x2
 6368 06b2 91       		.byte	0x91
 6369 06b3 77       		.sleb128 -9
 6370 06b4 12       		.uleb128 0x12
 6371 06b5 48010000 		.4byte	.LBB11
 6372 06b9 DC030000 		.4byte	.LBE11-.LBB11
 6373 06bd 15       		.uleb128 0x15
 6374 06be 6D657300 		.ascii	"mes\000"
 6375 06c2 01       		.byte	0x1
 6376 06c3 4403     		.2byte	0x344
 6377 06c5 28040000 		.4byte	0x428
 6378 06c9 02       		.uleb128 0x2
 6379 06ca 91       		.byte	0x91
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 135


 6380 06cb 58       		.sleb128 -40
 6381 06cc 15       		.uleb128 0x15
 6382 06cd 6900     		.ascii	"i\000"
 6383 06cf 01       		.byte	0x1
 6384 06d0 6F03     		.2byte	0x36f
 6385 06d2 73000000 		.4byte	0x73
 6386 06d6 02       		.uleb128 0x2
 6387 06d7 91       		.byte	0x91
 6388 06d8 70       		.sleb128 -16
 6389 06d9 14       		.uleb128 0x14
 6390 06da 35090000 		.4byte	.LASF69
 6391 06de 01       		.byte	0x1
 6392 06df 7C03     		.2byte	0x37c
 6393 06e1 8E000000 		.4byte	0x8e
 6394 06e5 02       		.uleb128 0x2
 6395 06e6 91       		.byte	0x91
 6396 06e7 6B       		.sleb128 -21
 6397 06e8 15       		.uleb128 0x15
 6398 06e9 7800     		.ascii	"x\000"
 6399 06eb 01       		.byte	0x1
 6400 06ec A203     		.2byte	0x3a2
 6401 06ee 73000000 		.4byte	0x73
 6402 06f2 02       		.uleb128 0x2
 6403 06f3 91       		.byte	0x91
 6404 06f4 6C       		.sleb128 -20
 6405 06f5 00       		.byte	0
 6406 06f6 00       		.byte	0
 6407 06f7 1B       		.uleb128 0x1b
 6408 06f8 14000000 		.4byte	.LASF104
 6409 06fc 01       		.byte	0x1
 6410 06fd BC03     		.2byte	0x3bc
 6411 06ff 00000000 		.4byte	.LFB94
 6412 0703 40000000 		.4byte	.LFE94-.LFB94
 6413 0707 01       		.uleb128 0x1
 6414 0708 9C       		.byte	0x9c
 6415 0709 1B       		.uleb128 0x1b
 6416 070a C6030000 		.4byte	.LASF105
 6417 070e 01       		.byte	0x1
 6418 070f CB03     		.2byte	0x3cb
 6419 0711 00000000 		.4byte	.LFB95
 6420 0715 40000000 		.4byte	.LFE95-.LFB95
 6421 0719 01       		.uleb128 0x1
 6422 071a 9C       		.byte	0x9c
 6423 071b 19       		.uleb128 0x19
 6424 071c C4040000 		.4byte	.LASF106
 6425 0720 01       		.byte	0x1
 6426 0721 DB03     		.2byte	0x3db
 6427 0723 00000000 		.4byte	.LFB96
 6428 0727 30020000 		.4byte	.LFE96-.LFB96
 6429 072b 01       		.uleb128 0x1
 6430 072c 9C       		.byte	0x9c
 6431 072d 8C070000 		.4byte	0x78c
 6432 0731 14       		.uleb128 0x14
 6433 0732 8A070000 		.4byte	.LASF107
 6434 0736 01       		.byte	0x1
 6435 0737 E903     		.2byte	0x3e9
 6436 0739 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 136


 6437 073d 02       		.uleb128 0x2
 6438 073e 91       		.byte	0x91
 6439 073f 5E       		.sleb128 -34
 6440 0740 14       		.uleb128 0x14
 6441 0741 48010000 		.4byte	.LASF108
 6442 0745 01       		.byte	0x1
 6443 0746 EA03     		.2byte	0x3ea
 6444 0748 DB000000 		.4byte	0xdb
 6445 074c 02       		.uleb128 0x2
 6446 074d 91       		.byte	0x91
 6447 074e 5C       		.sleb128 -36
 6448 074f 14       		.uleb128 0x14
 6449 0750 C2060000 		.4byte	.LASF109
 6450 0754 01       		.byte	0x1
 6451 0755 EB03     		.2byte	0x3eb
 6452 0757 EE000000 		.4byte	0xee
 6453 075b 02       		.uleb128 0x2
 6454 075c 91       		.byte	0x91
 6455 075d 68       		.sleb128 -24
 6456 075e 14       		.uleb128 0x14
 6457 075f D6080000 		.4byte	.LASF110
 6458 0763 01       		.byte	0x1
 6459 0764 EC03     		.2byte	0x3ec
 6460 0766 EE000000 		.4byte	0xee
 6461 076a 02       		.uleb128 0x2
 6462 076b 91       		.byte	0x91
 6463 076c 60       		.sleb128 -32
 6464 076d 14       		.uleb128 0x14
 6465 076e 65040000 		.4byte	.LASF111
 6466 0772 01       		.byte	0x1
 6467 0773 F503     		.2byte	0x3f5
 6468 0775 73000000 		.4byte	0x73
 6469 0779 02       		.uleb128 0x2
 6470 077a 91       		.byte	0x91
 6471 077b 58       		.sleb128 -40
 6472 077c 14       		.uleb128 0x14
 6473 077d A5060000 		.4byte	.LASF112
 6474 0781 01       		.byte	0x1
 6475 0782 F603     		.2byte	0x3f6
 6476 0784 73000000 		.4byte	0x73
 6477 0788 02       		.uleb128 0x2
 6478 0789 91       		.byte	0x91
 6479 078a 54       		.sleb128 -44
 6480 078b 00       		.byte	0
 6481 078c 1C       		.uleb128 0x1c
 6482 078d FC060000 		.4byte	.LASF113
 6483 0791 01       		.byte	0x1
 6484 0792 0404     		.2byte	0x404
 6485 0794 00000000 		.4byte	.LFB97
 6486 0798 0C000000 		.4byte	.LFE97-.LFB97
 6487 079c 01       		.uleb128 0x1
 6488 079d 9C       		.byte	0x9c
 6489 079e 19       		.uleb128 0x19
 6490 079f BC010000 		.4byte	.LASF114
 6491 07a3 01       		.byte	0x1
 6492 07a4 0A04     		.2byte	0x40a
 6493 07a6 00000000 		.4byte	.LFB98
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 137


 6494 07aa 4C010000 		.4byte	.LFE98-.LFB98
 6495 07ae 01       		.uleb128 0x1
 6496 07af 9C       		.byte	0x9c
 6497 07b0 E0070000 		.4byte	0x7e0
 6498 07b4 15       		.uleb128 0x15
 6499 07b5 6E6C00   		.ascii	"nl\000"
 6500 07b8 01       		.byte	0x1
 6501 07b9 0E04     		.2byte	0x40e
 6502 07bb AB000000 		.4byte	0xab
 6503 07bf 02       		.uleb128 0x2
 6504 07c0 91       		.byte	0x91
 6505 07c1 67       		.sleb128 -25
 6506 07c2 15       		.uleb128 0x15
 6507 07c3 6E7200   		.ascii	"nr\000"
 6508 07c6 01       		.byte	0x1
 6509 07c7 0F04     		.2byte	0x40f
 6510 07c9 AB000000 		.4byte	0xab
 6511 07cd 02       		.uleb128 0x2
 6512 07ce 91       		.byte	0x91
 6513 07cf 66       		.sleb128 -26
 6514 07d0 15       		.uleb128 0x15
 6515 07d1 6D696400 		.ascii	"mid\000"
 6516 07d5 01       		.byte	0x1
 6517 07d6 1004     		.2byte	0x410
 6518 07d8 AB000000 		.4byte	0xab
 6519 07dc 02       		.uleb128 0x2
 6520 07dd 91       		.byte	0x91
 6521 07de 65       		.sleb128 -27
 6522 07df 00       		.byte	0
 6523 07e0 1C       		.uleb128 0x1c
 6524 07e1 72010000 		.4byte	.LASF115
 6525 07e5 01       		.byte	0x1
 6526 07e6 2A04     		.2byte	0x42a
 6527 07e8 00000000 		.4byte	.LFB99
 6528 07ec 0C000000 		.4byte	.LFE99-.LFB99
 6529 07f0 01       		.uleb128 0x1
 6530 07f1 9C       		.byte	0x9c
 6531 07f2 19       		.uleb128 0x19
 6532 07f3 B5090000 		.4byte	.LASF116
 6533 07f7 01       		.byte	0x1
 6534 07f8 2F04     		.2byte	0x42f
 6535 07fa 00000000 		.4byte	.LFB100
 6536 07fe C0000000 		.4byte	.LFE100-.LFB100
 6537 0802 01       		.uleb128 0x1
 6538 0803 9C       		.byte	0x9c
 6539 0804 40080000 		.4byte	0x840
 6540 0808 12       		.uleb128 0x12
 6541 0809 0E000000 		.4byte	.LBB12
 6542 080d 8E000000 		.4byte	.LBE12-.LBB12
 6543 0811 14       		.uleb128 0x14
 6544 0812 78030000 		.4byte	.LASF117
 6545 0816 01       		.byte	0x1
 6546 0817 3804     		.2byte	0x438
 6547 0819 E7000000 		.4byte	0xe7
 6548 081d 02       		.uleb128 0x2
 6549 081e 91       		.byte	0x91
 6550 081f 74       		.sleb128 -12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 138


 6551 0820 14       		.uleb128 0x14
 6552 0821 F7010000 		.4byte	.LASF118
 6553 0825 01       		.byte	0x1
 6554 0826 3904     		.2byte	0x439
 6555 0828 DB000000 		.4byte	0xdb
 6556 082c 02       		.uleb128 0x2
 6557 082d 91       		.byte	0x91
 6558 082e 72       		.sleb128 -14
 6559 082f 14       		.uleb128 0x14
 6560 0830 EE040000 		.4byte	.LASF119
 6561 0834 01       		.byte	0x1
 6562 0835 3E04     		.2byte	0x43e
 6563 0837 28040000 		.4byte	0x428
 6564 083b 02       		.uleb128 0x2
 6565 083c 91       		.byte	0x91
 6566 083d 60       		.sleb128 -32
 6567 083e 00       		.byte	0
 6568 083f 00       		.byte	0
 6569 0840 19       		.uleb128 0x19
 6570 0841 F7070000 		.4byte	.LASF120
 6571 0845 01       		.byte	0x1
 6572 0846 4504     		.2byte	0x445
 6573 0848 00000000 		.4byte	.LFB101
 6574 084c B8000000 		.4byte	.LFE101-.LFB101
 6575 0850 01       		.uleb128 0x1
 6576 0851 9C       		.byte	0x9c
 6577 0852 70080000 		.4byte	0x870
 6578 0856 12       		.uleb128 0x12
 6579 0857 0E000000 		.4byte	.LBB13
 6580 085b 86000000 		.4byte	.LBE13-.LBB13
 6581 085f 14       		.uleb128 0x14
 6582 0860 10060000 		.4byte	.LASF121
 6583 0864 01       		.byte	0x1
 6584 0865 4904     		.2byte	0x449
 6585 0867 28040000 		.4byte	0x428
 6586 086b 02       		.uleb128 0x2
 6587 086c 91       		.byte	0x91
 6588 086d 68       		.sleb128 -24
 6589 086e 00       		.byte	0
 6590 086f 00       		.byte	0
 6591 0870 17       		.uleb128 0x17
 6592 0871 BF090000 		.4byte	.LASF122
 6593 0875 01       		.byte	0x1
 6594 0876 5A04     		.2byte	0x45a
 6595 0878 00000000 		.4byte	.LFB102
 6596 087c 4A000000 		.4byte	.LFE102-.LFB102
 6597 0880 01       		.uleb128 0x1
 6598 0881 9C       		.byte	0x9c
 6599 0882 96080000 		.4byte	0x896
 6600 0886 1A       		.uleb128 0x1a
 6601 0887 23010000 		.4byte	.LASF123
 6602 088b 01       		.byte	0x1
 6603 088c 5A04     		.2byte	0x45a
 6604 088e 96080000 		.4byte	0x896
 6605 0892 02       		.uleb128 0x2
 6606 0893 91       		.byte	0x91
 6607 0894 6C       		.sleb128 -20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 139


 6608 0895 00       		.byte	0
 6609 0896 05       		.uleb128 0x5
 6610 0897 04       		.byte	0x4
 6611 0898 AB000000 		.4byte	0xab
 6612 089c 17       		.uleb128 0x17
 6613 089d F2030000 		.4byte	.LASF124
 6614 08a1 01       		.byte	0x1
 6615 08a2 6504     		.2byte	0x465
 6616 08a4 00000000 		.4byte	.LFB103
 6617 08a8 68000000 		.4byte	.LFE103-.LFB103
 6618 08ac 01       		.uleb128 0x1
 6619 08ad 9C       		.byte	0x9c
 6620 08ae D9080000 		.4byte	0x8d9
 6621 08b2 18       		.uleb128 0x18
 6622 08b3 7300     		.ascii	"s\000"
 6623 08b5 01       		.byte	0x1
 6624 08b6 6504     		.2byte	0x465
 6625 08b8 88000000 		.4byte	0x88
 6626 08bc 02       		.uleb128 0x2
 6627 08bd 91       		.byte	0x91
 6628 08be 6C       		.sleb128 -20
 6629 08bf 12       		.uleb128 0x12
 6630 08c0 10000000 		.4byte	.LBB14
 6631 08c4 48000000 		.4byte	.LBE14-.LBB14
 6632 08c8 15       		.uleb128 0x15
 6633 08c9 636E7400 		.ascii	"cnt\000"
 6634 08cd 01       		.byte	0x1
 6635 08ce 6C04     		.2byte	0x46c
 6636 08d0 C3000000 		.4byte	0xc3
 6637 08d4 02       		.uleb128 0x2
 6638 08d5 91       		.byte	0x91
 6639 08d6 74       		.sleb128 -12
 6640 08d7 00       		.byte	0
 6641 08d8 00       		.byte	0
 6642 08d9 17       		.uleb128 0x17
 6643 08da BC080000 		.4byte	.LASF125
 6644 08de 01       		.byte	0x1
 6645 08df 7B04     		.2byte	0x47b
 6646 08e1 00000000 		.4byte	.LFB104
 6647 08e5 50000000 		.4byte	.LFE104-.LFB104
 6648 08e9 01       		.uleb128 0x1
 6649 08ea 9C       		.byte	0x9c
 6650 08eb 16090000 		.4byte	0x916
 6651 08ef 18       		.uleb128 0x18
 6652 08f0 6300     		.ascii	"c\000"
 6653 08f2 01       		.byte	0x1
 6654 08f3 7B04     		.2byte	0x47b
 6655 08f5 8E000000 		.4byte	0x8e
 6656 08f9 02       		.uleb128 0x2
 6657 08fa 91       		.byte	0x91
 6658 08fb 6F       		.sleb128 -17
 6659 08fc 12       		.uleb128 0x12
 6660 08fd 12000000 		.4byte	.LBB15
 6661 0901 2E000000 		.4byte	.LBE15-.LBB15
 6662 0905 15       		.uleb128 0x15
 6663 0906 636E7400 		.ascii	"cnt\000"
 6664 090a 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 140


 6665 090b 7F04     		.2byte	0x47f
 6666 090d C3000000 		.4byte	0xc3
 6667 0911 02       		.uleb128 0x2
 6668 0912 91       		.byte	0x91
 6669 0913 74       		.sleb128 -12
 6670 0914 00       		.byte	0
 6671 0915 00       		.byte	0
 6672 0916 1C       		.uleb128 0x1c
 6673 0917 3A040000 		.4byte	.LASF126
 6674 091b 01       		.byte	0x1
 6675 091c 8C04     		.2byte	0x48c
 6676 091e 00000000 		.4byte	.LFB105
 6677 0922 0C000000 		.4byte	.LFE105-.LFB105
 6678 0926 01       		.uleb128 0x1
 6679 0927 9C       		.byte	0x9c
 6680 0928 1D       		.uleb128 0x1d
 6681 0929 DE000000 		.4byte	.LASF127
 6682 092d 06       		.byte	0x6
 6683 092e 9606     		.2byte	0x696
 6684 0930 34090000 		.4byte	0x934
 6685 0934 1E       		.uleb128 0x1e
 6686 0935 95000000 		.4byte	0x95
 6687 0939 1F       		.uleb128 0x1f
 6688 093a 747300   		.ascii	"ts\000"
 6689 093d 05       		.byte	0x5
 6690 093e 10       		.byte	0x10
 6691 093f AB000000 		.4byte	0xab
 6692 0943 05       		.uleb128 0x5
 6693 0944 03       		.byte	0x3
 6694 0945 00000000 		.4byte	ts
 6695 0949 20       		.uleb128 0x20
 6696 094a 2E020000 		.4byte	.LASF128
 6697 094e 05       		.byte	0x5
 6698 094f 11       		.byte	0x11
 6699 0950 B7000000 		.4byte	0xb7
 6700 0954 05       		.uleb128 0x5
 6701 0955 03       		.byte	0x3
 6702 0956 00000000 		.4byte	ts_enc
 6703 095a 20       		.uleb128 0x20
 6704 095b FE000000 		.4byte	.LASF129
 6705 095f 05       		.byte	0x5
 6706 0960 12       		.byte	0x12
 6707 0961 B7000000 		.4byte	0xb7
 6708 0965 05       		.uleb128 0x5
 6709 0966 03       		.byte	0x3
 6710 0967 00000000 		.4byte	ts_update
 6711 096b 20       		.uleb128 0x20
 6712 096c 30000000 		.4byte	.LASF130
 6713 0970 05       		.byte	0x5
 6714 0971 13       		.byte	0x13
 6715 0972 B7000000 		.4byte	0xb7
 6716 0976 05       		.uleb128 0x5
 6717 0977 03       		.byte	0x3
 6718 0978 00000000 		.4byte	ts_speed
 6719 097c 20       		.uleb128 0x20
 6720 097d 2F040000 		.4byte	.LASF131
 6721 0981 05       		.byte	0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 141


 6722 0982 14       		.byte	0x14
 6723 0983 B7000000 		.4byte	0xb7
 6724 0987 05       		.uleb128 0x5
 6725 0988 03       		.byte	0x3
 6726 0989 00000000 		.4byte	ts_display
 6727 098d 20       		.uleb128 0x20
 6728 098e 7D010000 		.4byte	.LASF132
 6729 0992 05       		.byte	0x5
 6730 0993 16       		.byte	0x16
 6731 0994 AB000000 		.4byte	0xab
 6732 0998 05       		.uleb128 0x5
 6733 0999 03       		.byte	0x3
 6734 099a 00000000 		.4byte	flag_ts_enc
 6735 099e 20       		.uleb128 0x20
 6736 099f 9F070000 		.4byte	.LASF133
 6737 09a3 05       		.byte	0x5
 6738 09a4 17       		.byte	0x17
 6739 09a5 AB000000 		.4byte	0xab
 6740 09a9 05       		.uleb128 0x5
 6741 09aa 03       		.byte	0x3
 6742 09ab 00000000 		.4byte	flag_ts_update
 6743 09af 20       		.uleb128 0x20
 6744 09b0 6F040000 		.4byte	.LASF134
 6745 09b4 05       		.byte	0x5
 6746 09b5 18       		.byte	0x18
 6747 09b6 AB000000 		.4byte	0xab
 6748 09ba 05       		.uleb128 0x5
 6749 09bb 03       		.byte	0x3
 6750 09bc 00000000 		.4byte	flag_ts_speed
 6751 09c0 20       		.uleb128 0x20
 6752 09c1 11070000 		.4byte	.LASF135
 6753 09c5 05       		.byte	0x5
 6754 09c6 19       		.byte	0x19
 6755 09c7 AB000000 		.4byte	0xab
 6756 09cb 05       		.uleb128 0x5
 6757 09cc 03       		.byte	0x3
 6758 09cd 00000000 		.4byte	flag_ts_display
 6759 09d1 20       		.uleb128 0x20
 6760 09d2 35020000 		.4byte	.LASF136
 6761 09d6 05       		.byte	0x5
 6762 09d7 1C       		.byte	0x1c
 6763 09d8 AB000000 		.4byte	0xab
 6764 09dc 05       		.uleb128 0x5
 6765 09dd 03       		.byte	0x3
 6766 09de 00000000 		.4byte	flag_rx
 6767 09e2 20       		.uleb128 0x20
 6768 09e3 C0000000 		.4byte	.LASF137
 6769 09e7 05       		.byte	0x5
 6770 09e8 1D       		.byte	0x1d
 6771 09e9 AB000000 		.4byte	0xab
 6772 09ed 05       		.uleb128 0x5
 6773 09ee 03       		.byte	0x3
 6774 09ef 00000000 		.4byte	flag_packet
 6775 09f3 20       		.uleb128 0x20
 6776 09f4 AD010000 		.4byte	.LASF138
 6777 09f8 05       		.byte	0x5
 6778 09f9 1E       		.byte	0x1e
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 142


 6779 09fa AB000000 		.4byte	0xab
 6780 09fe 05       		.uleb128 0x5
 6781 09ff 03       		.byte	0x3
 6782 0a00 00000000 		.4byte	flag_KB_string
 6783 0a04 20       		.uleb128 0x20
 6784 0a05 17020000 		.4byte	.LASF139
 6785 0a09 05       		.byte	0x5
 6786 0a0a 20       		.byte	0x20
 6787 0a0b AB000000 		.4byte	0xab
 6788 0a0f 05       		.uleb128 0x5
 6789 0a10 03       		.byte	0x3
 6790 0a11 00000000 		.4byte	dataready_flag
 6791 0a15 20       		.uleb128 0x20
 6792 0a16 B9050000 		.4byte	.LASF140
 6793 0a1a 05       		.byte	0x5
 6794 0a1b 22       		.byte	0x22
 6795 0a1c AB000000 		.4byte	0xab
 6796 0a20 05       		.uleb128 0x5
 6797 0a21 03       		.byte	0x3
 6798 0a22 00000000 		.4byte	flag_rf_transmission_active
 6799 0a26 20       		.uleb128 0x20
 6800 0a27 94040000 		.4byte	.LASF141
 6801 0a2b 05       		.byte	0x5
 6802 0a2c 23       		.byte	0x23
 6803 0a2d AB000000 		.4byte	0xab
 6804 0a31 05       		.uleb128 0x5
 6805 0a32 03       		.byte	0x3
 6806 0a33 00000000 		.4byte	flag_print_rf
 6807 0a37 20       		.uleb128 0x20
 6808 0a38 41030000 		.4byte	.LASF142
 6809 0a3c 05       		.byte	0x5
 6810 0a3d 25       		.byte	0x25
 6811 0a3e AB000000 		.4byte	0xab
 6812 0a42 05       		.uleb128 0x5
 6813 0a43 03       		.byte	0x3
 6814 0a44 00000000 		.4byte	flag_receive_ADC
 6815 0a48 20       		.uleb128 0x20
 6816 0a49 26030000 		.4byte	.LASF143
 6817 0a4d 05       		.byte	0x5
 6818 0a4e 26       		.byte	0x26
 6819 0a4f DB000000 		.4byte	0xdb
 6820 0a53 05       		.uleb128 0x5
 6821 0a54 03       		.byte	0x3
 6822 0a55 00000000 		.4byte	adc_result
 6823 0a59 20       		.uleb128 0x20
 6824 0a5a 62000000 		.4byte	.LASF144
 6825 0a5e 05       		.byte	0x5
 6826 0a5f 28       		.byte	0x28
 6827 0a60 AB000000 		.4byte	0xab
 6828 0a64 05       		.uleb128 0x5
 6829 0a65 03       		.byte	0x3
 6830 0a66 00000000 		.4byte	direction
 6831 0a6a 20       		.uleb128 0x20
 6832 0a6b 61060000 		.4byte	.LASF145
 6833 0a6f 05       		.byte	0x5
 6834 0a70 2B       		.byte	0x2b
 6835 0a71 AB000000 		.4byte	0xab
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 143


 6836 0a75 05       		.uleb128 0x5
 6837 0a76 03       		.byte	0x3
 6838 0a77 00000000 		.4byte	BIN_ENABLED
 6839 0a7b 20       		.uleb128 0x20
 6840 0a7c B1080000 		.4byte	.LASF146
 6841 0a80 05       		.byte	0x5
 6842 0a81 2D       		.byte	0x2d
 6843 0a82 AB000000 		.4byte	0xab
 6844 0a86 05       		.uleb128 0x5
 6845 0a87 03       		.byte	0x3
 6846 0a88 00000000 		.4byte	BT_ENABLED
 6847 0a8c 20       		.uleb128 0x20
 6848 0a8d 65020000 		.4byte	.LASF147
 6849 0a91 05       		.byte	0x5
 6850 0a92 32       		.byte	0x32
 6851 0a93 AB000000 		.4byte	0xab
 6852 0a97 05       		.uleb128 0x5
 6853 0a98 03       		.byte	0x3
 6854 0a99 00000000 		.4byte	flag_calc_wheelspeed
 6855 0a9d 20       		.uleb128 0x20
 6856 0a9e 93020000 		.4byte	.LASF148
 6857 0aa2 05       		.byte	0x5
 6858 0aa3 33       		.byte	0x33
 6859 0aa4 DB000000 		.4byte	0xdb
 6860 0aa8 05       		.uleb128 0x5
 6861 0aa9 03       		.byte	0x3
 6862 0aaa 00000000 		.4byte	quad_count1
 6863 0aae 20       		.uleb128 0x20
 6864 0aaf 9F020000 		.4byte	.LASF149
 6865 0ab3 05       		.byte	0x5
 6866 0ab4 34       		.byte	0x34
 6867 0ab5 DB000000 		.4byte	0xdb
 6868 0ab9 05       		.uleb128 0x5
 6869 0aba 03       		.byte	0x3
 6870 0abb 00000000 		.4byte	quad_count2
 6871 0abf 20       		.uleb128 0x20
 6872 0ac0 31060000 		.4byte	.LASF150
 6873 0ac4 05       		.byte	0x5
 6874 0ac5 35       		.byte	0x35
 6875 0ac6 DB000000 		.4byte	0xdb
 6876 0aca 05       		.uleb128 0x5
 6877 0acb 03       		.byte	0x3
 6878 0acc 00000000 		.4byte	last_quad_count1
 6879 0ad0 20       		.uleb128 0x20
 6880 0ad1 42060000 		.4byte	.LASF151
 6881 0ad5 05       		.byte	0x5
 6882 0ad6 36       		.byte	0x36
 6883 0ad7 DB000000 		.4byte	0xdb
 6884 0adb 05       		.uleb128 0x5
 6885 0adc 03       		.byte	0x3
 6886 0add 00000000 		.4byte	last_quad_count2
 6887 0ae1 20       		.uleb128 0x20
 6888 0ae2 47090000 		.4byte	.LASF152
 6889 0ae6 05       		.byte	0x5
 6890 0ae7 37       		.byte	0x37
 6891 0ae8 DB000000 		.4byte	0xdb
 6892 0aec 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 144


 6893 0aed 03       		.byte	0x3
 6894 0aee 00000000 		.4byte	quad_diff1
 6895 0af2 20       		.uleb128 0x20
 6896 0af3 52090000 		.4byte	.LASF153
 6897 0af7 05       		.byte	0x5
 6898 0af8 38       		.byte	0x38
 6899 0af9 DB000000 		.4byte	0xdb
 6900 0afd 05       		.uleb128 0x5
 6901 0afe 03       		.byte	0x3
 6902 0aff 00000000 		.4byte	quad_diff2
 6903 0b03 20       		.uleb128 0x20
 6904 0b04 A4010000 		.4byte	.LASF154
 6905 0b08 05       		.byte	0x5
 6906 0b09 39       		.byte	0x39
 6907 0b0a AB000000 		.4byte	0xab
 6908 0b0e 05       		.uleb128 0x5
 6909 0b0f 03       		.byte	0x3
 6910 0b10 00000000 		.4byte	deadzone
 6911 0b14 20       		.uleb128 0x20
 6912 0b15 0E090000 		.4byte	.LASF155
 6913 0b19 05       		.byte	0x5
 6914 0b1a 3C       		.byte	0x3c
 6915 0b1b DB000000 		.4byte	0xdb
 6916 0b1f 05       		.uleb128 0x5
 6917 0b20 03       		.byte	0x3
 6918 0b21 00000000 		.4byte	start_turn_count
 6919 0b25 20       		.uleb128 0x20
 6920 0b26 69080000 		.4byte	.LASF156
 6921 0b2a 05       		.byte	0x5
 6922 0b2b 3F       		.byte	0x3f
 6923 0b2c DB000000 		.4byte	0xdb
 6924 0b30 05       		.uleb128 0x5
 6925 0b31 03       		.byte	0x3
 6926 0b32 00000000 		.4byte	left_duty_cycle
 6927 0b36 20       		.uleb128 0x20
 6928 0b37 0B030000 		.4byte	.LASF157
 6929 0b3b 05       		.byte	0x5
 6930 0b3c 40       		.byte	0x40
 6931 0b3d DB000000 		.4byte	0xdb
 6932 0b41 05       		.uleb128 0x5
 6933 0b42 03       		.byte	0x3
 6934 0b43 00000000 		.4byte	right_duty_cycle
 6935 0b47 20       		.uleb128 0x20
 6936 0b48 C4070000 		.4byte	.LASF158
 6937 0b4c 05       		.byte	0x5
 6938 0b4d 43       		.byte	0x43
 6939 0b4e DB000000 		.4byte	0xdb
 6940 0b52 05       		.uleb128 0x5
 6941 0b53 03       		.byte	0x3
 6942 0b54 00000000 		.4byte	leftSpeedLimit
 6943 0b58 20       		.uleb128 0x20
 6944 0b59 AB020000 		.4byte	.LASF159
 6945 0b5d 05       		.byte	0x5
 6946 0b5e 44       		.byte	0x44
 6947 0b5f DB000000 		.4byte	0xdb
 6948 0b63 05       		.uleb128 0x5
 6949 0b64 03       		.byte	0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 145


 6950 0b65 00000000 		.4byte	rightSpeedLimit
 6951 0b69 20       		.uleb128 0x20
 6952 0b6a EB000000 		.4byte	.LASF160
 6953 0b6e 05       		.byte	0x5
 6954 0b6f 47       		.byte	0x47
 6955 0b70 DB000000 		.4byte	0xdb
 6956 0b74 05       		.uleb128 0x5
 6957 0b75 03       		.byte	0x3
 6958 0b76 00000000 		.4byte	target_distance_cm
 6959 0b7a 20       		.uleb128 0x20
 6960 0b7b 86080000 		.4byte	.LASF161
 6961 0b7f 05       		.byte	0x5
 6962 0b80 49       		.byte	0x49
 6963 0b81 DB000000 		.4byte	0xdb
 6964 0b85 05       		.uleb128 0x5
 6965 0b86 03       		.byte	0x3
 6966 0b87 00000000 		.4byte	accum_dist
 6967 0b8b 20       		.uleb128 0x20
 6968 0b8c A4050000 		.4byte	.LASF162
 6969 0b90 05       		.byte	0x5
 6970 0b91 4A       		.byte	0x4a
 6971 0b92 DB000000 		.4byte	0xdb
 6972 0b96 05       		.uleb128 0x5
 6973 0b97 03       		.byte	0x3
 6974 0b98 00000000 		.4byte	target_distance_quad
 6975 0b9c 20       		.uleb128 0x20
 6976 0b9d E3080000 		.4byte	.LASF163
 6977 0ba1 05       		.byte	0x5
 6978 0ba2 4B       		.byte	0x4b
 6979 0ba3 AB000000 		.4byte	0xab
 6980 0ba7 05       		.uleb128 0x5
 6981 0ba8 03       		.byte	0x3
 6982 0ba9 00000000 		.4byte	reached_target
 6983 0bad 20       		.uleb128 0x20
 6984 0bae 25090000 		.4byte	.LASF164
 6985 0bb2 05       		.byte	0x5
 6986 0bb3 4C       		.byte	0x4c
 6987 0bb4 AB000000 		.4byte	0xab
 6988 0bb8 05       		.uleb128 0x5
 6989 0bb9 03       		.byte	0x3
 6990 0bba 00000000 		.4byte	overshot_target
 6991 0bbe 20       		.uleb128 0x20
 6992 0bbf E5010000 		.4byte	.LASF165
 6993 0bc3 05       		.byte	0x5
 6994 0bc4 4D       		.byte	0x4d
 6995 0bc5 E7000000 		.4byte	0xe7
 6996 0bc9 05       		.uleb128 0x5
 6997 0bca 03       		.byte	0x3
 6998 0bcb 00000000 		.4byte	quad_per_cm
 6999 0bcf 20       		.uleb128 0x20
 7000 0bd0 24080000 		.4byte	.LASF166
 7001 0bd4 05       		.byte	0x5
 7002 0bd5 50       		.byte	0x50
 7003 0bd6 AB000000 		.4byte	0xab
 7004 0bda 05       		.uleb128 0x5
 7005 0bdb 03       		.byte	0x3
 7006 0bdc 00000000 		.4byte	initial_pos_valid
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 146


 7007 0be0 20       		.uleb128 0x20
 7008 0be1 F4050000 		.4byte	.LASF167
 7009 0be5 05       		.byte	0x5
 7010 0be6 51       		.byte	0x51
 7011 0be7 DB000000 		.4byte	0xdb
 7012 0beb 05       		.uleb128 0x5
 7013 0bec 03       		.byte	0x3
 7014 0bed 00000000 		.4byte	initial_x_pos
 7015 0bf1 20       		.uleb128 0x20
 7016 0bf2 47000000 		.4byte	.LASF168
 7017 0bf6 05       		.byte	0x5
 7018 0bf7 52       		.byte	0x52
 7019 0bf8 DB000000 		.4byte	0xdb
 7020 0bfc 05       		.uleb128 0x5
 7021 0bfd 03       		.byte	0x3
 7022 0bfe 00000000 		.4byte	initial_y_pos
 7023 0c02 20       		.uleb128 0x20
 7024 0c03 DC040000 		.4byte	.LASF169
 7025 0c07 05       		.byte	0x5
 7026 0c08 55       		.byte	0x55
 7027 0c09 AB000000 		.4byte	0xab
 7028 0c0d 05       		.uleb128 0x5
 7029 0c0e 03       		.byte	0x3
 7030 0c0f 00000000 		.4byte	brakeFlag
 7031 0c13 20       		.uleb128 0x20
 7032 0c14 1C060000 		.4byte	.LASF170
 7033 0c18 05       		.byte	0x5
 7034 0c19 56       		.byte	0x56
 7035 0c1a AB000000 		.4byte	0xab
 7036 0c1e 05       		.uleb128 0x5
 7037 0c1f 03       		.byte	0x3
 7038 0c20 00000000 		.4byte	portOpen
 7039 0c24 07       		.uleb128 0x7
 7040 0c25 AB000000 		.4byte	0xab
 7041 0c29 340C0000 		.4byte	0xc34
 7042 0c2d 08       		.uleb128 0x8
 7043 0c2e 81000000 		.4byte	0x81
 7044 0c32 04       		.byte	0x4
 7045 0c33 00       		.byte	0
 7046 0c34 20       		.uleb128 0x20
 7047 0c35 65010000 		.4byte	.LASF171
 7048 0c39 05       		.byte	0x5
 7049 0c3a 59       		.byte	0x59
 7050 0c3b 240C0000 		.4byte	0xc24
 7051 0c3f 05       		.uleb128 0x5
 7052 0c40 03       		.byte	0x3
 7053 0c41 00000000 		.4byte	frontSensors
 7054 0c45 20       		.uleb128 0x20
 7055 0c46 87020000 		.4byte	.LASF172
 7056 0c4a 05       		.byte	0x5
 7057 0c4b 5D       		.byte	0x5d
 7058 0c4c DB000000 		.4byte	0xdb
 7059 0c50 05       		.uleb128 0x5
 7060 0c51 03       		.byte	0x3
 7061 0c52 00000000 		.4byte	prevVoltage
 7062 0c56 20       		.uleb128 0x20
 7063 0c57 47080000 		.4byte	.LASF173
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 147


 7064 0c5b 05       		.byte	0x5
 7065 0c5c 5E       		.byte	0x5e
 7066 0c5d DB000000 		.4byte	0xdb
 7067 0c61 05       		.uleb128 0x5
 7068 0c62 03       		.byte	0x3
 7069 0c63 00000000 		.4byte	prevVoltage2
 7070 0c67 07       		.uleb128 0x7
 7071 0c68 8E000000 		.4byte	0x8e
 7072 0c6c 770C0000 		.4byte	0xc77
 7073 0c70 08       		.uleb128 0x8
 7074 0c71 81000000 		.4byte	0x81
 7075 0c75 3F       		.byte	0x3f
 7076 0c76 00       		.byte	0
 7077 0c77 20       		.uleb128 0x20
 7078 0c78 AE070000 		.4byte	.LASF174
 7079 0c7c 05       		.byte	0x5
 7080 0c7d 64       		.byte	0x64
 7081 0c7e 670C0000 		.4byte	0xc67
 7082 0c82 05       		.uleb128 0x5
 7083 0c83 03       		.byte	0x3
 7084 0c84 00000000 		.4byte	displaystring
 7085 0c88 20       		.uleb128 0x20
 7086 0c89 60020000 		.4byte	.LASF175
 7087 0c8d 05       		.byte	0x5
 7088 0c8e 65       		.byte	0x65
 7089 0c8f 670C0000 		.4byte	0xc67
 7090 0c93 05       		.uleb128 0x5
 7091 0c94 03       		.byte	0x3
 7092 0c95 00000000 		.4byte	line
 7093 0c99 20       		.uleb128 0x20
 7094 0c9a 93000000 		.4byte	.LASF176
 7095 0c9e 05       		.byte	0x5
 7096 0c9f 65       		.byte	0x65
 7097 0ca0 670C0000 		.4byte	0xc67
 7098 0ca4 05       		.uleb128 0x5
 7099 0ca5 03       		.byte	0x3
 7100 0ca6 00000000 		.4byte	entry
 7101 0caa 07       		.uleb128 0x7
 7102 0cab AB000000 		.4byte	0xab
 7103 0caf BA0C0000 		.4byte	0xcba
 7104 0cb3 08       		.uleb128 0x8
 7105 0cb4 81000000 		.4byte	0x81
 7106 0cb8 3F       		.byte	0x3f
 7107 0cb9 00       		.byte	0
 7108 0cba 20       		.uleb128 0x20
 7109 0cbb 0A080000 		.4byte	.LASF177
 7110 0cbf 05       		.byte	0x5
 7111 0cc0 66       		.byte	0x66
 7112 0cc1 AA0C0000 		.4byte	0xcaa
 7113 0cc5 05       		.uleb128 0x5
 7114 0cc6 03       		.byte	0x3
 7115 0cc7 00000000 		.4byte	usbBuffer
 7116 0ccb 20       		.uleb128 0x20
 7117 0ccc 89010000 		.4byte	.LASF178
 7118 0cd0 05       		.byte	0x5
 7119 0cd1 7B       		.byte	0x7b
 7120 0cd2 86010000 		.4byte	0x186
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 148


 7121 0cd6 05       		.uleb128 0x5
 7122 0cd7 03       		.byte	0x3
 7123 0cd8 00000000 		.4byte	buffer_state
 7124 0cdc 20       		.uleb128 0x20
 7125 0cdd A2040000 		.4byte	.LASF179
 7126 0ce1 05       		.byte	0x5
 7127 0ce2 7C       		.byte	0x7c
 7128 0ce3 86010000 		.4byte	0x186
 7129 0ce7 05       		.uleb128 0x5
 7130 0ce8 03       		.byte	0x3
 7131 0ce9 00000000 		.4byte	system_state
 7132 0ced 20       		.uleb128 0x20
 7133 0cee F9040000 		.4byte	.LASF180
 7134 0cf2 05       		.byte	0x5
 7135 0cf3 7E       		.byte	0x7e
 7136 0cf4 0C010000 		.4byte	0x10c
 7137 0cf8 05       		.uleb128 0x5
 7138 0cf9 03       		.byte	0x3
 7139 0cfa 00000000 		.4byte	prev_movement_state
 7140 0cfe 20       		.uleb128 0x20
 7141 0cff 9A080000 		.4byte	.LASF181
 7142 0d03 05       		.byte	0x5
 7143 0d04 7F       		.byte	0x7f
 7144 0d05 0C010000 		.4byte	0x10c
 7145 0d09 05       		.uleb128 0x5
 7146 0d0a 03       		.byte	0x3
 7147 0d0b 00000000 		.4byte	movement_state
 7148 0d0f 20       		.uleb128 0x20
 7149 0d10 D7020000 		.4byte	.LASF182
 7150 0d14 05       		.byte	0x5
 7151 0d15 80       		.byte	0x80
 7152 0d16 49010000 		.4byte	0x149
 7153 0d1a 05       		.uleb128 0x5
 7154 0d1b 03       		.byte	0x3
 7155 0d1c 00000000 		.4byte	track_mode
 7156 0d20 20       		.uleb128 0x20
 7157 0d21 E5060000 		.4byte	.LASF183
 7158 0d25 05       		.byte	0x5
 7159 0d26 82       		.byte	0x82
 7160 0d27 AB000000 		.4byte	0xab
 7161 0d2b 05       		.uleb128 0x5
 7162 0d2c 03       		.byte	0x3
 7163 0d2d 00000000 		.4byte	byteCount
 7164 0d31 07       		.uleb128 0x7
 7165 0d32 8E000000 		.4byte	0x8e
 7166 0d36 410D0000 		.4byte	0xd41
 7167 0d3a 08       		.uleb128 0x8
 7168 0d3b 81000000 		.4byte	0x81
 7169 0d3f 01       		.byte	0x1
 7170 0d40 00       		.byte	0
 7171 0d41 20       		.uleb128 0x20
 7172 0d42 E4070000 		.4byte	.LASF184
 7173 0d46 05       		.byte	0x5
 7174 0d47 83       		.byte	0x83
 7175 0d48 310D0000 		.4byte	0xd31
 7176 0d4c 05       		.uleb128 0x5
 7177 0d4d 03       		.byte	0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 149


 7178 0d4e 00000000 		.4byte	packet
 7179 0d52 20       		.uleb128 0x20
 7180 0d53 1F090000 		.4byte	.LASF185
 7181 0d57 05       		.byte	0x5
 7182 0d58 87       		.byte	0x87
 7183 0d59 EE000000 		.4byte	0xee
 7184 0d5d 05       		.uleb128 0x5
 7185 0d5e 03       		.byte	0x3
 7186 0d5f 00000000 		.4byte	speed
 7187 0d63 20       		.uleb128 0x20
 7188 0d64 DA030000 		.4byte	.LASF186
 7189 0d68 01       		.byte	0x1
 7190 0d69 25       		.byte	0x25
 7191 0d6a B7000000 		.4byte	0xb7
 7192 0d6e 05       		.uleb128 0x5
 7193 0d6f 03       		.byte	0x3
 7194 0d70 00000000 		.4byte	instructionCount
 7195 0d74 20       		.uleb128 0x20
 7196 0d75 31030000 		.4byte	.LASF187
 7197 0d79 01       		.byte	0x1
 7198 0d7a 27       		.byte	0x27
 7199 0d7b A0000000 		.4byte	0xa0
 7200 0d7f 05       		.uleb128 0x5
 7201 0d80 03       		.byte	0x3
 7202 0d81 00000000 		.4byte	sensorsDisabled
 7203 0d85 07       		.uleb128 0x7
 7204 0d86 A0000000 		.4byte	0xa0
 7205 0d8a 9B0D0000 		.4byte	0xd9b
 7206 0d8e 08       		.uleb128 0x8
 7207 0d8f 81000000 		.4byte	0x81
 7208 0d93 0E       		.byte	0xe
 7209 0d94 08       		.uleb128 0x8
 7210 0d95 81000000 		.4byte	0x81
 7211 0d99 12       		.byte	0x12
 7212 0d9a 00       		.byte	0
 7213 0d9b 1F       		.uleb128 0x1f
 7214 0d9c 6D617000 		.ascii	"map\000"
 7215 0da0 01       		.byte	0x1
 7216 0da1 40       		.byte	0x40
 7217 0da2 850D0000 		.4byte	0xd85
 7218 0da6 05       		.uleb128 0x5
 7219 0da7 03       		.byte	0x3
 7220 0da8 00000000 		.4byte	map
 7221 0dac 07       		.uleb128 0x7
 7222 0dad A0000000 		.4byte	0xa0
 7223 0db1 C20D0000 		.4byte	0xdc2
 7224 0db5 08       		.uleb128 0x8
 7225 0db6 81000000 		.4byte	0x81
 7226 0dba 05       		.byte	0x5
 7227 0dbb 08       		.uleb128 0x8
 7228 0dbc 81000000 		.4byte	0x81
 7229 0dc0 01       		.byte	0x1
 7230 0dc1 00       		.byte	0
 7231 0dc2 20       		.uleb128 0x20
 7232 0dc3 71070000 		.4byte	.LASF188
 7233 0dc7 01       		.byte	0x1
 7234 0dc8 4D       		.byte	0x4d
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 150


 7235 0dc9 AC0D0000 		.4byte	0xdac
 7236 0dcd 05       		.uleb128 0x5
 7237 0dce 03       		.byte	0x3
 7238 0dcf 00000000 		.4byte	food_list
 7239 0dd3 07       		.uleb128 0x7
 7240 0dd4 A0000000 		.4byte	0xa0
 7241 0dd8 EA0D0000 		.4byte	0xdea
 7242 0ddc 21       		.uleb128 0x21
 7243 0ddd 81000000 		.4byte	0x81
 7244 0de1 1F03     		.2byte	0x31f
 7245 0de3 08       		.uleb128 0x8
 7246 0de4 81000000 		.4byte	0x81
 7247 0de8 02       		.byte	0x2
 7248 0de9 00       		.byte	0
 7249 0dea 20       		.uleb128 0x20
 7250 0deb 6C000000 		.4byte	.LASF189
 7251 0def 01       		.byte	0x1
 7252 0df0 2B       		.byte	0x2b
 7253 0df1 D30D0000 		.4byte	0xdd3
 7254 0df5 05       		.uleb128 0x5
 7255 0df6 03       		.byte	0x3
 7256 0df7 00000000 		.4byte	path
 7257 0dfb 20       		.uleb128 0x20
 7258 0dfc 5D090000 		.4byte	.LASF190
 7259 0e00 01       		.byte	0x1
 7260 0e01 2C       		.byte	0x2c
 7261 0e02 F5000000 		.4byte	0xf5
 7262 0e06 05       		.uleb128 0x5
 7263 0e07 03       		.byte	0x3
 7264 0e08 00000000 		.4byte	start
 7265 0e0c 20       		.uleb128 0x20
 7266 0e0d E8020000 		.4byte	.LASF191
 7267 0e11 01       		.byte	0x1
 7268 0e12 2D       		.byte	0x2d
 7269 0e13 F5000000 		.4byte	0xf5
 7270 0e17 05       		.uleb128 0x5
 7271 0e18 03       		.byte	0x3
 7272 0e19 00000000 		.4byte	destination
 7273 0e1d 20       		.uleb128 0x20
 7274 0e1e B0000000 		.4byte	.LASF192
 7275 0e22 01       		.byte	0x1
 7276 0e23 29       		.byte	0x29
 7277 0e24 A0000000 		.4byte	0xa0
 7278 0e28 05       		.uleb128 0x5
 7279 0e29 03       		.byte	0x3
 7280 0e2a 00000000 		.4byte	robot_direction
 7281 0e2e 20       		.uleb128 0x20
 7282 0e2f 42070000 		.4byte	.LASF193
 7283 0e33 07       		.byte	0x7
 7284 0e34 22       		.byte	0x22
 7285 0e35 A0000000 		.4byte	0xa0
 7286 0e39 05       		.uleb128 0x5
 7287 0e3a 03       		.byte	0x3
 7288 0e3b 00000000 		.4byte	tracked_direction
 7289 0e3f 20       		.uleb128 0x20
 7290 0e40 86030000 		.4byte	.LASF194
 7291 0e44 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 151


 7292 0e45 4E       		.byte	0x4e
 7293 0e46 A0000000 		.4byte	0xa0
 7294 0e4a 05       		.uleb128 0x5
 7295 0e4b 03       		.byte	0x3
 7296 0e4c 00000000 		.4byte	food_length
 7297 0e50 07       		.uleb128 0x7
 7298 0e51 8E000000 		.4byte	0x8e
 7299 0e55 610E0000 		.4byte	0xe61
 7300 0e59 21       		.uleb128 0x21
 7301 0e5a 81000000 		.4byte	0x81
 7302 0e5e 1F03     		.2byte	0x31f
 7303 0e60 00       		.byte	0
 7304 0e61 20       		.uleb128 0x20
 7305 0e62 5E070000 		.4byte	.LASF195
 7306 0e66 01       		.byte	0x1
 7307 0e67 24       		.byte	0x24
 7308 0e68 500E0000 		.4byte	0xe50
 7309 0e6c 05       		.uleb128 0x5
 7310 0e6d 03       		.byte	0x3
 7311 0e6e 00000000 		.4byte	instructions
 7312 0e72 20       		.uleb128 0x20
 7313 0e73 BB020000 		.4byte	.LASF196
 7314 0e77 01       		.byte	0x1
 7315 0e78 26       		.byte	0x26
 7316 0e79 B7000000 		.4byte	0xb7
 7317 0e7d 05       		.uleb128 0x5
 7318 0e7e 03       		.byte	0x3
 7319 0e7f 00000000 		.4byte	instructionLength
 7320 0e83 22       		.uleb128 0x22
 7321 0e84 39000000 		.4byte	.LASF197
 7322 0e88 01       		.byte	0x1
 7323 0e89 0804     		.2byte	0x408
 7324 0e8b B7000000 		.4byte	0xb7
 7325 0e8f 05       		.uleb128 0x5
 7326 0e90 03       		.byte	0x3
 7327 0e91 00000000 		.4byte	leftTurnCount
 7328 0e95 22       		.uleb128 0x22
 7329 0e96 47040000 		.4byte	.LASF198
 7330 0e9a 01       		.byte	0x1
 7331 0e9b 0904     		.2byte	0x409
 7332 0e9d B7000000 		.4byte	0xb7
 7333 0ea1 05       		.uleb128 0x5
 7334 0ea2 03       		.byte	0x3
 7335 0ea3 00000000 		.4byte	rightTurnCount
 7336 0ea7 00       		.byte	0
 7337              		.section	.debug_abbrev,"",%progbits
 7338              	.Ldebug_abbrev0:
 7339 0000 01       		.uleb128 0x1
 7340 0001 11       		.uleb128 0x11
 7341 0002 01       		.byte	0x1
 7342 0003 25       		.uleb128 0x25
 7343 0004 0E       		.uleb128 0xe
 7344 0005 13       		.uleb128 0x13
 7345 0006 0B       		.uleb128 0xb
 7346 0007 03       		.uleb128 0x3
 7347 0008 0E       		.uleb128 0xe
 7348 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 152


 7349 000a 0E       		.uleb128 0xe
 7350 000b 55       		.uleb128 0x55
 7351 000c 17       		.uleb128 0x17
 7352 000d 11       		.uleb128 0x11
 7353 000e 01       		.uleb128 0x1
 7354 000f 10       		.uleb128 0x10
 7355 0010 17       		.uleb128 0x17
 7356 0011 00       		.byte	0
 7357 0012 00       		.byte	0
 7358 0013 02       		.uleb128 0x2
 7359 0014 24       		.uleb128 0x24
 7360 0015 00       		.byte	0
 7361 0016 0B       		.uleb128 0xb
 7362 0017 0B       		.uleb128 0xb
 7363 0018 3E       		.uleb128 0x3e
 7364 0019 0B       		.uleb128 0xb
 7365 001a 03       		.uleb128 0x3
 7366 001b 0E       		.uleb128 0xe
 7367 001c 00       		.byte	0
 7368 001d 00       		.byte	0
 7369 001e 03       		.uleb128 0x3
 7370 001f 16       		.uleb128 0x16
 7371 0020 00       		.byte	0
 7372 0021 03       		.uleb128 0x3
 7373 0022 0E       		.uleb128 0xe
 7374 0023 3A       		.uleb128 0x3a
 7375 0024 0B       		.uleb128 0xb
 7376 0025 3B       		.uleb128 0x3b
 7377 0026 0B       		.uleb128 0xb
 7378 0027 49       		.uleb128 0x49
 7379 0028 13       		.uleb128 0x13
 7380 0029 00       		.byte	0
 7381 002a 00       		.byte	0
 7382 002b 04       		.uleb128 0x4
 7383 002c 24       		.uleb128 0x24
 7384 002d 00       		.byte	0
 7385 002e 0B       		.uleb128 0xb
 7386 002f 0B       		.uleb128 0xb
 7387 0030 3E       		.uleb128 0x3e
 7388 0031 0B       		.uleb128 0xb
 7389 0032 03       		.uleb128 0x3
 7390 0033 08       		.uleb128 0x8
 7391 0034 00       		.byte	0
 7392 0035 00       		.byte	0
 7393 0036 05       		.uleb128 0x5
 7394 0037 0F       		.uleb128 0xf
 7395 0038 00       		.byte	0
 7396 0039 0B       		.uleb128 0xb
 7397 003a 0B       		.uleb128 0xb
 7398 003b 49       		.uleb128 0x49
 7399 003c 13       		.uleb128 0x13
 7400 003d 00       		.byte	0
 7401 003e 00       		.byte	0
 7402 003f 06       		.uleb128 0x6
 7403 0040 16       		.uleb128 0x16
 7404 0041 00       		.byte	0
 7405 0042 03       		.uleb128 0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 153


 7406 0043 0E       		.uleb128 0xe
 7407 0044 3A       		.uleb128 0x3a
 7408 0045 0B       		.uleb128 0xb
 7409 0046 3B       		.uleb128 0x3b
 7410 0047 05       		.uleb128 0x5
 7411 0048 49       		.uleb128 0x49
 7412 0049 13       		.uleb128 0x13
 7413 004a 00       		.byte	0
 7414 004b 00       		.byte	0
 7415 004c 07       		.uleb128 0x7
 7416 004d 01       		.uleb128 0x1
 7417 004e 01       		.byte	0x1
 7418 004f 49       		.uleb128 0x49
 7419 0050 13       		.uleb128 0x13
 7420 0051 01       		.uleb128 0x1
 7421 0052 13       		.uleb128 0x13
 7422 0053 00       		.byte	0
 7423 0054 00       		.byte	0
 7424 0055 08       		.uleb128 0x8
 7425 0056 21       		.uleb128 0x21
 7426 0057 00       		.byte	0
 7427 0058 49       		.uleb128 0x49
 7428 0059 13       		.uleb128 0x13
 7429 005a 2F       		.uleb128 0x2f
 7430 005b 0B       		.uleb128 0xb
 7431 005c 00       		.byte	0
 7432 005d 00       		.byte	0
 7433 005e 09       		.uleb128 0x9
 7434 005f 04       		.uleb128 0x4
 7435 0060 01       		.byte	0x1
 7436 0061 03       		.uleb128 0x3
 7437 0062 0E       		.uleb128 0xe
 7438 0063 0B       		.uleb128 0xb
 7439 0064 0B       		.uleb128 0xb
 7440 0065 3A       		.uleb128 0x3a
 7441 0066 0B       		.uleb128 0xb
 7442 0067 3B       		.uleb128 0x3b
 7443 0068 0B       		.uleb128 0xb
 7444 0069 01       		.uleb128 0x1
 7445 006a 13       		.uleb128 0x13
 7446 006b 00       		.byte	0
 7447 006c 00       		.byte	0
 7448 006d 0A       		.uleb128 0xa
 7449 006e 28       		.uleb128 0x28
 7450 006f 00       		.byte	0
 7451 0070 03       		.uleb128 0x3
 7452 0071 0E       		.uleb128 0xe
 7453 0072 1C       		.uleb128 0x1c
 7454 0073 0D       		.uleb128 0xd
 7455 0074 00       		.byte	0
 7456 0075 00       		.byte	0
 7457 0076 0B       		.uleb128 0xb
 7458 0077 13       		.uleb128 0x13
 7459 0078 01       		.byte	0x1
 7460 0079 03       		.uleb128 0x3
 7461 007a 0E       		.uleb128 0xe
 7462 007b 0B       		.uleb128 0xb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 154


 7463 007c 0B       		.uleb128 0xb
 7464 007d 3A       		.uleb128 0x3a
 7465 007e 0B       		.uleb128 0xb
 7466 007f 3B       		.uleb128 0x3b
 7467 0080 0B       		.uleb128 0xb
 7468 0081 01       		.uleb128 0x1
 7469 0082 13       		.uleb128 0x13
 7470 0083 00       		.byte	0
 7471 0084 00       		.byte	0
 7472 0085 0C       		.uleb128 0xc
 7473 0086 0D       		.uleb128 0xd
 7474 0087 00       		.byte	0
 7475 0088 03       		.uleb128 0x3
 7476 0089 0E       		.uleb128 0xe
 7477 008a 3A       		.uleb128 0x3a
 7478 008b 0B       		.uleb128 0xb
 7479 008c 3B       		.uleb128 0x3b
 7480 008d 0B       		.uleb128 0xb
 7481 008e 49       		.uleb128 0x49
 7482 008f 13       		.uleb128 0x13
 7483 0090 38       		.uleb128 0x38
 7484 0091 0B       		.uleb128 0xb
 7485 0092 00       		.byte	0
 7486 0093 00       		.byte	0
 7487 0094 0D       		.uleb128 0xd
 7488 0095 2E       		.uleb128 0x2e
 7489 0096 00       		.byte	0
 7490 0097 3F       		.uleb128 0x3f
 7491 0098 19       		.uleb128 0x19
 7492 0099 03       		.uleb128 0x3
 7493 009a 0E       		.uleb128 0xe
 7494 009b 3A       		.uleb128 0x3a
 7495 009c 0B       		.uleb128 0xb
 7496 009d 3B       		.uleb128 0x3b
 7497 009e 0B       		.uleb128 0xb
 7498 009f 27       		.uleb128 0x27
 7499 00a0 19       		.uleb128 0x19
 7500 00a1 11       		.uleb128 0x11
 7501 00a2 01       		.uleb128 0x1
 7502 00a3 12       		.uleb128 0x12
 7503 00a4 06       		.uleb128 0x6
 7504 00a5 40       		.uleb128 0x40
 7505 00a6 18       		.uleb128 0x18
 7506 00a7 9742     		.uleb128 0x2117
 7507 00a9 19       		.uleb128 0x19
 7508 00aa 00       		.byte	0
 7509 00ab 00       		.byte	0
 7510 00ac 0E       		.uleb128 0xe
 7511 00ad 2E       		.uleb128 0x2e
 7512 00ae 00       		.byte	0
 7513 00af 3F       		.uleb128 0x3f
 7514 00b0 19       		.uleb128 0x19
 7515 00b1 03       		.uleb128 0x3
 7516 00b2 0E       		.uleb128 0xe
 7517 00b3 3A       		.uleb128 0x3a
 7518 00b4 0B       		.uleb128 0xb
 7519 00b5 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 155


 7520 00b6 0B       		.uleb128 0xb
 7521 00b7 27       		.uleb128 0x27
 7522 00b8 19       		.uleb128 0x19
 7523 00b9 11       		.uleb128 0x11
 7524 00ba 01       		.uleb128 0x1
 7525 00bb 12       		.uleb128 0x12
 7526 00bc 06       		.uleb128 0x6
 7527 00bd 40       		.uleb128 0x40
 7528 00be 18       		.uleb128 0x18
 7529 00bf 9642     		.uleb128 0x2116
 7530 00c1 19       		.uleb128 0x19
 7531 00c2 00       		.byte	0
 7532 00c3 00       		.byte	0
 7533 00c4 0F       		.uleb128 0xf
 7534 00c5 2E       		.uleb128 0x2e
 7535 00c6 01       		.byte	0x1
 7536 00c7 3F       		.uleb128 0x3f
 7537 00c8 19       		.uleb128 0x19
 7538 00c9 03       		.uleb128 0x3
 7539 00ca 0E       		.uleb128 0xe
 7540 00cb 3A       		.uleb128 0x3a
 7541 00cc 0B       		.uleb128 0xb
 7542 00cd 3B       		.uleb128 0x3b
 7543 00ce 0B       		.uleb128 0xb
 7544 00cf 27       		.uleb128 0x27
 7545 00d0 19       		.uleb128 0x19
 7546 00d1 11       		.uleb128 0x11
 7547 00d2 01       		.uleb128 0x1
 7548 00d3 12       		.uleb128 0x12
 7549 00d4 06       		.uleb128 0x6
 7550 00d5 40       		.uleb128 0x40
 7551 00d6 18       		.uleb128 0x18
 7552 00d7 9642     		.uleb128 0x2116
 7553 00d9 19       		.uleb128 0x19
 7554 00da 01       		.uleb128 0x1
 7555 00db 13       		.uleb128 0x13
 7556 00dc 00       		.byte	0
 7557 00dd 00       		.byte	0
 7558 00de 10       		.uleb128 0x10
 7559 00df 0B       		.uleb128 0xb
 7560 00e0 01       		.byte	0x1
 7561 00e1 11       		.uleb128 0x11
 7562 00e2 01       		.uleb128 0x1
 7563 00e3 12       		.uleb128 0x12
 7564 00e4 06       		.uleb128 0x6
 7565 00e5 01       		.uleb128 0x1
 7566 00e6 13       		.uleb128 0x13
 7567 00e7 00       		.byte	0
 7568 00e8 00       		.byte	0
 7569 00e9 11       		.uleb128 0x11
 7570 00ea 34       		.uleb128 0x34
 7571 00eb 00       		.byte	0
 7572 00ec 03       		.uleb128 0x3
 7573 00ed 0E       		.uleb128 0xe
 7574 00ee 3A       		.uleb128 0x3a
 7575 00ef 0B       		.uleb128 0xb
 7576 00f0 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 156


 7577 00f1 0B       		.uleb128 0xb
 7578 00f2 49       		.uleb128 0x49
 7579 00f3 13       		.uleb128 0x13
 7580 00f4 02       		.uleb128 0x2
 7581 00f5 18       		.uleb128 0x18
 7582 00f6 00       		.byte	0
 7583 00f7 00       		.byte	0
 7584 00f8 12       		.uleb128 0x12
 7585 00f9 0B       		.uleb128 0xb
 7586 00fa 01       		.byte	0x1
 7587 00fb 11       		.uleb128 0x11
 7588 00fc 01       		.uleb128 0x1
 7589 00fd 12       		.uleb128 0x12
 7590 00fe 06       		.uleb128 0x6
 7591 00ff 00       		.byte	0
 7592 0100 00       		.byte	0
 7593 0101 13       		.uleb128 0x13
 7594 0102 2E       		.uleb128 0x2e
 7595 0103 01       		.byte	0x1
 7596 0104 3F       		.uleb128 0x3f
 7597 0105 19       		.uleb128 0x19
 7598 0106 03       		.uleb128 0x3
 7599 0107 0E       		.uleb128 0xe
 7600 0108 3A       		.uleb128 0x3a
 7601 0109 0B       		.uleb128 0xb
 7602 010a 3B       		.uleb128 0x3b
 7603 010b 0B       		.uleb128 0xb
 7604 010c 49       		.uleb128 0x49
 7605 010d 13       		.uleb128 0x13
 7606 010e 11       		.uleb128 0x11
 7607 010f 01       		.uleb128 0x1
 7608 0110 12       		.uleb128 0x12
 7609 0111 06       		.uleb128 0x6
 7610 0112 40       		.uleb128 0x40
 7611 0113 18       		.uleb128 0x18
 7612 0114 9642     		.uleb128 0x2116
 7613 0116 19       		.uleb128 0x19
 7614 0117 01       		.uleb128 0x1
 7615 0118 13       		.uleb128 0x13
 7616 0119 00       		.byte	0
 7617 011a 00       		.byte	0
 7618 011b 14       		.uleb128 0x14
 7619 011c 34       		.uleb128 0x34
 7620 011d 00       		.byte	0
 7621 011e 03       		.uleb128 0x3
 7622 011f 0E       		.uleb128 0xe
 7623 0120 3A       		.uleb128 0x3a
 7624 0121 0B       		.uleb128 0xb
 7625 0122 3B       		.uleb128 0x3b
 7626 0123 05       		.uleb128 0x5
 7627 0124 49       		.uleb128 0x49
 7628 0125 13       		.uleb128 0x13
 7629 0126 02       		.uleb128 0x2
 7630 0127 18       		.uleb128 0x18
 7631 0128 00       		.byte	0
 7632 0129 00       		.byte	0
 7633 012a 15       		.uleb128 0x15
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 157


 7634 012b 34       		.uleb128 0x34
 7635 012c 00       		.byte	0
 7636 012d 03       		.uleb128 0x3
 7637 012e 08       		.uleb128 0x8
 7638 012f 3A       		.uleb128 0x3a
 7639 0130 0B       		.uleb128 0xb
 7640 0131 3B       		.uleb128 0x3b
 7641 0132 05       		.uleb128 0x5
 7642 0133 49       		.uleb128 0x49
 7643 0134 13       		.uleb128 0x13
 7644 0135 02       		.uleb128 0x2
 7645 0136 18       		.uleb128 0x18
 7646 0137 00       		.byte	0
 7647 0138 00       		.byte	0
 7648 0139 16       		.uleb128 0x16
 7649 013a 2E       		.uleb128 0x2e
 7650 013b 01       		.byte	0x1
 7651 013c 3F       		.uleb128 0x3f
 7652 013d 19       		.uleb128 0x19
 7653 013e 03       		.uleb128 0x3
 7654 013f 0E       		.uleb128 0xe
 7655 0140 3A       		.uleb128 0x3a
 7656 0141 0B       		.uleb128 0xb
 7657 0142 3B       		.uleb128 0x3b
 7658 0143 05       		.uleb128 0x5
 7659 0144 11       		.uleb128 0x11
 7660 0145 01       		.uleb128 0x1
 7661 0146 12       		.uleb128 0x12
 7662 0147 06       		.uleb128 0x6
 7663 0148 40       		.uleb128 0x40
 7664 0149 18       		.uleb128 0x18
 7665 014a 9742     		.uleb128 0x2117
 7666 014c 19       		.uleb128 0x19
 7667 014d 01       		.uleb128 0x1
 7668 014e 13       		.uleb128 0x13
 7669 014f 00       		.byte	0
 7670 0150 00       		.byte	0
 7671 0151 17       		.uleb128 0x17
 7672 0152 2E       		.uleb128 0x2e
 7673 0153 01       		.byte	0x1
 7674 0154 3F       		.uleb128 0x3f
 7675 0155 19       		.uleb128 0x19
 7676 0156 03       		.uleb128 0x3
 7677 0157 0E       		.uleb128 0xe
 7678 0158 3A       		.uleb128 0x3a
 7679 0159 0B       		.uleb128 0xb
 7680 015a 3B       		.uleb128 0x3b
 7681 015b 05       		.uleb128 0x5
 7682 015c 27       		.uleb128 0x27
 7683 015d 19       		.uleb128 0x19
 7684 015e 11       		.uleb128 0x11
 7685 015f 01       		.uleb128 0x1
 7686 0160 12       		.uleb128 0x12
 7687 0161 06       		.uleb128 0x6
 7688 0162 40       		.uleb128 0x40
 7689 0163 18       		.uleb128 0x18
 7690 0164 9642     		.uleb128 0x2116
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 158


 7691 0166 19       		.uleb128 0x19
 7692 0167 01       		.uleb128 0x1
 7693 0168 13       		.uleb128 0x13
 7694 0169 00       		.byte	0
 7695 016a 00       		.byte	0
 7696 016b 18       		.uleb128 0x18
 7697 016c 05       		.uleb128 0x5
 7698 016d 00       		.byte	0
 7699 016e 03       		.uleb128 0x3
 7700 016f 08       		.uleb128 0x8
 7701 0170 3A       		.uleb128 0x3a
 7702 0171 0B       		.uleb128 0xb
 7703 0172 3B       		.uleb128 0x3b
 7704 0173 05       		.uleb128 0x5
 7705 0174 49       		.uleb128 0x49
 7706 0175 13       		.uleb128 0x13
 7707 0176 02       		.uleb128 0x2
 7708 0177 18       		.uleb128 0x18
 7709 0178 00       		.byte	0
 7710 0179 00       		.byte	0
 7711 017a 19       		.uleb128 0x19
 7712 017b 2E       		.uleb128 0x2e
 7713 017c 01       		.byte	0x1
 7714 017d 3F       		.uleb128 0x3f
 7715 017e 19       		.uleb128 0x19
 7716 017f 03       		.uleb128 0x3
 7717 0180 0E       		.uleb128 0xe
 7718 0181 3A       		.uleb128 0x3a
 7719 0182 0B       		.uleb128 0xb
 7720 0183 3B       		.uleb128 0x3b
 7721 0184 05       		.uleb128 0x5
 7722 0185 11       		.uleb128 0x11
 7723 0186 01       		.uleb128 0x1
 7724 0187 12       		.uleb128 0x12
 7725 0188 06       		.uleb128 0x6
 7726 0189 40       		.uleb128 0x40
 7727 018a 18       		.uleb128 0x18
 7728 018b 9642     		.uleb128 0x2116
 7729 018d 19       		.uleb128 0x19
 7730 018e 01       		.uleb128 0x1
 7731 018f 13       		.uleb128 0x13
 7732 0190 00       		.byte	0
 7733 0191 00       		.byte	0
 7734 0192 1A       		.uleb128 0x1a
 7735 0193 05       		.uleb128 0x5
 7736 0194 00       		.byte	0
 7737 0195 03       		.uleb128 0x3
 7738 0196 0E       		.uleb128 0xe
 7739 0197 3A       		.uleb128 0x3a
 7740 0198 0B       		.uleb128 0xb
 7741 0199 3B       		.uleb128 0x3b
 7742 019a 05       		.uleb128 0x5
 7743 019b 49       		.uleb128 0x49
 7744 019c 13       		.uleb128 0x13
 7745 019d 02       		.uleb128 0x2
 7746 019e 18       		.uleb128 0x18
 7747 019f 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 159


 7748 01a0 00       		.byte	0
 7749 01a1 1B       		.uleb128 0x1b
 7750 01a2 2E       		.uleb128 0x2e
 7751 01a3 00       		.byte	0
 7752 01a4 3F       		.uleb128 0x3f
 7753 01a5 19       		.uleb128 0x19
 7754 01a6 03       		.uleb128 0x3
 7755 01a7 0E       		.uleb128 0xe
 7756 01a8 3A       		.uleb128 0x3a
 7757 01a9 0B       		.uleb128 0xb
 7758 01aa 3B       		.uleb128 0x3b
 7759 01ab 05       		.uleb128 0x5
 7760 01ac 11       		.uleb128 0x11
 7761 01ad 01       		.uleb128 0x1
 7762 01ae 12       		.uleb128 0x12
 7763 01af 06       		.uleb128 0x6
 7764 01b0 40       		.uleb128 0x40
 7765 01b1 18       		.uleb128 0x18
 7766 01b2 9642     		.uleb128 0x2116
 7767 01b4 19       		.uleb128 0x19
 7768 01b5 00       		.byte	0
 7769 01b6 00       		.byte	0
 7770 01b7 1C       		.uleb128 0x1c
 7771 01b8 2E       		.uleb128 0x2e
 7772 01b9 00       		.byte	0
 7773 01ba 3F       		.uleb128 0x3f
 7774 01bb 19       		.uleb128 0x19
 7775 01bc 03       		.uleb128 0x3
 7776 01bd 0E       		.uleb128 0xe
 7777 01be 3A       		.uleb128 0x3a
 7778 01bf 0B       		.uleb128 0xb
 7779 01c0 3B       		.uleb128 0x3b
 7780 01c1 05       		.uleb128 0x5
 7781 01c2 11       		.uleb128 0x11
 7782 01c3 01       		.uleb128 0x1
 7783 01c4 12       		.uleb128 0x12
 7784 01c5 06       		.uleb128 0x6
 7785 01c6 40       		.uleb128 0x40
 7786 01c7 18       		.uleb128 0x18
 7787 01c8 9742     		.uleb128 0x2117
 7788 01ca 19       		.uleb128 0x19
 7789 01cb 00       		.byte	0
 7790 01cc 00       		.byte	0
 7791 01cd 1D       		.uleb128 0x1d
 7792 01ce 34       		.uleb128 0x34
 7793 01cf 00       		.byte	0
 7794 01d0 03       		.uleb128 0x3
 7795 01d1 0E       		.uleb128 0xe
 7796 01d2 3A       		.uleb128 0x3a
 7797 01d3 0B       		.uleb128 0xb
 7798 01d4 3B       		.uleb128 0x3b
 7799 01d5 05       		.uleb128 0x5
 7800 01d6 49       		.uleb128 0x49
 7801 01d7 13       		.uleb128 0x13
 7802 01d8 3F       		.uleb128 0x3f
 7803 01d9 19       		.uleb128 0x19
 7804 01da 3C       		.uleb128 0x3c
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 160


 7805 01db 19       		.uleb128 0x19
 7806 01dc 00       		.byte	0
 7807 01dd 00       		.byte	0
 7808 01de 1E       		.uleb128 0x1e
 7809 01df 35       		.uleb128 0x35
 7810 01e0 00       		.byte	0
 7811 01e1 49       		.uleb128 0x49
 7812 01e2 13       		.uleb128 0x13
 7813 01e3 00       		.byte	0
 7814 01e4 00       		.byte	0
 7815 01e5 1F       		.uleb128 0x1f
 7816 01e6 34       		.uleb128 0x34
 7817 01e7 00       		.byte	0
 7818 01e8 03       		.uleb128 0x3
 7819 01e9 08       		.uleb128 0x8
 7820 01ea 3A       		.uleb128 0x3a
 7821 01eb 0B       		.uleb128 0xb
 7822 01ec 3B       		.uleb128 0x3b
 7823 01ed 0B       		.uleb128 0xb
 7824 01ee 49       		.uleb128 0x49
 7825 01ef 13       		.uleb128 0x13
 7826 01f0 3F       		.uleb128 0x3f
 7827 01f1 19       		.uleb128 0x19
 7828 01f2 02       		.uleb128 0x2
 7829 01f3 18       		.uleb128 0x18
 7830 01f4 00       		.byte	0
 7831 01f5 00       		.byte	0
 7832 01f6 20       		.uleb128 0x20
 7833 01f7 34       		.uleb128 0x34
 7834 01f8 00       		.byte	0
 7835 01f9 03       		.uleb128 0x3
 7836 01fa 0E       		.uleb128 0xe
 7837 01fb 3A       		.uleb128 0x3a
 7838 01fc 0B       		.uleb128 0xb
 7839 01fd 3B       		.uleb128 0x3b
 7840 01fe 0B       		.uleb128 0xb
 7841 01ff 49       		.uleb128 0x49
 7842 0200 13       		.uleb128 0x13
 7843 0201 3F       		.uleb128 0x3f
 7844 0202 19       		.uleb128 0x19
 7845 0203 02       		.uleb128 0x2
 7846 0204 18       		.uleb128 0x18
 7847 0205 00       		.byte	0
 7848 0206 00       		.byte	0
 7849 0207 21       		.uleb128 0x21
 7850 0208 21       		.uleb128 0x21
 7851 0209 00       		.byte	0
 7852 020a 49       		.uleb128 0x49
 7853 020b 13       		.uleb128 0x13
 7854 020c 2F       		.uleb128 0x2f
 7855 020d 05       		.uleb128 0x5
 7856 020e 00       		.byte	0
 7857 020f 00       		.byte	0
 7858 0210 22       		.uleb128 0x22
 7859 0211 34       		.uleb128 0x34
 7860 0212 00       		.byte	0
 7861 0213 03       		.uleb128 0x3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 161


 7862 0214 0E       		.uleb128 0xe
 7863 0215 3A       		.uleb128 0x3a
 7864 0216 0B       		.uleb128 0xb
 7865 0217 3B       		.uleb128 0x3b
 7866 0218 05       		.uleb128 0x5
 7867 0219 49       		.uleb128 0x49
 7868 021a 13       		.uleb128 0x13
 7869 021b 3F       		.uleb128 0x3f
 7870 021c 19       		.uleb128 0x19
 7871 021d 02       		.uleb128 0x2
 7872 021e 18       		.uleb128 0x18
 7873 021f 00       		.byte	0
 7874 0220 00       		.byte	0
 7875 0221 00       		.byte	0
 7876              		.section	.debug_aranges,"",%progbits
 7877 0000 6C010000 		.4byte	0x16c
 7878 0004 0200     		.2byte	0x2
 7879 0006 00000000 		.4byte	.Ldebug_info0
 7880 000a 04       		.byte	0x4
 7881 000b 00       		.byte	0
 7882 000c 0000     		.2byte	0
 7883 000e 0000     		.2byte	0
 7884 0010 00000000 		.4byte	.LFB63
 7885 0014 0C000000 		.4byte	.LFE63-.LFB63
 7886 0018 00000000 		.4byte	.LFB64
 7887 001c 2C000000 		.4byte	.LFE64-.LFB64
 7888 0020 00000000 		.4byte	.LFB65
 7889 0024 A4010000 		.4byte	.LFE65-.LFB65
 7890 0028 00000000 		.4byte	.LFB66
 7891 002c 34010000 		.4byte	.LFE66-.LFB66
 7892 0030 00000000 		.4byte	.LFB67
 7893 0034 20000000 		.4byte	.LFE67-.LFB67
 7894 0038 00000000 		.4byte	.LFB68
 7895 003c 28000000 		.4byte	.LFE68-.LFB68
 7896 0040 00000000 		.4byte	.LFB69
 7897 0044 0A000000 		.4byte	.LFE69-.LFB69
 7898 0048 00000000 		.4byte	.LFB70
 7899 004c 28000000 		.4byte	.LFE70-.LFB70
 7900 0050 00000000 		.4byte	.LFB71
 7901 0054 A0070000 		.4byte	.LFE71-.LFB71
 7902 0058 00000000 		.4byte	.LFB72
 7903 005c 60010000 		.4byte	.LFE72-.LFB72
 7904 0060 00000000 		.4byte	.LFB73
 7905 0064 18000000 		.4byte	.LFE73-.LFB73
 7906 0068 00000000 		.4byte	.LFB74
 7907 006c 18000000 		.4byte	.LFE74-.LFB74
 7908 0070 00000000 		.4byte	.LFB75
 7909 0074 54000000 		.4byte	.LFE75-.LFB75
 7910 0078 00000000 		.4byte	.LFB76
 7911 007c F4000000 		.4byte	.LFE76-.LFB76
 7912 0080 00000000 		.4byte	.LFB77
 7913 0084 18000000 		.4byte	.LFE77-.LFB77
 7914 0088 00000000 		.4byte	.LFB78
 7915 008c 18000000 		.4byte	.LFE78-.LFB78
 7916 0090 00000000 		.4byte	.LFB79
 7917 0094 22000000 		.4byte	.LFE79-.LFB79
 7918 0098 00000000 		.4byte	.LFB80
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 162


 7919 009c 1C000000 		.4byte	.LFE80-.LFB80
 7920 00a0 00000000 		.4byte	.LFB81
 7921 00a4 34000000 		.4byte	.LFE81-.LFB81
 7922 00a8 00000000 		.4byte	.LFB82
 7923 00ac 38000000 		.4byte	.LFE82-.LFB82
 7924 00b0 00000000 		.4byte	.LFB83
 7925 00b4 4C000000 		.4byte	.LFE83-.LFB83
 7926 00b8 00000000 		.4byte	.LFB84
 7927 00bc 38000000 		.4byte	.LFE84-.LFB84
 7928 00c0 00000000 		.4byte	.LFB85
 7929 00c4 38000000 		.4byte	.LFE85-.LFB85
 7930 00c8 00000000 		.4byte	.LFB86
 7931 00cc 38000000 		.4byte	.LFE86-.LFB86
 7932 00d0 00000000 		.4byte	.LFB87
 7933 00d4 14000000 		.4byte	.LFE87-.LFB87
 7934 00d8 00000000 		.4byte	.LFB88
 7935 00dc 18000000 		.4byte	.LFE88-.LFB88
 7936 00e0 00000000 		.4byte	.LFB89
 7937 00e4 18000000 		.4byte	.LFE89-.LFB89
 7938 00e8 00000000 		.4byte	.LFB90
 7939 00ec 18000000 		.4byte	.LFE90-.LFB90
 7940 00f0 00000000 		.4byte	.LFB91
 7941 00f4 18000000 		.4byte	.LFE91-.LFB91
 7942 00f8 00000000 		.4byte	.LFB92
 7943 00fc B8000000 		.4byte	.LFE92-.LFB92
 7944 0100 00000000 		.4byte	.LFB93
 7945 0104 50050000 		.4byte	.LFE93-.LFB93
 7946 0108 00000000 		.4byte	.LFB94
 7947 010c 40000000 		.4byte	.LFE94-.LFB94
 7948 0110 00000000 		.4byte	.LFB95
 7949 0114 40000000 		.4byte	.LFE95-.LFB95
 7950 0118 00000000 		.4byte	.LFB96
 7951 011c 30020000 		.4byte	.LFE96-.LFB96
 7952 0120 00000000 		.4byte	.LFB97
 7953 0124 0C000000 		.4byte	.LFE97-.LFB97
 7954 0128 00000000 		.4byte	.LFB98
 7955 012c 4C010000 		.4byte	.LFE98-.LFB98
 7956 0130 00000000 		.4byte	.LFB99
 7957 0134 0C000000 		.4byte	.LFE99-.LFB99
 7958 0138 00000000 		.4byte	.LFB100
 7959 013c C0000000 		.4byte	.LFE100-.LFB100
 7960 0140 00000000 		.4byte	.LFB101
 7961 0144 B8000000 		.4byte	.LFE101-.LFB101
 7962 0148 00000000 		.4byte	.LFB102
 7963 014c 4A000000 		.4byte	.LFE102-.LFB102
 7964 0150 00000000 		.4byte	.LFB103
 7965 0154 68000000 		.4byte	.LFE103-.LFB103
 7966 0158 00000000 		.4byte	.LFB104
 7967 015c 50000000 		.4byte	.LFE104-.LFB104
 7968 0160 00000000 		.4byte	.LFB105
 7969 0164 0C000000 		.4byte	.LFE105-.LFB105
 7970 0168 00000000 		.4byte	0
 7971 016c 00000000 		.4byte	0
 7972              		.section	.debug_ranges,"",%progbits
 7973              	.Ldebug_ranges0:
 7974 0000 00000000 		.4byte	.LFB63
 7975 0004 0C000000 		.4byte	.LFE63
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 163


 7976 0008 00000000 		.4byte	.LFB64
 7977 000c 2C000000 		.4byte	.LFE64
 7978 0010 00000000 		.4byte	.LFB65
 7979 0014 A4010000 		.4byte	.LFE65
 7980 0018 00000000 		.4byte	.LFB66
 7981 001c 34010000 		.4byte	.LFE66
 7982 0020 00000000 		.4byte	.LFB67
 7983 0024 20000000 		.4byte	.LFE67
 7984 0028 00000000 		.4byte	.LFB68
 7985 002c 28000000 		.4byte	.LFE68
 7986 0030 00000000 		.4byte	.LFB69
 7987 0034 0A000000 		.4byte	.LFE69
 7988 0038 00000000 		.4byte	.LFB70
 7989 003c 28000000 		.4byte	.LFE70
 7990 0040 00000000 		.4byte	.LFB71
 7991 0044 A0070000 		.4byte	.LFE71
 7992 0048 00000000 		.4byte	.LFB72
 7993 004c 60010000 		.4byte	.LFE72
 7994 0050 00000000 		.4byte	.LFB73
 7995 0054 18000000 		.4byte	.LFE73
 7996 0058 00000000 		.4byte	.LFB74
 7997 005c 18000000 		.4byte	.LFE74
 7998 0060 00000000 		.4byte	.LFB75
 7999 0064 54000000 		.4byte	.LFE75
 8000 0068 00000000 		.4byte	.LFB76
 8001 006c F4000000 		.4byte	.LFE76
 8002 0070 00000000 		.4byte	.LFB77
 8003 0074 18000000 		.4byte	.LFE77
 8004 0078 00000000 		.4byte	.LFB78
 8005 007c 18000000 		.4byte	.LFE78
 8006 0080 00000000 		.4byte	.LFB79
 8007 0084 22000000 		.4byte	.LFE79
 8008 0088 00000000 		.4byte	.LFB80
 8009 008c 1C000000 		.4byte	.LFE80
 8010 0090 00000000 		.4byte	.LFB81
 8011 0094 34000000 		.4byte	.LFE81
 8012 0098 00000000 		.4byte	.LFB82
 8013 009c 38000000 		.4byte	.LFE82
 8014 00a0 00000000 		.4byte	.LFB83
 8015 00a4 4C000000 		.4byte	.LFE83
 8016 00a8 00000000 		.4byte	.LFB84
 8017 00ac 38000000 		.4byte	.LFE84
 8018 00b0 00000000 		.4byte	.LFB85
 8019 00b4 38000000 		.4byte	.LFE85
 8020 00b8 00000000 		.4byte	.LFB86
 8021 00bc 38000000 		.4byte	.LFE86
 8022 00c0 00000000 		.4byte	.LFB87
 8023 00c4 14000000 		.4byte	.LFE87
 8024 00c8 00000000 		.4byte	.LFB88
 8025 00cc 18000000 		.4byte	.LFE88
 8026 00d0 00000000 		.4byte	.LFB89
 8027 00d4 18000000 		.4byte	.LFE89
 8028 00d8 00000000 		.4byte	.LFB90
 8029 00dc 18000000 		.4byte	.LFE90
 8030 00e0 00000000 		.4byte	.LFB91
 8031 00e4 18000000 		.4byte	.LFE91
 8032 00e8 00000000 		.4byte	.LFB92
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 164


 8033 00ec B8000000 		.4byte	.LFE92
 8034 00f0 00000000 		.4byte	.LFB93
 8035 00f4 50050000 		.4byte	.LFE93
 8036 00f8 00000000 		.4byte	.LFB94
 8037 00fc 40000000 		.4byte	.LFE94
 8038 0100 00000000 		.4byte	.LFB95
 8039 0104 40000000 		.4byte	.LFE95
 8040 0108 00000000 		.4byte	.LFB96
 8041 010c 30020000 		.4byte	.LFE96
 8042 0110 00000000 		.4byte	.LFB97
 8043 0114 0C000000 		.4byte	.LFE97
 8044 0118 00000000 		.4byte	.LFB98
 8045 011c 4C010000 		.4byte	.LFE98
 8046 0120 00000000 		.4byte	.LFB99
 8047 0124 0C000000 		.4byte	.LFE99
 8048 0128 00000000 		.4byte	.LFB100
 8049 012c C0000000 		.4byte	.LFE100
 8050 0130 00000000 		.4byte	.LFB101
 8051 0134 B8000000 		.4byte	.LFE101
 8052 0138 00000000 		.4byte	.LFB102
 8053 013c 4A000000 		.4byte	.LFE102
 8054 0140 00000000 		.4byte	.LFB103
 8055 0144 68000000 		.4byte	.LFE103
 8056 0148 00000000 		.4byte	.LFB104
 8057 014c 50000000 		.4byte	.LFE104
 8058 0150 00000000 		.4byte	.LFB105
 8059 0154 0C000000 		.4byte	.LFE105
 8060 0158 00000000 		.4byte	0
 8061 015c 00000000 		.4byte	0
 8062              		.section	.debug_line,"",%progbits
 8063              	.Ldebug_line0:
 8064 0000 64080000 		.section	.debug_str,"MS",%progbits,1
 8064      02006701 
 8064      00000201 
 8064      FB0E0D00 
 8064      01010101 
 8065              	.LASF99:
 8066 0000 696E6974 		.ascii	"initTrackU\000"
 8066      54726163 
 8066      6B5500
 8067              	.LASF56:
 8068 000b 67325F73 		.ascii	"g2_speed\000"
 8068      70656564 
 8068      00
 8069              	.LASF104:
 8070 0014 6368616E 		.ascii	"changeToRF\000"
 8070      6765546F 
 8070      524600
 8071              	.LASF37:
 8072 001f 51554144 		.ascii	"QUAD_STOP\000"
 8072      5F53544F 
 8072      5000
 8073              	.LASF63:
 8074 0029 62757474 		.ascii	"button\000"
 8074      6F6E00
 8075              	.LASF130:
 8076 0030 74735F73 		.ascii	"ts_speed\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 165


 8076      70656564 
 8076      00
 8077              	.LASF197:
 8078 0039 6C656674 		.ascii	"leftTurnCount\000"
 8078      5475726E 
 8078      436F756E 
 8078      7400
 8079              	.LASF168:
 8080 0047 696E6974 		.ascii	"initial_y_pos\000"
 8080      69616C5F 
 8080      795F706F 
 8080      7300
 8081              	.LASF65:
 8082 0055 6973725F 		.ascii	"isr_deadzone\000"
 8082      64656164 
 8082      7A6F6E65 
 8082      00
 8083              	.LASF144:
 8084 0062 64697265 		.ascii	"direction\000"
 8084      6374696F 
 8084      6E00
 8085              	.LASF189:
 8086 006c 70617468 		.ascii	"path\000"
 8086      00
 8087              	.LASF97:
 8088 0071 696E6974 		.ascii	"initBrake\000"
 8088      4272616B 
 8088      6500
 8089              	.LASF49:
 8090 007b 67305F64 		.ascii	"g0_direction\000"
 8090      69726563 
 8090      74696F6E 
 8090      00
 8091              	.LASF61:
 8092 0088 64697374 		.ascii	"distTurned\000"
 8092      5475726E 
 8092      656400
 8093              	.LASF176:
 8094 0093 656E7472 		.ascii	"entry\000"
 8094      7900
 8095              	.LASF9:
 8096 0099 6C6F6E67 		.ascii	"long long unsigned int\000"
 8096      206C6F6E 
 8096      6720756E 
 8096      7369676E 
 8096      65642069 
 8097              	.LASF192:
 8098 00b0 726F626F 		.ascii	"robot_direction\000"
 8098      745F6469 
 8098      72656374 
 8098      696F6E00 
 8099              	.LASF137:
 8100 00c0 666C6167 		.ascii	"flag_packet\000"
 8100      5F706163 
 8100      6B657400 
 8101              	.LASF90:
 8102 00cc 7475726E 		.ascii	"turnRight\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 166


 8102      52696768 
 8102      7400
 8103              	.LASF46:
 8104 00d6 67305F78 		.ascii	"g0_xpos\000"
 8104      706F7300 
 8105              	.LASF127:
 8106 00de 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8106      52784275 
 8106      66666572 
 8106      00
 8107              	.LASF160:
 8108 00eb 74617267 		.ascii	"target_distance_cm\000"
 8108      65745F64 
 8108      69737461 
 8108      6E63655F 
 8108      636D00
 8109              	.LASF129:
 8110 00fe 74735F75 		.ascii	"ts_update\000"
 8110      70646174 
 8110      6500
 8111              	.LASF35:
 8112 0108 555F5452 		.ascii	"U_TRACK\000"
 8112      41434B00 
 8113              	.LASF40:
 8114 0110 4D41505F 		.ascii	"MAP_TRAVERSE\000"
 8114      54524156 
 8114      45525345 
 8114      00
 8115              	.LASF83:
 8116 011d 72696768 		.ascii	"right\000"
 8116      7400
 8117              	.LASF123:
 8118 0123 73656E73 		.ascii	"sensorVals\000"
 8118      6F725661 
 8118      6C7300
 8119              	.LASF8:
 8120 012e 6C6F6E67 		.ascii	"long long int\000"
 8120      206C6F6E 
 8120      6720696E 
 8120      7400
 8121              	.LASF0:
 8122 013c 7369676E 		.ascii	"signed char\000"
 8122      65642063 
 8122      68617200 
 8123              	.LASF108:
 8124 0148 72696768 		.ascii	"rightSpeed\000"
 8124      74537065 
 8124      656400
 8125              	.LASF45:
 8126 0153 726F626F 		.ascii	"robot_orientation\000"
 8126      745F6F72 
 8126      69656E74 
 8126      6174696F 
 8126      6E00
 8127              	.LASF171:
 8128 0165 66726F6E 		.ascii	"frontSensors\000"
 8128      7453656E 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 167


 8128      736F7273 
 8128      00
 8129              	.LASF115:
 8130 0172 74726163 		.ascii	"trackLineU\000"
 8130      6B4C696E 
 8130      655500
 8131              	.LASF132:
 8132 017d 666C6167 		.ascii	"flag_ts_enc\000"
 8132      5F74735F 
 8132      656E6300 
 8133              	.LASF178:
 8134 0189 62756666 		.ascii	"buffer_state\000"
 8134      65725F73 
 8134      74617465 
 8134      00
 8135              	.LASF94:
 8136 0196 696E6974 		.ascii	"initTurnRight\000"
 8136      5475726E 
 8136      52696768 
 8136      7400
 8137              	.LASF154:
 8138 01a4 64656164 		.ascii	"deadzone\000"
 8138      7A6F6E65 
 8138      00
 8139              	.LASF138:
 8140 01ad 666C6167 		.ascii	"flag_KB_string\000"
 8140      5F4B425F 
 8140      73747269 
 8140      6E6700
 8141              	.LASF114:
 8142 01bc 74726163 		.ascii	"trackLineZ\000"
 8142      6B4C696E 
 8142      655A00
 8143              	.LASF91:
 8144 01c7 7475726E 		.ascii	"turnLeft\000"
 8144      4C656674 
 8144      00
 8145              	.LASF31:
 8146 01d0 73746174 		.ascii	"state\000"
 8146      6500
 8147              	.LASF4:
 8148 01d6 6C6F6E67 		.ascii	"long int\000"
 8148      20696E74 
 8148      00
 8149              	.LASF30:
 8150 01df 55545552 		.ascii	"UTURN\000"
 8150      4E00
 8151              	.LASF165:
 8152 01e5 71756164 		.ascii	"quad_per_cm\000"
 8152      5F706572 
 8152      5F636D00 
 8153              	.LASF15:
 8154 01f1 75696E74 		.ascii	"uint8\000"
 8154      3800
 8155              	.LASF118:
 8156 01f7 636F6E76 		.ascii	"converted_val\000"
 8156      65727465 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 168


 8156      645F7661 
 8156      6C00
 8157              	.LASF77:
 8158 0205 7365744C 		.ascii	"setLeftDir\000"
 8158      65667444 
 8158      697200
 8159              	.LASF21:
 8160 0210 646F7562 		.ascii	"double\000"
 8160      6C6500
 8161              	.LASF139:
 8162 0217 64617461 		.ascii	"dataready_flag\000"
 8162      72656164 
 8162      795F666C 
 8162      616700
 8163              	.LASF59:
 8164 0226 6164635F 		.ascii	"adc_isr\000"
 8164      69737200 
 8165              	.LASF128:
 8166 022e 74735F65 		.ascii	"ts_enc\000"
 8166      6E6300
 8167              	.LASF136:
 8168 0235 666C6167 		.ascii	"flag_rx\000"
 8168      5F727800 
 8169              	.LASF17:
 8170 023d 75696E74 		.ascii	"uint32\000"
 8170      333200
 8171              	.LASF73:
 8172 0244 6E657874 		.ascii	"nextInstruction\000"
 8172      496E7374 
 8172      72756374 
 8172      696F6E00 
 8173              	.LASF75:
 8174 0254 62797465 		.ascii	"byte_packet\000"
 8174      5F706163 
 8174      6B657400 
 8175              	.LASF175:
 8176 0260 6C696E65 		.ascii	"line\000"
 8176      00
 8177              	.LASF147:
 8178 0265 666C6167 		.ascii	"flag_calc_wheelspeed\000"
 8178      5F63616C 
 8178      635F7768 
 8178      65656C73 
 8178      70656564 
 8179              	.LASF57:
 8180 027a 67325F64 		.ascii	"g2_direction\000"
 8180      69726563 
 8180      74696F6E 
 8180      00
 8181              	.LASF172:
 8182 0287 70726576 		.ascii	"prevVoltage\000"
 8182      566F6C74 
 8182      61676500 
 8183              	.LASF148:
 8184 0293 71756164 		.ascii	"quad_count1\000"
 8184      5F636F75 
 8184      6E743100 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 169


 8185              	.LASF149:
 8186 029f 71756164 		.ascii	"quad_count2\000"
 8186      5F636F75 
 8186      6E743200 
 8187              	.LASF159:
 8188 02ab 72696768 		.ascii	"rightSpeedLimit\000"
 8188      74537065 
 8188      65644C69 
 8188      6D697400 
 8189              	.LASF196:
 8190 02bb 696E7374 		.ascii	"instructionLength\000"
 8190      72756374 
 8190      696F6E4C 
 8190      656E6774 
 8190      6800
 8191              	.LASF39:
 8192 02cd 44455354 		.ascii	"DEST_TEST\000"
 8192      5F544553 
 8192      5400
 8193              	.LASF182:
 8194 02d7 74726163 		.ascii	"track_mode\000"
 8194      6B5F6D6F 
 8194      646500
 8195              	.LASF25:
 8196 02e2 52545552 		.ascii	"RTURN\000"
 8196      4E00
 8197              	.LASF191:
 8198 02e8 64657374 		.ascii	"destination\000"
 8198      696E6174 
 8198      696F6E00 
 8199              	.LASF60:
 8200 02f4 6973725F 		.ascii	"isr_quad1\000"
 8200      71756164 
 8200      3100
 8201              	.LASF10:
 8202 02fe 756E7369 		.ascii	"unsigned int\000"
 8202      676E6564 
 8202      20696E74 
 8202      00
 8203              	.LASF157:
 8204 030b 72696768 		.ascii	"right_duty_cycle\000"
 8204      745F6475 
 8204      74795F63 
 8204      79636C65 
 8204      00
 8205              	.LASF202:
 8206 031c 64617461 		.ascii	"data_main\000"
 8206      5F6D6169 
 8206      6E00
 8207              	.LASF143:
 8208 0326 6164635F 		.ascii	"adc_result\000"
 8208      72657375 
 8208      6C7400
 8209              	.LASF187:
 8210 0331 73656E73 		.ascii	"sensorsDisabled\000"
 8210      6F727344 
 8210      69736162 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 170


 8210      6C656400 
 8211              	.LASF142:
 8212 0341 666C6167 		.ascii	"flag_receive_ADC\000"
 8212      5F726563 
 8212      65697665 
 8212      5F414443 
 8212      00
 8213              	.LASF7:
 8214 0352 6C6F6E67 		.ascii	"long unsigned int\000"
 8214      20756E73 
 8214      69676E65 
 8214      6420696E 
 8214      7400
 8215              	.LASF98:
 8216 0364 696E6974 		.ascii	"initTrack\000"
 8216      54726163 
 8216      6B00
 8217              	.LASF95:
 8218 036e 696E6974 		.ascii	"initTurnU\000"
 8218      5475726E 
 8218      5500
 8219              	.LASF117:
 8220 0378 7363616C 		.ascii	"scalingFactor\000"
 8220      696E6746 
 8220      6163746F 
 8220      7200
 8221              	.LASF194:
 8222 0386 666F6F64 		.ascii	"food_length\000"
 8222      5F6C656E 
 8222      67746800 
 8223              	.LASF3:
 8224 0392 73686F72 		.ascii	"short unsigned int\000"
 8224      7420756E 
 8224      7369676E 
 8224      65642069 
 8224      6E7400
 8225              	.LASF81:
 8226 03a5 73657453 		.ascii	"setSpeed\000"
 8226      70656564 
 8226      00
 8227              	.LASF18:
 8228 03ae 696E7438 		.ascii	"int8\000"
 8228      00
 8229              	.LASF23:
 8230 03b3 44524956 		.ascii	"DRIVE\000"
 8230      4500
 8231              	.LASF93:
 8232 03b9 696E6974 		.ascii	"initTurnLeft\000"
 8232      5475726E 
 8232      4C656674 
 8232      00
 8233              	.LASF105:
 8234 03c6 6368616E 		.ascii	"changeToBT\000"
 8234      6765546F 
 8234      425400
 8235              	.LASF27:
 8236 03d1 54524143 		.ascii	"TRACKING\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 171


 8236      4B494E47 
 8236      00
 8237              	.LASF186:
 8238 03da 696E7374 		.ascii	"instructionCount\000"
 8238      72756374 
 8238      696F6E43 
 8238      6F756E74 
 8238      00
 8239              	.LASF70:
 8240 03eb 6C656674 		.ascii	"leftOn\000"
 8240      4F6E00
 8241              	.LASF124:
 8242 03f2 75736250 		.ascii	"usbPutString\000"
 8242      75745374 
 8242      72696E67 
 8242      00
 8243              	.LASF62:
 8244 03ff 53746F70 		.ascii	"Stop_on_line\000"
 8244      5F6F6E5F 
 8244      6C696E65 
 8244      00
 8245              	.LASF34:
 8246 040c 43555256 		.ascii	"CURVE_TRACK\000"
 8246      455F5452 
 8246      41434B00 
 8247              	.LASF5:
 8248 0418 5F5F696E 		.ascii	"__int32_t\000"
 8248      7433325F 
 8248      7400
 8249              	.LASF36:
 8250 0422 53515541 		.ascii	"SQUARE_TRACK\000"
 8250      52455F54 
 8250      5241434B 
 8250      00
 8251              	.LASF131:
 8252 042f 74735F64 		.ascii	"ts_display\000"
 8252      6973706C 
 8252      617900
 8253              	.LASF126:
 8254 043a 75617274 		.ascii	"uart_set_PWM\000"
 8254      5F736574 
 8254      5F50574D 
 8254      00
 8255              	.LASF198:
 8256 0447 72696768 		.ascii	"rightTurnCount\000"
 8256      74547572 
 8256      6E436F75 
 8256      6E7400
 8257              	.LASF66:
 8258 0456 6973725F 		.ascii	"isr_turn_timer\000"
 8258      7475726E 
 8258      5F74696D 
 8258      657200
 8259              	.LASF111:
 8260 0465 696E7465 		.ascii	"interCalc\000"
 8260      7243616C 
 8260      6300
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 172


 8261              	.LASF134:
 8262 046f 666C6167 		.ascii	"flag_ts_speed\000"
 8262      5F74735F 
 8262      73706565 
 8262      6400
 8263              	.LASF41:
 8264 047d 72737369 		.ascii	"rssi\000"
 8264      00
 8265              	.LASF52:
 8266 0482 67315F73 		.ascii	"g1_speed\000"
 8266      70656564 
 8266      00
 8267              	.LASF11:
 8268 048b 73697A65 		.ascii	"sizetype\000"
 8268      74797065 
 8268      00
 8269              	.LASF141:
 8270 0494 666C6167 		.ascii	"flag_print_rf\000"
 8270      5F707269 
 8270      6E745F72 
 8270      6600
 8271              	.LASF179:
 8272 04a2 73797374 		.ascii	"system_state\000"
 8272      656D5F73 
 8272      74617465 
 8272      00
 8273              	.LASF51:
 8274 04af 67315F79 		.ascii	"g1_ypos\000"
 8274      706F7300 
 8275              	.LASF53:
 8276 04b7 67315F64 		.ascii	"g1_direction\000"
 8276      69726563 
 8276      74696F6E 
 8276      00
 8277              	.LASF106:
 8278 04c4 51756164 		.ascii	"Quad_Dec_response\000"
 8278      5F446563 
 8278      5F726573 
 8278      706F6E73 
 8278      6500
 8279              	.LASF24:
 8280 04d6 4C545552 		.ascii	"LTURN\000"
 8280      4E00
 8281              	.LASF169:
 8282 04dc 6272616B 		.ascii	"brakeFlag\000"
 8282      65466C61 
 8282      6700
 8283              	.LASF55:
 8284 04e6 67325F79 		.ascii	"g2_ypos\000"
 8284      706F7300 
 8285              	.LASF119:
 8286 04ee 72657375 		.ascii	"result_str\000"
 8286      6C745F73 
 8286      747200
 8287              	.LASF180:
 8288 04f9 70726576 		.ascii	"prev_movement_state\000"
 8288      5F6D6F76 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 173


 8288      656D656E 
 8288      745F7374 
 8288      61746500 
 8289              	.LASF199:
 8290 050d 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 8290      4320342E 
 8290      392E3320 
 8290      32303135 
 8290      30333033 
 8291 0540 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 8291      20726576 
 8291      6973696F 
 8291      6E203232 
 8291      31323230 
 8292 0573 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8292      66756E63 
 8292      74696F6E 
 8292      2D736563 
 8292      74696F6E 
 8293              	.LASF103:
 8294 059b 42545F72 		.ascii	"BT_rxInt\000"
 8294      78496E74 
 8294      00
 8295              	.LASF162:
 8296 05a4 74617267 		.ascii	"target_distance_quad\000"
 8296      65745F64 
 8296      69737461 
 8296      6E63655F 
 8296      71756164 
 8297              	.LASF140:
 8298 05b9 666C6167 		.ascii	"flag_rf_transmission_active\000"
 8298      5F72665F 
 8298      7472616E 
 8298      736D6973 
 8298      73696F6E 
 8299              	.LASF76:
 8300 05d5 73747269 		.ascii	"string_packet\000"
 8300      6E675F70 
 8300      61636B65 
 8300      7400
 8301              	.LASF20:
 8302 05e3 666C6F61 		.ascii	"float\000"
 8302      7400
 8303              	.LASF28:
 8304 05e9 54524143 		.ascii	"TRACKING_U\000"
 8304      4B494E47 
 8304      5F5500
 8305              	.LASF167:
 8306 05f4 696E6974 		.ascii	"initial_x_pos\000"
 8306      69616C5F 
 8306      785F706F 
 8306      7300
 8307              	.LASF89:
 8308 0602 64726976 		.ascii	"driveForwards\000"
 8308      65466F72 
 8308      77617264 
 8308      7300
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 174


 8309              	.LASF121:
 8310 0610 7072696E 		.ascii	"printString\000"
 8310      74537472 
 8310      696E6700 
 8311              	.LASF170:
 8312 061c 706F7274 		.ascii	"portOpen\000"
 8312      4F70656E 
 8312      00
 8313              	.LASF78:
 8314 0625 73657452 		.ascii	"setRightDir\000"
 8314      69676874 
 8314      44697200 
 8315              	.LASF150:
 8316 0631 6C617374 		.ascii	"last_quad_count1\000"
 8316      5F717561 
 8316      645F636F 
 8316      756E7431 
 8316      00
 8317              	.LASF151:
 8318 0642 6C617374 		.ascii	"last_quad_count2\000"
 8318      5F717561 
 8318      645F636F 
 8318      756E7432 
 8318      00
 8319              	.LASF29:
 8320 0653 54524143 		.ascii	"TRACKING_SOFT\000"
 8320      4B494E47 
 8320      5F534F46 
 8320      5400
 8321              	.LASF145:
 8322 0661 42494E5F 		.ascii	"BIN_ENABLED\000"
 8322      454E4142 
 8322      4C454400 
 8323              	.LASF13:
 8324 066d 696E7433 		.ascii	"int32_t\000"
 8324      325F7400 
 8325              	.LASF1:
 8326 0675 756E7369 		.ascii	"unsigned char\000"
 8326      676E6564 
 8326      20636861 
 8326      7200
 8327              	.LASF16:
 8328 0683 75696E74 		.ascii	"uint16\000"
 8328      313600
 8329              	.LASF38:
 8330 068a 52465F53 		.ascii	"RF_STOP\000"
 8330      544F5000 
 8331              	.LASF88:
 8332 0692 6272616B 		.ascii	"brakeMotor\000"
 8332      654D6F74 
 8332      6F7200
 8333              	.LASF54:
 8334 069d 67325F78 		.ascii	"g2_xpos\000"
 8334      706F7300 
 8335              	.LASF112:
 8336 06a5 6E657874 		.ascii	"nextSpeed\000"
 8336      53706565 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 175


 8336      6400
 8337              	.LASF2:
 8338 06af 73686F72 		.ascii	"short int\000"
 8338      7420696E 
 8338      7400
 8339              	.LASF33:
 8340 06b9 4E4F5F54 		.ascii	"NO_TRACK\000"
 8340      5241434B 
 8340      00
 8341              	.LASF109:
 8342 06c2 7363616C 		.ascii	"scalingLeft\000"
 8342      696E674C 
 8342      65667400 
 8343              	.LASF79:
 8344 06ce 68616E64 		.ascii	"handle_rx_binary\000"
 8344      6C655F72 
 8344      785F6269 
 8344      6E617279 
 8344      00
 8345              	.LASF101:
 8346 06df 7278496E 		.ascii	"rxInt\000"
 8346      7400
 8347              	.LASF183:
 8348 06e5 62797465 		.ascii	"byteCount\000"
 8348      436F756E 
 8348      7400
 8349              	.LASF64:
 8350 06ef 6973725F 		.ascii	"isr_adcTimer\000"
 8350      61646354 
 8350      696D6572 
 8350      00
 8351              	.LASF113:
 8352 06fc 74726163 		.ascii	"trackLine\000"
 8352      6B4C696E 
 8352      6500
 8353              	.LASF87:
 8354 0706 6272616B 		.ascii	"brakeRight\000"
 8354      65526967 
 8354      687400
 8355              	.LASF135:
 8356 0711 666C6167 		.ascii	"flag_ts_display\000"
 8356      5F74735F 
 8356      64697370 
 8356      6C617900 
 8357              	.LASF26:
 8358 0721 53544F50 		.ascii	"STOPPED\000"
 8358      50454400 
 8359              	.LASF74:
 8360 0729 7061636B 		.ascii	"packet_bytes\000"
 8360      65745F62 
 8360      79746573 
 8360      00
 8361              	.LASF22:
 8362 0736 6C6F6E67 		.ascii	"long double\000"
 8362      20646F75 
 8362      626C6500 
 8363              	.LASF193:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 176


 8364 0742 74726163 		.ascii	"tracked_direction\000"
 8364      6B65645F 
 8364      64697265 
 8364      6374696F 
 8364      6E00
 8365              	.LASF12:
 8366 0754 63686172 		.ascii	"char\000"
 8366      00
 8367              	.LASF32:
 8368 0759 6D6F6465 		.ascii	"mode\000"
 8368      00
 8369              	.LASF195:
 8370 075e 696E7374 		.ascii	"instructions\000"
 8370      72756374 
 8370      696F6E73 
 8370      00
 8371              	.LASF42:
 8372 076b 696E6465 		.ascii	"index\000"
 8372      7800
 8373              	.LASF188:
 8374 0771 666F6F64 		.ascii	"food_list\000"
 8374      5F6C6973 
 8374      7400
 8375              	.LASF68:
 8376 077b 61637469 		.ascii	"actionDebounce\000"
 8376      6F6E4465 
 8376      626F756E 
 8376      636500
 8377              	.LASF107:
 8378 078a 6C656674 		.ascii	"leftSpeed\000"
 8378      53706565 
 8378      6400
 8379              	.LASF6:
 8380 0794 5F5F7569 		.ascii	"__uint32_t\000"
 8380      6E743332 
 8380      5F7400
 8381              	.LASF133:
 8382 079f 666C6167 		.ascii	"flag_ts_update\000"
 8382      5F74735F 
 8382      75706461 
 8382      746500
 8383              	.LASF174:
 8384 07ae 64697370 		.ascii	"displaystring\000"
 8384      6C617973 
 8384      7472696E 
 8384      6700
 8385              	.LASF47:
 8386 07bc 67305F79 		.ascii	"g0_ypos\000"
 8386      706F7300 
 8387              	.LASF158:
 8388 07c4 6C656674 		.ascii	"leftSpeedLimit\000"
 8388      53706565 
 8388      644C696D 
 8388      697400
 8389              	.LASF43:
 8390 07d3 726F626F 		.ascii	"robot_xpos\000"
 8390      745F7870 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 177


 8390      6F7300
 8391              	.LASF92:
 8392 07de 7475726E 		.ascii	"turnU\000"
 8392      5500
 8393              	.LASF184:
 8394 07e4 7061636B 		.ascii	"packet\000"
 8394      657400
 8395              	.LASF85:
 8396 07eb 636F756E 		.ascii	"countsRight\000"
 8396      74735269 
 8396      67687400 
 8397              	.LASF120:
 8398 07f7 7072696E 		.ascii	"print_RF\000"
 8398      745F5246 
 8398      00
 8399              	.LASF86:
 8400 0800 6272616B 		.ascii	"brakeLeft\000"
 8400      654C6566 
 8400      7400
 8401              	.LASF177:
 8402 080a 75736242 		.ascii	"usbBuffer\000"
 8402      75666665 
 8402      7200
 8403              	.LASF50:
 8404 0814 67315F78 		.ascii	"g1_xpos\000"
 8404      706F7300 
 8405              	.LASF102:
 8406 081c 72665F63 		.ascii	"rf_char\000"
 8406      68617200 
 8407              	.LASF166:
 8408 0824 696E6974 		.ascii	"initial_pos_valid\000"
 8408      69616C5F 
 8408      706F735F 
 8408      76616C69 
 8408      6400
 8409              	.LASF80:
 8410 0836 72657665 		.ascii	"reverseDirection\000"
 8410      72736544 
 8410      69726563 
 8410      74696F6E 
 8410      00
 8411              	.LASF173:
 8412 0847 70726576 		.ascii	"prevVoltage2\000"
 8412      566F6C74 
 8412      61676532 
 8412      00
 8413              	.LASF96:
 8414 0854 696E6974 		.ascii	"initForward\000"
 8414      466F7277 
 8414      61726400 
 8415              	.LASF14:
 8416 0860 75696E74 		.ascii	"uint32_t\000"
 8416      33325F74 
 8416      00
 8417              	.LASF156:
 8418 0869 6C656674 		.ascii	"left_duty_cycle\000"
 8418      5F647574 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 178


 8418      795F6379 
 8418      636C6500 
 8419              	.LASF72:
 8420 0879 6E657874 		.ascii	"nextStepDist\000"
 8420      53746570 
 8420      44697374 
 8420      00
 8421              	.LASF161:
 8422 0886 61636375 		.ascii	"accum_dist\000"
 8422      6D5F6469 
 8422      737400
 8423              	.LASF58:
 8424 0891 42545F74 		.ascii	"BT_txInt\000"
 8424      78496E74 
 8424      00
 8425              	.LASF181:
 8426 089a 6D6F7665 		.ascii	"movement_state\000"
 8426      6D656E74 
 8426      5F737461 
 8426      746500
 8427              	.LASF71:
 8428 08a9 72696768 		.ascii	"rightOn\000"
 8428      744F6E00 
 8429              	.LASF146:
 8430 08b1 42545F45 		.ascii	"BT_ENABLED\000"
 8430      4E41424C 
 8430      454400
 8431              	.LASF125:
 8432 08bc 75736250 		.ascii	"usbPutChar\000"
 8432      75744368 
 8432      617200
 8433              	.LASF100:
 8434 08c7 696E6974 		.ascii	"inittrackLineZ\000"
 8434      74726163 
 8434      6B4C696E 
 8434      655A00
 8435              	.LASF110:
 8436 08d6 7363616C 		.ascii	"scalingRight\000"
 8436      696E6752 
 8436      69676874 
 8436      00
 8437              	.LASF163:
 8438 08e3 72656163 		.ascii	"reached_target\000"
 8438      6865645F 
 8438      74617267 
 8438      657400
 8439              	.LASF44:
 8440 08f2 726F626F 		.ascii	"robot_ypos\000"
 8440      745F7970 
 8440      6F7300
 8441              	.LASF19:
 8442 08fd 696E7431 		.ascii	"int16\000"
 8442      3600
 8443              	.LASF84:
 8444 0903 636F756E 		.ascii	"countsLeft\000"
 8444      74734C65 
 8444      667400
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 179


 8445              	.LASF155:
 8446 090e 73746172 		.ascii	"start_turn_count\000"
 8446      745F7475 
 8446      726E5F63 
 8446      6F756E74 
 8446      00
 8447              	.LASF185:
 8448 091f 73706565 		.ascii	"speed\000"
 8448      6400
 8449              	.LASF164:
 8450 0925 6F766572 		.ascii	"overshot_target\000"
 8450      73686F74 
 8450      5F746172 
 8450      67657400 
 8451              	.LASF69:
 8452 0935 6E657874 		.ascii	"nextStep\000"
 8452      53746570 
 8452      00
 8453              	.LASF200:
 8454 093e 2E5C6D61 		.ascii	".\\main.c\000"
 8454      696E2E63 
 8454      00
 8455              	.LASF152:
 8456 0947 71756164 		.ascii	"quad_diff1\000"
 8456      5F646966 
 8456      663100
 8457              	.LASF153:
 8458 0952 71756164 		.ascii	"quad_diff2\000"
 8458      5F646966 
 8458      663200
 8459              	.LASF190:
 8460 095d 73746172 		.ascii	"start\000"
 8460      7400
 8461              	.LASF67:
 8462 0963 6D61696E 		.ascii	"main\000"
 8462      00
 8463              	.LASF82:
 8464 0968 6C656674 		.ascii	"left\000"
 8464      00
 8465              	.LASF48:
 8466 096d 67305F73 		.ascii	"g0_speed\000"
 8466      70656564 
 8466      00
 8467              	.LASF201:
 8468 0976 433A5C55 		.ascii	"C:\\Users\\Logan\\Desktop\\repos\\CS301-Team-Repo\\"
 8468      73657273 
 8468      5C4C6F67 
 8468      616E5C44 
 8468      65736B74 
 8469 09a3 43533330 		.ascii	"CS301_Class.cydsn\000"
 8469      315F436C 
 8469      6173732E 
 8469      63796473 
 8469      6E00
 8470              	.LASF116:
 8471 09b5 7072696E 		.ascii	"print_ADC\000"
 8471      745F4144 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccrUV3rj.s 			page 180


 8471      4300
 8472              	.LASF122:
 8473 09bf 72656164 		.ascii	"readFrontSensors\000"
 8473      46726F6E 
 8473      7453656E 
 8473      736F7273 
 8473      00
 8474              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
