ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	ts
  19              		.bss
  20              		.type	ts, %object
  21              		.size	ts, 1
  22              	ts:
  23 0000 00       		.space	1
  24              		.global	ts_enc
  25 0001 00       		.align	1
  26              		.type	ts_enc, %object
  27              		.size	ts_enc, 2
  28              	ts_enc:
  29 0002 0000     		.space	2
  30              		.global	ts_update
  31              		.align	1
  32              		.type	ts_update, %object
  33              		.size	ts_update, 2
  34              	ts_update:
  35 0004 0000     		.space	2
  36              		.global	ts_speed
  37              		.align	1
  38              		.type	ts_speed, %object
  39              		.size	ts_speed, 2
  40              	ts_speed:
  41 0006 0000     		.space	2
  42              		.global	ts_display
  43              		.align	1
  44              		.type	ts_display, %object
  45              		.size	ts_display, 2
  46              	ts_display:
  47 0008 0000     		.space	2
  48              		.global	flag_ts_enc
  49              		.type	flag_ts_enc, %object
  50              		.size	flag_ts_enc, 1
  51              	flag_ts_enc:
  52 000a 00       		.space	1
  53              		.global	flag_ts_update
  54              		.type	flag_ts_update, %object
  55              		.size	flag_ts_update, 1
  56              	flag_ts_update:
  57 000b 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 2


  58              		.global	flag_ts_speed
  59              		.type	flag_ts_speed, %object
  60              		.size	flag_ts_speed, 1
  61              	flag_ts_speed:
  62 000c 00       		.space	1
  63              		.global	flag_ts_display
  64              		.type	flag_ts_display, %object
  65              		.size	flag_ts_display, 1
  66              	flag_ts_display:
  67 000d 00       		.space	1
  68              		.global	flag_rx
  69              		.type	flag_rx, %object
  70              		.size	flag_rx, 1
  71              	flag_rx:
  72 000e 00       		.space	1
  73              		.global	flag_packet
  74              		.type	flag_packet, %object
  75              		.size	flag_packet, 1
  76              	flag_packet:
  77 000f 00       		.space	1
  78              		.global	flag_KB_string
  79              		.type	flag_KB_string, %object
  80              		.size	flag_KB_string, 1
  81              	flag_KB_string:
  82 0010 00       		.space	1
  83              		.global	dataready_flag
  84              		.type	dataready_flag, %object
  85              		.size	dataready_flag, 1
  86              	dataready_flag:
  87 0011 00       		.space	1
  88              		.global	flag_rf_transmission_active
  89              		.data
  90              		.type	flag_rf_transmission_active, %object
  91              		.size	flag_rf_transmission_active, 1
  92              	flag_rf_transmission_active:
  93 0000 0A       		.byte	10
  94              		.global	flag_print_rf
  95              		.bss
  96              		.type	flag_print_rf, %object
  97              		.size	flag_print_rf, 1
  98              	flag_print_rf:
  99 0012 00       		.space	1
 100              		.global	flag_receive_ADC
 101              		.type	flag_receive_ADC, %object
 102              		.size	flag_receive_ADC, 1
 103              	flag_receive_ADC:
 104 0013 00       		.space	1
 105              		.comm	adc_result,2,2
 106              		.global	direction
 107              		.type	direction, %object
 108              		.size	direction, 1
 109              	direction:
 110 0014 00       		.space	1
 111              		.global	BIN_ENABLED
 112              		.type	BIN_ENABLED, %object
 113              		.size	BIN_ENABLED, 1
 114              	BIN_ENABLED:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 3


 115 0015 00       		.space	1
 116              		.global	BT_ENABLED
 117              		.data
 118              		.type	BT_ENABLED, %object
 119              		.size	BT_ENABLED, 1
 120              	BT_ENABLED:
 121 0001 01       		.byte	1
 122              		.global	flag_calc_wheelspeed
 123              		.bss
 124              		.type	flag_calc_wheelspeed, %object
 125              		.size	flag_calc_wheelspeed, 1
 126              	flag_calc_wheelspeed:
 127 0016 00       		.space	1
 128              		.global	quad_count1
 129 0017 00       		.align	1
 130              		.type	quad_count1, %object
 131              		.size	quad_count1, 2
 132              	quad_count1:
 133 0018 0000     		.space	2
 134              		.global	quad_count2
 135              		.align	1
 136              		.type	quad_count2, %object
 137              		.size	quad_count2, 2
 138              	quad_count2:
 139 001a 0000     		.space	2
 140              		.global	last_quad_count1
 141              		.align	1
 142              		.type	last_quad_count1, %object
 143              		.size	last_quad_count1, 2
 144              	last_quad_count1:
 145 001c 0000     		.space	2
 146              		.global	last_quad_count2
 147              		.align	1
 148              		.type	last_quad_count2, %object
 149              		.size	last_quad_count2, 2
 150              	last_quad_count2:
 151 001e 0000     		.space	2
 152              		.global	quad_diff1
 153              		.align	1
 154              		.type	quad_diff1, %object
 155              		.size	quad_diff1, 2
 156              	quad_diff1:
 157 0020 0000     		.space	2
 158              		.global	quad_diff2
 159              		.align	1
 160              		.type	quad_diff2, %object
 161              		.size	quad_diff2, 2
 162              	quad_diff2:
 163 0022 0000     		.space	2
 164              		.global	deadzone
 165              		.type	deadzone, %object
 166              		.size	deadzone, 1
 167              	deadzone:
 168 0024 00       		.space	1
 169              		.global	start_turn_count
 170 0025 00       		.align	1
 171              		.type	start_turn_count, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 4


 172              		.size	start_turn_count, 2
 173              	start_turn_count:
 174 0026 0000     		.space	2
 175              		.global	left_duty_cycle
 176              		.align	1
 177              		.type	left_duty_cycle, %object
 178              		.size	left_duty_cycle, 2
 179              	left_duty_cycle:
 180 0028 0000     		.space	2
 181              		.global	right_duty_cycle
 182              		.align	1
 183              		.type	right_duty_cycle, %object
 184              		.size	right_duty_cycle, 2
 185              	right_duty_cycle:
 186 002a 0000     		.space	2
 187              		.global	leftSpeedLimit
 188              		.align	1
 189              		.type	leftSpeedLimit, %object
 190              		.size	leftSpeedLimit, 2
 191              	leftSpeedLimit:
 192 002c 0000     		.space	2
 193              		.global	rightSpeedLimit
 194              		.align	1
 195              		.type	rightSpeedLimit, %object
 196              		.size	rightSpeedLimit, 2
 197              	rightSpeedLimit:
 198 002e 0000     		.space	2
 199              		.global	target_distance_cm
 200              		.data
 201              		.align	1
 202              		.type	target_distance_cm, %object
 203              		.size	target_distance_cm, 2
 204              	target_distance_cm:
 205 0002 6400     		.short	100
 206              		.global	accum_dist
 207              		.bss
 208              		.align	1
 209              		.type	accum_dist, %object
 210              		.size	accum_dist, 2
 211              	accum_dist:
 212 0030 0000     		.space	2
 213              		.global	target_distance_quad
 214              		.align	1
 215              		.type	target_distance_quad, %object
 216              		.size	target_distance_quad, 2
 217              	target_distance_quad:
 218 0032 0000     		.space	2
 219              		.global	reached_target
 220              		.type	reached_target, %object
 221              		.size	reached_target, 1
 222              	reached_target:
 223 0034 00       		.space	1
 224              		.global	overshot_target
 225              		.type	overshot_target, %object
 226              		.size	overshot_target, 1
 227              	overshot_target:
 228 0035 00       		.space	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 5


 229              		.global	quad_per_cm
 230              		.data
 231              		.align	2
 232              		.type	quad_per_cm, %object
 233              		.size	quad_per_cm, 4
 234              	quad_per_cm:
 235 0004 F0A73241 		.word	1093838832
 236              		.global	initial_pos_valid
 237              		.bss
 238              		.type	initial_pos_valid, %object
 239              		.size	initial_pos_valid, 1
 240              	initial_pos_valid:
 241 0036 00       		.space	1
 242              		.global	initial_x_pos
 243 0037 00       		.align	1
 244              		.type	initial_x_pos, %object
 245              		.size	initial_x_pos, 2
 246              	initial_x_pos:
 247 0038 0000     		.space	2
 248              		.global	initial_y_pos
 249              		.align	1
 250              		.type	initial_y_pos, %object
 251              		.size	initial_y_pos, 2
 252              	initial_y_pos:
 253 003a 0000     		.space	2
 254              		.comm	brakeFlag,1,1
 255              		.global	portOpen
 256              		.data
 257              		.type	portOpen, %object
 258              		.size	portOpen, 1
 259              	portOpen:
 260 0008 01       		.byte	1
 261              		.comm	frontSensors,5,4
 262              		.comm	leftOn,1,1
 263              		.comm	rightOn,1,1
 264              		.comm	prevVoltage,2,2
 265              		.comm	prevVoltage2,2,2
 266              		.global	displaystring
 267 0009 000000   		.align	2
 268              		.type	displaystring, %object
 269              		.size	displaystring, 64
 270              	displaystring:
 271 000c 43533330 		.ascii	"CS301 2016\012\000"
 271      31203230 
 271      31360A00 
 272 0018 00000000 		.space	52
 272      00000000 
 272      00000000 
 272      00000000 
 272      00000000 
 273              		.comm	line,64,4
 274              		.comm	entry,64,4
 275              		.comm	usbBuffer,64,4
 276              		.comm	buffer_state,32,4
 277              		.comm	system_state,32,4
 278              		.global	prev_movement_state
 279              		.type	prev_movement_state, %object
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 6


 280              		.size	prev_movement_state, 1
 281              	prev_movement_state:
 282 004c 03       		.byte	3
 283              		.global	movement_state
 284              		.type	movement_state, %object
 285              		.size	movement_state, 1
 286              	movement_state:
 287 004d 03       		.byte	3
 288              		.global	track_mode
 289              		.bss
 290              		.type	track_mode, %object
 291              		.size	track_mode, 1
 292              	track_mode:
 293 003c 00       		.space	1
 294              		.global	byteCount
 295              		.type	byteCount, %object
 296              		.size	byteCount, 1
 297              	byteCount:
 298 003d 00       		.space	1
 299              		.comm	packet,2,4
 300              		.global	speed
 301              		.data
 302 004e 0000     		.align	3
 303              		.type	speed, %object
 304              		.size	speed, 8
 305              	speed:
 306 0050 00000000 		.word	0
 307 0054 00002E40 		.word	1076756480
 308              		.comm	tracked_direction,4,4
 309              		.global	instructions
 310              		.bss
 311 003e 0000     		.align	2
 312              		.type	instructions, %object
 313              		.size	instructions, 600
 314              	instructions:
 315 0040 00000000 		.space	600
 315      00000000 
 315      00000000 
 315      00000000 
 315      00000000 
 316              		.global	instructionCount
 317              		.align	1
 318              		.type	instructionCount, %object
 319              		.size	instructionCount, 2
 320              	instructionCount:
 321 0298 0000     		.space	2
 322              		.global	instructionLength
 323              		.align	1
 324              		.type	instructionLength, %object
 325              		.size	instructionLength, 2
 326              	instructionLength:
 327 029a 0000     		.space	2
 328              		.global	sensorsDisabled
 329              		.align	2
 330              		.type	sensorsDisabled, %object
 331              		.size	sensorsDisabled, 4
 332              	sensorsDisabled:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 7


 333 029c 00000000 		.space	4
 334              		.global	robot_direction
 335              		.data
 336              		.align	2
 337              		.type	robot_direction, %object
 338              		.size	robot_direction, 4
 339              	robot_direction:
 340 0058 02000000 		.word	2
 341              		.global	path
 342              		.bss
 343              		.align	2
 344              		.type	path, %object
 345              		.size	path, 7200
 346              	path:
 347 02a0 00000000 		.space	7200
 347      00000000 
 347      00000000 
 347      00000000 
 347      00000000 
 348              		.global	start
 349              		.data
 350              		.align	2
 351              		.type	start, %object
 352              		.size	start, 8
 353              	start:
 354 005c 01000000 		.word	1
 355 0060 01000000 		.word	1
 356              		.global	destination
 357              		.align	2
 358              		.type	destination, %object
 359              		.size	destination, 8
 360              	destination:
 361 0064 0E000000 		.word	14
 362 0068 12000000 		.word	18
 363              		.global	map
 364              		.align	2
 365              		.type	map, %object
 366              		.size	map, 1140
 367              	map:
 368 006c 01000000 		.word	1
 369 0070 01000000 		.word	1
 370 0074 01000000 		.word	1
 371 0078 01000000 		.word	1
 372 007c 01000000 		.word	1
 373 0080 01000000 		.word	1
 374 0084 01000000 		.word	1
 375 0088 01000000 		.word	1
 376 008c 01000000 		.word	1
 377 0090 01000000 		.word	1
 378 0094 01000000 		.word	1
 379 0098 01000000 		.word	1
 380 009c 01000000 		.word	1
 381 00a0 01000000 		.word	1
 382 00a4 01000000 		.word	1
 383 00a8 01000000 		.word	1
 384 00ac 01000000 		.word	1
 385 00b0 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 8


 386 00b4 01000000 		.word	1
 387 00b8 01000000 		.word	1
 388 00bc 00000000 		.word	0
 389 00c0 00000000 		.word	0
 390 00c4 00000000 		.word	0
 391 00c8 00000000 		.word	0
 392 00cc 00000000 		.word	0
 393 00d0 00000000 		.word	0
 394 00d4 00000000 		.word	0
 395 00d8 00000000 		.word	0
 396 00dc 00000000 		.word	0
 397 00e0 00000000 		.word	0
 398 00e4 00000000 		.word	0
 399 00e8 00000000 		.word	0
 400 00ec 00000000 		.word	0
 401 00f0 00000000 		.word	0
 402 00f4 00000000 		.word	0
 403 00f8 00000000 		.word	0
 404 00fc 00000000 		.word	0
 405 0100 01000000 		.word	1
 406 0104 01000000 		.word	1
 407 0108 01000000 		.word	1
 408 010c 00000000 		.word	0
 409 0110 01000000 		.word	1
 410 0114 01000000 		.word	1
 411 0118 01000000 		.word	1
 412 011c 01000000 		.word	1
 413 0120 01000000 		.word	1
 414 0124 01000000 		.word	1
 415 0128 01000000 		.word	1
 416 012c 01000000 		.word	1
 417 0130 01000000 		.word	1
 418 0134 01000000 		.word	1
 419 0138 00000000 		.word	0
 420 013c 01000000 		.word	1
 421 0140 01000000 		.word	1
 422 0144 00000000 		.word	0
 423 0148 01000000 		.word	1
 424 014c 01000000 		.word	1
 425 0150 01000000 		.word	1
 426 0154 01000000 		.word	1
 427 0158 00000000 		.word	0
 428 015c 01000000 		.word	1
 429 0160 00000000 		.word	0
 430 0164 00000000 		.word	0
 431 0168 00000000 		.word	0
 432 016c 00000000 		.word	0
 433 0170 01000000 		.word	1
 434 0174 01000000 		.word	1
 435 0178 00000000 		.word	0
 436 017c 00000000 		.word	0
 437 0180 00000000 		.word	0
 438 0184 00000000 		.word	0
 439 0188 01000000 		.word	1
 440 018c 01000000 		.word	1
 441 0190 00000000 		.word	0
 442 0194 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 9


 443 0198 01000000 		.word	1
 444 019c 01000000 		.word	1
 445 01a0 01000000 		.word	1
 446 01a4 00000000 		.word	0
 447 01a8 01000000 		.word	1
 448 01ac 00000000 		.word	0
 449 01b0 01000000 		.word	1
 450 01b4 01000000 		.word	1
 451 01b8 00000000 		.word	0
 452 01bc 01000000 		.word	1
 453 01c0 01000000 		.word	1
 454 01c4 01000000 		.word	1
 455 01c8 01000000 		.word	1
 456 01cc 01000000 		.word	1
 457 01d0 00000000 		.word	0
 458 01d4 01000000 		.word	1
 459 01d8 01000000 		.word	1
 460 01dc 00000000 		.word	0
 461 01e0 01000000 		.word	1
 462 01e4 01000000 		.word	1
 463 01e8 01000000 		.word	1
 464 01ec 01000000 		.word	1
 465 01f0 00000000 		.word	0
 466 01f4 01000000 		.word	1
 467 01f8 00000000 		.word	0
 468 01fc 01000000 		.word	1
 469 0200 01000000 		.word	1
 470 0204 00000000 		.word	0
 471 0208 00000000 		.word	0
 472 020c 00000000 		.word	0
 473 0210 00000000 		.word	0
 474 0214 00000000 		.word	0
 475 0218 00000000 		.word	0
 476 021c 00000000 		.word	0
 477 0220 01000000 		.word	1
 478 0224 01000000 		.word	1
 479 0228 00000000 		.word	0
 480 022c 01000000 		.word	1
 481 0230 01000000 		.word	1
 482 0234 01000000 		.word	1
 483 0238 01000000 		.word	1
 484 023c 00000000 		.word	0
 485 0240 00000000 		.word	0
 486 0244 00000000 		.word	0
 487 0248 00000000 		.word	0
 488 024c 00000000 		.word	0
 489 0250 00000000 		.word	0
 490 0254 01000000 		.word	1
 491 0258 01000000 		.word	1
 492 025c 01000000 		.word	1
 493 0260 01000000 		.word	1
 494 0264 01000000 		.word	1
 495 0268 00000000 		.word	0
 496 026c 01000000 		.word	1
 497 0270 01000000 		.word	1
 498 0274 00000000 		.word	0
 499 0278 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 10


 500 027c 01000000 		.word	1
 501 0280 01000000 		.word	1
 502 0284 01000000 		.word	1
 503 0288 01000000 		.word	1
 504 028c 01000000 		.word	1
 505 0290 01000000 		.word	1
 506 0294 01000000 		.word	1
 507 0298 01000000 		.word	1
 508 029c 00000000 		.word	0
 509 02a0 01000000 		.word	1
 510 02a4 01000000 		.word	1
 511 02a8 01000000 		.word	1
 512 02ac 00000000 		.word	0
 513 02b0 00000000 		.word	0
 514 02b4 00000000 		.word	0
 515 02b8 01000000 		.word	1
 516 02bc 01000000 		.word	1
 517 02c0 00000000 		.word	0
 518 02c4 01000000 		.word	1
 519 02c8 01000000 		.word	1
 520 02cc 01000000 		.word	1
 521 02d0 01000000 		.word	1
 522 02d4 00000000 		.word	0
 523 02d8 00000000 		.word	0
 524 02dc 00000000 		.word	0
 525 02e0 00000000 		.word	0
 526 02e4 00000000 		.word	0
 527 02e8 00000000 		.word	0
 528 02ec 01000000 		.word	1
 529 02f0 01000000 		.word	1
 530 02f4 01000000 		.word	1
 531 02f8 00000000 		.word	0
 532 02fc 01000000 		.word	1
 533 0300 00000000 		.word	0
 534 0304 01000000 		.word	1
 535 0308 01000000 		.word	1
 536 030c 00000000 		.word	0
 537 0310 01000000 		.word	1
 538 0314 01000000 		.word	1
 539 0318 01000000 		.word	1
 540 031c 01000000 		.word	1
 541 0320 00000000 		.word	0
 542 0324 01000000 		.word	1
 543 0328 00000000 		.word	0
 544 032c 01000000 		.word	1
 545 0330 01000000 		.word	1
 546 0334 00000000 		.word	0
 547 0338 01000000 		.word	1
 548 033c 01000000 		.word	1
 549 0340 01000000 		.word	1
 550 0344 00000000 		.word	0
 551 0348 01000000 		.word	1
 552 034c 00000000 		.word	0
 553 0350 01000000 		.word	1
 554 0354 01000000 		.word	1
 555 0358 00000000 		.word	0
 556 035c 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 11


 557 0360 01000000 		.word	1
 558 0364 01000000 		.word	1
 559 0368 01000000 		.word	1
 560 036c 00000000 		.word	0
 561 0370 01000000 		.word	1
 562 0374 00000000 		.word	0
 563 0378 01000000 		.word	1
 564 037c 01000000 		.word	1
 565 0380 00000000 		.word	0
 566 0384 01000000 		.word	1
 567 0388 01000000 		.word	1
 568 038c 01000000 		.word	1
 569 0390 00000000 		.word	0
 570 0394 01000000 		.word	1
 571 0398 00000000 		.word	0
 572 039c 01000000 		.word	1
 573 03a0 01000000 		.word	1
 574 03a4 00000000 		.word	0
 575 03a8 01000000 		.word	1
 576 03ac 01000000 		.word	1
 577 03b0 01000000 		.word	1
 578 03b4 01000000 		.word	1
 579 03b8 00000000 		.word	0
 580 03bc 01000000 		.word	1
 581 03c0 00000000 		.word	0
 582 03c4 00000000 		.word	0
 583 03c8 00000000 		.word	0
 584 03cc 00000000 		.word	0
 585 03d0 00000000 		.word	0
 586 03d4 00000000 		.word	0
 587 03d8 00000000 		.word	0
 588 03dc 00000000 		.word	0
 589 03e0 01000000 		.word	1
 590 03e4 00000000 		.word	0
 591 03e8 00000000 		.word	0
 592 03ec 00000000 		.word	0
 593 03f0 00000000 		.word	0
 594 03f4 01000000 		.word	1
 595 03f8 01000000 		.word	1
 596 03fc 01000000 		.word	1
 597 0400 01000000 		.word	1
 598 0404 00000000 		.word	0
 599 0408 01000000 		.word	1
 600 040c 01000000 		.word	1
 601 0410 01000000 		.word	1
 602 0414 01000000 		.word	1
 603 0418 01000000 		.word	1
 604 041c 01000000 		.word	1
 605 0420 01000000 		.word	1
 606 0424 01000000 		.word	1
 607 0428 01000000 		.word	1
 608 042c 01000000 		.word	1
 609 0430 00000000 		.word	0
 610 0434 01000000 		.word	1
 611 0438 01000000 		.word	1
 612 043c 00000000 		.word	0
 613 0440 01000000 		.word	1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 12


 614 0444 01000000 		.word	1
 615 0448 01000000 		.word	1
 616 044c 00000000 		.word	0
 617 0450 00000000 		.word	0
 618 0454 00000000 		.word	0
 619 0458 00000000 		.word	0
 620 045c 00000000 		.word	0
 621 0460 00000000 		.word	0
 622 0464 00000000 		.word	0
 623 0468 00000000 		.word	0
 624 046c 00000000 		.word	0
 625 0470 00000000 		.word	0
 626 0474 00000000 		.word	0
 627 0478 00000000 		.word	0
 628 047c 00000000 		.word	0
 629 0480 00000000 		.word	0
 630 0484 00000000 		.word	0
 631 0488 00000000 		.word	0
 632 048c 00000000 		.word	0
 633 0490 01000000 		.word	1
 634 0494 01000000 		.word	1
 635 0498 01000000 		.word	1
 636 049c 01000000 		.word	1
 637 04a0 01000000 		.word	1
 638 04a4 01000000 		.word	1
 639 04a8 01000000 		.word	1
 640 04ac 01000000 		.word	1
 641 04b0 01000000 		.word	1
 642 04b4 01000000 		.word	1
 643 04b8 01000000 		.word	1
 644 04bc 01000000 		.word	1
 645 04c0 01000000 		.word	1
 646 04c4 01000000 		.word	1
 647 04c8 01000000 		.word	1
 648 04cc 01000000 		.word	1
 649 04d0 01000000 		.word	1
 650 04d4 01000000 		.word	1
 651 04d8 01000000 		.word	1
 652 04dc 01000000 		.word	1
 653              		.global	food_list
 654              		.align	2
 655              		.type	food_list, %object
 656              		.size	food_list, 48
 657              	food_list:
 658 04e0 03000000 		.word	3
 659 04e4 06000000 		.word	6
 660 04e8 05000000 		.word	5
 661 04ec 0A000000 		.word	10
 662 04f0 0D000000 		.word	13
 663 04f4 09000000 		.word	9
 664 04f8 0D000000 		.word	13
 665 04fc 10000000 		.word	16
 666 0500 01000000 		.word	1
 667 0504 11000000 		.word	17
 668 0508 00000000 		.space	8
 668      00000000 
 669              		.global	food_length
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 13


 670              		.align	2
 671              		.type	food_length, %object
 672              		.size	food_length, 4
 673              	food_length:
 674 0510 05000000 		.word	5
 675 0514 00000000 		.section	.text.BT_txInt,"ax",%progbits
 676              		.align	2
 677              		.global	BT_txInt
 678              		.thumb
 679              		.thumb_func
 680              		.type	BT_txInt, %function
 681              	BT_txInt:
 682              	.LFB63:
 683              		.file 1 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *
   3:.\main.c      ****  * Copyright Univ of Auckland, 2016
   4:.\main.c      ****  * All Rights Reserved
   5:.\main.c      ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\main.c      ****  *
   7:.\main.c      ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\main.c      ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
   9:.\main.c      ****  *
  10:.\main.c      ****  * ========================================
  11:.\main.c      **** */
  12:.\main.c      **** #include <stdio.h>
  13:.\main.c      **** #include <string.h>
  14:.\main.c      **** #include <stdlib.h>
  15:.\main.c      **** #include <project.h>
  16:.\main.c      **** #include <math.h>
  17:.\main.c      **** //* ========================================
  18:.\main.c      **** #include "defines.h"
  19:.\main.c      **** #include "vars.h"
  20:.\main.c      **** #include "pathfinder.h"
  21:.\main.c      **** //* ========================================
  22:.\main.c      **** void usbPutString(char *s);
  23:.\main.c      **** void usbPutChar(char c);
  24:.\main.c      **** //void handle_usb();
  25:.\main.c      **** //* ========================================
  26:.\main.c      **** 
  27:.\main.c      **** #define QUAD_RATIO 0.99556
  28:.\main.c      **** #define TURN_OFFSET 138
  29:.\main.c      **** #define U_OFFSET 120
  30:.\main.c      **** 
  31:.\main.c      **** #define U_DEADZONE 90000
  32:.\main.c      **** #define TURN_DEADZONE 50000
  33:.\main.c      **** #define S_DEADZONE 10000
  34:.\main.c      **** #define QUAD_PER_UNIT 144
  35:.\main.c      **** 
  36:.\main.c      **** char instructions[DEFAULT_ARRAY_SIZE] = {0};
  37:.\main.c      **** uint16 instructionCount = 0;
  38:.\main.c      **** uint16 instructionLength = 0;
  39:.\main.c      **** uint32_t sensorsDisabled = 0;
  40:.\main.c      **** 
  41:.\main.c      **** uint32_t robot_direction = 2;
  42:.\main.c      **** 
  43:.\main.c      **** uint32_t path[DEFAULT_ARRAY_SIZE][3] = {0};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 14


  44:.\main.c      **** uint32_t start[2] = {1, 1};//(y, x) array starts at 0
  45:.\main.c      **** uint32_t destination[2] = {14, 18};//(y, x) DON'T HARDCODE THIS
  46:.\main.c      **** 
  47:.\main.c      **** // map default
  48:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  49:.\main.c      **** //                    {1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1},
  50:.\main.c      **** //                    {1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1},
  51:.\main.c      **** //                    {1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1},
  52:.\main.c      **** //                    {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1},
  53:.\main.c      **** //                    {1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1},
  54:.\main.c      **** //                    {1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1},
  55:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1},
  56:.\main.c      **** //                    {1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},
  57:.\main.c      **** //                    {1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1},
  58:.\main.c      **** //                    {1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1},
  59:.\main.c      **** //                    {1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1},
  60:.\main.c      **** //                    {1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1},
  61:.\main.c      **** //                    {1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
  62:.\main.c      **** //                    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  63:.\main.c      **** 
  64:.\main.c      **** //practice map 1
  65:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,
  66:.\main.c      **** ////practice map 2
  67:.\main.c      **** uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  68:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  69:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  70:.\main.c      ****                         {1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1},
  71:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1},
  72:.\main.c      ****                         {1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,1},
  73:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1},
  74:.\main.c      ****                         {1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1},
  75:.\main.c      ****                         {1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1},
  76:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  77:.\main.c      ****                         {1,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1},
  78:.\main.c      ****                         {1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1},
  79:.\main.c      ****                         {1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1},
  80:.\main.c      ****                         {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
  81:.\main.c      ****                         {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  82:.\main.c      **** 
  83:.\main.c      **** //practice map 3
  84:.\main.c      **** //uint32_t map[15][19] = {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  85:.\main.c      **** 
  86:.\main.c      **** //first number is the y coord, second is x
  87:.\main.c      **** //first number is row, second column
  88:.\main.c      **** 
  89:.\main.c      **** //uint32_t food_list[6][2]= {{4,5},{7,1},{11,5},{10,11},{5,8},{17,2}};//???
  90:.\main.c      **** //uint32_t food_list[6][2] = {{5, 9},{5,3}, {13, 2}}; //???
  91:.\main.c      **** //uint32_t food_list[6][2] ={ //default
  92:.\main.c      **** //{5, 7},
  93:.\main.c      **** //{5, 17},
  94:.\main.c      **** //{12, 13},
  95:.\main.c      **** //{5, 17},
  96:.\main.c      **** //{9, 3}
  97:.\main.c      **** //};
  98:.\main.c      **** //uint32_t food_list[6][2]= {{1,10},{1,17},{13,16},{7,9},{13,1}}; //practice map 1
  99:.\main.c      **** //practice map 2
 100:.\main.c      **** uint32_t food_list[6][2]= {{3,6},{5,10},{13,9},{13,16},{1,17}};
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 15


 101:.\main.c      **** 
 102:.\main.c      **** //practice map 3
 103:.\main.c      **** //uint32_t food_list[6][2]= {{16,11},{3,12},{3,5},{9,7},{5,9}};
 104:.\main.c      **** 
 105:.\main.c      **** uint32_t food_length = 5;
 106:.\main.c      **** 
 107:.\main.c      **** void changeToRF();
 108:.\main.c      **** void changeToBT();
 109:.\main.c      **** void brakeMotor();
 110:.\main.c      **** void driveForwards();
 111:.\main.c      **** void initTurnLeft();
 112:.\main.c      **** void initTurnRight();
 113:.\main.c      **** void inittrackLineZ();
 114:.\main.c      **** void trackLineU();
 115:.\main.c      **** void trackLine();
 116:.\main.c      **** void trackLineZ();
 117:.\main.c      **** void initTrackU();
 118:.\main.c      **** void turnLeft();
 119:.\main.c      **** void turnRight();
 120:.\main.c      **** void initForward();
 121:.\main.c      **** void initTurnU();
 122:.\main.c      **** void turnU();
 123:.\main.c      **** void initBrake();
 124:.\main.c      **** void print_ADC();
 125:.\main.c      **** void Quad_Dec_response();
 126:.\main.c      **** void handle_rx_binary();
 127:.\main.c      **** void readFrontSensors();
 128:.\main.c      **** void print_RF();
 129:.\main.c      **** 
 130:.\main.c      **** /*--------------------------------------------ISRs-----------------------------------------------*/
 131:.\main.c      **** //BT
 132:.\main.c      **** CY_ISR(BT_txInt)
 133:.\main.c      **** {
 684              		.loc 1 133 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 1, uses_anonymous_args = 0
 688              		@ link register save eliminated.
 689 0000 80B4     		push	{r7}
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 00AF     		add	r7, sp, #0
 693              		.cfi_def_cfa_register 7
 134:.\main.c      ****     
 135:.\main.c      **** }
 694              		.loc 1 135 0
 695 0004 BD46     		mov	sp, r7
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 0006 5DF8047B 		ldr	r7, [sp], #4
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 000a 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE63:
 704              		.size	BT_txInt, .-BT_txInt
 705              		.section	.text.adc_isr,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 16


 706              		.align	2
 707              		.global	adc_isr
 708              		.thumb
 709              		.thumb_func
 710              		.type	adc_isr, %function
 711              	adc_isr:
 712              	.LFB64:
 136:.\main.c      **** 
 137:.\main.c      **** //ADC:
 138:.\main.c      **** CY_ISR (adc_isr)
 139:.\main.c      **** {
 713              		.loc 1 139 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 140:.\main.c      ****     //adc_result = ADC_GetResult16(0);
 141:.\main.c      ****     adc_result = ADC_GetResult16();
 723              		.loc 1 141 0
 724 0004 FFF7FEFF 		bl	ADC_GetResult16
 725 0008 0346     		mov	r3, r0
 726 000a 1A46     		mov	r2, r3
 727 000c 044B     		ldr	r3, .L3
 728 000e 1A80     		strh	r2, [r3]	@ movhi
 142:.\main.c      ****     flag_receive_ADC = 1;
 729              		.loc 1 142 0
 730 0010 044B     		ldr	r3, .L3+4
 731 0012 0122     		movs	r2, #1
 732 0014 1A70     		strb	r2, [r3]
 143:.\main.c      ****     flag_print_rf = 1;
 733              		.loc 1 143 0
 734 0016 044B     		ldr	r3, .L3+8
 735 0018 0122     		movs	r2, #1
 736 001a 1A70     		strb	r2, [r3]
 144:.\main.c      ****     //LED_Write(~LED_Read());
 145:.\main.c      **** }
 737              		.loc 1 145 0
 738 001c 80BD     		pop	{r7, pc}
 739              	.L4:
 740 001e 00BF     		.align	2
 741              	.L3:
 742 0020 00000000 		.word	adc_result
 743 0024 00000000 		.word	flag_receive_ADC
 744 0028 00000000 		.word	flag_print_rf
 745              		.cfi_endproc
 746              	.LFE64:
 747              		.size	adc_isr, .-adc_isr
 748              		.global	__aeabi_i2d
 749              		.global	__aeabi_dsub
 750              		.global	__aeabi_dcmpge
 751              		.global	__aeabi_dadd
 752              		.section	.text.isr_quad1,"ax",%progbits
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 17


 753              		.align	2
 754              		.global	isr_quad1
 755              		.thumb
 756              		.thumb_func
 757              		.type	isr_quad1, %function
 758              	isr_quad1:
 759              	.LFB65:
 146:.\main.c      **** 
 147:.\main.c      **** CY_ISR (isr_quad1)
 148:.\main.c      **** {
 760              		.loc 1 148 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 0000 B0B5     		push	{r4, r5, r7, lr}
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 4, -16
 767              		.cfi_offset 5, -12
 768              		.cfi_offset 7, -8
 769              		.cfi_offset 14, -4
 770 0002 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 149:.\main.c      ****     
 150:.\main.c      ****     //LED_Write(~LED_Read());
 151:.\main.c      ****     last_quad_count1 = quad_count1;
 772              		.loc 1 151 0
 773 0004 564B     		ldr	r3, .L12
 774 0006 1A88     		ldrh	r2, [r3]
 775 0008 564B     		ldr	r3, .L12+4
 776 000a 1A80     		strh	r2, [r3]	@ movhi
 152:.\main.c      ****     last_quad_count2 = quad_count2;
 777              		.loc 1 152 0
 778 000c 564B     		ldr	r3, .L12+8
 779 000e 1A88     		ldrh	r2, [r3]
 780 0010 564B     		ldr	r3, .L12+12
 781 0012 1A80     		strh	r2, [r3]	@ movhi
 153:.\main.c      ****     quad_count1 = QuadDec_M1_GetCounter();
 782              		.loc 1 153 0
 783 0014 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 784 0018 0346     		mov	r3, r0
 785 001a 1A46     		mov	r2, r3
 786 001c 504B     		ldr	r3, .L12
 787 001e 1A80     		strh	r2, [r3]	@ movhi
 154:.\main.c      ****     quad_count2 = QuadDec_M2_GetCounter();
 788              		.loc 1 154 0
 789 0020 FFF7FEFF 		bl	QuadDec_M2_GetCounter
 790 0024 0346     		mov	r3, r0
 791 0026 1A46     		mov	r2, r3
 792 0028 4F4B     		ldr	r3, .L12+8
 793 002a 1A80     		strh	r2, [r3]	@ movhi
 155:.\main.c      ****     quad_diff1 = quad_count1 - last_quad_count1;
 794              		.loc 1 155 0
 795 002c 4C4B     		ldr	r3, .L12
 796 002e 1B88     		ldrh	r3, [r3]
 797 0030 9AB2     		uxth	r2, r3
 798 0032 4C4B     		ldr	r3, .L12+4
 799 0034 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 18


 800 0036 9BB2     		uxth	r3, r3
 801 0038 D31A     		subs	r3, r2, r3
 802 003a 9BB2     		uxth	r3, r3
 803 003c 9AB2     		uxth	r2, r3
 804 003e 4C4B     		ldr	r3, .L12+16
 805 0040 1A80     		strh	r2, [r3]	@ movhi
 156:.\main.c      ****     quad_diff2 = quad_count2 - last_quad_count2;
 806              		.loc 1 156 0
 807 0042 494B     		ldr	r3, .L12+8
 808 0044 1B88     		ldrh	r3, [r3]
 809 0046 9AB2     		uxth	r2, r3
 810 0048 484B     		ldr	r3, .L12+12
 811 004a 1B88     		ldrh	r3, [r3]
 812 004c 9BB2     		uxth	r3, r3
 813 004e D31A     		subs	r3, r2, r3
 814 0050 9BB2     		uxth	r3, r3
 815 0052 9AB2     		uxth	r2, r3
 816 0054 474B     		ldr	r3, .L12+20
 817 0056 1A80     		strh	r2, [r3]	@ movhi
 157:.\main.c      ****     
 158:.\main.c      ****     if(abs(quad_count1) > 3000 && movement_state != LTURN && movement_state != RTURN && movement_st
 818              		.loc 1 158 0
 819 0058 414B     		ldr	r3, .L12
 820 005a 1B88     		ldrh	r3, [r3]
 821 005c 1BB2     		sxth	r3, r3
 822 005e 002B     		cmp	r3, #0
 823 0060 B8BF     		it	lt
 824 0062 5B42     		rsblt	r3, r3, #0
 825 0064 40F6B832 		movw	r2, #3000
 826 0068 9342     		cmp	r3, r2
 827 006a 17DD     		ble	.L6
 828              		.loc 1 158 0 is_stmt 0 discriminator 1
 829 006c 424B     		ldr	r3, .L12+24
 830 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 831 0070 012B     		cmp	r3, #1
 832 0072 13D0     		beq	.L6
 833              		.loc 1 158 0 discriminator 2
 834 0074 404B     		ldr	r3, .L12+24
 835 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 836 0078 022B     		cmp	r3, #2
 837 007a 0FD0     		beq	.L6
 838              		.loc 1 158 0 discriminator 3
 839 007c 3E4B     		ldr	r3, .L12+24
 840 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0080 072B     		cmp	r3, #7
 842 0082 0BD0     		beq	.L6
 159:.\main.c      ****     {
 160:.\main.c      ****         QuadDec_M1_SetCounter(0);
 843              		.loc 1 160 0 is_stmt 1
 844 0084 0020     		movs	r0, #0
 845 0086 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 161:.\main.c      ****         QuadDec_M2_SetCounter(0);
 846              		.loc 1 161 0
 847 008a 0020     		movs	r0, #0
 848 008c FFF7FEFF 		bl	QuadDec_M2_SetCounter
 162:.\main.c      ****         quad_count1 = 0;
 849              		.loc 1 162 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 19


 850 0090 334B     		ldr	r3, .L12
 851 0092 0022     		movs	r2, #0
 852 0094 1A80     		strh	r2, [r3]	@ movhi
 163:.\main.c      ****         quad_count2 = 0;
 853              		.loc 1 163 0
 854 0096 344B     		ldr	r3, .L12+8
 855 0098 0022     		movs	r2, #0
 856 009a 1A80     		strh	r2, [r3]	@ movhi
 857              	.L6:
 164:.\main.c      ****     }
 165:.\main.c      **** 
 166:.\main.c      ****     flag_calc_wheelspeed = 1;
 858              		.loc 1 166 0
 859 009c 374B     		ldr	r3, .L12+28
 860 009e 0122     		movs	r2, #1
 861 00a0 1A70     		strb	r2, [r3]
 167:.\main.c      ****     
 168:.\main.c      ****     
 169:.\main.c      ****     if(track_mode == DEST_TEST && movement_state == TRACKING_SOFT)
 862              		.loc 1 169 0
 863 00a2 374B     		ldr	r3, .L12+32
 864 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 00a6 062B     		cmp	r3, #6
 866 00a8 58D1     		bne	.L5
 867              		.loc 1 169 0 is_stmt 0 discriminator 1
 868 00aa 334B     		ldr	r3, .L12+24
 869 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 00ae 062B     		cmp	r3, #6
 871 00b0 54D1     		bne	.L5
 170:.\main.c      ****     {
 171:.\main.c      ****         //track the distance
 172:.\main.c      ****         accum_dist -= quad_diff1;
 872              		.loc 1 172 0 is_stmt 1
 873 00b2 344B     		ldr	r3, .L12+36
 874 00b4 1B88     		ldrh	r3, [r3]
 875 00b6 9AB2     		uxth	r2, r3
 876 00b8 2D4B     		ldr	r3, .L12+16
 877 00ba 1B88     		ldrh	r3, [r3]
 878 00bc 9BB2     		uxth	r3, r3
 879 00be D31A     		subs	r3, r2, r3
 880 00c0 9BB2     		uxth	r3, r3
 881 00c2 9AB2     		uxth	r2, r3
 882 00c4 2F4B     		ldr	r3, .L12+36
 883 00c6 1A80     		strh	r2, [r3]	@ movhi
 173:.\main.c      ****         if(accum_dist >= (target_distance_quad - QUAD_PER_UNIT*0.5))
 884              		.loc 1 173 0
 885 00c8 2E4B     		ldr	r3, .L12+36
 886 00ca 1B88     		ldrh	r3, [r3]
 887 00cc 1BB2     		sxth	r3, r3
 888 00ce 1846     		mov	r0, r3
 889 00d0 FFF7FEFF 		bl	__aeabi_i2d
 890 00d4 0446     		mov	r4, r0
 891 00d6 0D46     		mov	r5, r1
 892 00d8 2B4B     		ldr	r3, .L12+40
 893 00da 1B88     		ldrh	r3, [r3]
 894 00dc 1BB2     		sxth	r3, r3
 895 00de 1846     		mov	r0, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 20


 896 00e0 FFF7FEFF 		bl	__aeabi_i2d
 897 00e4 0246     		mov	r2, r0
 898 00e6 0B46     		mov	r3, r1
 899 00e8 1046     		mov	r0, r2
 900 00ea 1946     		mov	r1, r3
 901 00ec 4FF00002 		mov	r2, #0
 902 00f0 264B     		ldr	r3, .L12+44
 903 00f2 FFF7FEFF 		bl	__aeabi_dsub
 904 00f6 0246     		mov	r2, r0
 905 00f8 0B46     		mov	r3, r1
 906 00fa 2046     		mov	r0, r4
 907 00fc 2946     		mov	r1, r5
 908 00fe FFF7FEFF 		bl	__aeabi_dcmpge
 909 0102 0346     		mov	r3, r0
 910 0104 002B     		cmp	r3, #0
 911 0106 02D0     		beq	.L8
 174:.\main.c      ****         {
 175:.\main.c      ****             reached_target = 1;
 912              		.loc 1 175 0
 913 0108 214B     		ldr	r3, .L12+48
 914 010a 0122     		movs	r2, #1
 915 010c 1A70     		strb	r2, [r3]
 916              	.L8:
 176:.\main.c      ****         }
 177:.\main.c      ****         if((accum_dist >= (target_distance_quad + QUAD_PER_UNIT * 0.5)) || target_distance_quad == 
 917              		.loc 1 177 0
 918 010e 1D4B     		ldr	r3, .L12+36
 919 0110 1B88     		ldrh	r3, [r3]
 920 0112 1BB2     		sxth	r3, r3
 921 0114 1846     		mov	r0, r3
 922 0116 FFF7FEFF 		bl	__aeabi_i2d
 923 011a 0446     		mov	r4, r0
 924 011c 0D46     		mov	r5, r1
 925 011e 1A4B     		ldr	r3, .L12+40
 926 0120 1B88     		ldrh	r3, [r3]
 927 0122 1BB2     		sxth	r3, r3
 928 0124 1846     		mov	r0, r3
 929 0126 FFF7FEFF 		bl	__aeabi_i2d
 930 012a 0246     		mov	r2, r0
 931 012c 0B46     		mov	r3, r1
 932 012e 1046     		mov	r0, r2
 933 0130 1946     		mov	r1, r3
 934 0132 4FF00002 		mov	r2, #0
 935 0136 154B     		ldr	r3, .L12+44
 936 0138 FFF7FEFF 		bl	__aeabi_dadd
 937 013c 0246     		mov	r2, r0
 938 013e 0B46     		mov	r3, r1
 939 0140 2046     		mov	r0, r4
 940 0142 2946     		mov	r1, r5
 941 0144 FFF7FEFF 		bl	__aeabi_dcmpge
 942 0148 0346     		mov	r3, r0
 943 014a 002B     		cmp	r3, #0
 944 014c 03D1     		bne	.L10
 945              		.loc 1 177 0 is_stmt 0 discriminator 1
 946 014e 0E4B     		ldr	r3, .L12+40
 947 0150 1B88     		ldrh	r3, [r3]
 948 0152 002B     		cmp	r3, #0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 21


 949 0154 02D1     		bne	.L5
 950              	.L10:
 178:.\main.c      ****         {
 179:.\main.c      ****             overshot_target = 1;
 951              		.loc 1 179 0 is_stmt 1
 952 0156 0F4B     		ldr	r3, .L12+52
 953 0158 0122     		movs	r2, #1
 954 015a 1A70     		strb	r2, [r3]
 955              	.L5:
 180:.\main.c      ****         }
 181:.\main.c      ****     }
 182:.\main.c      **** }
 956              		.loc 1 182 0
 957 015c B0BD     		pop	{r4, r5, r7, pc}
 958              	.L13:
 959 015e 00BF     		.align	2
 960              	.L12:
 961 0160 00000000 		.word	quad_count1
 962 0164 00000000 		.word	last_quad_count1
 963 0168 00000000 		.word	quad_count2
 964 016c 00000000 		.word	last_quad_count2
 965 0170 00000000 		.word	quad_diff1
 966 0174 00000000 		.word	quad_diff2
 967 0178 00000000 		.word	movement_state
 968 017c 00000000 		.word	flag_calc_wheelspeed
 969 0180 00000000 		.word	track_mode
 970 0184 00000000 		.word	accum_dist
 971 0188 00000000 		.word	target_distance_quad
 972 018c 00005240 		.word	1079115776
 973 0190 00000000 		.word	reached_target
 974 0194 00000000 		.word	overshot_target
 975              		.cfi_endproc
 976              	.LFE65:
 977              		.size	isr_quad1, .-isr_quad1
 978              		.section	.text.isr_turn_timer,"ax",%progbits
 979              		.align	2
 980              		.global	isr_turn_timer
 981              		.thumb
 982              		.thumb_func
 983              		.type	isr_turn_timer, %function
 984              	isr_turn_timer:
 985              	.LFB66:
 183:.\main.c      **** 
 184:.\main.c      **** CY_ISR(isr_turn_timer)
 185:.\main.c      **** {
 986              		.loc 1 185 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990 0000 80B5     		push	{r7, lr}
 991              		.cfi_def_cfa_offset 8
 992              		.cfi_offset 7, -8
 993              		.cfi_offset 14, -4
 994 0002 82B0     		sub	sp, sp, #8
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 22


 186:.\main.c      ****     if(movement_state == LTURN)
 998              		.loc 1 186 0
 999 0006 464B     		ldr	r3, .L22
 1000 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1001 000a 012B     		cmp	r3, #1
 1002 000c 33D1     		bne	.L15
 1003              	.LBB2:
 187:.\main.c      ****     {
 188:.\main.c      ****         uint16 distTurned = (abs(QuadDec_M2_GetCounter() - start_turn_count) % 832);
 1004              		.loc 1 188 0
 1005 000e FFF7FEFF 		bl	QuadDec_M2_GetCounter
 1006 0012 0346     		mov	r3, r0
 1007 0014 1A46     		mov	r2, r3
 1008 0016 434B     		ldr	r3, .L22+4
 1009 0018 1B88     		ldrh	r3, [r3]
 1010 001a 1BB2     		sxth	r3, r3
 1011 001c D31A     		subs	r3, r2, r3
 1012 001e 002B     		cmp	r3, #0
 1013 0020 B8BF     		it	lt
 1014 0022 5B42     		rsblt	r3, r3, #0
 1015 0024 404A     		ldr	r2, .L22+8
 1016 0026 82FB0312 		smull	r1, r2, r2, r3
 1017 002a 1112     		asrs	r1, r2, #8
 1018 002c DA17     		asrs	r2, r3, #31
 1019 002e 8A1A     		subs	r2, r1, r2
 1020 0030 4FF45071 		mov	r1, #832
 1021 0034 01FB02F2 		mul	r2, r1, r2
 1022 0038 9A1A     		subs	r2, r3, r2
 1023 003a 1346     		mov	r3, r2	@ movhi
 1024 003c FB80     		strh	r3, [r7, #6]	@ movhi
 189:.\main.c      ****   
 190:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1025              		.loc 1 190 0
 1026 003e FB88     		ldrh	r3, [r7, #6]
 1027 0040 B82B     		cmp	r3, #184
 1028 0042 17D9     		bls	.L16
 1029              		.loc 1 190 0 is_stmt 0 discriminator 1
 1030 0044 FB88     		ldrh	r3, [r7, #6]
 1031 0046 E02B     		cmp	r3, #224
 1032 0048 14D8     		bhi	.L16
 1033              		.loc 1 190 0 discriminator 2
 1034 004a 384B     		ldr	r3, .L22+12
 1035 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1036 004e 012B     		cmp	r3, #1
 1037 0050 07D0     		beq	.L17
 1038              		.loc 1 190 0 discriminator 3
 1039 0052 364B     		ldr	r3, .L22+12
 1040 0054 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1041 0056 012B     		cmp	r3, #1
 1042 0058 03D0     		beq	.L17
 1043              		.loc 1 190 0 discriminator 4
 1044 005a 344B     		ldr	r3, .L22+12
 1045 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1046 005e 012B     		cmp	r3, #1
 1047 0060 08D1     		bne	.L16
 1048              	.L17:
 191:.\main.c      ****         {
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 23


 192:.\main.c      ****             //movement_state = STOPPED;
 193:.\main.c      ****             brakeMotor();
 1049              		.loc 1 193 0 is_stmt 1
 1050 0062 FFF7FEFF 		bl	brakeMotor
 194:.\main.c      ****             movement_state = prev_movement_state;
 1051              		.loc 1 194 0
 1052 0066 324B     		ldr	r3, .L22+16
 1053 0068 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1054 006a 2D4B     		ldr	r3, .L22
 1055 006c 1A70     		strb	r2, [r3]
 195:.\main.c      ****             Timer_2_Stop();
 1056              		.loc 1 195 0
 1057 006e FFF7FEFF 		bl	Timer_2_Stop
 1058              	.LBE2:
 1059 0072 51E0     		b	.L14
 1060              	.L16:
 1061 0074 50E0     		b	.L14
 1062              	.L15:
 196:.\main.c      ****         }
 197:.\main.c      ****     }
 198:.\main.c      ****     else if (movement_state == RTURN)
 1063              		.loc 1 198 0
 1064 0076 2A4B     		ldr	r3, .L22
 1065 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1066 007a 022B     		cmp	r3, #2
 1067 007c 33D1     		bne	.L19
 1068              	.LBB3:
 199:.\main.c      ****     {
 200:.\main.c      ****         uint16 distTurned = abs(QuadDec_M1_GetCounter() - start_turn_count) % 832;
 1069              		.loc 1 200 0
 1070 007e FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1071 0082 0346     		mov	r3, r0
 1072 0084 1A46     		mov	r2, r3
 1073 0086 274B     		ldr	r3, .L22+4
 1074 0088 1B88     		ldrh	r3, [r3]
 1075 008a 1BB2     		sxth	r3, r3
 1076 008c D31A     		subs	r3, r2, r3
 1077 008e 002B     		cmp	r3, #0
 1078 0090 B8BF     		it	lt
 1079 0092 5B42     		rsblt	r3, r3, #0
 1080 0094 244A     		ldr	r2, .L22+8
 1081 0096 82FB0312 		smull	r1, r2, r2, r3
 1082 009a 1112     		asrs	r1, r2, #8
 1083 009c DA17     		asrs	r2, r3, #31
 1084 009e 8A1A     		subs	r2, r1, r2
 1085 00a0 4FF45071 		mov	r1, #832
 1086 00a4 01FB02F2 		mul	r2, r1, r2
 1087 00a8 9A1A     		subs	r2, r3, r2
 1088 00aa 1346     		mov	r3, r2	@ movhi
 1089 00ac BB80     		strh	r3, [r7, #4]	@ movhi
 201:.\main.c      ****         if(((distTurned >= 185) && distTurned <= 224) && (frontSensors[2] == 1 || frontSensors[1] =
 1090              		.loc 1 201 0
 1091 00ae BB88     		ldrh	r3, [r7, #4]
 1092 00b0 B82B     		cmp	r3, #184
 1093 00b2 17D9     		bls	.L20
 1094              		.loc 1 201 0 is_stmt 0 discriminator 1
 1095 00b4 BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 24


 1096 00b6 E02B     		cmp	r3, #224
 1097 00b8 14D8     		bhi	.L20
 1098              		.loc 1 201 0 discriminator 2
 1099 00ba 1C4B     		ldr	r3, .L22+12
 1100 00bc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1101 00be 012B     		cmp	r3, #1
 1102 00c0 07D0     		beq	.L21
 1103              		.loc 1 201 0 discriminator 3
 1104 00c2 1A4B     		ldr	r3, .L22+12
 1105 00c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 00c6 012B     		cmp	r3, #1
 1107 00c8 03D0     		beq	.L21
 1108              		.loc 1 201 0 discriminator 4
 1109 00ca 184B     		ldr	r3, .L22+12
 1110 00cc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1111 00ce 012B     		cmp	r3, #1
 1112 00d0 08D1     		bne	.L20
 1113              	.L21:
 202:.\main.c      ****         {
 203:.\main.c      ****             //movement_state = STOPPED;
 204:.\main.c      ****             brakeMotor();
 1114              		.loc 1 204 0 is_stmt 1
 1115 00d2 FFF7FEFF 		bl	brakeMotor
 205:.\main.c      ****             movement_state = prev_movement_state;
 1116              		.loc 1 205 0
 1117 00d6 164B     		ldr	r3, .L22+16
 1118 00d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1119 00da 114B     		ldr	r3, .L22
 1120 00dc 1A70     		strb	r2, [r3]
 206:.\main.c      ****             Timer_2_Stop();
 1121              		.loc 1 206 0
 1122 00de FFF7FEFF 		bl	Timer_2_Stop
 1123              	.LBE3:
 1124 00e2 19E0     		b	.L14
 1125              	.L20:
 1126 00e4 18E0     		b	.L14
 1127              	.L19:
 207:.\main.c      ****         }
 208:.\main.c      ****     }
 209:.\main.c      ****     else if (movement_state == UTURN)
 1128              		.loc 1 209 0
 1129 00e6 0E4B     		ldr	r3, .L22
 1130 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1131 00ea 072B     		cmp	r3, #7
 1132 00ec 14D1     		bne	.L14
 210:.\main.c      ****     {
 211:.\main.c      ****         if(abs(QuadDec_M1_GetCounter() - start_turn_count) >= 208)
 1133              		.loc 1 211 0
 1134 00ee FFF7FEFF 		bl	QuadDec_M1_GetCounter
 1135 00f2 0346     		mov	r3, r0
 1136 00f4 1A46     		mov	r2, r3
 1137 00f6 0B4B     		ldr	r3, .L22+4
 1138 00f8 1B88     		ldrh	r3, [r3]
 1139 00fa 1BB2     		sxth	r3, r3
 1140 00fc D31A     		subs	r3, r2, r3
 1141 00fe 002B     		cmp	r3, #0
 1142 0100 B8BF     		it	lt
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 25


 1143 0102 5B42     		rsblt	r3, r3, #0
 1144 0104 CF2B     		cmp	r3, #207
 1145 0106 07DD     		ble	.L14
 212:.\main.c      ****         {
 213:.\main.c      ****             //movement_state = STOPPED;
 214:.\main.c      ****             brakeMotor();
 1146              		.loc 1 214 0
 1147 0108 FFF7FEFF 		bl	brakeMotor
 215:.\main.c      ****             movement_state = prev_movement_state;
 1148              		.loc 1 215 0
 1149 010c 084B     		ldr	r3, .L22+16
 1150 010e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1151 0110 034B     		ldr	r3, .L22
 1152 0112 1A70     		strb	r2, [r3]
 216:.\main.c      ****             Timer_2_Stop();
 1153              		.loc 1 216 0
 1154 0114 FFF7FEFF 		bl	Timer_2_Stop
 1155              	.L14:
 217:.\main.c      ****         }
 218:.\main.c      ****     }
 219:.\main.c      **** }
 1156              		.loc 1 219 0
 1157 0118 0837     		adds	r7, r7, #8
 1158              		.cfi_def_cfa_offset 8
 1159 011a BD46     		mov	sp, r7
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 011c 80BD     		pop	{r7, pc}
 1163              	.L23:
 1164 011e 00BF     		.align	2
 1165              	.L22:
 1166 0120 00000000 		.word	movement_state
 1167 0124 00000000 		.word	start_turn_count
 1168 0128 4FECC44E 		.word	1321528399
 1169 012c 00000000 		.word	frontSensors
 1170 0130 00000000 		.word	prev_movement_state
 1171              		.cfi_endproc
 1172              	.LFE66:
 1173              		.size	isr_turn_timer, .-isr_turn_timer
 1174              		.section	.text.Stop_on_line,"ax",%progbits
 1175              		.align	2
 1176              		.global	Stop_on_line
 1177              		.thumb
 1178              		.thumb_func
 1179              		.type	Stop_on_line, %function
 1180              	Stop_on_line:
 1181              	.LFB67:
 220:.\main.c      **** 
 221:.\main.c      **** 
 222:.\main.c      **** CY_ISR (Stop_on_line)
 223:.\main.c      **** {
 1182              		.loc 1 223 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187 0000 80B4     		push	{r7}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 26


 1188              		.cfi_def_cfa_offset 4
 1189              		.cfi_offset 7, -4
 1190 0002 00AF     		add	r7, sp, #0
 1191              		.cfi_def_cfa_register 7
 224:.\main.c      ****     movement_state = STOPPED;
 1192              		.loc 1 224 0
 1193 0004 054B     		ldr	r3, .L26
 1194 0006 0322     		movs	r2, #3
 1195 0008 1A70     		strb	r2, [r3]
 225:.\main.c      ****     if(movement_state != DRIVE) return;
 1196              		.loc 1 225 0
 1197 000a 044B     		ldr	r3, .L26
 1198 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1199 000e 002B     		cmp	r3, #0
 1200 0010 00D0     		beq	.L24
 1201 0012 00BF     		nop
 1202              	.L24:
 226:.\main.c      ****     //initTurnLeft();
 227:.\main.c      **** }
 1203              		.loc 1 227 0
 1204 0014 BD46     		mov	sp, r7
 1205              		.cfi_def_cfa_register 13
 1206              		@ sp needed
 1207 0016 5DF8047B 		ldr	r7, [sp], #4
 1208              		.cfi_restore 7
 1209              		.cfi_def_cfa_offset 0
 1210 001a 7047     		bx	lr
 1211              	.L27:
 1212              		.align	2
 1213              	.L26:
 1214 001c 00000000 		.word	movement_state
 1215              		.cfi_endproc
 1216              	.LFE67:
 1217              		.size	Stop_on_line, .-Stop_on_line
 1218              		.section	.rodata
 1219              		.align	2
 1220              	.LC0:
 1221 0000 53746172 		.ascii	"Starting robot!\015\012\000"
 1221      74696E67 
 1221      20726F62 
 1221      6F74210D 
 1221      0A00
 1222              		.section	.text.button,"ax",%progbits
 1223              		.align	2
 1224              		.global	button
 1225              		.thumb
 1226              		.thumb_func
 1227              		.type	button, %function
 1228              	button:
 1229              	.LFB68:
 228:.\main.c      **** 
 229:.\main.c      **** CY_ISR (button)
 230:.\main.c      **** {
 1230              		.loc 1 230 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 27


 1234 0000 80B5     		push	{r7, lr}
 1235              		.cfi_def_cfa_offset 8
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238 0002 00AF     		add	r7, sp, #0
 1239              		.cfi_def_cfa_register 7
 231:.\main.c      ****     if(BT_ENABLED)
 1240              		.loc 1 231 0
 1241 0004 054B     		ldr	r3, .L30
 1242 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1243 0008 002B     		cmp	r3, #0
 1244 000a 02D0     		beq	.L29
 232:.\main.c      ****     {
 233:.\main.c      ****         UART_PutString("Starting robot!\r\n");
 1245              		.loc 1 233 0
 1246 000c 0448     		ldr	r0, .L30+4
 1247 000e FFF7FEFF 		bl	UART_PutString
 1248              	.L29:
 234:.\main.c      ****     }
 235:.\main.c      ****     movement_state = DRIVE;
 1249              		.loc 1 235 0
 1250 0012 044B     		ldr	r3, .L30+8
 1251 0014 0022     		movs	r2, #0
 1252 0016 1A70     		strb	r2, [r3]
 236:.\main.c      **** }
 1253              		.loc 1 236 0
 1254 0018 80BD     		pop	{r7, pc}
 1255              	.L31:
 1256 001a 00BF     		.align	2
 1257              	.L30:
 1258 001c 00000000 		.word	BT_ENABLED
 1259 0020 00000000 		.word	.LC0
 1260 0024 00000000 		.word	movement_state
 1261              		.cfi_endproc
 1262              	.LFE68:
 1263              		.size	button, .-button
 1264              		.section	.text.isr_adcTimer,"ax",%progbits
 1265              		.align	2
 1266              		.global	isr_adcTimer
 1267              		.thumb
 1268              		.thumb_func
 1269              		.type	isr_adcTimer, %function
 1270              	isr_adcTimer:
 1271              	.LFB69:
 237:.\main.c      **** 
 238:.\main.c      **** CY_ISR(isr_adcTimer)
 239:.\main.c      **** {
 1272              		.loc 1 239 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 1, uses_anonymous_args = 0
 1276 0000 80B5     		push	{r7, lr}
 1277              		.cfi_def_cfa_offset 8
 1278              		.cfi_offset 7, -8
 1279              		.cfi_offset 14, -4
 1280 0002 00AF     		add	r7, sp, #0
 1281              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 28


 240:.\main.c      ****     ADC_StartConvert();
 1282              		.loc 1 240 0
 1283 0004 FFF7FEFF 		bl	ADC_StartConvert
 241:.\main.c      **** }
 1284              		.loc 1 241 0
 1285 0008 80BD     		pop	{r7, pc}
 1286              		.cfi_endproc
 1287              	.LFE69:
 1288              		.size	isr_adcTimer, .-isr_adcTimer
 1289 000a 00BF     		.section	.rodata
 1290 0012 0000     		.align	2
 1291              	.LC1:
 1292 0014 44656164 		.ascii	"Deadzone left\015\012\000"
 1292      7A6F6E65 
 1292      206C6566 
 1292      740D0A00 
 1293              		.section	.text.isr_deadzone,"ax",%progbits
 1294              		.align	2
 1295              		.global	isr_deadzone
 1296              		.thumb
 1297              		.thumb_func
 1298              		.type	isr_deadzone, %function
 1299              	isr_deadzone:
 1300              	.LFB70:
 242:.\main.c      **** 
 243:.\main.c      **** CY_ISR(isr_deadzone)
 244:.\main.c      **** {
 1301              		.loc 1 244 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 1, uses_anonymous_args = 0
 1305 0000 80B5     		push	{r7, lr}
 1306              		.cfi_def_cfa_offset 8
 1307              		.cfi_offset 7, -8
 1308              		.cfi_offset 14, -4
 1309 0002 00AF     		add	r7, sp, #0
 1310              		.cfi_def_cfa_register 7
 245:.\main.c      ****     sensorsDisabled = 0;
 1311              		.loc 1 245 0
 1312 0004 054B     		ldr	r3, .L34
 1313 0006 0022     		movs	r2, #0
 1314 0008 1A60     		str	r2, [r3]
 246:.\main.c      ****     deadzone = 0;
 1315              		.loc 1 246 0
 1316 000a 054B     		ldr	r3, .L34+4
 1317 000c 0022     		movs	r2, #0
 1318 000e 1A70     		strb	r2, [r3]
 247:.\main.c      ****     Timer_Deadzone_Stop();
 1319              		.loc 1 247 0
 1320 0010 FFF7FEFF 		bl	Timer_Deadzone_Stop
 248:.\main.c      ****     UART_PutString("Deadzone left\r\n");
 1321              		.loc 1 248 0
 1322 0014 0348     		ldr	r0, .L34+8
 1323 0016 FFF7FEFF 		bl	UART_PutString
 249:.\main.c      **** }
 1324              		.loc 1 249 0
 1325 001a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 29


 1326              	.L35:
 1327              		.align	2
 1328              	.L34:
 1329 001c 00000000 		.word	sensorsDisabled
 1330 0020 00000000 		.word	deadzone
 1331 0024 14000000 		.word	.LC1
 1332              		.cfi_endproc
 1333              	.LFE70:
 1334              		.size	isr_deadzone, .-isr_deadzone
 1335              		.section	.rodata
 1336              		.align	2
 1337              	.LC2:
 1338 0024 44697374 		.ascii	"Dist travel: %d\015\012\000"
 1338      20747261 
 1338      76656C3A 
 1338      2025640D 
 1338      0A00
 1339 0036 0000     		.align	2
 1340              	.LC3:
 1341 0038 54726967 		.ascii	"Trigger quad\015\012\000"
 1341      67657220 
 1341      71756164 
 1341      0D0A00
 1342 0047 00       		.align	2
 1343              	.LC4:
 1344 0048 696E7374 		.ascii	"instruct trig:%d\015\012\000"
 1344      72756374 
 1344      20747269 
 1344      673A2564 
 1344      0D0A00
 1345              		.global	__aeabi_d2iz
 1346 005b 00       		.align	2
 1347              	.LC5:
 1348 005c 54617267 		.ascii	"Target dist: %d\015\012\000"
 1348      65742064 
 1348      6973743A 
 1348      2025640D 
 1348      0A00
 1349 006e 0000     		.align	2
 1350              	.LC6:
 1351 0070 696E7374 		.ascii	"instr count:%d\015\012\000"
 1351      7220636F 
 1351      756E743A 
 1351      25640D0A 
 1351      00
 1352 0081 000000   		.align	2
 1353              	.LC7:
 1354 0084 74726176 		.ascii	"travel:%d, sensors on:%d\015\012\000"
 1354      656C3A25 
 1354      642C2073 
 1354      656E736F 
 1354      7273206F 
 1355 009f 00       		.align	2
 1356              	.LC8:
 1357 00a0 54726967 		.ascii	"Trigger intersection\015\012\000"
 1357      67657220 
 1357      696E7465 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 30


 1357      72736563 
 1357      74696F6E 
 1358              		.section	.text.main,"ax",%progbits
 1359              		.align	2
 1360              		.global	main
 1361              		.thumb
 1362              		.thumb_func
 1363              		.type	main, %function
 1364              	main:
 1365              	.LFB71:
 250:.\main.c      **** 
 251:.\main.c      **** /*-------------------------------------------------------------------------------------------*/
 252:.\main.c      **** 
 253:.\main.c      **** /* -----------------------------------------MAIN-----------------------------MAIN------------------
 254:.\main.c      **** int main()
 255:.\main.c      **** {  
 1366              		.loc 1 255 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 40
 1369              		@ frame_needed = 1, uses_anonymous_args = 0
 1370 0000 90B5     		push	{r4, r7, lr}
 1371              		.cfi_def_cfa_offset 12
 1372              		.cfi_offset 4, -12
 1373              		.cfi_offset 7, -8
 1374              		.cfi_offset 14, -4
 1375 0002 8BB0     		sub	sp, sp, #44
 1376              		.cfi_def_cfa_offset 56
 1377 0004 00AF     		add	r7, sp, #0
 1378              		.cfi_def_cfa_register 7
 256:.\main.c      **** 
 257:.\main.c      **** // ----- INITIALIZATIONS ----------
 258:.\main.c      ****     CYGlobalIntEnable;
 1379              		.loc 1 258 0
 1380              	@ 258 ".\main.c" 1
 1381 0006 62B6     		CPSIE   i
 1382              	@ 0 "" 2
 259:.\main.c      ****     if(ENABLE_PWM)
 260:.\main.c      ****     {
 261:.\main.c      ****         PWM_1_Start();// starting the pwm
 1383              		.loc 1 261 0
 1384              		.thumb
 1385 0008 FFF7FEFF 		bl	PWM_1_Start
 262:.\main.c      ****         PWM_2_Start();// starting the pwm
 1386              		.loc 1 262 0
 1387 000c FFF7FEFF 		bl	PWM_2_Start
 263:.\main.c      ****     }
 264:.\main.c      ****     
 265:.\main.c      ****     if(ENABLE_ADC)
 266:.\main.c      ****     {
 267:.\main.c      ****         ADC_Start();
 268:.\main.c      ****         isr_eoc_StartEx(adc_isr);
 269:.\main.c      ****         //ADC_StartConvert();
 270:.\main.c      ****         
 271:.\main.c      ****         //start the ADC timer for software trigger mode
 272:.\main.c      ****         Timer_TS_Start();
 273:.\main.c      ****         isr_TS_StartEx(isr_adcTimer);
 274:.\main.c      ****     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 31


 275:.\main.c      ****     
 276:.\main.c      ****     if (ENABLE_QUAD)
 277:.\main.c      ****     {
 278:.\main.c      ****         QuadDec_M1_Start();
 1388              		.loc 1 278 0
 1389 0010 FFF7FEFF 		bl	QuadDec_M1_Start
 279:.\main.c      ****         QuadDec_M2_Start();
 1390              		.loc 1 279 0
 1391 0014 FFF7FEFF 		bl	QuadDec_M2_Start
 280:.\main.c      ****         
 281:.\main.c      ****         isr_quad1_StartEx(isr_quad1);
 1392              		.loc 1 281 0
 1393 0018 B548     		ldr	r0, .L98
 1394 001a FFF7FEFF 		bl	isr_quad1_StartEx
 282:.\main.c      ****         isr_turn_count_StartEx(isr_turn_timer);
 1395              		.loc 1 282 0
 1396 001e B548     		ldr	r0, .L98+4
 1397 0020 FFF7FEFF 		bl	isr_turn_count_StartEx
 283:.\main.c      ****         
 284:.\main.c      ****         Timer_1_Start();
 1398              		.loc 1 284 0
 1399 0024 FFF7FEFF 		bl	Timer_1_Start
 285:.\main.c      ****     }
 286:.\main.c      ****     
 287:.\main.c      ****     if(ENABLE_STOP){
 288:.\main.c      ****         isr_OnLine_StartEx(Stop_on_line);
 289:.\main.c      ****         
 290:.\main.c      ****     }
 291:.\main.c      ****     isr_button_StartEx(button);
 1400              		.loc 1 291 0
 1401 0028 B348     		ldr	r0, .L98+8
 1402 002a FFF7FEFF 		bl	isr_button_StartEx
 292:.\main.c      ****     isr_action_deadzone_StartEx(isr_deadzone);
 1403              		.loc 1 292 0
 1404 002e B348     		ldr	r0, .L98+12
 1405 0030 FFF7FEFF 		bl	isr_action_deadzone_StartEx
 293:.\main.c      **** 
 294:.\main.c      ****     // ------USB SETUP ----------------    
 295:.\main.c      ****     if (USE_USB){    
 296:.\main.c      ****         USBUART_Start(0,USBUART_5V_OPERATION);
 1406              		.loc 1 296 0
 1407 0034 0020     		movs	r0, #0
 1408 0036 0121     		movs	r1, #1
 1409 0038 FFF7FEFF 		bl	USBUART_Start
 297:.\main.c      ****         if (USBUART_GetConfiguration())
 1410              		.loc 1 297 0
 1411 003c FFF7FEFF 		bl	USBUART_GetConfiguration
 1412 0040 0346     		mov	r3, r0
 1413 0042 002B     		cmp	r3, #0
 1414 0044 01D0     		beq	.L37
 298:.\main.c      ****             {
 299:.\main.c      ****                  USBUART_CDC_Init();
 1415              		.loc 1 299 0
 1416 0046 FFF7FEFF 		bl	USBUART_CDC_Init
 1417              	.L37:
 300:.\main.c      ****             }
 301:.\main.c      ****     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 32


 302:.\main.c      ****     
 303:.\main.c      ****     if(BIN_ENABLED){
 1418              		.loc 1 303 0
 1419 004a AD4B     		ldr	r3, .L98+16
 1420 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 004e 002B     		cmp	r3, #0
 1422 0050 01D0     		beq	.L38
 304:.\main.c      ****         changeToRF();
 1423              		.loc 1 304 0
 1424 0052 FFF7FEFF 		bl	changeToRF
 1425              	.L38:
 305:.\main.c      ****     }
 306:.\main.c      ****     
 307:.\main.c      ****     if(BT_ENABLED){
 1426              		.loc 1 307 0
 1427 0056 AB4B     		ldr	r3, .L98+20
 1428 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1429 005a 002B     		cmp	r3, #0
 1430 005c 01D0     		beq	.L39
 308:.\main.c      ****         changeToBT();
 1431              		.loc 1 308 0
 1432 005e FFF7FEFF 		bl	changeToBT
 1433              	.L39:
 309:.\main.c      ****     }
 310:.\main.c      ****     
 311:.\main.c      ****     uint16 actionDebounce = 0;
 1434              		.loc 1 311 0
 1435 0062 0023     		movs	r3, #0
 1436 0064 FB84     		strh	r3, [r7, #38]	@ movhi
 1437              	.L95:
 312:.\main.c      ****     
 313:.\main.c      ****     //usbPutString("Started");
 314:.\main.c      ****     for(;;)
 315:.\main.c      ****     {
 316:.\main.c      ****         if(ENABLE_ADC) print_ADC();
 317:.\main.c      ****         if(ENABLE_QUAD) Quad_Dec_response();
 1438              		.loc 1 317 0
 1439 0066 FFF7FEFF 		bl	Quad_Dec_response
 318:.\main.c      ****         if(BIN_ENABLED == 1)
 1440              		.loc 1 318 0
 1441 006a A54B     		ldr	r3, .L98+16
 1442 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1443 006e 012B     		cmp	r3, #1
 1444 0070 03D1     		bne	.L40
 319:.\main.c      ****         {
 320:.\main.c      ****             handle_rx_binary();
 1445              		.loc 1 320 0
 1446 0072 FFF7FEFF 		bl	handle_rx_binary
 321:.\main.c      ****             print_RF();
 1447              		.loc 1 321 0
 1448 0076 FFF7FEFF 		bl	print_RF
 1449              	.L40:
 322:.\main.c      ****         }
 323:.\main.c      ****         // NO_TRACK, CURVE_TRACK, U_TRACK, SQUARE_TRACK
 324:.\main.c      ****        
 325:.\main.c      ****         readFrontSensors(frontSensors);
 1450              		.loc 1 325 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 33


 1451 007a A348     		ldr	r0, .L98+24
 1452 007c FFF7FEFF 		bl	readFrontSensors
 326:.\main.c      ****         
 327:.\main.c      ****         switch(track_mode)
 1453              		.loc 1 327 0
 1454 0080 A24B     		ldr	r3, .L98+28
 1455 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1456 0084 072B     		cmp	r3, #7
 1457 0086 00F2FE82 		bhi	.L41
 1458 008a 01A2     		adr	r2, .L43
 1459 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1460              		.p2align 2
 1461              	.L43:
 1462 0090 87060000 		.word	.L41+1
 1463 0094 87060000 		.word	.L41+1
 1464 0098 87060000 		.word	.L41+1
 1465 009c B1000000 		.word	.L46+1
 1466 00a0 87060000 		.word	.L41+1
 1467 00a4 F5000000 		.word	.L48+1
 1468 00a8 1B010000 		.word	.L49+1
 1469 00ac 1B010000 		.word	.L49+1
 1470              		.p2align 1
 1471              	.L46:
 328:.\main.c      ****         {
 329:.\main.c      ****             case SQUARE_TRACK:
 330:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN)
 1472              		.loc 1 330 0
 1473 00b0 974B     		ldr	r3, .L98+32
 1474 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1475 00b4 012B     		cmp	r3, #1
 1476 00b6 1CD0     		beq	.L50
 1477              		.loc 1 330 0 is_stmt 0 discriminator 1
 1478 00b8 954B     		ldr	r3, .L98+32
 1479 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1480 00bc 022B     		cmp	r3, #2
 1481 00be 18D0     		beq	.L50
 331:.\main.c      ****                 {
 332:.\main.c      ****                     if(frontSensors[0] == 1 && frontSensors[2] == 1){ //left turn
 1482              		.loc 1 332 0 is_stmt 1
 1483 00c0 914B     		ldr	r3, .L98+24
 1484 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 00c4 012B     		cmp	r3, #1
 1486 00c6 06D1     		bne	.L51
 1487              		.loc 1 332 0 is_stmt 0 discriminator 1
 1488 00c8 8F4B     		ldr	r3, .L98+24
 1489 00ca 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1490 00cc 012B     		cmp	r3, #1
 1491 00ce 02D1     		bne	.L51
 333:.\main.c      ****                         initTurnLeft();
 1492              		.loc 1 333 0 is_stmt 1
 1493 00d0 FFF7FEFF 		bl	initTurnLeft
 1494 00d4 0DE0     		b	.L50
 1495              	.L51:
 334:.\main.c      ****                     }
 335:.\main.c      ****                     else if (frontSensors[4] == 1 && frontSensors[2] == 1) //right turn
 1496              		.loc 1 335 0
 1497 00d6 8C4B     		ldr	r3, .L98+24
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 34


 1498 00d8 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1499 00da 012B     		cmp	r3, #1
 1500 00dc 06D1     		bne	.L52
 1501              		.loc 1 335 0 is_stmt 0 discriminator 1
 1502 00de 8A4B     		ldr	r3, .L98+24
 1503 00e0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1504 00e2 012B     		cmp	r3, #1
 1505 00e4 02D1     		bne	.L52
 336:.\main.c      ****                     {
 337:.\main.c      ****                         initTurnRight();
 1506              		.loc 1 337 0 is_stmt 1
 1507 00e6 FFF7FEFF 		bl	initTurnRight
 1508 00ea 02E0     		b	.L50
 1509              	.L52:
 338:.\main.c      ****                     }
 339:.\main.c      ****                     else inittrackLineZ();
 1510              		.loc 1 339 0
 1511 00ec FFF7FEFF 		bl	inittrackLineZ
 340:.\main.c      ****                 }
 341:.\main.c      ****             break;
 1512              		.loc 1 341 0
 1513 00f0 C9E2     		b	.L41
 1514              	.L50:
 1515 00f2 C8E2     		b	.L41
 1516              	.L48:
 342:.\main.c      ****             case NO_TRACK:
 343:.\main.c      ****             break;
 344:.\main.c      ****             case CURVE_TRACK:
 345:.\main.c      ****             break;
 346:.\main.c      ****             case U_TRACK:
 347:.\main.c      ****             break;
 348:.\main.c      ****             case QUAD_STOP:
 349:.\main.c      ****             break;
 350:.\main.c      ****             case RF_STOP:
 351:.\main.c      ****                 if(initial_pos_valid == 1)
 1517              		.loc 1 351 0
 1518 00f4 874B     		ldr	r3, .L98+36
 1519 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1520 00f8 012B     		cmp	r3, #1
 1521 00fa 0DD1     		bne	.L53
 352:.\main.c      ****                 {
 353:.\main.c      ****                     //changeToBT();
 354:.\main.c      ****                    // UART_PutString("Valid RF detected!");
 355:.\main.c      ****                     //changeToRF();
 356:.\main.c      ****                     initial_x_pos = system_state.robot_xpos;
 1522              		.loc 1 356 0
 1523 00fc 864B     		ldr	r3, .L98+40
 1524 00fe 5A88     		ldrh	r2, [r3, #2]
 1525 0100 864B     		ldr	r3, .L98+44
 1526 0102 1A80     		strh	r2, [r3]	@ movhi
 357:.\main.c      ****                     initial_y_pos = system_state.robot_ypos;
 1527              		.loc 1 357 0
 1528 0104 844B     		ldr	r3, .L98+40
 1529 0106 9A88     		ldrh	r2, [r3, #4]
 1530 0108 854B     		ldr	r3, .L98+48
 1531 010a 1A80     		strh	r2, [r3]	@ movhi
 358:.\main.c      ****                     initial_pos_valid = 2;
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 35


 1532              		.loc 1 358 0
 1533 010c 814B     		ldr	r3, .L98+36
 1534 010e 0222     		movs	r2, #2
 1535 0110 1A70     		strb	r2, [r3]
 359:.\main.c      ****                     initForward();
 1536              		.loc 1 359 0
 1537 0112 FFF7FEFF 		bl	initForward
 360:.\main.c      ****                 }
 361:.\main.c      ****             break;
 1538              		.loc 1 361 0
 1539 0116 B6E2     		b	.L41
 1540              	.L53:
 1541 0118 B5E2     		b	.L41
 1542              	.L49:
 362:.\main.c      ****             case MAP_TRAVERSE:
 363:.\main.c      ****             case DEST_TEST:
 364:.\main.c      ****                 if(movement_state != LTURN && movement_state != RTURN && movement_state != UTURN){
 1543              		.loc 1 364 0
 1544 011a 7D4B     		ldr	r3, .L98+32
 1545 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1546 011e 012B     		cmp	r3, #1
 1547 0120 00F0B082 		beq	.L54
 1548              		.loc 1 364 0 is_stmt 0 discriminator 1
 1549 0124 7A4B     		ldr	r3, .L98+32
 1550 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1551 0128 022B     		cmp	r3, #2
 1552 012a 00F0AB82 		beq	.L54
 1553              		.loc 1 364 0 discriminator 2
 1554 012e 784B     		ldr	r3, .L98+32
 1555 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1556 0132 072B     		cmp	r3, #7
 1557 0134 00F0A682 		beq	.L54
 1558              	.LBB4:
 365:.\main.c      ****                     //if(instructionCount > instructionLength) initBrake();
 366:.\main.c      ****                     //when we hit an intersection, verify the next step then evaluate
 367:.\main.c      ****                     char nextStep = instructions[instructionCount];
 1559              		.loc 1 367 0 is_stmt 1
 1560 0138 7A4B     		ldr	r3, .L98+52
 1561 013a 1B88     		ldrh	r3, [r3]
 1562 013c 1A46     		mov	r2, r3
 1563 013e 7A4B     		ldr	r3, .L98+56
 1564 0140 9B5C     		ldrb	r3, [r3, r2]
 1565 0142 87F82330 		strb	r3, [r7, #35]
 368:.\main.c      ****                     leftOn = frontSensors[0] && frontSensors[2];
 1566              		.loc 1 368 0
 1567 0146 704B     		ldr	r3, .L98+24
 1568 0148 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1569 014a 002B     		cmp	r3, #0
 1570 014c 05D0     		beq	.L55
 1571              		.loc 1 368 0 is_stmt 0 discriminator 1
 1572 014e 6E4B     		ldr	r3, .L98+24
 1573 0150 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1574 0152 002B     		cmp	r3, #0
 1575 0154 01D0     		beq	.L55
 1576              		.loc 1 368 0 discriminator 3
 1577 0156 0123     		movs	r3, #1
 1578 0158 00E0     		b	.L56
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 36


 1579              	.L55:
 1580              		.loc 1 368 0 discriminator 4
 1581 015a 0023     		movs	r3, #0
 1582              	.L56:
 1583              		.loc 1 368 0 discriminator 6
 1584 015c DAB2     		uxtb	r2, r3
 1585 015e 734B     		ldr	r3, .L98+60
 1586 0160 1A70     		strb	r2, [r3]
 369:.\main.c      ****                     rightOn = frontSensors[4] && frontSensors[2];
 1587              		.loc 1 369 0 is_stmt 1 discriminator 6
 1588 0162 694B     		ldr	r3, .L98+24
 1589 0164 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1590 0166 002B     		cmp	r3, #0
 1591 0168 05D0     		beq	.L57
 1592              		.loc 1 369 0 is_stmt 0 discriminator 1
 1593 016a 674B     		ldr	r3, .L98+24
 1594 016c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1595 016e 002B     		cmp	r3, #0
 1596 0170 01D0     		beq	.L57
 1597              		.loc 1 369 0 discriminator 3
 1598 0172 0123     		movs	r3, #1
 1599 0174 00E0     		b	.L58
 1600              	.L57:
 1601              		.loc 1 369 0 discriminator 4
 1602 0176 0023     		movs	r3, #0
 1603              	.L58:
 1604              		.loc 1 369 0 discriminator 6
 1605 0178 DAB2     		uxtb	r2, r3
 1606 017a 6D4B     		ldr	r3, .L98+64
 1607 017c 1A70     		strb	r2, [r3]
 370:.\main.c      **** 
 371:.\main.c      ****                     //else if (overshot_target == 1 && (nextStep == 'D' || nextStep == 'U' || nextS
 372:.\main.c      ****                     if (overshot_target == 1)
 1608              		.loc 1 372 0 is_stmt 1 discriminator 6
 1609 017e 6D4B     		ldr	r3, .L98+68
 1610 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611 0182 012B     		cmp	r3, #1
 1612 0184 40F06C81 		bne	.L59
 1613              	.LBB5:
 373:.\main.c      ****                     {
 374:.\main.c      ****                                 
 375:.\main.c      ****                                 //instructionCount += 2;
 376:.\main.c      ****                                 //nextStep = instructions[instructionCount]; 
 377:.\main.c      ****                         
 378:.\main.c      ****                                 isr_quad1_Stop();
 1614              		.loc 1 378 0
 1615 0188 FFF7FEFF 		bl	isr_quad1_Stop
 379:.\main.c      ****                                 
 380:.\main.c      ****                                 char mes[32];
 381:.\main.c      ****                                 sprintf(mes, "Dist travel: %d\r\n", accum_dist);
 1616              		.loc 1 381 0
 1617 018c 6A4B     		ldr	r3, .L98+72
 1618 018e 1B88     		ldrh	r3, [r3]
 1619 0190 1BB2     		sxth	r3, r3
 1620 0192 3A46     		mov	r2, r7
 1621 0194 1046     		mov	r0, r2
 1622 0196 6949     		ldr	r1, .L98+76
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 37


 1623 0198 1A46     		mov	r2, r3
 1624 019a FFF7FEFF 		bl	sprintf
 382:.\main.c      ****                                  UART_PutString(mes);
 1625              		.loc 1 382 0
 1626 019e 3B46     		mov	r3, r7
 1627 01a0 1846     		mov	r0, r3
 1628 01a2 FFF7FEFF 		bl	UART_PutString
 383:.\main.c      ****                                  accum_dist = 0;
 1629              		.loc 1 383 0
 1630 01a6 644B     		ldr	r3, .L98+72
 1631 01a8 0022     		movs	r2, #0
 1632 01aa 1A80     		strh	r2, [r3]	@ movhi
 384:.\main.c      ****                                 uint8 nextStepDist;
 385:.\main.c      ****                                 if(instructionCount <= instructionLength - 3) nextStepDist = instru
 1633              		.loc 1 385 0
 1634 01ac 5D4B     		ldr	r3, .L98+52
 1635 01ae 1B88     		ldrh	r3, [r3]
 1636 01b0 1A46     		mov	r2, r3
 1637 01b2 634B     		ldr	r3, .L98+80
 1638 01b4 1B88     		ldrh	r3, [r3]
 1639 01b6 033B     		subs	r3, r3, #3
 1640 01b8 9A42     		cmp	r2, r3
 1641 01ba 07DC     		bgt	.L60
 1642              		.loc 1 385 0 is_stmt 0 discriminator 1
 1643 01bc 594B     		ldr	r3, .L98+52
 1644 01be 1B88     		ldrh	r3, [r3]
 1645 01c0 0333     		adds	r3, r3, #3
 1646 01c2 594A     		ldr	r2, .L98+56
 1647 01c4 D35C     		ldrb	r3, [r2, r3]
 1648 01c6 87F82530 		strb	r3, [r7, #37]
 1649 01ca 02E0     		b	.L61
 1650              	.L60:
 386:.\main.c      ****                                 else nextStepDist = 0;
 1651              		.loc 1 386 0 is_stmt 1
 1652 01cc 0023     		movs	r3, #0
 1653 01ce 87F82530 		strb	r3, [r7, #37]
 1654              	.L61:
 387:.\main.c      ****                                 
 388:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 1655              		.loc 1 388 0
 1656 01d2 97F82530 		ldrb	r3, [r7, #37]	@ zero_extendqisi2
 1657 01d6 9BB2     		uxth	r3, r3
 1658 01d8 1A46     		mov	r2, r3	@ movhi
 1659 01da D200     		lsls	r2, r2, #3
 1660 01dc 1344     		add	r3, r3, r2
 1661 01de 1B01     		lsls	r3, r3, #4
 1662 01e0 9BB2     		uxth	r3, r3
 1663 01e2 9AB2     		uxth	r2, r3
 1664 01e4 574B     		ldr	r3, .L98+84
 1665 01e6 1A80     		strh	r2, [r3]	@ movhi
 389:.\main.c      ****                                 
 390:.\main.c      ****                                 
 391:.\main.c      ****                                     UART_PutString("Trigger quad\r\n");
 1666              		.loc 1 391 0
 1667 01e8 5748     		ldr	r0, .L98+88
 1668 01ea FFF7FEFF 		bl	UART_PutString
 392:.\main.c      ****                                     sprintf(mes, "instruct trig:%d\r\n", instructions[instructionCo
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 38


 1669              		.loc 1 392 0
 1670 01ee 4D4B     		ldr	r3, .L98+52
 1671 01f0 1B88     		ldrh	r3, [r3]
 1672 01f2 1A46     		mov	r2, r3
 1673 01f4 4C4B     		ldr	r3, .L98+56
 1674 01f6 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1675 01f8 1A46     		mov	r2, r3
 1676 01fa 3B46     		mov	r3, r7
 1677 01fc 1846     		mov	r0, r3
 1678 01fe 5349     		ldr	r1, .L98+92
 1679 0200 FFF7FEFF 		bl	sprintf
 393:.\main.c      ****                                     UART_PutString(mes);
 1680              		.loc 1 393 0
 1681 0204 3B46     		mov	r3, r7
 1682 0206 1846     		mov	r0, r3
 1683 0208 FFF7FEFF 		bl	UART_PutString
 394:.\main.c      ****                                     nextStep = instructions[instructionCount];
 1684              		.loc 1 394 0
 1685 020c 454B     		ldr	r3, .L98+52
 1686 020e 1B88     		ldrh	r3, [r3]
 1687 0210 1A46     		mov	r2, r3
 1688 0212 454B     		ldr	r3, .L98+56
 1689 0214 9B5C     		ldrb	r3, [r3, r2]
 1690 0216 87F82330 		strb	r3, [r7, #35]
 395:.\main.c      ****                                     switch(nextStep)
 1691              		.loc 1 395 0
 1692 021a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1693 021e 443B     		subs	r3, r3, #68
 1694 0220 112B     		cmp	r3, #17
 1695 0222 00F2EA80 		bhi	.L62
 1696 0226 01A2     		adr	r2, .L64
 1697 0228 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1698              		.p2align 2
 1699              	.L64:
 1700 022c BD020000 		.word	.L63+1
 1701 0230 FB030000 		.word	.L62+1
 1702 0234 FB030000 		.word	.L62+1
 1703 0238 FB030000 		.word	.L62+1
 1704 023c FB030000 		.word	.L62+1
 1705 0240 FB030000 		.word	.L62+1
 1706 0244 FB030000 		.word	.L62+1
 1707 0248 FB030000 		.word	.L62+1
 1708 024c AB030000 		.word	.L65+1
 1709 0250 FB030000 		.word	.L62+1
 1710 0254 FB030000 		.word	.L62+1
 1711 0258 FB030000 		.word	.L62+1
 1712 025c FB030000 		.word	.L62+1
 1713 0260 FB030000 		.word	.L62+1
 1714 0264 D3030000 		.word	.L66+1
 1715 0268 61030000 		.word	.L67+1
 1716 026c FB030000 		.word	.L62+1
 1717 0270 75020000 		.word	.L68+1
 1718              		.p2align 1
 1719              	.L68:
 396:.\main.c      ****                                     {
 397:.\main.c      ****                                         case 'U':
 398:.\main.c      ****                                              Timer_Deadzone_WriteCounter(U_DEADZONE);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 39


 1720              		.loc 1 398 0
 1721 0274 3648     		ldr	r0, .L98+96
 1722 0276 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 399:.\main.c      ****                                             initTurnU();
 1723              		.loc 1 399 0
 1724 027a FFF7FEFF 		bl	initTurnU
 400:.\main.c      ****                                             //target_distance_quad += 208;
 401:.\main.c      ****                                             target_distance_quad -= (U_OFFSET - QUAD_PER_UNIT * 0.5
 1725              		.loc 1 401 0
 1726 027e 314B     		ldr	r3, .L98+84
 1727 0280 1B88     		ldrh	r3, [r3]
 1728 0282 1BB2     		sxth	r3, r3
 1729 0284 1846     		mov	r0, r3
 1730 0286 FFF7FEFF 		bl	__aeabi_i2d
 1731 028a 0246     		mov	r2, r0
 1732 028c 0B46     		mov	r3, r1
 1733 028e 1046     		mov	r0, r2
 1734 0290 1946     		mov	r1, r3
 1735 0292 4FF00002 		mov	r2, #0
 1736 0296 2F4B     		ldr	r3, .L98+100
 1737 0298 FFF7FEFF 		bl	__aeabi_dsub
 1738 029c 0246     		mov	r2, r0
 1739 029e 0B46     		mov	r3, r1
 1740 02a0 1046     		mov	r0, r2
 1741 02a2 1946     		mov	r1, r3
 1742 02a4 FFF7FEFF 		bl	__aeabi_d2iz
 1743 02a8 0346     		mov	r3, r0
 1744 02aa 9AB2     		uxth	r2, r3
 1745 02ac 254B     		ldr	r3, .L98+84
 1746 02ae 1A80     		strh	r2, [r3]	@ movhi
 402:.\main.c      ****                                             Timer_Deadzone_Start();
 1747              		.loc 1 402 0
 1748 02b0 FFF7FEFF 		bl	Timer_Deadzone_Start
 403:.\main.c      ****                                              deadzone = 1;
 1749              		.loc 1 403 0
 1750 02b4 284B     		ldr	r3, .L98+104
 1751 02b6 0122     		movs	r2, #1
 1752 02b8 1A70     		strb	r2, [r3]
 404:.\main.c      ****                                         break;
 1753              		.loc 1 404 0
 1754 02ba 9EE0     		b	.L62
 1755              	.L63:
 405:.\main.c      ****                                         case 'D':
 406:.\main.c      ****                                             target_distance_quad -= QUAD_PER_UNIT * 0.5;
 1756              		.loc 1 406 0
 1757 02bc 214B     		ldr	r3, .L98+84
 1758 02be 1B88     		ldrh	r3, [r3]
 1759 02c0 1BB2     		sxth	r3, r3
 1760 02c2 1846     		mov	r0, r3
 1761 02c4 FFF7FEFF 		bl	__aeabi_i2d
 1762 02c8 0246     		mov	r2, r0
 1763 02ca 0B46     		mov	r3, r1
 1764 02cc 1046     		mov	r0, r2
 1765 02ce 1946     		mov	r1, r3
 1766 02d0 4FF00002 		mov	r2, #0
 1767 02d4 214B     		ldr	r3, .L98+108
 1768 02d6 FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 40


 1769 02da 0246     		mov	r2, r0
 1770 02dc 0B46     		mov	r3, r1
 1771 02de 1046     		mov	r0, r2
 1772 02e0 1946     		mov	r1, r3
 1773 02e2 FFF7FEFF 		bl	__aeabi_d2iz
 1774 02e6 0346     		mov	r3, r0
 1775 02e8 9AB2     		uxth	r2, r3
 1776 02ea 164B     		ldr	r3, .L98+84
 1777 02ec 1A80     		strh	r2, [r3]	@ movhi
 407:.\main.c      ****                                             //do nothing
 408:.\main.c      ****                                         break;
 1778              		.loc 1 408 0
 1779 02ee 84E0     		b	.L62
 1780              	.L99:
 1781              		.align	2
 1782              	.L98:
 1783 02f0 00000000 		.word	isr_quad1
 1784 02f4 00000000 		.word	isr_turn_timer
 1785 02f8 00000000 		.word	button
 1786 02fc 00000000 		.word	isr_deadzone
 1787 0300 00000000 		.word	BIN_ENABLED
 1788 0304 00000000 		.word	BT_ENABLED
 1789 0308 00000000 		.word	frontSensors
 1790 030c 00000000 		.word	track_mode
 1791 0310 00000000 		.word	movement_state
 1792 0314 00000000 		.word	initial_pos_valid
 1793 0318 00000000 		.word	system_state
 1794 031c 00000000 		.word	initial_x_pos
 1795 0320 00000000 		.word	initial_y_pos
 1796 0324 00000000 		.word	instructionCount
 1797 0328 00000000 		.word	instructions
 1798 032c 00000000 		.word	leftOn
 1799 0330 00000000 		.word	rightOn
 1800 0334 00000000 		.word	overshot_target
 1801 0338 00000000 		.word	accum_dist
 1802 033c 24000000 		.word	.LC2
 1803 0340 00000000 		.word	instructionLength
 1804 0344 00000000 		.word	target_distance_quad
 1805 0348 38000000 		.word	.LC3
 1806 034c 48000000 		.word	.LC4
 1807 0350 905F0100 		.word	90000
 1808 0354 00004840 		.word	1078460416
 1809 0358 00000000 		.word	deadzone
 1810 035c 00005240 		.word	1079115776
 1811              	.L67:
 409:.\main.c      ****                                         case 'S':
 410:.\main.c      ****                                             inittrackLineZ();
 1812              		.loc 1 410 0
 1813 0360 FFF7FEFF 		bl	inittrackLineZ
 411:.\main.c      ****                                             Timer_Deadzone_WriteCounter(S_DEADZONE);
 1814              		.loc 1 411 0
 1815 0364 42F21070 		movw	r0, #10000
 1816 0368 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 412:.\main.c      ****                                              target_distance_quad -= (QUAD_PER_UNIT * 0.5);
 1817              		.loc 1 412 0
 1818 036c B34B     		ldr	r3, .L100
 1819 036e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 41


 1820 0370 1BB2     		sxth	r3, r3
 1821 0372 1846     		mov	r0, r3
 1822 0374 FFF7FEFF 		bl	__aeabi_i2d
 1823 0378 0246     		mov	r2, r0
 1824 037a 0B46     		mov	r3, r1
 1825 037c 1046     		mov	r0, r2
 1826 037e 1946     		mov	r1, r3
 1827 0380 4FF00002 		mov	r2, #0
 1828 0384 AE4B     		ldr	r3, .L100+4
 1829 0386 FFF7FEFF 		bl	__aeabi_dsub
 1830 038a 0246     		mov	r2, r0
 1831 038c 0B46     		mov	r3, r1
 1832 038e 1046     		mov	r0, r2
 1833 0390 1946     		mov	r1, r3
 1834 0392 FFF7FEFF 		bl	__aeabi_d2iz
 1835 0396 0346     		mov	r3, r0
 1836 0398 9AB2     		uxth	r2, r3
 1837 039a A84B     		ldr	r3, .L100
 1838 039c 1A80     		strh	r2, [r3]	@ movhi
 413:.\main.c      ****                                             Timer_Deadzone_Start();
 1839              		.loc 1 413 0
 1840 039e FFF7FEFF 		bl	Timer_Deadzone_Start
 414:.\main.c      ****                                             deadzone = 1;
 1841              		.loc 1 414 0
 1842 03a2 A84B     		ldr	r3, .L100+8
 1843 03a4 0122     		movs	r2, #1
 1844 03a6 1A70     		strb	r2, [r3]
 415:.\main.c      ****                                         break;
 1845              		.loc 1 415 0
 1846 03a8 27E0     		b	.L62
 1847              	.L65:
 416:.\main.c      ****                                         case 'L':
 417:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 418:.\main.c      ****                                         initTurnLeft();
 1848              		.loc 1 418 0
 1849 03aa FFF7FEFF 		bl	initTurnLeft
 419:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1850              		.loc 1 419 0
 1851 03ae 4CF25030 		movw	r0, #50000
 1852 03b2 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 420:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1853              		.loc 1 420 0
 1854 03b6 A14B     		ldr	r3, .L100
 1855 03b8 1B88     		ldrh	r3, [r3]
 1856 03ba 9BB2     		uxth	r3, r3
 1857 03bc 8A3B     		subs	r3, r3, #138
 1858 03be 9BB2     		uxth	r3, r3
 1859 03c0 9AB2     		uxth	r2, r3
 1860 03c2 9E4B     		ldr	r3, .L100
 1861 03c4 1A80     		strh	r2, [r3]	@ movhi
 421:.\main.c      ****                                         deadzone = 1;
 1862              		.loc 1 421 0
 1863 03c6 9F4B     		ldr	r3, .L100+8
 1864 03c8 0122     		movs	r2, #1
 1865 03ca 1A70     		strb	r2, [r3]
 422:.\main.c      ****                                         Timer_Deadzone_Start();
 1866              		.loc 1 422 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 42


 1867 03cc FFF7FEFF 		bl	Timer_Deadzone_Start
 423:.\main.c      ****                                             
 424:.\main.c      ****                                         break;
 1868              		.loc 1 424 0
 1869 03d0 13E0     		b	.L62
 1870              	.L66:
 425:.\main.c      ****                                         case 'R':
 426:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 427:.\main.c      ****                                         initTurnRight();
 1871              		.loc 1 427 0
 1872 03d2 FFF7FEFF 		bl	initTurnRight
 428:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 1873              		.loc 1 428 0
 1874 03d6 994B     		ldr	r3, .L100
 1875 03d8 1B88     		ldrh	r3, [r3]
 1876 03da 9BB2     		uxth	r3, r3
 1877 03dc 8A3B     		subs	r3, r3, #138
 1878 03de 9BB2     		uxth	r3, r3
 1879 03e0 9AB2     		uxth	r2, r3
 1880 03e2 964B     		ldr	r3, .L100
 1881 03e4 1A80     		strh	r2, [r3]	@ movhi
 429:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 430:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 1882              		.loc 1 430 0
 1883 03e6 4CF25030 		movw	r0, #50000
 1884 03ea FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 431:.\main.c      ****                                         deadzone = 1;
 1885              		.loc 1 431 0
 1886 03ee 954B     		ldr	r3, .L100+8
 1887 03f0 0122     		movs	r2, #1
 1888 03f2 1A70     		strb	r2, [r3]
 432:.\main.c      ****                                         Timer_Deadzone_Start();
 1889              		.loc 1 432 0
 1890 03f4 FFF7FEFF 		bl	Timer_Deadzone_Start
 433:.\main.c      ****                                             
 434:.\main.c      ****                                         break;
 1891              		.loc 1 434 0
 1892 03f8 00BF     		nop
 1893              	.L62:
 435:.\main.c      ****                                     }                                   
 436:.\main.c      ****                                     reached_target = 0;
 1894              		.loc 1 436 0
 1895 03fa 934B     		ldr	r3, .L100+12
 1896 03fc 0022     		movs	r2, #0
 1897 03fe 1A70     		strb	r2, [r3]
 437:.\main.c      ****                                     overshot_target = 0;
 1898              		.loc 1 437 0
 1899 0400 924B     		ldr	r3, .L100+16
 1900 0402 0022     		movs	r2, #0
 1901 0404 1A70     		strb	r2, [r3]
 438:.\main.c      ****                                     actionDebounce = 0;
 1902              		.loc 1 438 0
 1903 0406 0023     		movs	r3, #0
 1904 0408 FB84     		strh	r3, [r7, #38]	@ movhi
 439:.\main.c      ****                                     instructionCount += 2;
 1905              		.loc 1 439 0
 1906 040a 914B     		ldr	r3, .L100+20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 43


 1907 040c 1B88     		ldrh	r3, [r3]
 1908 040e 0233     		adds	r3, r3, #2
 1909 0410 9AB2     		uxth	r2, r3
 1910 0412 8F4B     		ldr	r3, .L100+20
 1911 0414 1A80     		strh	r2, [r3]	@ movhi
 440:.\main.c      ****                                     if(target_distance_quad < 0) target_distance_quad = 0;
 1912              		.loc 1 440 0
 1913 0416 894B     		ldr	r3, .L100
 1914 0418 1B88     		ldrh	r3, [r3]
 1915 041a 1BB2     		sxth	r3, r3
 1916 041c 002B     		cmp	r3, #0
 1917 041e 02DA     		bge	.L69
 1918              		.loc 1 440 0 is_stmt 0 discriminator 1
 1919 0420 864B     		ldr	r3, .L100
 1920 0422 0022     		movs	r2, #0
 1921 0424 1A80     		strh	r2, [r3]	@ movhi
 1922              	.L69:
 441:.\main.c      ****                                     //Timer_Deadzone_Start();
 442:.\main.c      ****                                     //deadzone = 1;
 443:.\main.c      ****                                     isr_quad1_StartEx(isr_quad1);
 1923              		.loc 1 443 0 is_stmt 1
 1924 0426 8B48     		ldr	r0, .L100+24
 1925 0428 FFF7FEFF 		bl	isr_quad1_StartEx
 444:.\main.c      ****                                     sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 1926              		.loc 1 444 0
 1927 042c 834B     		ldr	r3, .L100
 1928 042e 1B88     		ldrh	r3, [r3]
 1929 0430 1BB2     		sxth	r3, r3
 1930 0432 3A46     		mov	r2, r7
 1931 0434 1046     		mov	r0, r2
 1932 0436 8849     		ldr	r1, .L100+28
 1933 0438 1A46     		mov	r2, r3
 1934 043a FFF7FEFF 		bl	sprintf
 445:.\main.c      ****                                     UART_PutString(mes);
 1935              		.loc 1 445 0
 1936 043e 3B46     		mov	r3, r7
 1937 0440 1846     		mov	r0, r3
 1938 0442 FFF7FEFF 		bl	UART_PutString
 446:.\main.c      ****                                     sprintf(mes, "instr count:%d\r\n", instructionCount);
 1939              		.loc 1 446 0
 1940 0446 824B     		ldr	r3, .L100+20
 1941 0448 1B88     		ldrh	r3, [r3]
 1942 044a 1A46     		mov	r2, r3
 1943 044c 3B46     		mov	r3, r7
 1944 044e 1846     		mov	r0, r3
 1945 0450 8249     		ldr	r1, .L100+32
 1946 0452 FFF7FEFF 		bl	sprintf
 447:.\main.c      ****                                     UART_PutString(mes);
 1947              		.loc 1 447 0
 1948 0456 3B46     		mov	r3, r7
 1949 0458 1846     		mov	r0, r3
 1950 045a FFF7FEFF 		bl	UART_PutString
 1951              	.LBE5:
 1952 045e 11E1     		b	.L54
 1953              	.L59:
 448:.\main.c      ****                                     
 449:.\main.c      ****                     }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 44


 450:.\main.c      ****                     else if((leftOn && (nextStep != 'R')) || (rightOn && (nextStep != 'L'))){ //int
 1954              		.loc 1 450 0
 1955 0460 7F4B     		ldr	r3, .L100+36
 1956 0462 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1957 0464 002B     		cmp	r3, #0
 1958 0466 03D0     		beq	.L70
 1959              		.loc 1 450 0 is_stmt 0 discriminator 1
 1960 0468 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1961 046c 522B     		cmp	r3, #82
 1962 046e 09D1     		bne	.L71
 1963              	.L70:
 1964              		.loc 1 450 0 discriminator 3
 1965 0470 7C4B     		ldr	r3, .L100+40
 1966 0472 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1967 0474 002B     		cmp	r3, #0
 1968 0476 00F0DC80 		beq	.L72
 1969              		.loc 1 450 0 discriminator 4
 1970 047a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1971 047e 4C2B     		cmp	r3, #76
 1972 0480 00F0D780 		beq	.L72
 1973              	.L71:
 451:.\main.c      ****                         if(sensorsDisabled == 0)
 1974              		.loc 1 451 0 is_stmt 1
 1975 0484 784B     		ldr	r3, .L100+44
 1976 0486 1B68     		ldr	r3, [r3]
 1977 0488 002B     		cmp	r3, #0
 1978 048a 40F0D180 		bne	.L73
 452:.\main.c      ****                         {
 453:.\main.c      ****                             actionDebounce++;
 1979              		.loc 1 453 0
 1980 048e FB8C     		ldrh	r3, [r7, #38]
 1981 0490 0133     		adds	r3, r3, #1
 1982 0492 FB84     		strh	r3, [r7, #38]	@ movhi
 454:.\main.c      ****                             if(actionDebounce >= 400)
 1983              		.loc 1 454 0
 1984 0494 FB8C     		ldrh	r3, [r7, #38]
 1985 0496 B3F5C87F 		cmp	r3, #400
 1986 049a C0F0C980 		bcc	.L73
 1987              	.LBB6:
 455:.\main.c      ****                             {
 456:.\main.c      ****                                 char mes[32];
 457:.\main.c      ****                                 sprintf(mes, "travel:%d, sensors on:%d\r\n", accum_dist, reached_ta
 1988              		.loc 1 457 0
 1989 049e 734B     		ldr	r3, .L100+48
 1990 04a0 1B88     		ldrh	r3, [r3]
 1991 04a2 1AB2     		sxth	r2, r3
 1992 04a4 684B     		ldr	r3, .L100+12
 1993 04a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1994 04a8 1C46     		mov	r4, r3
 1995 04aa 3B46     		mov	r3, r7
 1996 04ac 1846     		mov	r0, r3
 1997 04ae 7049     		ldr	r1, .L100+52
 1998 04b0 2346     		mov	r3, r4
 1999 04b2 FFF7FEFF 		bl	sprintf
 458:.\main.c      ****                                  UART_PutString(mes);
 2000              		.loc 1 458 0
 2001 04b6 3B46     		mov	r3, r7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 45


 2002 04b8 1846     		mov	r0, r3
 2003 04ba FFF7FEFF 		bl	UART_PutString
 459:.\main.c      ****                             if(reached_target == 1)
 2004              		.loc 1 459 0
 2005 04be 624B     		ldr	r3, .L100+12
 2006 04c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2007 04c2 012B     		cmp	r3, #1
 2008 04c4 40F0B480 		bne	.L73
 2009              	.LBB7:
 460:.\main.c      ****                             {
 461:.\main.c      **** //                                if(nextStep == 'D')
 462:.\main.c      **** //                                {
 463:.\main.c      **** //                                    instructionCount += 2;
 464:.\main.c      **** //                                    nextStep = instructions[instructionCount]; 
 465:.\main.c      **** //                                }
 466:.\main.c      ****                                 
 467:.\main.c      ****                                 sensorsDisabled = 1;
 2010              		.loc 1 467 0
 2011 04c8 674B     		ldr	r3, .L100+44
 2012 04ca 0122     		movs	r2, #1
 2013 04cc 1A60     		str	r2, [r3]
 468:.\main.c      ****                                 UART_PutString("Trigger intersection\r\n");
 2014              		.loc 1 468 0
 2015 04ce 6948     		ldr	r0, .L100+56
 2016 04d0 FFF7FEFF 		bl	UART_PutString
 469:.\main.c      ****                                 //UART_PutString("Deadzone enter\r\n");
 470:.\main.c      ****                                 deadzone = 1;
 2017              		.loc 1 470 0
 2018 04d4 5B4B     		ldr	r3, .L100+8
 2019 04d6 0122     		movs	r2, #1
 2020 04d8 1A70     		strb	r2, [r3]
 471:.\main.c      ****                                 
 472:.\main.c      ****                                 accum_dist = 0;
 2021              		.loc 1 472 0
 2022 04da 644B     		ldr	r3, .L100+48
 2023 04dc 0022     		movs	r2, #0
 2024 04de 1A80     		strh	r2, [r3]	@ movhi
 473:.\main.c      ****                                 uint8 nextStepDist;
 474:.\main.c      ****                                 if(instructionCount <= instructionLength - 5) nextStepDist = instru
 2025              		.loc 1 474 0
 2026 04e0 5B4B     		ldr	r3, .L100+20
 2027 04e2 1B88     		ldrh	r3, [r3]
 2028 04e4 1A46     		mov	r2, r3
 2029 04e6 644B     		ldr	r3, .L100+60
 2030 04e8 1B88     		ldrh	r3, [r3]
 2031 04ea 053B     		subs	r3, r3, #5
 2032 04ec 9A42     		cmp	r2, r3
 2033 04ee 07DC     		bgt	.L75
 2034              		.loc 1 474 0 is_stmt 0 discriminator 1
 2035 04f0 574B     		ldr	r3, .L100+20
 2036 04f2 1B88     		ldrh	r3, [r3]
 2037 04f4 0333     		adds	r3, r3, #3
 2038 04f6 614A     		ldr	r2, .L100+64
 2039 04f8 D35C     		ldrb	r3, [r2, r3]
 2040 04fa 87F82430 		strb	r3, [r7, #36]
 2041 04fe 02E0     		b	.L76
 2042              	.L75:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 46


 475:.\main.c      ****                                 else nextStepDist = 0;
 2043              		.loc 1 475 0 is_stmt 1
 2044 0500 0023     		movs	r3, #0
 2045 0502 87F82430 		strb	r3, [r7, #36]
 2046              	.L76:
 476:.\main.c      ****                                 target_distance_quad = QUAD_PER_UNIT * (nextStepDist-0);
 2047              		.loc 1 476 0
 2048 0506 97F82430 		ldrb	r3, [r7, #36]	@ zero_extendqisi2
 2049 050a 9BB2     		uxth	r3, r3
 2050 050c 1A46     		mov	r2, r3	@ movhi
 2051 050e D200     		lsls	r2, r2, #3
 2052 0510 1344     		add	r3, r3, r2
 2053 0512 1B01     		lsls	r3, r3, #4
 2054 0514 9BB2     		uxth	r3, r3
 2055 0516 9AB2     		uxth	r2, r3
 2056 0518 484B     		ldr	r3, .L100
 2057 051a 1A80     		strh	r2, [r3]	@ movhi
 477:.\main.c      ****                                 
 478:.\main.c      ****                                 nextStep = instructions[instructionCount];
 2058              		.loc 1 478 0
 2059 051c 4C4B     		ldr	r3, .L100+20
 2060 051e 1B88     		ldrh	r3, [r3]
 2061 0520 1A46     		mov	r2, r3
 2062 0522 564B     		ldr	r3, .L100+64
 2063 0524 9B5C     		ldrb	r3, [r3, r2]
 2064 0526 87F82330 		strb	r3, [r7, #35]
 479:.\main.c      ****                                 
 480:.\main.c      ****                                 switch(nextStep)
 2065              		.loc 1 480 0
 2066 052a 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 2067 052e 4C3B     		subs	r3, r3, #76
 2068 0530 092B     		cmp	r3, #9
 2069 0532 4AD8     		bhi	.L96
 2070 0534 01A2     		adr	r2, .L79
 2071 0536 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2072 053a 00BF     		.p2align 2
 2073              	.L79:
 2074 053c 73050000 		.word	.L78+1
 2075 0540 CB050000 		.word	.L96+1
 2076 0544 CB050000 		.word	.L96+1
 2077 0548 CB050000 		.word	.L96+1
 2078 054c CB050000 		.word	.L96+1
 2079 0550 CB050000 		.word	.L96+1
 2080 0554 91050000 		.word	.L80+1
 2081 0558 65050000 		.word	.L81+1
 2082 055c CB050000 		.word	.L96+1
 2083 0560 AF050000 		.word	.L82+1
 2084              		.p2align 1
 2085              	.L81:
 481:.\main.c      ****                                 {
 482:.\main.c      ****                                     case 'S':
 483:.\main.c      ****                                         inittrackLineZ();
 2086              		.loc 1 483 0
 2087 0564 FFF7FEFF 		bl	inittrackLineZ
 484:.\main.c      ****                                          Timer_Deadzone_WriteCounter(S_DEADZONE);
 2088              		.loc 1 484 0
 2089 0568 42F21070 		movw	r0, #10000
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 47


 2090 056c FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 485:.\main.c      ****                                         //do nothing
 486:.\main.c      ****                                     break;
 2091              		.loc 1 486 0
 2092 0570 2CE0     		b	.L83
 2093              	.L78:
 487:.\main.c      ****                                     case 'L':
 488:.\main.c      ****                                         //if(tracked_direction == 1) tracked_direction = 4; else tr
 489:.\main.c      ****                                         initTurnLeft();
 2094              		.loc 1 489 0
 2095 0572 FFF7FEFF 		bl	initTurnLeft
 490:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 2096              		.loc 1 490 0
 2097 0576 4CF25030 		movw	r0, #50000
 2098 057a FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 491:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 2099              		.loc 1 491 0
 2100 057e 2F4B     		ldr	r3, .L100
 2101 0580 1B88     		ldrh	r3, [r3]
 2102 0582 9BB2     		uxth	r3, r3
 2103 0584 8A3B     		subs	r3, r3, #138
 2104 0586 9BB2     		uxth	r3, r3
 2105 0588 9AB2     		uxth	r2, r3
 2106 058a 2C4B     		ldr	r3, .L100
 2107 058c 1A80     		strh	r2, [r3]	@ movhi
 492:.\main.c      ****                                     break;
 2108              		.loc 1 492 0
 2109 058e 1DE0     		b	.L83
 2110              	.L80:
 493:.\main.c      ****                                     case 'R':
 494:.\main.c      ****                                         //if(tracked_direction == 4) tracked_direction = 1; else tr
 495:.\main.c      ****                                         initTurnRight();
 2111              		.loc 1 495 0
 2112 0590 FFF7FEFF 		bl	initTurnRight
 496:.\main.c      ****                                         target_distance_quad -= TURN_OFFSET;
 2113              		.loc 1 496 0
 2114 0594 294B     		ldr	r3, .L100
 2115 0596 1B88     		ldrh	r3, [r3]
 2116 0598 9BB2     		uxth	r3, r3
 2117 059a 8A3B     		subs	r3, r3, #138
 2118 059c 9BB2     		uxth	r3, r3
 2119 059e 9AB2     		uxth	r2, r3
 2120 05a0 264B     		ldr	r3, .L100
 2121 05a2 1A80     		strh	r2, [r3]	@ movhi
 497:.\main.c      ****                                         //target_distance_quad += (208 - TURN_OFFSET);
 498:.\main.c      ****                                         Timer_Deadzone_WriteCounter(TURN_DEADZONE);
 2122              		.loc 1 498 0
 2123 05a4 4CF25030 		movw	r0, #50000
 2124 05a8 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 499:.\main.c      ****                                     break;
 2125              		.loc 1 499 0
 2126 05ac 0EE0     		b	.L83
 2127              	.L82:
 500:.\main.c      ****                                     case 'U':
 501:.\main.c      ****                                         // Direction not tracked any more
 502:.\main.c      ****                                         initTurnU();
 2128              		.loc 1 502 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 48


 2129 05ae FFF7FEFF 		bl	initTurnU
 503:.\main.c      ****                                         Timer_Deadzone_WriteCounter(U_DEADZONE);
 2130              		.loc 1 503 0
 2131 05b2 3348     		ldr	r0, .L100+68
 2132 05b4 FFF7FEFF 		bl	Timer_Deadzone_WriteCounter
 504:.\main.c      ****                                         target_distance_quad -= U_OFFSET;
 2133              		.loc 1 504 0
 2134 05b8 204B     		ldr	r3, .L100
 2135 05ba 1B88     		ldrh	r3, [r3]
 2136 05bc 9BB2     		uxth	r3, r3
 2137 05be 783B     		subs	r3, r3, #120
 2138 05c0 9BB2     		uxth	r3, r3
 2139 05c2 9AB2     		uxth	r2, r3
 2140 05c4 1D4B     		ldr	r3, .L100
 2141 05c6 1A80     		strh	r2, [r3]	@ movhi
 505:.\main.c      ****                                         //target_distance_quad += 208;
 506:.\main.c      ****                                     break;
 2142              		.loc 1 506 0
 2143 05c8 00E0     		b	.L83
 2144              	.L96:
 507:.\main.c      ****                                     
 508:.\main.c      ****                                     default:
 509:.\main.c      ****                                         //do nothing
 510:.\main.c      ****                                         break;
 2145              		.loc 1 510 0
 2146 05ca 00BF     		nop
 2147              	.L83:
 511:.\main.c      ****                                 }
 512:.\main.c      ****                                 if(target_distance_quad < 0) target_distance_quad = 0;
 2148              		.loc 1 512 0
 2149 05cc 1B4B     		ldr	r3, .L100
 2150 05ce 1B88     		ldrh	r3, [r3]
 2151 05d0 1BB2     		sxth	r3, r3
 2152 05d2 002B     		cmp	r3, #0
 2153 05d4 02DA     		bge	.L84
 2154              		.loc 1 512 0 is_stmt 0 discriminator 1
 2155 05d6 194B     		ldr	r3, .L100
 2156 05d8 0022     		movs	r2, #0
 2157 05da 1A80     		strh	r2, [r3]	@ movhi
 2158              	.L84:
 513:.\main.c      ****                                 sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 2159              		.loc 1 513 0 is_stmt 1
 2160 05dc 174B     		ldr	r3, .L100
 2161 05de 1B88     		ldrh	r3, [r3]
 2162 05e0 1BB2     		sxth	r3, r3
 2163 05e2 3A46     		mov	r2, r7
 2164 05e4 1046     		mov	r0, r2
 2165 05e6 1C49     		ldr	r1, .L100+28
 2166 05e8 1A46     		mov	r2, r3
 2167 05ea FFF7FEFF 		bl	sprintf
 514:.\main.c      ****                                  UART_PutString(mes);
 2168              		.loc 1 514 0
 2169 05ee 3B46     		mov	r3, r7
 2170 05f0 1846     		mov	r0, r3
 2171 05f2 FFF7FEFF 		bl	UART_PutString
 515:.\main.c      ****                                 
 516:.\main.c      ****                                 Timer_Deadzone_Start();
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 49


 2172              		.loc 1 516 0
 2173 05f6 FFF7FEFF 		bl	Timer_Deadzone_Start
 517:.\main.c      ****                                 reached_target = 0;
 2174              		.loc 1 517 0
 2175 05fa 134B     		ldr	r3, .L100+12
 2176 05fc 0022     		movs	r2, #0
 2177 05fe 1A70     		strb	r2, [r3]
 518:.\main.c      ****                                 actionDebounce = 0;
 2178              		.loc 1 518 0
 2179 0600 0023     		movs	r3, #0
 2180 0602 FB84     		strh	r3, [r7, #38]	@ movhi
 519:.\main.c      ****                                 overshot_target = 0;
 2181              		.loc 1 519 0
 2182 0604 114B     		ldr	r3, .L100+16
 2183 0606 0022     		movs	r2, #0
 2184 0608 1A70     		strb	r2, [r3]
 520:.\main.c      ****                                 instructionCount += 2;
 2185              		.loc 1 520 0
 2186 060a 114B     		ldr	r3, .L100+20
 2187 060c 1B88     		ldrh	r3, [r3]
 2188 060e 0233     		adds	r3, r3, #2
 2189 0610 9AB2     		uxth	r2, r3
 2190 0612 0F4B     		ldr	r3, .L100+20
 2191 0614 1A80     		strh	r2, [r3]	@ movhi
 521:.\main.c      ****                                 sprintf(mes, "instr count:%d\r\n", instructionCount);
 2192              		.loc 1 521 0
 2193 0616 0E4B     		ldr	r3, .L100+20
 2194 0618 1B88     		ldrh	r3, [r3]
 2195 061a 1A46     		mov	r2, r3
 2196 061c 3B46     		mov	r3, r7
 2197 061e 1846     		mov	r0, r3
 2198 0620 0E49     		ldr	r1, .L100+32
 2199 0622 FFF7FEFF 		bl	sprintf
 522:.\main.c      ****                                 UART_PutString(mes);
 2200              		.loc 1 522 0
 2201 0626 3B46     		mov	r3, r7
 2202 0628 1846     		mov	r0, r3
 2203 062a FFF7FEFF 		bl	UART_PutString
 2204              	.LBE7:
 2205              	.LBE6:
 451:.\main.c      ****                         {
 2206              		.loc 1 451 0
 2207 062e 29E0     		b	.L54
 2208              	.L73:
 451:.\main.c      ****                         {
 2209              		.loc 1 451 0 is_stmt 0 discriminator 2
 2210 0630 28E0     		b	.L54
 2211              	.L72:
 523:.\main.c      ****                                 
 524:.\main.c      ****                             }
 525:.\main.c      ****                             }
 526:.\main.c      ****                         }
 527:.\main.c      ****                     }
 528:.\main.c      ****                     else
 529:.\main.c      ****                     {
 530:.\main.c      ****                         inittrackLineZ();
 2212              		.loc 1 530 0 is_stmt 1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 50


 2213 0632 FFF7FEFF 		bl	inittrackLineZ
 531:.\main.c      ****                         actionDebounce = 0;
 2214              		.loc 1 531 0
 2215 0636 0023     		movs	r3, #0
 2216 0638 FB84     		strh	r3, [r7, #38]	@ movhi
 2217              	.LBE4:
 532:.\main.c      ****                     }
 533:.\main.c      ****                 }
 534:.\main.c      ****                 break;
 2218              		.loc 1 534 0
 2219 063a 23E0     		b	.L97
 2220              	.L101:
 2221              		.align	2
 2222              	.L100:
 2223 063c 00000000 		.word	target_distance_quad
 2224 0640 00005240 		.word	1079115776
 2225 0644 00000000 		.word	deadzone
 2226 0648 00000000 		.word	reached_target
 2227 064c 00000000 		.word	overshot_target
 2228 0650 00000000 		.word	instructionCount
 2229 0654 00000000 		.word	isr_quad1
 2230 0658 5C000000 		.word	.LC5
 2231 065c 70000000 		.word	.LC6
 2232 0660 00000000 		.word	leftOn
 2233 0664 00000000 		.word	rightOn
 2234 0668 00000000 		.word	sensorsDisabled
 2235 066c 00000000 		.word	accum_dist
 2236 0670 84000000 		.word	.LC7
 2237 0674 A0000000 		.word	.LC8
 2238 0678 00000000 		.word	instructionLength
 2239 067c 00000000 		.word	instructions
 2240 0680 905F0100 		.word	90000
 2241              	.L54:
 2242              	.L97:
 2243 0684 00BF     		nop
 2244              	.L41:
 535:.\main.c      ****         }
 536:.\main.c      ****         
 537:.\main.c      ****         switch(movement_state)
 2245              		.loc 1 537 0
 2246 0686 184B     		ldr	r3, .L102
 2247 0688 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2248 068a 072B     		cmp	r3, #7
 2249 068c 3FF6EBAC 		bhi	.L95
 2250 0690 01A2     		adr	r2, .L87
 2251 0692 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2252 0696 00BF     		.p2align 2
 2253              	.L87:
 2254 0698 B9060000 		.word	.L86+1
 2255 069c BF060000 		.word	.L88+1
 2256 06a0 C5060000 		.word	.L89+1
 2257 06a4 D1060000 		.word	.L90+1
 2258 06a8 D7060000 		.word	.L91+1
 2259 06ac DD060000 		.word	.L92+1
 2260 06b0 E3060000 		.word	.L93+1
 2261 06b4 CB060000 		.word	.L94+1
 2262              		.p2align 1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 51


 2263              	.L86:
 538:.\main.c      ****         {
 539:.\main.c      ****             case DRIVE:
 540:.\main.c      ****                 driveForwards();
 2264              		.loc 1 540 0
 2265 06b8 FFF7FEFF 		bl	driveForwards
 541:.\main.c      ****             break;
 2266              		.loc 1 541 0
 2267 06bc 13E0     		b	.L85
 2268              	.L88:
 542:.\main.c      ****             case LTURN:
 543:.\main.c      ****                 turnLeft();
 2269              		.loc 1 543 0
 2270 06be FFF7FEFF 		bl	turnLeft
 544:.\main.c      ****             break;
 2271              		.loc 1 544 0
 2272 06c2 10E0     		b	.L85
 2273              	.L89:
 545:.\main.c      ****             case RTURN:
 546:.\main.c      ****                 turnRight();
 2274              		.loc 1 546 0
 2275 06c4 FFF7FEFF 		bl	turnRight
 547:.\main.c      ****             break;
 2276              		.loc 1 547 0
 2277 06c8 0DE0     		b	.L85
 2278              	.L94:
 548:.\main.c      ****             case UTURN:
 549:.\main.c      ****                 turnU();
 2279              		.loc 1 549 0
 2280 06ca FFF7FEFF 		bl	turnU
 550:.\main.c      ****             break;
 2281              		.loc 1 550 0
 2282 06ce 0AE0     		b	.L85
 2283              	.L90:
 551:.\main.c      ****             case STOPPED:
 552:.\main.c      ****                 brakeMotor();
 2284              		.loc 1 552 0
 2285 06d0 FFF7FEFF 		bl	brakeMotor
 553:.\main.c      ****             break;
 2286              		.loc 1 553 0
 2287 06d4 07E0     		b	.L85
 2288              	.L91:
 554:.\main.c      ****             case TRACKING:
 555:.\main.c      ****                 trackLine();
 2289              		.loc 1 555 0
 2290 06d6 FFF7FEFF 		bl	trackLine
 556:.\main.c      ****             break;
 2291              		.loc 1 556 0
 2292 06da 04E0     		b	.L85
 2293              	.L92:
 557:.\main.c      ****             case TRACKING_U:
 558:.\main.c      ****                 trackLineU();
 2294              		.loc 1 558 0
 2295 06dc FFF7FEFF 		bl	trackLineU
 559:.\main.c      ****             break;
 2296              		.loc 1 559 0
 2297 06e0 01E0     		b	.L85
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 52


 2298              	.L93:
 560:.\main.c      ****             case TRACKING_SOFT:
 561:.\main.c      ****                 trackLineZ();
 2299              		.loc 1 561 0
 2300 06e2 FFF7FEFF 		bl	trackLineZ
 2301              	.L85:
 562:.\main.c      ****         }      
 563:.\main.c      ****     }   
 2302              		.loc 1 563 0
 2303 06e6 BEE4     		b	.L95
 2304              	.L103:
 2305              		.align	2
 2306              	.L102:
 2307 06e8 00000000 		.word	movement_state
 2308              		.cfi_endproc
 2309              	.LFE71:
 2310              		.size	main, .-main
 2311              		.section	.text.handle_rx_binary,"ax",%progbits
 2312              		.align	2
 2313              		.global	handle_rx_binary
 2314              		.thumb
 2315              		.thumb_func
 2316              		.type	handle_rx_binary, %function
 2317              	handle_rx_binary:
 2318              	.LFB72:
 564:.\main.c      **** }
 565:.\main.c      **** 
 566:.\main.c      **** /*-------------------------------------------------------------------------------------------------
 567:.\main.c      **** 
 568:.\main.c      **** void handle_rx_binary()
 569:.\main.c      **** {
 2319              		.loc 1 569 0
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 32
 2322              		@ frame_needed = 1, uses_anonymous_args = 0
 2323              		@ link register save eliminated.
 2324 0000 80B4     		push	{r7}
 2325              		.cfi_def_cfa_offset 4
 2326              		.cfi_offset 7, -4
 2327 0002 89B0     		sub	sp, sp, #36
 2328              		.cfi_def_cfa_offset 40
 2329 0004 00AF     		add	r7, sp, #0
 2330              		.cfi_def_cfa_register 7
 570:.\main.c      ****     if(flag_rx == 1)
 2331              		.loc 1 570 0
 2332 0006 524B     		ldr	r3, .L124
 2333 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2334 000a 012B     		cmp	r3, #1
 2335 000c 40F09A80 		bne	.L104
 2336              	.LBB8:
 571:.\main.c      ****     {    
 572:.\main.c      ****         flag_rx = 0;
 2337              		.loc 1 572 0
 2338 0010 4F4B     		ldr	r3, .L124
 2339 0012 0022     		movs	r2, #0
 2340 0014 1A70     		strb	r2, [r3]
 573:.\main.c      ****         
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 53


 574:.\main.c      ****         uint16 packet_bytes = (packet[1] << 8) | (packet[0]);
 2341              		.loc 1 574 0
 2342 0016 4F4B     		ldr	r3, .L124+4
 2343 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2344 001a 1B02     		lsls	r3, r3, #8
 2345 001c 9AB2     		uxth	r2, r3
 2346 001e 4D4B     		ldr	r3, .L124+4
 2347 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2348 0022 9BB2     		uxth	r3, r3
 2349 0024 1343     		orrs	r3, r3, r2
 2350 0026 9BB2     		uxth	r3, r3
 2351 0028 FB83     		strh	r3, [r7, #30]	@ movhi
 575:.\main.c      ****         char byte_packet[12];
 576:.\main.c      ****         char string_packet[12];
 577:.\main.c      ****         
 578:.\main.c      ****         switch(byteCount)
 2352              		.loc 1 578 0
 2353 002a 4B4B     		ldr	r3, .L124+8
 2354 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2355 002e 043B     		subs	r3, r3, #4
 2356 0030 1E2B     		cmp	r3, #30
 2357 0032 00F28780 		bhi	.L104
 2358 0036 01A2     		adr	r2, .L108
 2359 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2360              		.p2align 2
 2361              	.L108:
 2362 003c B9000000 		.word	.L107+1
 2363 0040 45010000 		.word	.L104+1
 2364 0044 CD000000 		.word	.L109+1
 2365 0048 45010000 		.word	.L104+1
 2366 004c D5000000 		.word	.L110+1
 2367 0050 45010000 		.word	.L104+1
 2368 0054 DD000000 		.word	.L111+1
 2369 0058 45010000 		.word	.L104+1
 2370 005c E5000000 		.word	.L112+1
 2371 0060 45010000 		.word	.L104+1
 2372 0064 ED000000 		.word	.L113+1
 2373 0068 45010000 		.word	.L104+1
 2374 006c F5000000 		.word	.L114+1
 2375 0070 45010000 		.word	.L104+1
 2376 0074 FD000000 		.word	.L115+1
 2377 0078 45010000 		.word	.L104+1
 2378 007c 05010000 		.word	.L116+1
 2379 0080 45010000 		.word	.L104+1
 2380 0084 0D010000 		.word	.L117+1
 2381 0088 45010000 		.word	.L104+1
 2382 008c 15010000 		.word	.L118+1
 2383 0090 45010000 		.word	.L104+1
 2384 0094 1D010000 		.word	.L119+1
 2385 0098 45010000 		.word	.L104+1
 2386 009c 25010000 		.word	.L120+1
 2387 00a0 45010000 		.word	.L104+1
 2388 00a4 2D010000 		.word	.L121+1
 2389 00a8 45010000 		.word	.L104+1
 2390 00ac 35010000 		.word	.L122+1
 2391 00b0 45010000 		.word	.L104+1
 2392 00b4 3D010000 		.word	.L123+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 54


 2393              		.p2align 1
 2394              	.L107:
 579:.\main.c      ****         {
 580:.\main.c      ****             case 4:
 581:.\main.c      ****                 buffer_state.rssi = packet[0];
 2395              		.loc 1 581 0
 2396 00b8 264B     		ldr	r3, .L124+4
 2397 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2398 00bc DAB2     		uxtb	r2, r3
 2399 00be 274B     		ldr	r3, .L124+12
 2400 00c0 1A70     		strb	r2, [r3]
 582:.\main.c      ****                 buffer_state.index = packet[1];
 2401              		.loc 1 582 0
 2402 00c2 244B     		ldr	r3, .L124+4
 2403 00c4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2404 00c6 254B     		ldr	r3, .L124+12
 2405 00c8 5A70     		strb	r2, [r3, #1]
 583:.\main.c      ****             break;
 2406              		.loc 1 583 0
 2407 00ca 3BE0     		b	.L104
 2408              	.L109:
 584:.\main.c      ****             case 6:
 585:.\main.c      ****                 buffer_state.robot_xpos = packet_bytes;
 2409              		.loc 1 585 0
 2410 00cc FA8B     		ldrh	r2, [r7, #30]
 2411 00ce 234B     		ldr	r3, .L124+12
 2412 00d0 5A80     		strh	r2, [r3, #2]	@ movhi
 586:.\main.c      ****             break;
 2413              		.loc 1 586 0
 2414 00d2 37E0     		b	.L104
 2415              	.L110:
 587:.\main.c      ****             case 8:
 588:.\main.c      ****                 buffer_state.robot_ypos = packet_bytes;
 2416              		.loc 1 588 0
 2417 00d4 FA8B     		ldrh	r2, [r7, #30]
 2418 00d6 214B     		ldr	r3, .L124+12
 2419 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 589:.\main.c      ****             break;
 2420              		.loc 1 589 0
 2421 00da 33E0     		b	.L104
 2422              	.L111:
 590:.\main.c      ****             case 10:
 591:.\main.c      ****                 buffer_state.robot_orientation = packet_bytes;
 2423              		.loc 1 591 0
 2424 00dc FA8B     		ldrh	r2, [r7, #30]
 2425 00de 1F4B     		ldr	r3, .L124+12
 2426 00e0 DA80     		strh	r2, [r3, #6]	@ movhi
 592:.\main.c      ****             break;
 2427              		.loc 1 592 0
 2428 00e2 2FE0     		b	.L104
 2429              	.L112:
 593:.\main.c      ****             case 12:
 594:.\main.c      ****                 buffer_state.g0_xpos = packet_bytes;
 2430              		.loc 1 594 0
 2431 00e4 FA8B     		ldrh	r2, [r7, #30]
 2432 00e6 1D4B     		ldr	r3, .L124+12
 2433 00e8 1A81     		strh	r2, [r3, #8]	@ movhi
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 55


 595:.\main.c      ****             break;
 2434              		.loc 1 595 0
 2435 00ea 2BE0     		b	.L104
 2436              	.L113:
 596:.\main.c      ****             case 14:
 597:.\main.c      ****                 buffer_state.g0_ypos = packet_bytes;
 2437              		.loc 1 597 0
 2438 00ec FA8B     		ldrh	r2, [r7, #30]
 2439 00ee 1B4B     		ldr	r3, .L124+12
 2440 00f0 5A81     		strh	r2, [r3, #10]	@ movhi
 598:.\main.c      ****             break;
 2441              		.loc 1 598 0
 2442 00f2 27E0     		b	.L104
 2443              	.L114:
 599:.\main.c      ****             case 16:
 600:.\main.c      ****                 buffer_state.g0_speed = packet_bytes;
 2444              		.loc 1 600 0
 2445 00f4 FA8B     		ldrh	r2, [r7, #30]
 2446 00f6 194B     		ldr	r3, .L124+12
 2447 00f8 9A81     		strh	r2, [r3, #12]	@ movhi
 601:.\main.c      ****             break;
 2448              		.loc 1 601 0
 2449 00fa 23E0     		b	.L104
 2450              	.L115:
 602:.\main.c      ****             case 18:
 603:.\main.c      ****                 buffer_state.g0_direction = packet_bytes;
 2451              		.loc 1 603 0
 2452 00fc FA8B     		ldrh	r2, [r7, #30]
 2453 00fe 174B     		ldr	r3, .L124+12
 2454 0100 DA81     		strh	r2, [r3, #14]	@ movhi
 604:.\main.c      ****             break;
 2455              		.loc 1 604 0
 2456 0102 1FE0     		b	.L104
 2457              	.L116:
 605:.\main.c      ****             case 20:
 606:.\main.c      ****                 buffer_state.g1_xpos = packet_bytes;
 2458              		.loc 1 606 0
 2459 0104 FA8B     		ldrh	r2, [r7, #30]
 2460 0106 154B     		ldr	r3, .L124+12
 2461 0108 1A82     		strh	r2, [r3, #16]	@ movhi
 607:.\main.c      ****             break;
 2462              		.loc 1 607 0
 2463 010a 1BE0     		b	.L104
 2464              	.L117:
 608:.\main.c      ****             case 22:
 609:.\main.c      ****                 buffer_state.g1_ypos = packet_bytes;
 2465              		.loc 1 609 0
 2466 010c FA8B     		ldrh	r2, [r7, #30]
 2467 010e 134B     		ldr	r3, .L124+12
 2468 0110 5A82     		strh	r2, [r3, #18]	@ movhi
 610:.\main.c      ****             break;
 2469              		.loc 1 610 0
 2470 0112 17E0     		b	.L104
 2471              	.L118:
 611:.\main.c      ****             case 24:
 612:.\main.c      ****                 buffer_state.g1_speed = packet_bytes;
 2472              		.loc 1 612 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 56


 2473 0114 FA8B     		ldrh	r2, [r7, #30]
 2474 0116 114B     		ldr	r3, .L124+12
 2475 0118 9A82     		strh	r2, [r3, #20]	@ movhi
 613:.\main.c      ****             break;
 2476              		.loc 1 613 0
 2477 011a 13E0     		b	.L104
 2478              	.L119:
 614:.\main.c      ****             case 26:
 615:.\main.c      ****                 buffer_state.g1_direction = packet_bytes;
 2479              		.loc 1 615 0
 2480 011c FA8B     		ldrh	r2, [r7, #30]
 2481 011e 0F4B     		ldr	r3, .L124+12
 2482 0120 DA82     		strh	r2, [r3, #22]	@ movhi
 616:.\main.c      ****             break;
 2483              		.loc 1 616 0
 2484 0122 0FE0     		b	.L104
 2485              	.L120:
 617:.\main.c      ****             case 28:
 618:.\main.c      ****                 buffer_state.g2_xpos = packet_bytes;
 2486              		.loc 1 618 0
 2487 0124 FA8B     		ldrh	r2, [r7, #30]
 2488 0126 0D4B     		ldr	r3, .L124+12
 2489 0128 1A83     		strh	r2, [r3, #24]	@ movhi
 619:.\main.c      ****             break;
 2490              		.loc 1 619 0
 2491 012a 0BE0     		b	.L104
 2492              	.L121:
 620:.\main.c      ****             case 30:
 621:.\main.c      ****                 buffer_state.g2_ypos = packet_bytes;
 2493              		.loc 1 621 0
 2494 012c FA8B     		ldrh	r2, [r7, #30]
 2495 012e 0B4B     		ldr	r3, .L124+12
 2496 0130 5A83     		strh	r2, [r3, #26]	@ movhi
 622:.\main.c      ****             break;
 2497              		.loc 1 622 0
 2498 0132 07E0     		b	.L104
 2499              	.L122:
 623:.\main.c      ****             case 32:
 624:.\main.c      ****                 buffer_state.g2_speed = packet_bytes;
 2500              		.loc 1 624 0
 2501 0134 FA8B     		ldrh	r2, [r7, #30]
 2502 0136 094B     		ldr	r3, .L124+12
 2503 0138 9A83     		strh	r2, [r3, #28]	@ movhi
 625:.\main.c      ****             break;
 2504              		.loc 1 625 0
 2505 013a 03E0     		b	.L104
 2506              	.L123:
 626:.\main.c      ****             case 34:
 627:.\main.c      ****                 buffer_state.g2_direction = packet_bytes;
 2507              		.loc 1 627 0
 2508 013c FA8B     		ldrh	r2, [r7, #30]
 2509 013e 074B     		ldr	r3, .L124+12
 2510 0140 DA83     		strh	r2, [r3, #30]	@ movhi
 628:.\main.c      ****             break;
 2511              		.loc 1 628 0
 2512 0142 00BF     		nop
 2513              	.L104:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 57


 2514              	.LBE8:
 629:.\main.c      ****         }
 630:.\main.c      ****     }
 631:.\main.c      **** }
 2515              		.loc 1 631 0
 2516 0144 2437     		adds	r7, r7, #36
 2517              		.cfi_def_cfa_offset 4
 2518 0146 BD46     		mov	sp, r7
 2519              		.cfi_def_cfa_register 13
 2520              		@ sp needed
 2521 0148 5DF8047B 		ldr	r7, [sp], #4
 2522              		.cfi_restore 7
 2523              		.cfi_def_cfa_offset 0
 2524 014c 7047     		bx	lr
 2525              	.L125:
 2526 014e 00BF     		.align	2
 2527              	.L124:
 2528 0150 00000000 		.word	flag_rx
 2529 0154 00000000 		.word	packet
 2530 0158 00000000 		.word	byteCount
 2531 015c 00000000 		.word	buffer_state
 2532              		.cfi_endproc
 2533              	.LFE72:
 2534              		.size	handle_rx_binary, .-handle_rx_binary
 2535              		.section	.text.setLeftDir,"ax",%progbits
 2536              		.align	2
 2537              		.global	setLeftDir
 2538              		.thumb
 2539              		.thumb_func
 2540              		.type	setLeftDir, %function
 2541              	setLeftDir:
 2542              	.LFB73:
 632:.\main.c      **** 
 633:.\main.c      **** void setLeftDir(uint8 dir)
 634:.\main.c      **** {
 2543              		.loc 1 634 0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 8
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547 0000 80B5     		push	{r7, lr}
 2548              		.cfi_def_cfa_offset 8
 2549              		.cfi_offset 7, -8
 2550              		.cfi_offset 14, -4
 2551 0002 82B0     		sub	sp, sp, #8
 2552              		.cfi_def_cfa_offset 16
 2553 0004 00AF     		add	r7, sp, #0
 2554              		.cfi_def_cfa_register 7
 2555 0006 0346     		mov	r3, r0
 2556 0008 FB71     		strb	r3, [r7, #7]
 635:.\main.c      ****     M2_IN2_Write(dir);
 2557              		.loc 1 635 0
 2558 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2559 000c 1846     		mov	r0, r3
 2560 000e FFF7FEFF 		bl	M2_IN2_Write
 636:.\main.c      **** }
 2561              		.loc 1 636 0
 2562 0012 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 58


 2563              		.cfi_def_cfa_offset 8
 2564 0014 BD46     		mov	sp, r7
 2565              		.cfi_def_cfa_register 13
 2566              		@ sp needed
 2567 0016 80BD     		pop	{r7, pc}
 2568              		.cfi_endproc
 2569              	.LFE73:
 2570              		.size	setLeftDir, .-setLeftDir
 2571              		.section	.text.setRightDir,"ax",%progbits
 2572              		.align	2
 2573              		.global	setRightDir
 2574              		.thumb
 2575              		.thumb_func
 2576              		.type	setRightDir, %function
 2577              	setRightDir:
 2578              	.LFB74:
 637:.\main.c      **** 
 638:.\main.c      **** void setRightDir(uint8 dir)
 639:.\main.c      **** {
 2579              		.loc 1 639 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 8
 2582              		@ frame_needed = 1, uses_anonymous_args = 0
 2583 0000 80B5     		push	{r7, lr}
 2584              		.cfi_def_cfa_offset 8
 2585              		.cfi_offset 7, -8
 2586              		.cfi_offset 14, -4
 2587 0002 82B0     		sub	sp, sp, #8
 2588              		.cfi_def_cfa_offset 16
 2589 0004 00AF     		add	r7, sp, #0
 2590              		.cfi_def_cfa_register 7
 2591 0006 0346     		mov	r3, r0
 2592 0008 FB71     		strb	r3, [r7, #7]
 640:.\main.c      ****     M1_IN2_Write(dir);
 2593              		.loc 1 640 0
 2594 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2595 000c 1846     		mov	r0, r3
 2596 000e FFF7FEFF 		bl	M1_IN2_Write
 641:.\main.c      **** }
 2597              		.loc 1 641 0
 2598 0012 0837     		adds	r7, r7, #8
 2599              		.cfi_def_cfa_offset 8
 2600 0014 BD46     		mov	sp, r7
 2601              		.cfi_def_cfa_register 13
 2602              		@ sp needed
 2603 0016 80BD     		pop	{r7, pc}
 2604              		.cfi_endproc
 2605              	.LFE74:
 2606              		.size	setRightDir, .-setRightDir
 2607              		.section	.rodata
 2608 00b7 00       		.align	2
 2609              	.LC9:
 2610 00b8 6469723A 		.ascii	"dir: %d\015\012\000"
 2610      2025640D 
 2610      0A00
 2611              		.section	.text.reverseDirection,"ax",%progbits
 2612              		.align	2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 59


 2613              		.global	reverseDirection
 2614              		.thumb
 2615              		.thumb_func
 2616              		.type	reverseDirection, %function
 2617              	reverseDirection:
 2618              	.LFB75:
 642:.\main.c      **** 
 643:.\main.c      **** void reverseDirection()
 644:.\main.c      **** {
 2619              		.loc 1 644 0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 32
 2622              		@ frame_needed = 1, uses_anonymous_args = 0
 2623 0000 80B5     		push	{r7, lr}
 2624              		.cfi_def_cfa_offset 8
 2625              		.cfi_offset 7, -8
 2626              		.cfi_offset 14, -4
 2627 0002 88B0     		sub	sp, sp, #32
 2628              		.cfi_def_cfa_offset 40
 2629 0004 00AF     		add	r7, sp, #0
 2630              		.cfi_def_cfa_register 7
 645:.\main.c      ****     direction = !direction;
 2631              		.loc 1 645 0
 2632 0006 114B     		ldr	r3, .L129
 2633 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2634 000a 002B     		cmp	r3, #0
 2635 000c 0CBF     		ite	eq
 2636 000e 0123     		moveq	r3, #1
 2637 0010 0023     		movne	r3, #0
 2638 0012 DBB2     		uxtb	r3, r3
 2639 0014 1A46     		mov	r2, r3
 2640 0016 0D4B     		ldr	r3, .L129
 2641 0018 1A70     		strb	r2, [r3]
 646:.\main.c      ****     setLeftDir(direction);
 2642              		.loc 1 646 0
 2643 001a 0C4B     		ldr	r3, .L129
 2644 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2645 001e 1846     		mov	r0, r3
 2646 0020 FFF7FEFF 		bl	setLeftDir
 647:.\main.c      ****     setRightDir(direction);
 2647              		.loc 1 647 0
 2648 0024 094B     		ldr	r3, .L129
 2649 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2650 0028 1846     		mov	r0, r3
 2651 002a FFF7FEFF 		bl	setRightDir
 648:.\main.c      ****     char mes[32];
 649:.\main.c      ****      sprintf(mes, "dir: %d\r\n", direction);
 2652              		.loc 1 649 0
 2653 002e 074B     		ldr	r3, .L129
 2654 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2655 0032 1A46     		mov	r2, r3
 2656 0034 3B46     		mov	r3, r7
 2657 0036 1846     		mov	r0, r3
 2658 0038 0549     		ldr	r1, .L129+4
 2659 003a FFF7FEFF 		bl	sprintf
 650:.\main.c      ****     UART_PutString(mes);
 2660              		.loc 1 650 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 60


 2661 003e 3B46     		mov	r3, r7
 2662 0040 1846     		mov	r0, r3
 2663 0042 FFF7FEFF 		bl	UART_PutString
 651:.\main.c      **** }
 2664              		.loc 1 651 0
 2665 0046 2037     		adds	r7, r7, #32
 2666              		.cfi_def_cfa_offset 8
 2667 0048 BD46     		mov	sp, r7
 2668              		.cfi_def_cfa_register 13
 2669              		@ sp needed
 2670 004a 80BD     		pop	{r7, pc}
 2671              	.L130:
 2672              		.align	2
 2673              	.L129:
 2674 004c 00000000 		.word	direction
 2675 0050 B8000000 		.word	.LC9
 2676              		.cfi_endproc
 2677              	.LFE75:
 2678              		.size	reverseDirection, .-reverseDirection
 2679              		.global	__aeabi_dcmplt
 2680              		.global	__aeabi_ddiv
 2681              		.section	.text.setSpeed,"ax",%progbits
 2682              		.align	2
 2683              		.global	setSpeed
 2684              		.thumb
 2685              		.thumb_func
 2686              		.type	setSpeed, %function
 2687              	setSpeed:
 2688              	.LFB76:
 652:.\main.c      **** 
 653:.\main.c      **** void setSpeed(double left, double right){
 2689              		.loc 1 653 0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 24
 2692              		@ frame_needed = 1, uses_anonymous_args = 0
 2693 0000 80B5     		push	{r7, lr}
 2694              		.cfi_def_cfa_offset 8
 2695              		.cfi_offset 7, -8
 2696              		.cfi_offset 14, -4
 2697 0002 86B0     		sub	sp, sp, #24
 2698              		.cfi_def_cfa_offset 32
 2699 0004 00AF     		add	r7, sp, #0
 2700              		.cfi_def_cfa_register 7
 2701 0006 C7E90201 		strd	r0, [r7, #8]
 2702 000a C7E90023 		strd	r2, [r7]
 654:.\main.c      ****     if(right < 0.0)
 2703              		.loc 1 654 0
 2704 000e D7E90001 		ldrd	r0, [r7]
 2705 0012 4FF00002 		mov	r2, #0
 2706 0016 4FF00003 		mov	r3, #0
 2707 001a FFF7FEFF 		bl	__aeabi_dcmplt
 2708 001e 0346     		mov	r3, r0
 2709 0020 002B     		cmp	r3, #0
 2710 0022 10D0     		beq	.L140
 655:.\main.c      ****     {
 656:.\main.c      ****         //char mes[16];
 657:.\main.c      ****        // sprintf(mes, "right dir: %d\r\n", !direction);
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 61


 658:.\main.c      ****        // UART_PutString(mes);
 659:.\main.c      ****         setRightDir(!direction);
 2711              		.loc 1 659 0
 2712 0024 304B     		ldr	r3, .L142+8
 2713 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2714 0028 002B     		cmp	r3, #0
 2715 002a 0CBF     		ite	eq
 2716 002c 0123     		moveq	r3, #1
 2717 002e 0023     		movne	r3, #0
 2718 0030 DBB2     		uxtb	r3, r3
 2719 0032 1846     		mov	r0, r3
 2720 0034 FFF7FEFF 		bl	setRightDir
 660:.\main.c      ****         right = -right;
 2721              		.loc 1 660 0
 2722 0038 3B68     		ldr	r3, [r7]
 2723 003a 3B60     		str	r3, [r7]
 2724 003c 7B68     		ldr	r3, [r7, #4]
 2725 003e 83F00043 		eor	r3, r3, #-2147483648
 2726 0042 7B60     		str	r3, [r7, #4]
 2727 0044 04E0     		b	.L134
 2728              	.L140:
 661:.\main.c      ****     }
 662:.\main.c      ****     else setRightDir(direction);
 2729              		.loc 1 662 0
 2730 0046 284B     		ldr	r3, .L142+8
 2731 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2732 004a 1846     		mov	r0, r3
 2733 004c FFF7FEFF 		bl	setRightDir
 2734              	.L134:
 663:.\main.c      ****     
 664:.\main.c      ****     if(left < 0.0)
 2735              		.loc 1 664 0
 2736 0050 D7E90201 		ldrd	r0, [r7, #8]
 2737 0054 4FF00002 		mov	r2, #0
 2738 0058 4FF00003 		mov	r3, #0
 2739 005c FFF7FEFF 		bl	__aeabi_dcmplt
 2740 0060 0346     		mov	r3, r0
 2741 0062 002B     		cmp	r3, #0
 2742 0064 10D0     		beq	.L141
 665:.\main.c      ****     {
 666:.\main.c      ****        // char mes[16];
 667:.\main.c      ****         //sprintf(mes, "left dir: %d\r\n", !direction);
 668:.\main.c      ****         //UART_PutString(mes);
 669:.\main.c      ****         setLeftDir(!direction);
 2743              		.loc 1 669 0
 2744 0066 204B     		ldr	r3, .L142+8
 2745 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2746 006a 002B     		cmp	r3, #0
 2747 006c 0CBF     		ite	eq
 2748 006e 0123     		moveq	r3, #1
 2749 0070 0023     		movne	r3, #0
 2750 0072 DBB2     		uxtb	r3, r3
 2751 0074 1846     		mov	r0, r3
 2752 0076 FFF7FEFF 		bl	setLeftDir
 670:.\main.c      ****         left = -left;
 2753              		.loc 1 670 0
 2754 007a BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 62


 2755 007c BB60     		str	r3, [r7, #8]
 2756 007e FB68     		ldr	r3, [r7, #12]
 2757 0080 83F00043 		eor	r3, r3, #-2147483648
 2758 0084 FB60     		str	r3, [r7, #12]
 2759 0086 04E0     		b	.L137
 2760              	.L141:
 671:.\main.c      ****     }
 672:.\main.c      ****     else setLeftDir(direction);
 2761              		.loc 1 672 0
 2762 0088 174B     		ldr	r3, .L142+8
 2763 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2764 008c 1846     		mov	r0, r3
 2765 008e FFF7FEFF 		bl	setLeftDir
 2766              	.L137:
 673:.\main.c      ****     
 674:.\main.c      ****     int16 countsLeft = left/QUAD_RATIO;
 2767              		.loc 1 674 0
 2768 0092 D7E90201 		ldrd	r0, [r7, #8]
 2769 0096 12A3     		adr	r3, .L142
 2770 0098 D3E90023 		ldrd	r2, [r3]
 2771 009c FFF7FEFF 		bl	__aeabi_ddiv
 2772 00a0 0246     		mov	r2, r0
 2773 00a2 0B46     		mov	r3, r1
 2774 00a4 1046     		mov	r0, r2
 2775 00a6 1946     		mov	r1, r3
 2776 00a8 FFF7FEFF 		bl	__aeabi_d2iz
 2777 00ac 0346     		mov	r3, r0
 2778 00ae FB82     		strh	r3, [r7, #22]	@ movhi
 675:.\main.c      ****     int16 countsRight = right/QUAD_RATIO;
 2779              		.loc 1 675 0
 2780 00b0 D7E90001 		ldrd	r0, [r7]
 2781 00b4 0AA3     		adr	r3, .L142
 2782 00b6 D3E90023 		ldrd	r2, [r3]
 2783 00ba FFF7FEFF 		bl	__aeabi_ddiv
 2784 00be 0246     		mov	r2, r0
 2785 00c0 0B46     		mov	r3, r1
 2786 00c2 1046     		mov	r0, r2
 2787 00c4 1946     		mov	r1, r3
 2788 00c6 FFF7FEFF 		bl	__aeabi_d2iz
 2789 00ca 0346     		mov	r3, r0
 2790 00cc BB82     		strh	r3, [r7, #20]	@ movhi
 676:.\main.c      ****     
 677:.\main.c      ****     leftSpeedLimit = countsRight;
 2791              		.loc 1 677 0
 2792 00ce 074A     		ldr	r2, .L142+12
 2793 00d0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2794 00d2 1380     		strh	r3, [r2]	@ movhi
 678:.\main.c      ****     rightSpeedLimit = countsLeft;
 2795              		.loc 1 678 0
 2796 00d4 064A     		ldr	r2, .L142+16
 2797 00d6 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2798 00d8 1380     		strh	r3, [r2]	@ movhi
 679:.\main.c      **** }
 2799              		.loc 1 679 0
 2800 00da 1837     		adds	r7, r7, #24
 2801              		.cfi_def_cfa_offset 8
 2802 00dc BD46     		mov	sp, r7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 63


 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 00de 80BD     		pop	{r7, pc}
 2806              	.L143:
 2807              		.align	3
 2808              	.L142:
 2809 00e0 969526A5 		.word	-1524197994
 2810 00e4 A0DBEF3F 		.word	1072683936
 2811 00e8 00000000 		.word	direction
 2812 00ec 00000000 		.word	leftSpeedLimit
 2813 00f0 00000000 		.word	rightSpeedLimit
 2814              		.cfi_endproc
 2815              	.LFE76:
 2816              		.size	setSpeed, .-setSpeed
 2817 00f4 AFF30080 		.section	.text.brakeLeft,"ax",%progbits
 2818              		.align	2
 2819              		.global	brakeLeft
 2820              		.thumb
 2821              		.thumb_func
 2822              		.type	brakeLeft, %function
 2823              	brakeLeft:
 2824              	.LFB77:
 680:.\main.c      **** 
 681:.\main.c      **** void brakeLeft()
 682:.\main.c      **** {
 2825              		.loc 1 682 0
 2826              		.cfi_startproc
 2827              		@ args = 0, pretend = 0, frame = 0
 2828              		@ frame_needed = 1, uses_anonymous_args = 0
 2829 0000 80B5     		push	{r7, lr}
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 7, -8
 2832              		.cfi_offset 14, -4
 2833 0002 00AF     		add	r7, sp, #0
 2834              		.cfi_def_cfa_register 7
 683:.\main.c      ****     PWM_1_WriteCompare(0);
 2835              		.loc 1 683 0
 2836 0004 0020     		movs	r0, #0
 2837 0006 FFF7FEFF 		bl	PWM_1_WriteCompare
 684:.\main.c      ****     left_duty_cycle = 0;
 2838              		.loc 1 684 0
 2839 000a 024B     		ldr	r3, .L145
 2840 000c 0022     		movs	r2, #0
 2841 000e 1A80     		strh	r2, [r3]	@ movhi
 685:.\main.c      **** }
 2842              		.loc 1 685 0
 2843 0010 80BD     		pop	{r7, pc}
 2844              	.L146:
 2845 0012 00BF     		.align	2
 2846              	.L145:
 2847 0014 00000000 		.word	left_duty_cycle
 2848              		.cfi_endproc
 2849              	.LFE77:
 2850              		.size	brakeLeft, .-brakeLeft
 2851              		.section	.text.brakeRight,"ax",%progbits
 2852              		.align	2
 2853              		.global	brakeRight
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 64


 2854              		.thumb
 2855              		.thumb_func
 2856              		.type	brakeRight, %function
 2857              	brakeRight:
 2858              	.LFB78:
 686:.\main.c      **** 
 687:.\main.c      **** void brakeRight()
 688:.\main.c      **** {
 2859              		.loc 1 688 0
 2860              		.cfi_startproc
 2861              		@ args = 0, pretend = 0, frame = 0
 2862              		@ frame_needed = 1, uses_anonymous_args = 0
 2863 0000 80B5     		push	{r7, lr}
 2864              		.cfi_def_cfa_offset 8
 2865              		.cfi_offset 7, -8
 2866              		.cfi_offset 14, -4
 2867 0002 00AF     		add	r7, sp, #0
 2868              		.cfi_def_cfa_register 7
 689:.\main.c      ****      PWM_2_WriteCompare(0);
 2869              		.loc 1 689 0
 2870 0004 0020     		movs	r0, #0
 2871 0006 FFF7FEFF 		bl	PWM_2_WriteCompare
 690:.\main.c      ****      right_duty_cycle = 0;
 2872              		.loc 1 690 0
 2873 000a 024B     		ldr	r3, .L148
 2874 000c 0022     		movs	r2, #0
 2875 000e 1A80     		strh	r2, [r3]	@ movhi
 691:.\main.c      **** }
 2876              		.loc 1 691 0
 2877 0010 80BD     		pop	{r7, pc}
 2878              	.L149:
 2879 0012 00BF     		.align	2
 2880              	.L148:
 2881 0014 00000000 		.word	right_duty_cycle
 2882              		.cfi_endproc
 2883              	.LFE78:
 2884              		.size	brakeRight, .-brakeRight
 2885              		.section	.text.brakeMotor,"ax",%progbits
 2886              		.align	2
 2887              		.global	brakeMotor
 2888              		.thumb
 2889              		.thumb_func
 2890              		.type	brakeMotor, %function
 2891              	brakeMotor:
 2892              	.LFB79:
 692:.\main.c      **** 
 693:.\main.c      **** void brakeMotor(){
 2893              		.loc 1 693 0
 2894              		.cfi_startproc
 2895              		@ args = 0, pretend = 0, frame = 0
 2896              		@ frame_needed = 1, uses_anonymous_args = 0
 2897 0000 80B5     		push	{r7, lr}
 2898              		.cfi_def_cfa_offset 8
 2899              		.cfi_offset 7, -8
 2900              		.cfi_offset 14, -4
 2901 0002 00AF     		add	r7, sp, #0
 2902              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 65


 694:.\main.c      ****     setSpeed(0, 0);
 2903              		.loc 1 694 0
 2904 0004 4FF00000 		mov	r0, #0
 2905 0008 4FF00001 		mov	r1, #0
 2906 000c 4FF00002 		mov	r2, #0
 2907 0010 4FF00003 		mov	r3, #0
 2908 0014 FFF7FEFF 		bl	setSpeed
 695:.\main.c      ****     brakeLeft();
 2909              		.loc 1 695 0
 2910 0018 FFF7FEFF 		bl	brakeLeft
 696:.\main.c      ****     brakeRight();
 2911              		.loc 1 696 0
 2912 001c FFF7FEFF 		bl	brakeRight
 697:.\main.c      **** }
 2913              		.loc 1 697 0
 2914 0020 80BD     		pop	{r7, pc}
 2915              		.cfi_endproc
 2916              	.LFE79:
 2917              		.size	brakeMotor, .-brakeMotor
 2918 0022 00BF     		.section	.text.driveForwards,"ax",%progbits
 2919              		.align	2
 2920              		.global	driveForwards
 2921              		.thumb
 2922              		.thumb_func
 2923              		.type	driveForwards, %function
 2924              	driveForwards:
 2925              	.LFB80:
 698:.\main.c      **** 
 699:.\main.c      **** void driveForwards()
 700:.\main.c      **** {
 2926              		.loc 1 700 0
 2927              		.cfi_startproc
 2928              		@ args = 0, pretend = 0, frame = 0
 2929              		@ frame_needed = 1, uses_anonymous_args = 0
 2930 0000 80B5     		push	{r7, lr}
 2931              		.cfi_def_cfa_offset 8
 2932              		.cfi_offset 7, -8
 2933              		.cfi_offset 14, -4
 2934 0002 00AF     		add	r7, sp, #0
 2935              		.cfi_def_cfa_register 7
 701:.\main.c      ****     setSpeed(speed, speed);
 2936              		.loc 1 701 0
 2937 0004 044B     		ldr	r3, .L152
 2938 0006 D3E90001 		ldrd	r0, [r3]
 2939 000a 034B     		ldr	r3, .L152
 2940 000c D3E90023 		ldrd	r2, [r3]
 2941 0010 FFF7FEFF 		bl	setSpeed
 702:.\main.c      **** }
 2942              		.loc 1 702 0
 2943 0014 80BD     		pop	{r7, pc}
 2944              	.L153:
 2945 0016 00BF     		.align	2
 2946              	.L152:
 2947 0018 00000000 		.word	speed
 2948              		.cfi_endproc
 2949              	.LFE80:
 2950              		.size	driveForwards, .-driveForwards
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 66


 2951              		.global	__aeabi_dmul
 2952              		.section	.text.turnRight,"ax",%progbits
 2953              		.align	2
 2954              		.global	turnRight
 2955              		.thumb
 2956              		.thumb_func
 2957              		.type	turnRight, %function
 2958              	turnRight:
 2959              	.LFB81:
 703:.\main.c      **** 
 704:.\main.c      **** void turnRight()
 705:.\main.c      **** {
 2960              		.loc 1 705 0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 1, uses_anonymous_args = 0
 2964 0000 80B5     		push	{r7, lr}
 2965              		.cfi_def_cfa_offset 8
 2966              		.cfi_offset 7, -8
 2967              		.cfi_offset 14, -4
 2968 0002 00AF     		add	r7, sp, #0
 2969              		.cfi_def_cfa_register 7
 706:.\main.c      ****     setSpeed(0,speed * 1.5);
 2970              		.loc 1 706 0
 2971 0004 094B     		ldr	r3, .L155
 2972 0006 D3E90023 		ldrd	r2, [r3]
 2973 000a 1046     		mov	r0, r2
 2974 000c 1946     		mov	r1, r3
 2975 000e 4FF00002 		mov	r2, #0
 2976 0012 074B     		ldr	r3, .L155+4
 2977 0014 FFF7FEFF 		bl	__aeabi_dmul
 2978 0018 0246     		mov	r2, r0
 2979 001a 0B46     		mov	r3, r1
 2980 001c 4FF00000 		mov	r0, #0
 2981 0020 4FF00001 		mov	r1, #0
 2982 0024 FFF7FEFF 		bl	setSpeed
 707:.\main.c      **** }
 2983              		.loc 1 707 0
 2984 0028 80BD     		pop	{r7, pc}
 2985              	.L156:
 2986 002a 00BF     		.align	2
 2987              	.L155:
 2988 002c 00000000 		.word	speed
 2989 0030 0000F83F 		.word	1073217536
 2990              		.cfi_endproc
 2991              	.LFE81:
 2992              		.size	turnRight, .-turnRight
 2993              		.section	.text.turnLeft,"ax",%progbits
 2994              		.align	2
 2995              		.global	turnLeft
 2996              		.thumb
 2997              		.thumb_func
 2998              		.type	turnLeft, %function
 2999              	turnLeft:
 3000              	.LFB82:
 708:.\main.c      **** 
 709:.\main.c      **** void turnLeft()
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 67


 710:.\main.c      **** {
 3001              		.loc 1 710 0
 3002              		.cfi_startproc
 3003              		@ args = 0, pretend = 0, frame = 0
 3004              		@ frame_needed = 1, uses_anonymous_args = 0
 3005 0000 80B5     		push	{r7, lr}
 3006              		.cfi_def_cfa_offset 8
 3007              		.cfi_offset 7, -8
 3008              		.cfi_offset 14, -4
 3009 0002 00AF     		add	r7, sp, #0
 3010              		.cfi_def_cfa_register 7
 711:.\main.c      ****     setSpeed(speed * 1.5,0);
 3011              		.loc 1 711 0
 3012 0004 0A4B     		ldr	r3, .L158
 3013 0006 D3E90023 		ldrd	r2, [r3]
 3014 000a 1046     		mov	r0, r2
 3015 000c 1946     		mov	r1, r3
 3016 000e 4FF00002 		mov	r2, #0
 3017 0012 084B     		ldr	r3, .L158+4
 3018 0014 FFF7FEFF 		bl	__aeabi_dmul
 3019 0018 0246     		mov	r2, r0
 3020 001a 0B46     		mov	r3, r1
 3021 001c 1046     		mov	r0, r2
 3022 001e 1946     		mov	r1, r3
 3023 0020 4FF00002 		mov	r2, #0
 3024 0024 4FF00003 		mov	r3, #0
 3025 0028 FFF7FEFF 		bl	setSpeed
 712:.\main.c      **** }
 3026              		.loc 1 712 0
 3027 002c 80BD     		pop	{r7, pc}
 3028              	.L159:
 3029 002e 00BF     		.align	2
 3030              	.L158:
 3031 0030 00000000 		.word	speed
 3032 0034 0000F83F 		.word	1073217536
 3033              		.cfi_endproc
 3034              	.LFE82:
 3035              		.size	turnLeft, .-turnLeft
 3036              		.section	.text.turnU,"ax",%progbits
 3037              		.align	2
 3038              		.global	turnU
 3039              		.thumb
 3040              		.thumb_func
 3041              		.type	turnU, %function
 3042              	turnU:
 3043              	.LFB83:
 713:.\main.c      **** 
 714:.\main.c      **** void turnU()
 715:.\main.c      **** {
 3044              		.loc 1 715 0
 3045              		.cfi_startproc
 3046              		@ args = 0, pretend = 0, frame = 0
 3047              		@ frame_needed = 1, uses_anonymous_args = 0
 3048 0000 B0B5     		push	{r4, r5, r7, lr}
 3049              		.cfi_def_cfa_offset 16
 3050              		.cfi_offset 4, -16
 3051              		.cfi_offset 5, -12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 68


 3052              		.cfi_offset 7, -8
 3053              		.cfi_offset 14, -4
 3054 0002 00AF     		add	r7, sp, #0
 3055              		.cfi_def_cfa_register 7
 716:.\main.c      ****     setSpeed(-speed*1.5,speed*1.5);
 3056              		.loc 1 716 0
 3057 0004 0F4B     		ldr	r3, .L161
 3058 0006 D3E90023 		ldrd	r2, [r3]
 3059 000a 1046     		mov	r0, r2
 3060 000c 83F00041 		eor	r1, r3, #-2147483648
 3061 0010 4FF00002 		mov	r2, #0
 3062 0014 0C4B     		ldr	r3, .L161+4
 3063 0016 FFF7FEFF 		bl	__aeabi_dmul
 3064 001a 0246     		mov	r2, r0
 3065 001c 0B46     		mov	r3, r1
 3066 001e 1446     		mov	r4, r2
 3067 0020 1D46     		mov	r5, r3
 3068 0022 084B     		ldr	r3, .L161
 3069 0024 D3E90023 		ldrd	r2, [r3]
 3070 0028 1046     		mov	r0, r2
 3071 002a 1946     		mov	r1, r3
 3072 002c 4FF00002 		mov	r2, #0
 3073 0030 054B     		ldr	r3, .L161+4
 3074 0032 FFF7FEFF 		bl	__aeabi_dmul
 3075 0036 0246     		mov	r2, r0
 3076 0038 0B46     		mov	r3, r1
 3077 003a 2046     		mov	r0, r4
 3078 003c 2946     		mov	r1, r5
 3079 003e FFF7FEFF 		bl	setSpeed
 717:.\main.c      **** }
 3080              		.loc 1 717 0
 3081 0042 B0BD     		pop	{r4, r5, r7, pc}
 3082              	.L162:
 3083              		.align	2
 3084              	.L161:
 3085 0044 00000000 		.word	speed
 3086 0048 0000F83F 		.word	1073217536
 3087              		.cfi_endproc
 3088              	.LFE83:
 3089              		.size	turnU, .-turnU
 3090              		.section	.text.initTurnLeft,"ax",%progbits
 3091              		.align	2
 3092              		.global	initTurnLeft
 3093              		.thumb
 3094              		.thumb_func
 3095              		.type	initTurnLeft, %function
 3096              	initTurnLeft:
 3097              	.LFB84:
 718:.\main.c      **** 
 719:.\main.c      **** void initTurnLeft(){
 3098              		.loc 1 719 0
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 0
 3101              		@ frame_needed = 1, uses_anonymous_args = 0
 3102 0000 80B5     		push	{r7, lr}
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 7, -8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 69


 3105              		.cfi_offset 14, -4
 3106 0002 00AF     		add	r7, sp, #0
 3107              		.cfi_def_cfa_register 7
 720:.\main.c      ****     Timer_2_Stop();
 3108              		.loc 1 720 0
 3109 0004 FFF7FEFF 		bl	Timer_2_Stop
 721:.\main.c      ****     prev_movement_state = movement_state;
 3110              		.loc 1 721 0
 3111 0008 084B     		ldr	r3, .L164
 3112 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3113 000c 084B     		ldr	r3, .L164+4
 3114 000e 1A70     		strb	r2, [r3]
 722:.\main.c      ****     movement_state = LTURN;
 3115              		.loc 1 722 0
 3116 0010 064B     		ldr	r3, .L164
 3117 0012 0122     		movs	r2, #1
 3118 0014 1A70     		strb	r2, [r3]
 723:.\main.c      ****     brakeLeft();
 3119              		.loc 1 723 0
 3120 0016 FFF7FEFF 		bl	brakeLeft
 724:.\main.c      ****     start_turn_count = QuadDec_M2_GetCounter();
 3121              		.loc 1 724 0
 3122 001a FFF7FEFF 		bl	QuadDec_M2_GetCounter
 3123 001e 0346     		mov	r3, r0
 3124 0020 1A46     		mov	r2, r3
 3125 0022 044B     		ldr	r3, .L164+8
 3126 0024 1A80     		strh	r2, [r3]	@ movhi
 725:.\main.c      ****     Timer_2_Start();
 3127              		.loc 1 725 0
 3128 0026 FFF7FEFF 		bl	Timer_2_Start
 726:.\main.c      **** }
 3129              		.loc 1 726 0
 3130 002a 80BD     		pop	{r7, pc}
 3131              	.L165:
 3132              		.align	2
 3133              	.L164:
 3134 002c 00000000 		.word	movement_state
 3135 0030 00000000 		.word	prev_movement_state
 3136 0034 00000000 		.word	start_turn_count
 3137              		.cfi_endproc
 3138              	.LFE84:
 3139              		.size	initTurnLeft, .-initTurnLeft
 3140              		.section	.text.initTurnRight,"ax",%progbits
 3141              		.align	2
 3142              		.global	initTurnRight
 3143              		.thumb
 3144              		.thumb_func
 3145              		.type	initTurnRight, %function
 3146              	initTurnRight:
 3147              	.LFB85:
 727:.\main.c      **** 
 728:.\main.c      **** void initTurnRight(){
 3148              		.loc 1 728 0
 3149              		.cfi_startproc
 3150              		@ args = 0, pretend = 0, frame = 0
 3151              		@ frame_needed = 1, uses_anonymous_args = 0
 3152 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 70


 3153              		.cfi_def_cfa_offset 8
 3154              		.cfi_offset 7, -8
 3155              		.cfi_offset 14, -4
 3156 0002 00AF     		add	r7, sp, #0
 3157              		.cfi_def_cfa_register 7
 729:.\main.c      ****     Timer_2_Stop();
 3158              		.loc 1 729 0
 3159 0004 FFF7FEFF 		bl	Timer_2_Stop
 730:.\main.c      ****     prev_movement_state = movement_state;
 3160              		.loc 1 730 0
 3161 0008 084B     		ldr	r3, .L167
 3162 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3163 000c 084B     		ldr	r3, .L167+4
 3164 000e 1A70     		strb	r2, [r3]
 731:.\main.c      ****     movement_state = RTURN;
 3165              		.loc 1 731 0
 3166 0010 064B     		ldr	r3, .L167
 3167 0012 0222     		movs	r2, #2
 3168 0014 1A70     		strb	r2, [r3]
 732:.\main.c      ****     brakeRight();
 3169              		.loc 1 732 0
 3170 0016 FFF7FEFF 		bl	brakeRight
 733:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3171              		.loc 1 733 0
 3172 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3173 001e 0346     		mov	r3, r0
 3174 0020 1A46     		mov	r2, r3
 3175 0022 044B     		ldr	r3, .L167+8
 3176 0024 1A80     		strh	r2, [r3]	@ movhi
 734:.\main.c      ****     Timer_2_Start();
 3177              		.loc 1 734 0
 3178 0026 FFF7FEFF 		bl	Timer_2_Start
 735:.\main.c      **** }
 3179              		.loc 1 735 0
 3180 002a 80BD     		pop	{r7, pc}
 3181              	.L168:
 3182              		.align	2
 3183              	.L167:
 3184 002c 00000000 		.word	movement_state
 3185 0030 00000000 		.word	prev_movement_state
 3186 0034 00000000 		.word	start_turn_count
 3187              		.cfi_endproc
 3188              	.LFE85:
 3189              		.size	initTurnRight, .-initTurnRight
 3190              		.section	.text.initTurnU,"ax",%progbits
 3191              		.align	2
 3192              		.global	initTurnU
 3193              		.thumb
 3194              		.thumb_func
 3195              		.type	initTurnU, %function
 3196              	initTurnU:
 3197              	.LFB86:
 736:.\main.c      **** 
 737:.\main.c      **** void initTurnU(){
 3198              		.loc 1 737 0
 3199              		.cfi_startproc
 3200              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 71


 3201              		@ frame_needed = 1, uses_anonymous_args = 0
 3202 0000 80B5     		push	{r7, lr}
 3203              		.cfi_def_cfa_offset 8
 3204              		.cfi_offset 7, -8
 3205              		.cfi_offset 14, -4
 3206 0002 00AF     		add	r7, sp, #0
 3207              		.cfi_def_cfa_register 7
 738:.\main.c      ****     Timer_2_Stop();
 3208              		.loc 1 738 0
 3209 0004 FFF7FEFF 		bl	Timer_2_Stop
 739:.\main.c      ****     prev_movement_state = movement_state;
 3210              		.loc 1 739 0
 3211 0008 084B     		ldr	r3, .L170
 3212 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3213 000c 084B     		ldr	r3, .L170+4
 3214 000e 1A70     		strb	r2, [r3]
 740:.\main.c      ****     movement_state = UTURN;
 3215              		.loc 1 740 0
 3216 0010 064B     		ldr	r3, .L170
 3217 0012 0722     		movs	r2, #7
 3218 0014 1A70     		strb	r2, [r3]
 741:.\main.c      ****     brakeMotor();
 3219              		.loc 1 741 0
 3220 0016 FFF7FEFF 		bl	brakeMotor
 742:.\main.c      ****     start_turn_count = QuadDec_M1_GetCounter();
 3221              		.loc 1 742 0
 3222 001a FFF7FEFF 		bl	QuadDec_M1_GetCounter
 3223 001e 0346     		mov	r3, r0
 3224 0020 1A46     		mov	r2, r3
 3225 0022 044B     		ldr	r3, .L170+8
 3226 0024 1A80     		strh	r2, [r3]	@ movhi
 743:.\main.c      ****     Timer_2_Start();
 3227              		.loc 1 743 0
 3228 0026 FFF7FEFF 		bl	Timer_2_Start
 744:.\main.c      **** }
 3229              		.loc 1 744 0
 3230 002a 80BD     		pop	{r7, pc}
 3231              	.L171:
 3232              		.align	2
 3233              	.L170:
 3234 002c 00000000 		.word	movement_state
 3235 0030 00000000 		.word	prev_movement_state
 3236 0034 00000000 		.word	start_turn_count
 3237              		.cfi_endproc
 3238              	.LFE86:
 3239              		.size	initTurnU, .-initTurnU
 3240              		.section	.text.initForward,"ax",%progbits
 3241              		.align	2
 3242              		.global	initForward
 3243              		.thumb
 3244              		.thumb_func
 3245              		.type	initForward, %function
 3246              	initForward:
 3247              	.LFB87:
 745:.\main.c      **** 
 746:.\main.c      **** void initForward(){
 3248              		.loc 1 746 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 72


 3249              		.cfi_startproc
 3250              		@ args = 0, pretend = 0, frame = 0
 3251              		@ frame_needed = 1, uses_anonymous_args = 0
 3252 0000 80B5     		push	{r7, lr}
 3253              		.cfi_def_cfa_offset 8
 3254              		.cfi_offset 7, -8
 3255              		.cfi_offset 14, -4
 3256 0002 00AF     		add	r7, sp, #0
 3257              		.cfi_def_cfa_register 7
 747:.\main.c      ****     brakeMotor();
 3258              		.loc 1 747 0
 3259 0004 FFF7FEFF 		bl	brakeMotor
 748:.\main.c      ****     movement_state = DRIVE;
 3260              		.loc 1 748 0
 3261 0008 014B     		ldr	r3, .L173
 3262 000a 0022     		movs	r2, #0
 3263 000c 1A70     		strb	r2, [r3]
 749:.\main.c      **** }
 3264              		.loc 1 749 0
 3265 000e 80BD     		pop	{r7, pc}
 3266              	.L174:
 3267              		.align	2
 3268              	.L173:
 3269 0010 00000000 		.word	movement_state
 3270              		.cfi_endproc
 3271              	.LFE87:
 3272              		.size	initForward, .-initForward
 3273              		.section	.text.initBrake,"ax",%progbits
 3274              		.align	2
 3275              		.global	initBrake
 3276              		.thumb
 3277              		.thumb_func
 3278              		.type	initBrake, %function
 3279              	initBrake:
 3280              	.LFB88:
 750:.\main.c      **** 
 751:.\main.c      **** void initBrake(){
 3281              		.loc 1 751 0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 0
 3284              		@ frame_needed = 1, uses_anonymous_args = 0
 3285              		@ link register save eliminated.
 3286 0000 80B4     		push	{r7}
 3287              		.cfi_def_cfa_offset 4
 3288              		.cfi_offset 7, -4
 3289 0002 00AF     		add	r7, sp, #0
 3290              		.cfi_def_cfa_register 7
 752:.\main.c      ****     movement_state = STOPPED;
 3291              		.loc 1 752 0
 3292 0004 034B     		ldr	r3, .L176
 3293 0006 0322     		movs	r2, #3
 3294 0008 1A70     		strb	r2, [r3]
 753:.\main.c      **** }
 3295              		.loc 1 753 0
 3296 000a BD46     		mov	sp, r7
 3297              		.cfi_def_cfa_register 13
 3298              		@ sp needed
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 73


 3299 000c 5DF8047B 		ldr	r7, [sp], #4
 3300              		.cfi_restore 7
 3301              		.cfi_def_cfa_offset 0
 3302 0010 7047     		bx	lr
 3303              	.L177:
 3304 0012 00BF     		.align	2
 3305              	.L176:
 3306 0014 00000000 		.word	movement_state
 3307              		.cfi_endproc
 3308              	.LFE88:
 3309              		.size	initBrake, .-initBrake
 3310              		.section	.text.initTrack,"ax",%progbits
 3311              		.align	2
 3312              		.global	initTrack
 3313              		.thumb
 3314              		.thumb_func
 3315              		.type	initTrack, %function
 3316              	initTrack:
 3317              	.LFB89:
 754:.\main.c      **** 
 755:.\main.c      **** void initTrack()
 756:.\main.c      **** {
 3318              		.loc 1 756 0
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 1, uses_anonymous_args = 0
 3322              		@ link register save eliminated.
 3323 0000 80B4     		push	{r7}
 3324              		.cfi_def_cfa_offset 4
 3325              		.cfi_offset 7, -4
 3326 0002 00AF     		add	r7, sp, #0
 3327              		.cfi_def_cfa_register 7
 757:.\main.c      ****     movement_state = TRACKING;
 3328              		.loc 1 757 0
 3329 0004 034B     		ldr	r3, .L179
 3330 0006 0422     		movs	r2, #4
 3331 0008 1A70     		strb	r2, [r3]
 758:.\main.c      **** }
 3332              		.loc 1 758 0
 3333 000a BD46     		mov	sp, r7
 3334              		.cfi_def_cfa_register 13
 3335              		@ sp needed
 3336 000c 5DF8047B 		ldr	r7, [sp], #4
 3337              		.cfi_restore 7
 3338              		.cfi_def_cfa_offset 0
 3339 0010 7047     		bx	lr
 3340              	.L180:
 3341 0012 00BF     		.align	2
 3342              	.L179:
 3343 0014 00000000 		.word	movement_state
 3344              		.cfi_endproc
 3345              	.LFE89:
 3346              		.size	initTrack, .-initTrack
 3347              		.section	.text.initTrackU,"ax",%progbits
 3348              		.align	2
 3349              		.global	initTrackU
 3350              		.thumb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 74


 3351              		.thumb_func
 3352              		.type	initTrackU, %function
 3353              	initTrackU:
 3354              	.LFB90:
 759:.\main.c      **** 
 760:.\main.c      **** void initTrackU(){
 3355              		.loc 1 760 0
 3356              		.cfi_startproc
 3357              		@ args = 0, pretend = 0, frame = 0
 3358              		@ frame_needed = 1, uses_anonymous_args = 0
 3359              		@ link register save eliminated.
 3360 0000 80B4     		push	{r7}
 3361              		.cfi_def_cfa_offset 4
 3362              		.cfi_offset 7, -4
 3363 0002 00AF     		add	r7, sp, #0
 3364              		.cfi_def_cfa_register 7
 761:.\main.c      ****     movement_state = TRACKING_U;
 3365              		.loc 1 761 0
 3366 0004 034B     		ldr	r3, .L182
 3367 0006 0522     		movs	r2, #5
 3368 0008 1A70     		strb	r2, [r3]
 762:.\main.c      **** }
 3369              		.loc 1 762 0
 3370 000a BD46     		mov	sp, r7
 3371              		.cfi_def_cfa_register 13
 3372              		@ sp needed
 3373 000c 5DF8047B 		ldr	r7, [sp], #4
 3374              		.cfi_restore 7
 3375              		.cfi_def_cfa_offset 0
 3376 0010 7047     		bx	lr
 3377              	.L183:
 3378 0012 00BF     		.align	2
 3379              	.L182:
 3380 0014 00000000 		.word	movement_state
 3381              		.cfi_endproc
 3382              	.LFE90:
 3383              		.size	initTrackU, .-initTrackU
 3384              		.section	.text.inittrackLineZ,"ax",%progbits
 3385              		.align	2
 3386              		.global	inittrackLineZ
 3387              		.thumb
 3388              		.thumb_func
 3389              		.type	inittrackLineZ, %function
 3390              	inittrackLineZ:
 3391              	.LFB91:
 763:.\main.c      **** 
 764:.\main.c      **** void inittrackLineZ(){
 3392              		.loc 1 764 0
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 0
 3395              		@ frame_needed = 1, uses_anonymous_args = 0
 3396              		@ link register save eliminated.
 3397 0000 80B4     		push	{r7}
 3398              		.cfi_def_cfa_offset 4
 3399              		.cfi_offset 7, -4
 3400 0002 00AF     		add	r7, sp, #0
 3401              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 75


 765:.\main.c      ****     movement_state = TRACKING_SOFT;
 3402              		.loc 1 765 0
 3403 0004 034B     		ldr	r3, .L185
 3404 0006 0622     		movs	r2, #6
 3405 0008 1A70     		strb	r2, [r3]
 766:.\main.c      **** }
 3406              		.loc 1 766 0
 3407 000a BD46     		mov	sp, r7
 3408              		.cfi_def_cfa_register 13
 3409              		@ sp needed
 3410 000c 5DF8047B 		ldr	r7, [sp], #4
 3411              		.cfi_restore 7
 3412              		.cfi_def_cfa_offset 0
 3413 0010 7047     		bx	lr
 3414              	.L186:
 3415 0012 00BF     		.align	2
 3416              	.L185:
 3417 0014 00000000 		.word	movement_state
 3418              		.cfi_endproc
 3419              	.LFE91:
 3420              		.size	inittrackLineZ, .-inittrackLineZ
 3421              		.section	.text.rxInt,"ax",%progbits
 3422              		.align	2
 3423              		.global	rxInt
 3424              		.thumb
 3425              		.thumb_func
 3426              		.type	rxInt, %function
 3427              	rxInt:
 3428              	.LFB92:
 767:.\main.c      **** 
 768:.\main.c      **** 
 769:.\main.c      **** 
 770:.\main.c      **** //Binary RF Data
 771:.\main.c      **** CY_ISR(rxInt){
 3429              		.loc 1 771 0
 3430              		.cfi_startproc
 3431              		@ args = 0, pretend = 0, frame = 8
 3432              		@ frame_needed = 1, uses_anonymous_args = 0
 3433 0000 B0B5     		push	{r4, r5, r7, lr}
 3434              		.cfi_def_cfa_offset 16
 3435              		.cfi_offset 4, -16
 3436              		.cfi_offset 5, -12
 3437              		.cfi_offset 7, -8
 3438              		.cfi_offset 14, -4
 3439 0002 82B0     		sub	sp, sp, #8
 3440              		.cfi_def_cfa_offset 24
 3441 0004 00AF     		add	r7, sp, #0
 3442              		.cfi_def_cfa_register 7
 772:.\main.c      ****     char rf_char = UART_GetChar();
 3443              		.loc 1 772 0
 3444 0006 FFF7FEFF 		bl	UART_GetChar
 3445 000a 0346     		mov	r3, r0
 3446 000c FB71     		strb	r3, [r7, #7]
 773:.\main.c      ****     if(rf_char == SOP){
 3447              		.loc 1 773 0
 3448 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3449 0010 AA2B     		cmp	r3, #170
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 76


 3450 0012 2BD1     		bne	.L188
 774:.\main.c      ****             //we should evalute whether the last packet was valid by measuring the length of data
 775:.\main.c      ****             if(byteCount == 34)
 3451              		.loc 1 775 0
 3452 0014 224B     		ldr	r3, .L192
 3453 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3454 0018 222B     		cmp	r3, #34
 3455 001a 20D1     		bne	.L189
 776:.\main.c      ****             {
 777:.\main.c      ****                 system_state = buffer_state;
 3456              		.loc 1 777 0
 3457 001c 214B     		ldr	r3, .L192+4
 3458 001e 224A     		ldr	r2, .L192+8
 3459 0020 1568     		ldr	r5, [r2]	@ unaligned
 3460 0022 5468     		ldr	r4, [r2, #4]	@ unaligned
 3461 0024 9068     		ldr	r0, [r2, #8]	@ unaligned
 3462 0026 D168     		ldr	r1, [r2, #12]	@ unaligned
 3463 0028 1D60     		str	r5, [r3]	@ unaligned
 3464 002a 5C60     		str	r4, [r3, #4]	@ unaligned
 3465 002c 9860     		str	r0, [r3, #8]	@ unaligned
 3466 002e D960     		str	r1, [r3, #12]	@ unaligned
 3467 0030 1569     		ldr	r5, [r2, #16]	@ unaligned
 3468 0032 5469     		ldr	r4, [r2, #20]	@ unaligned
 3469 0034 9069     		ldr	r0, [r2, #24]	@ unaligned
 3470 0036 D169     		ldr	r1, [r2, #28]	@ unaligned
 3471 0038 1D61     		str	r5, [r3, #16]	@ unaligned
 3472 003a 5C61     		str	r4, [r3, #20]	@ unaligned
 3473 003c 9861     		str	r0, [r3, #24]	@ unaligned
 3474 003e D961     		str	r1, [r3, #28]	@ unaligned
 778:.\main.c      ****                 if(initial_pos_valid == 0)
 3475              		.loc 1 778 0
 3476 0040 1A4B     		ldr	r3, .L192+12
 3477 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3478 0044 002B     		cmp	r3, #0
 3479 0046 0AD1     		bne	.L189
 779:.\main.c      ****                 {
 780:.\main.c      ****                     LED_Write(~LED_Read());
 3480              		.loc 1 780 0
 3481 0048 FFF7FEFF 		bl	LED_Read
 3482 004c 0346     		mov	r3, r0
 3483 004e DB43     		mvns	r3, r3
 3484 0050 DBB2     		uxtb	r3, r3
 3485 0052 1846     		mov	r0, r3
 3486 0054 FFF7FEFF 		bl	LED_Write
 781:.\main.c      ****                     initial_pos_valid = 1;
 3487              		.loc 1 781 0
 3488 0058 144B     		ldr	r3, .L192+12
 3489 005a 0122     		movs	r2, #1
 3490 005c 1A70     		strb	r2, [r3]
 3491              	.L189:
 782:.\main.c      ****                 }
 783:.\main.c      ****             }
 784:.\main.c      ****             byteCount = 2; //2 for legacy purposes - fix this
 3492              		.loc 1 784 0
 3493 005e 104B     		ldr	r3, .L192
 3494 0060 0222     		movs	r2, #2
 3495 0062 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 77


 785:.\main.c      ****             flag_rx = 0;
 3496              		.loc 1 785 0
 3497 0064 124B     		ldr	r3, .L192+16
 3498 0066 0022     		movs	r2, #0
 3499 0068 1A70     		strb	r2, [r3]
 3500 006a 16E0     		b	.L187
 3501              	.L188:
 786:.\main.c      ****              //LED_Write(~LED_Read()); //flash an LED so we know the interrupt is called
 787:.\main.c      ****         }
 788:.\main.c      ****         else
 789:.\main.c      ****         {
 790:.\main.c      ****             packet[byteCount % 2] = rf_char;
 3502              		.loc 1 790 0
 3503 006c 0C4B     		ldr	r3, .L192
 3504 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3505 0070 03F00103 		and	r3, r3, #1
 3506 0074 0F49     		ldr	r1, .L192+20
 3507 0076 FA79     		ldrb	r2, [r7, #7]
 3508 0078 CA54     		strb	r2, [r1, r3]
 791:.\main.c      ****            
 792:.\main.c      ****             if(byteCount % 2 == 1) //we have received a whole 16-bit packet
 3509              		.loc 1 792 0
 3510 007a 094B     		ldr	r3, .L192
 3511 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3512 007e 03F00103 		and	r3, r3, #1
 3513 0082 DBB2     		uxtb	r3, r3
 3514 0084 002B     		cmp	r3, #0
 3515 0086 02D0     		beq	.L191
 793:.\main.c      ****             {
 794:.\main.c      ****                 flag_rx = 1;
 3516              		.loc 1 794 0
 3517 0088 094B     		ldr	r3, .L192+16
 3518 008a 0122     		movs	r2, #1
 3519 008c 1A70     		strb	r2, [r3]
 3520              	.L191:
 795:.\main.c      ****             }
 796:.\main.c      ****             byteCount = (byteCount + 1);
 3521              		.loc 1 796 0
 3522 008e 044B     		ldr	r3, .L192
 3523 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3524 0092 0133     		adds	r3, r3, #1
 3525 0094 DAB2     		uxtb	r2, r3
 3526 0096 024B     		ldr	r3, .L192
 3527 0098 1A70     		strb	r2, [r3]
 3528              	.L187:
 797:.\main.c      ****         }
 798:.\main.c      **** }
 3529              		.loc 1 798 0
 3530 009a 0837     		adds	r7, r7, #8
 3531              		.cfi_def_cfa_offset 16
 3532 009c BD46     		mov	sp, r7
 3533              		.cfi_def_cfa_register 13
 3534              		@ sp needed
 3535 009e B0BD     		pop	{r4, r5, r7, pc}
 3536              	.L193:
 3537              		.align	2
 3538              	.L192:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 78


 3539 00a0 00000000 		.word	byteCount
 3540 00a4 00000000 		.word	system_state
 3541 00a8 00000000 		.word	buffer_state
 3542 00ac 00000000 		.word	initial_pos_valid
 3543 00b0 00000000 		.word	flag_rx
 3544 00b4 00000000 		.word	packet
 3545              		.cfi_endproc
 3546              	.LFE92:
 3547              		.size	rxInt, .-rxInt
 3548              		.global	__aeabi_i2f
 3549              		.global	__aeabi_fmul
 3550              		.global	__aeabi_f2iz
 3551              		.section	.rodata
 3552 00c2 0000     		.align	2
 3553              	.LC10:
 3554 00c4 74617267 		.ascii	"target quad: %d\015\012\000"
 3554      65742071 
 3554      7561643A 
 3554      2025640D 
 3554      0A00
 3555 00d6 0000     		.align	2
 3556              	.LC11:
 3557 00d8 72656365 		.ascii	"received: \000"
 3557      69766564 
 3557      3A2000
 3558 00e3 00       		.align	2
 3559              	.LC12:
 3560 00e4 0D0A00   		.ascii	"\015\012\000"
 3561 00e7 00       		.align	2
 3562              	.LC13:
 3563 00e8 6E756D20 		.ascii	"num instruct:%d\015\012\000"
 3563      696E7374 
 3563      72756374 
 3563      3A25640D 
 3563      0A00
 3564 00fa 0000     		.align	2
 3565              	.LC14:
 3566 00fc 73746172 		.ascii	"starting from instruction %d\015\012\000"
 3566      74696E67 
 3566      2066726F 
 3566      6D20696E 
 3566      73747275 
 3567              		.section	.text.BT_rxInt,"ax",%progbits
 3568              		.align	2
 3569              		.global	BT_rxInt
 3570              		.thumb
 3571              		.thumb_func
 3572              		.type	BT_rxInt, %function
 3573              	BT_rxInt:
 3574              	.LFB93:
 799:.\main.c      **** 
 800:.\main.c      **** CY_ISR(BT_rxInt)
 801:.\main.c      **** {
 3575              		.loc 1 801 0
 3576              		.cfi_startproc
 3577              		@ args = 0, pretend = 0, frame = 48
 3578              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 79


 3579 0000 80B5     		push	{r7, lr}
 3580              		.cfi_def_cfa_offset 8
 3581              		.cfi_offset 7, -8
 3582              		.cfi_offset 14, -4
 3583 0002 8CB0     		sub	sp, sp, #48
 3584              		.cfi_def_cfa_offset 56
 3585 0004 00AF     		add	r7, sp, #0
 3586              		.cfi_def_cfa_register 7
 802:.\main.c      ****     char rf_char = UART_GetChar();
 3587              		.loc 1 802 0
 3588 0006 FFF7FEFF 		bl	UART_GetChar
 3589 000a 0346     		mov	r3, r0
 3590 000c 87F82F30 		strb	r3, [r7, #47]
 803:.\main.c      ****     switch(rf_char){
 3591              		.loc 1 803 0
 3592 0010 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3593 0014 313B     		subs	r3, r3, #49
 3594 0016 492B     		cmp	r3, #73
 3595 0018 00F2B782 		bhi	.L194
 3596 001c 01A2     		adr	r2, .L197
 3597 001e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3598 0022 00BF     		.p2align 2
 3599              	.L197:
 3600 0024 CD030000 		.word	.L196+1
 3601 0028 19020000 		.word	.L198+1
 3602 002c 8B050000 		.word	.L194+1
 3603 0030 8B050000 		.word	.L194+1
 3604 0034 8B050000 		.word	.L194+1
 3605 0038 8B050000 		.word	.L194+1
 3606 003c 8B050000 		.word	.L194+1
 3607 0040 8B050000 		.word	.L194+1
 3608 0044 8B050000 		.word	.L194+1
 3609 0048 8B050000 		.word	.L194+1
 3610 004c 8B050000 		.word	.L194+1
 3611 0050 8B050000 		.word	.L194+1
 3612 0054 8B050000 		.word	.L194+1
 3613 0058 8B050000 		.word	.L194+1
 3614 005c 8B050000 		.word	.L194+1
 3615 0060 8B050000 		.word	.L194+1
 3616 0064 8B050000 		.word	.L194+1
 3617 0068 8B050000 		.word	.L194+1
 3618 006c 8B050000 		.word	.L194+1
 3619 0070 8B050000 		.word	.L194+1
 3620 0074 8B050000 		.word	.L194+1
 3621 0078 8B050000 		.word	.L194+1
 3622 007c 8B050000 		.word	.L194+1
 3623 0080 8B050000 		.word	.L194+1
 3624 0084 8B050000 		.word	.L194+1
 3625 0088 8B050000 		.word	.L194+1
 3626 008c 8B050000 		.word	.L194+1
 3627 0090 8B050000 		.word	.L194+1
 3628 0094 8B050000 		.word	.L194+1
 3629 0098 8B050000 		.word	.L194+1
 3630 009c 8B050000 		.word	.L194+1
 3631 00a0 8B050000 		.word	.L194+1
 3632 00a4 8B050000 		.word	.L194+1
 3633 00a8 8B050000 		.word	.L194+1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 80


 3634 00ac 8B050000 		.word	.L194+1
 3635 00b0 8B050000 		.word	.L194+1
 3636 00b4 8B050000 		.word	.L194+1
 3637 00b8 8B050000 		.word	.L194+1
 3638 00bc 8B050000 		.word	.L194+1
 3639 00c0 8B050000 		.word	.L194+1
 3640 00c4 8B050000 		.word	.L194+1
 3641 00c8 8B050000 		.word	.L194+1
 3642 00cc 8B050000 		.word	.L194+1
 3643 00d0 8B050000 		.word	.L194+1
 3644 00d4 8B050000 		.word	.L194+1
 3645 00d8 8B050000 		.word	.L194+1
 3646 00dc 8B050000 		.word	.L194+1
 3647 00e0 8B050000 		.word	.L194+1
 3648 00e4 4D010000 		.word	.L199+1
 3649 00e8 8B050000 		.word	.L194+1
 3650 00ec 8B050000 		.word	.L194+1
 3651 00f0 71010000 		.word	.L200+1
 3652 00f4 8B050000 		.word	.L194+1
 3653 00f8 7D010000 		.word	.L201+1
 3654 00fc 8B050000 		.word	.L194+1
 3655 0100 8B050000 		.word	.L194+1
 3656 0104 8B050000 		.word	.L194+1
 3657 0108 8B050000 		.word	.L194+1
 3658 010c 8B050000 		.word	.L194+1
 3659 0110 8B050000 		.word	.L194+1
 3660 0114 8B050000 		.word	.L194+1
 3661 0118 8B050000 		.word	.L194+1
 3662 011c 8B050000 		.word	.L194+1
 3663 0120 8B050000 		.word	.L194+1
 3664 0124 AD010000 		.word	.L202+1
 3665 0128 03020000 		.word	.L203+1
 3666 012c 65010000 		.word	.L204+1
 3667 0130 89010000 		.word	.L205+1
 3668 0134 95010000 		.word	.L206+1
 3669 0138 8B050000 		.word	.L194+1
 3670 013c 59010000 		.word	.L207+1
 3671 0140 8B050000 		.word	.L194+1
 3672 0144 8B050000 		.word	.L194+1
 3673 0148 A1010000 		.word	.L208+1
 3674              		.p2align 1
 3675              	.L199:
 3676              	.LBB9:
 804:.\main.c      ****     case 'a':
 805:.\main.c      ****         initTurnLeft();
 3677              		.loc 1 805 0
 3678 014c FFF7FEFF 		bl	initTurnLeft
 806:.\main.c      ****         track_mode = NO_TRACK;
 3679              		.loc 1 806 0
 3680 0150 AE4B     		ldr	r3, .L227
 3681 0152 0022     		movs	r2, #0
 3682 0154 1A70     		strb	r2, [r3]
 807:.\main.c      ****         break;
 3683              		.loc 1 807 0
 3684 0156 18E2     		b	.L194
 3685              	.L207:
 808:.\main.c      ****     case 'w':
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 81


 809:.\main.c      ****         initForward();
 3686              		.loc 1 809 0
 3687 0158 FFF7FEFF 		bl	initForward
 810:.\main.c      ****         track_mode = NO_TRACK;
 3688              		.loc 1 810 0
 3689 015c AB4B     		ldr	r3, .L227
 3690 015e 0022     		movs	r2, #0
 3691 0160 1A70     		strb	r2, [r3]
 811:.\main.c      ****         break;
 3692              		.loc 1 811 0
 3693 0162 12E2     		b	.L194
 3694              	.L204:
 812:.\main.c      ****     case 's': 
 813:.\main.c      ****         reverseDirection();
 3695              		.loc 1 813 0
 3696 0164 FFF7FEFF 		bl	reverseDirection
 814:.\main.c      ****         track_mode = NO_TRACK;
 3697              		.loc 1 814 0
 3698 0168 A84B     		ldr	r3, .L227
 3699 016a 0022     		movs	r2, #0
 3700 016c 1A70     		strb	r2, [r3]
 815:.\main.c      ****         break;
 3701              		.loc 1 815 0
 3702 016e 0CE2     		b	.L194
 3703              	.L200:
 816:.\main.c      ****     case 'd':
 817:.\main.c      ****         initTurnRight();
 3704              		.loc 1 817 0
 3705 0170 FFF7FEFF 		bl	initTurnRight
 818:.\main.c      ****         track_mode = NO_TRACK;
 3706              		.loc 1 818 0
 3707 0174 A54B     		ldr	r3, .L227
 3708 0176 0022     		movs	r2, #0
 3709 0178 1A70     		strb	r2, [r3]
 819:.\main.c      ****         break;
 3710              		.loc 1 819 0
 3711 017a 06E2     		b	.L194
 3712              	.L201:
 820:.\main.c      ****     case 'f':
 821:.\main.c      ****         initBrake();
 3713              		.loc 1 821 0
 3714 017c FFF7FEFF 		bl	initBrake
 822:.\main.c      ****         track_mode = NO_TRACK;
 3715              		.loc 1 822 0
 3716 0180 A24B     		ldr	r3, .L227
 3717 0182 0022     		movs	r2, #0
 3718 0184 1A70     		strb	r2, [r3]
 823:.\main.c      ****         break;
 3719              		.loc 1 823 0
 3720 0186 00E2     		b	.L194
 3721              	.L205:
 824:.\main.c      ****     case('t'):
 825:.\main.c      ****         track_mode = CURVE_TRACK;
 3722              		.loc 1 825 0
 3723 0188 A04B     		ldr	r3, .L227
 3724 018a 0122     		movs	r2, #1
 3725 018c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 82


 826:.\main.c      ****         initTrack();
 3726              		.loc 1 826 0
 3727 018e FFF7FEFF 		bl	initTrack
 827:.\main.c      ****         break;
 3728              		.loc 1 827 0
 3729 0192 FAE1     		b	.L194
 3730              	.L206:
 828:.\main.c      ****     case('u'):
 829:.\main.c      ****         initTrackU();
 3731              		.loc 1 829 0
 3732 0194 FFF7FEFF 		bl	initTrackU
 830:.\main.c      ****         track_mode = U_TRACK;
 3733              		.loc 1 830 0
 3734 0198 9C4B     		ldr	r3, .L227
 3735 019a 0222     		movs	r2, #2
 3736 019c 1A70     		strb	r2, [r3]
 831:.\main.c      ****         break;
 3737              		.loc 1 831 0
 3738 019e F4E1     		b	.L194
 3739              	.L208:
 832:.\main.c      ****     case('z'):
 833:.\main.c      ****         track_mode = SQUARE_TRACK;
 3740              		.loc 1 833 0
 3741 01a0 9A4B     		ldr	r3, .L227
 3742 01a2 0322     		movs	r2, #3
 3743 01a4 1A70     		strb	r2, [r3]
 834:.\main.c      ****         inittrackLineZ();
 3744              		.loc 1 834 0
 3745 01a6 FFF7FEFF 		bl	inittrackLineZ
 835:.\main.c      ****         break;
 3746              		.loc 1 835 0
 3747 01aa EEE1     		b	.L194
 3748              	.L202:
 836:.\main.c      ****     case('q'):
 837:.\main.c      ****         track_mode = QUAD_STOP;
 3749              		.loc 1 837 0
 3750 01ac 974B     		ldr	r3, .L227
 3751 01ae 0422     		movs	r2, #4
 3752 01b0 1A70     		strb	r2, [r3]
 838:.\main.c      ****         accum_dist = 0;
 3753              		.loc 1 838 0
 3754 01b2 974B     		ldr	r3, .L227+4
 3755 01b4 0022     		movs	r2, #0
 3756 01b6 1A80     		strh	r2, [r3]	@ movhi
 839:.\main.c      ****         target_distance_quad = target_distance_cm * quad_per_cm;
 3757              		.loc 1 839 0
 3758 01b8 964B     		ldr	r3, .L227+8
 3759 01ba 1B88     		ldrh	r3, [r3]
 3760 01bc 1BB2     		sxth	r3, r3
 3761 01be 1846     		mov	r0, r3
 3762 01c0 FFF7FEFF 		bl	__aeabi_i2f
 3763 01c4 0246     		mov	r2, r0
 3764 01c6 944B     		ldr	r3, .L227+12
 3765 01c8 1B68     		ldr	r3, [r3]	@ float
 3766 01ca 1046     		mov	r0, r2
 3767 01cc 1946     		mov	r1, r3
 3768 01ce FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 83


 3769 01d2 0346     		mov	r3, r0
 3770 01d4 1846     		mov	r0, r3
 3771 01d6 FFF7FEFF 		bl	__aeabi_f2iz
 3772 01da 0346     		mov	r3, r0
 3773 01dc 9AB2     		uxth	r2, r3
 3774 01de 8F4B     		ldr	r3, .L227+16
 3775 01e0 1A80     		strh	r2, [r3]	@ movhi
 840:.\main.c      ****         char mes[32];
 841:.\main.c      ****         sprintf(mes, "target quad: %d\r\n", target_distance_quad);
 3776              		.loc 1 841 0
 3777 01e2 8E4B     		ldr	r3, .L227+16
 3778 01e4 1B88     		ldrh	r3, [r3]
 3779 01e6 1BB2     		sxth	r3, r3
 3780 01e8 3A46     		mov	r2, r7
 3781 01ea 1046     		mov	r0, r2
 3782 01ec 8C49     		ldr	r1, .L227+20
 3783 01ee 1A46     		mov	r2, r3
 3784 01f0 FFF7FEFF 		bl	sprintf
 842:.\main.c      ****         UART_PutString(mes);
 3785              		.loc 1 842 0
 3786 01f4 3B46     		mov	r3, r7
 3787 01f6 1846     		mov	r0, r3
 3788 01f8 FFF7FEFF 		bl	UART_PutString
 843:.\main.c      ****         initForward();
 3789              		.loc 1 843 0
 3790 01fc FFF7FEFF 		bl	initForward
 844:.\main.c      ****         break;
 3791              		.loc 1 844 0
 3792 0200 C3E1     		b	.L194
 3793              	.L203:
 845:.\main.c      ****     case ('r'):
 846:.\main.c      ****         track_mode = RF_STOP;
 3794              		.loc 1 846 0
 3795 0202 824B     		ldr	r3, .L227
 3796 0204 0522     		movs	r2, #5
 3797 0206 1A70     		strb	r2, [r3]
 847:.\main.c      ****         changeToRF();
 3798              		.loc 1 847 0
 3799 0208 FFF7FEFF 		bl	changeToRF
 848:.\main.c      ****         // Make initial position
 849:.\main.c      ****         initial_pos_valid = 0;
 3800              		.loc 1 849 0
 3801 020c 854B     		ldr	r3, .L227+24
 3802 020e 0022     		movs	r2, #0
 3803 0210 1A70     		strb	r2, [r3]
 850:.\main.c      ****         initBrake();
 3804              		.loc 1 850 0
 3805 0212 FFF7FEFF 		bl	initBrake
 851:.\main.c      ****         break;
 3806              		.loc 1 851 0
 3807 0216 B8E1     		b	.L194
 3808              	.L198:
 852:.\main.c      ****     case ('2'):
 853:.\main.c      ****         track_mode = DEST_TEST;
 3809              		.loc 1 853 0
 3810 0218 7C4B     		ldr	r3, .L227
 3811 021a 0622     		movs	r2, #6
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 84


 3812 021c 1A70     		strb	r2, [r3]
 854:.\main.c      ****         tracked_direction = robot_direction;
 3813              		.loc 1 854 0
 3814 021e 824B     		ldr	r3, .L227+28
 3815 0220 1B68     		ldr	r3, [r3]
 3816 0222 824A     		ldr	r2, .L227+32
 3817 0224 1360     		str	r3, [r2]
 855:.\main.c      ****         instructionLength = generateDirections();
 3818              		.loc 1 855 0
 3819 0226 FFF7FEFF 		bl	generateDirections
 3820 022a 0346     		mov	r3, r0
 3821 022c 9AB2     		uxth	r2, r3
 3822 022e 804B     		ldr	r3, .L227+36
 3823 0230 1A80     		strh	r2, [r3]	@ movhi
 856:.\main.c      ****         //instructionLength = generateEntireMapDirections();
 857:.\main.c      ****         //char message[128];
 858:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 859:.\main.c      ****         
 860:.\main.c      ****         last_quad_count1 = 0;
 3824              		.loc 1 860 0
 3825 0232 804B     		ldr	r3, .L227+40
 3826 0234 0022     		movs	r2, #0
 3827 0236 1A80     		strh	r2, [r3]	@ movhi
 861:.\main.c      ****         last_quad_count2 = 0;
 3828              		.loc 1 861 0
 3829 0238 7F4B     		ldr	r3, .L227+44
 3830 023a 0022     		movs	r2, #0
 3831 023c 1A80     		strh	r2, [r3]	@ movhi
 862:.\main.c      ****         QuadDec_M1_SetCounter(0);
 3832              		.loc 1 862 0
 3833 023e 0020     		movs	r0, #0
 3834 0240 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 863:.\main.c      ****         QuadDec_M2_SetCounter(0);
 3835              		.loc 1 863 0
 3836 0244 0020     		movs	r0, #0
 3837 0246 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 864:.\main.c      ****         instructionCount = 0;
 3838              		.loc 1 864 0
 3839 024a 7C4B     		ldr	r3, .L227+48
 3840 024c 0022     		movs	r2, #0
 3841 024e 1A80     		strh	r2, [r3]	@ movhi
 865:.\main.c      ****         isrRF_RX_Disable();
 3842              		.loc 1 865 0
 3843 0250 FFF7FEFF 		bl	isrRF_RX_Disable
 866:.\main.c      ****         while(rf_char != 'F')
 3844              		.loc 1 866 0
 3845 0254 2CE0     		b	.L210
 3846              	.L213:
 867:.\main.c      ****         {
 868:.\main.c      ****             rf_char = UART_GetChar();
 3847              		.loc 1 868 0
 3848 0256 FFF7FEFF 		bl	UART_GetChar
 3849 025a 0346     		mov	r3, r0
 3850 025c 87F82F30 		strb	r3, [r7, #47]
 869:.\main.c      ****             if(rf_char == 'F') break;
 3851              		.loc 1 869 0
 3852 0260 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 85


 3853 0264 462B     		cmp	r3, #70
 3854 0266 00D1     		bne	.L211
 3855 0268 26E0     		b	.L212
 3856              	.L211:
 870:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 3857              		.loc 1 870 0
 3858 026a 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3859 026e 2F2B     		cmp	r3, #47
 3860 0270 1ED9     		bls	.L210
 3861              		.loc 1 870 0 is_stmt 0 discriminator 1
 3862 0272 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3863 0276 392B     		cmp	r3, #57
 3864 0278 1AD8     		bhi	.L210
 871:.\main.c      ****             {
 872:.\main.c      ****                 UART_PutString("received: ");
 3865              		.loc 1 872 0 is_stmt 1
 3866 027a 7148     		ldr	r0, .L227+52
 3867 027c FFF7FEFF 		bl	UART_PutString
 873:.\main.c      ****                 UART_PutChar(rf_char);
 3868              		.loc 1 873 0
 3869 0280 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3870 0284 1846     		mov	r0, r3
 3871 0286 FFF7FEFF 		bl	UART_PutChar
 874:.\main.c      ****                 UART_PutString("\r\n");
 3872              		.loc 1 874 0
 3873 028a 6E48     		ldr	r0, .L227+56
 3874 028c FFF7FEFF 		bl	UART_PutString
 875:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 3875              		.loc 1 875 0
 3876 0290 6A4B     		ldr	r3, .L227+48
 3877 0292 1B88     		ldrh	r3, [r3]
 3878 0294 1A46     		mov	r2, r3	@ movhi
 3879 0296 9200     		lsls	r2, r2, #2
 3880 0298 1344     		add	r3, r3, r2
 3881 029a 5B00     		lsls	r3, r3, #1
 3882 029c 9AB2     		uxth	r2, r3
 3883 029e 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3884 02a2 9BB2     		uxth	r3, r3
 3885 02a4 1344     		add	r3, r3, r2
 3886 02a6 9BB2     		uxth	r3, r3
 3887 02a8 303B     		subs	r3, r3, #48
 3888 02aa 9AB2     		uxth	r2, r3
 3889 02ac 634B     		ldr	r3, .L227+48
 3890 02ae 1A80     		strh	r2, [r3]	@ movhi
 3891              	.L210:
 866:.\main.c      ****         {
 3892              		.loc 1 866 0
 3893 02b0 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 3894 02b4 462B     		cmp	r3, #70
 3895 02b6 CED1     		bne	.L213
 3896              	.L212:
 876:.\main.c      ****             }
 877:.\main.c      ****             
 878:.\main.c      ****         }
 879:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 3897              		.loc 1 879 0
 3898 02b8 6348     		ldr	r0, .L227+60
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 86


 3899 02ba FFF7FEFF 		bl	isrRF_RX_StartEx
 880:.\main.c      ****         sprintf(mes, "num instruct:%d\r\n", instructionLength);
 3900              		.loc 1 880 0
 3901 02be 5C4B     		ldr	r3, .L227+36
 3902 02c0 1B88     		ldrh	r3, [r3]
 3903 02c2 1A46     		mov	r2, r3
 3904 02c4 3B46     		mov	r3, r7
 3905 02c6 1846     		mov	r0, r3
 3906 02c8 6049     		ldr	r1, .L227+64
 3907 02ca FFF7FEFF 		bl	sprintf
 881:.\main.c      ****         UART_PutString(mes);
 3908              		.loc 1 881 0
 3909 02ce 3B46     		mov	r3, r7
 3910 02d0 1846     		mov	r0, r3
 3911 02d2 FFF7FEFF 		bl	UART_PutString
 882:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 3912              		.loc 1 882 0
 3913 02d6 594B     		ldr	r3, .L227+48
 3914 02d8 1B88     		ldrh	r3, [r3]
 3915 02da 1A46     		mov	r2, r3
 3916 02dc 3B46     		mov	r3, r7
 3917 02de 1846     		mov	r0, r3
 3918 02e0 5B49     		ldr	r1, .L227+68
 3919 02e2 FFF7FEFF 		bl	sprintf
 883:.\main.c      ****         UART_PutString(mes);
 3920              		.loc 1 883 0
 3921 02e6 3B46     		mov	r3, r7
 3922 02e8 1846     		mov	r0, r3
 3923 02ea FFF7FEFF 		bl	UART_PutString
 884:.\main.c      ****         
 885:.\main.c      ****         int i;
 886:.\main.c      ****         for(i = instructionCount;i < instructionLength; i++)
 3924              		.loc 1 886 0
 3925 02ee 534B     		ldr	r3, .L227+48
 3926 02f0 1B88     		ldrh	r3, [r3]
 3927 02f2 BB62     		str	r3, [r7, #40]
 3928 02f4 18E0     		b	.L214
 3929              	.L217:
 887:.\main.c      ****         {
 888:.\main.c      ****             if(i%2 == 0)
 3930              		.loc 1 888 0
 3931 02f6 BB6A     		ldr	r3, [r7, #40]
 3932 02f8 03F00103 		and	r3, r3, #1
 3933 02fc 002B     		cmp	r3, #0
 3934 02fe 07D1     		bne	.L215
 889:.\main.c      ****             {
 890:.\main.c      ****                 UART_PutChar(instructions[i]);
 3935              		.loc 1 890 0
 3936 0300 544A     		ldr	r2, .L227+72
 3937 0302 BB6A     		ldr	r3, [r7, #40]
 3938 0304 1344     		add	r3, r3, r2
 3939 0306 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3940 0308 1846     		mov	r0, r3
 3941 030a FFF7FEFF 		bl	UART_PutChar
 3942 030e 08E0     		b	.L216
 3943              	.L215:
 891:.\main.c      ****             }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 87


 892:.\main.c      ****             else UART_PutChar(instructions[i] + 48);
 3944              		.loc 1 892 0
 3945 0310 504A     		ldr	r2, .L227+72
 3946 0312 BB6A     		ldr	r3, [r7, #40]
 3947 0314 1344     		add	r3, r3, r2
 3948 0316 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3949 0318 3033     		adds	r3, r3, #48
 3950 031a DBB2     		uxtb	r3, r3
 3951 031c 1846     		mov	r0, r3
 3952 031e FFF7FEFF 		bl	UART_PutChar
 3953              	.L216:
 886:.\main.c      ****         {
 3954              		.loc 1 886 0 discriminator 2
 3955 0322 BB6A     		ldr	r3, [r7, #40]
 3956 0324 0133     		adds	r3, r3, #1
 3957 0326 BB62     		str	r3, [r7, #40]
 3958              	.L214:
 886:.\main.c      ****         {
 3959              		.loc 1 886 0 is_stmt 0 discriminator 1
 3960 0328 414B     		ldr	r3, .L227+36
 3961 032a 1B88     		ldrh	r3, [r3]
 3962 032c 1A46     		mov	r2, r3
 3963 032e BB6A     		ldr	r3, [r7, #40]
 3964 0330 9A42     		cmp	r2, r3
 3965 0332 E0DC     		bgt	.L217
 893:.\main.c      **** 
 894:.\main.c      ****         }
 895:.\main.c      ****         
 896:.\main.c      ****         instructions[instructionLength] = 'D';
 3966              		.loc 1 896 0 is_stmt 1
 3967 0334 3E4B     		ldr	r3, .L227+36
 3968 0336 1B88     		ldrh	r3, [r3]
 3969 0338 1A46     		mov	r2, r3
 3970 033a 464B     		ldr	r3, .L227+72
 3971 033c 4421     		movs	r1, #68
 3972 033e 9954     		strb	r1, [r3, r2]
 897:.\main.c      ****         instructions[instructionLength+1] = 1;
 3973              		.loc 1 897 0
 3974 0340 3B4B     		ldr	r3, .L227+36
 3975 0342 1B88     		ldrh	r3, [r3]
 3976 0344 0133     		adds	r3, r3, #1
 3977 0346 434A     		ldr	r2, .L227+72
 3978 0348 0121     		movs	r1, #1
 3979 034a D154     		strb	r1, [r2, r3]
 898:.\main.c      ****         instructionLength += 2;
 3980              		.loc 1 898 0
 3981 034c 384B     		ldr	r3, .L227+36
 3982 034e 1B88     		ldrh	r3, [r3]
 3983 0350 0233     		adds	r3, r3, #2
 3984 0352 9AB2     		uxth	r2, r3
 3985 0354 364B     		ldr	r3, .L227+36
 3986 0356 1A80     		strh	r2, [r3]	@ movhi
 899:.\main.c      ****         instructions[instructionLength] = 0;
 3987              		.loc 1 899 0
 3988 0358 354B     		ldr	r3, .L227+36
 3989 035a 1B88     		ldrh	r3, [r3]
 3990 035c 1A46     		mov	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 88


 3991 035e 3D4B     		ldr	r3, .L227+72
 3992 0360 0021     		movs	r1, #0
 3993 0362 9954     		strb	r1, [r3, r2]
 900:.\main.c      ****         
 901:.\main.c      ****         UART_PutString("\r\n");
 3994              		.loc 1 901 0
 3995 0364 3748     		ldr	r0, .L227+56
 3996 0366 FFF7FEFF 		bl	UART_PutString
 902:.\main.c      ****         
 903:.\main.c      ****         char nextStep = instructions[instructionCount];
 3997              		.loc 1 903 0
 3998 036a 344B     		ldr	r3, .L227+48
 3999 036c 1B88     		ldrh	r3, [r3]
 4000 036e 1A46     		mov	r2, r3
 4001 0370 384B     		ldr	r3, .L227+72
 4002 0372 9B5C     		ldrb	r3, [r3, r2]
 4003 0374 87F82330 		strb	r3, [r7, #35]
 904:.\main.c      ****         
 905:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1];
 4004              		.loc 1 905 0
 4005 0378 304B     		ldr	r3, .L227+48
 4006 037a 1B88     		ldrh	r3, [r3]
 4007 037c 0133     		adds	r3, r3, #1
 4008 037e 354A     		ldr	r2, .L227+72
 4009 0380 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4010 0382 9BB2     		uxth	r3, r3
 4011 0384 1A46     		mov	r2, r3	@ movhi
 4012 0386 D200     		lsls	r2, r2, #3
 4013 0388 1344     		add	r3, r3, r2
 4014 038a 1B01     		lsls	r3, r3, #4
 4015 038c 9BB2     		uxth	r3, r3
 4016 038e 9AB2     		uxth	r2, r3
 4017 0390 224B     		ldr	r3, .L227+16
 4018 0392 1A80     		strh	r2, [r3]	@ movhi
 906:.\main.c      ****         if(instructionCount == 0) target_distance_quad -= QUAD_PER_UNIT; 
 4019              		.loc 1 906 0
 4020 0394 294B     		ldr	r3, .L227+48
 4021 0396 1B88     		ldrh	r3, [r3]
 4022 0398 002B     		cmp	r3, #0
 4023 039a 07D1     		bne	.L218
 4024              		.loc 1 906 0 is_stmt 0 discriminator 1
 4025 039c 1F4B     		ldr	r3, .L227+16
 4026 039e 1B88     		ldrh	r3, [r3]
 4027 03a0 9BB2     		uxth	r3, r3
 4028 03a2 903B     		subs	r3, r3, #144
 4029 03a4 9BB2     		uxth	r3, r3
 4030 03a6 9AB2     		uxth	r2, r3
 4031 03a8 1C4B     		ldr	r3, .L227+16
 4032 03aa 1A80     		strh	r2, [r3]	@ movhi
 4033              	.L218:
 907:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4034              		.loc 1 907 0 is_stmt 1
 4035 03ac 1B4B     		ldr	r3, .L227+16
 4036 03ae 1B88     		ldrh	r3, [r3]
 4037 03b0 1BB2     		sxth	r3, r3
 4038 03b2 3A46     		mov	r2, r7
 4039 03b4 1046     		mov	r0, r2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 89


 4040 03b6 2849     		ldr	r1, .L227+76
 4041 03b8 1A46     		mov	r2, r3
 4042 03ba FFF7FEFF 		bl	sprintf
 908:.\main.c      ****         UART_PutString(mes);
 4043              		.loc 1 908 0
 4044 03be 3B46     		mov	r3, r7
 4045 03c0 1846     		mov	r0, r3
 4046 03c2 FFF7FEFF 		bl	UART_PutString
 909:.\main.c      ****         inittrackLineZ();
 4047              		.loc 1 909 0
 4048 03c6 FFF7FEFF 		bl	inittrackLineZ
 910:.\main.c      ****         break;
 4049              		.loc 1 910 0
 4050 03ca DEE0     		b	.L194
 4051              	.L196:
 911:.\main.c      ****     case ('1'):
 912:.\main.c      ****         track_mode = DEST_TEST;
 4052              		.loc 1 912 0
 4053 03cc 0F4B     		ldr	r3, .L227
 4054 03ce 0622     		movs	r2, #6
 4055 03d0 1A70     		strb	r2, [r3]
 913:.\main.c      ****         tracked_direction = robot_direction;
 4056              		.loc 1 913 0
 4057 03d2 154B     		ldr	r3, .L227+28
 4058 03d4 1B68     		ldr	r3, [r3]
 4059 03d6 154A     		ldr	r2, .L227+32
 4060 03d8 1360     		str	r3, [r2]
 914:.\main.c      ****         //instructionLength = generateDirections();
 915:.\main.c      ****         instructionLength = generateEntireMapDirections();
 4061              		.loc 1 915 0
 4062 03da FFF7FEFF 		bl	generateEntireMapDirections
 4063 03de 0346     		mov	r3, r0
 4064 03e0 9AB2     		uxth	r2, r3
 4065 03e2 134B     		ldr	r3, .L227+36
 4066 03e4 1A80     		strh	r2, [r3]	@ movhi
 916:.\main.c      ****         //char message[128];
 917:.\main.c      ****        // sprintf(message, "p:%s\r\n", instructions);
 918:.\main.c      ****         instructionCount = 0;
 4067              		.loc 1 918 0
 4068 03e6 154B     		ldr	r3, .L227+48
 4069 03e8 0022     		movs	r2, #0
 4070 03ea 1A80     		strh	r2, [r3]	@ movhi
 919:.\main.c      ****         QuadDec_M1_SetCounter(0);
 4071              		.loc 1 919 0
 4072 03ec 0020     		movs	r0, #0
 4073 03ee FFF7FEFF 		bl	QuadDec_M1_SetCounter
 920:.\main.c      ****         QuadDec_M2_SetCounter(0);
 4074              		.loc 1 920 0
 4075 03f2 0020     		movs	r0, #0
 4076 03f4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 921:.\main.c      ****         last_quad_count1 = 0;
 4077              		.loc 1 921 0
 4078 03f8 0E4B     		ldr	r3, .L227+40
 4079 03fa 0022     		movs	r2, #0
 4080 03fc 1A80     		strh	r2, [r3]	@ movhi
 922:.\main.c      ****         last_quad_count2 = 0;
 4081              		.loc 1 922 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 90


 4082 03fe 0E4B     		ldr	r3, .L227+44
 4083 0400 0022     		movs	r2, #0
 4084 0402 1A80     		strh	r2, [r3]	@ movhi
 923:.\main.c      ****         isrRF_RX_Disable();
 4085              		.loc 1 923 0
 4086 0404 FFF7FEFF 		bl	isrRF_RX_Disable
 924:.\main.c      ****         while(rf_char != 'F')
 4087              		.loc 1 924 0
 4088 0408 55E0     		b	.L219
 4089              	.L228:
 4090 040a 00BF     		.align	2
 4091              	.L227:
 4092 040c 00000000 		.word	track_mode
 4093 0410 00000000 		.word	accum_dist
 4094 0414 00000000 		.word	target_distance_cm
 4095 0418 00000000 		.word	quad_per_cm
 4096 041c 00000000 		.word	target_distance_quad
 4097 0420 C4000000 		.word	.LC10
 4098 0424 00000000 		.word	initial_pos_valid
 4099 0428 00000000 		.word	robot_direction
 4100 042c 00000000 		.word	tracked_direction
 4101 0430 00000000 		.word	instructionLength
 4102 0434 00000000 		.word	last_quad_count1
 4103 0438 00000000 		.word	last_quad_count2
 4104 043c 00000000 		.word	instructionCount
 4105 0440 D8000000 		.word	.LC11
 4106 0444 E4000000 		.word	.LC12
 4107 0448 00000000 		.word	BT_rxInt
 4108 044c E8000000 		.word	.LC13
 4109 0450 FC000000 		.word	.LC14
 4110 0454 00000000 		.word	instructions
 4111 0458 5C000000 		.word	.LC5
 4112              	.L222:
 925:.\main.c      ****         {
 926:.\main.c      ****             rf_char = UART_GetChar();
 4113              		.loc 1 926 0
 4114 045c FFF7FEFF 		bl	UART_GetChar
 4115 0460 0346     		mov	r3, r0
 4116 0462 87F82F30 		strb	r3, [r7, #47]
 927:.\main.c      ****             if(rf_char == 'F') break;
 4117              		.loc 1 927 0
 4118 0466 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4119 046a 462B     		cmp	r3, #70
 4120 046c 00D1     		bne	.L220
 4121 046e 26E0     		b	.L221
 4122              	.L220:
 928:.\main.c      ****             if(rf_char >= '0' && rf_char <= '9')
 4123              		.loc 1 928 0
 4124 0470 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4125 0474 2F2B     		cmp	r3, #47
 4126 0476 1ED9     		bls	.L219
 4127              		.loc 1 928 0 is_stmt 0 discriminator 1
 4128 0478 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4129 047c 392B     		cmp	r3, #57
 4130 047e 1AD8     		bhi	.L219
 929:.\main.c      ****             {
 930:.\main.c      ****                 UART_PutString("received: ");
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 91


 4131              		.loc 1 930 0 is_stmt 1
 4132 0480 4348     		ldr	r0, .L229
 4133 0482 FFF7FEFF 		bl	UART_PutString
 931:.\main.c      ****                 UART_PutChar(rf_char);
 4134              		.loc 1 931 0
 4135 0486 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4136 048a 1846     		mov	r0, r3
 4137 048c FFF7FEFF 		bl	UART_PutChar
 932:.\main.c      ****                 UART_PutString("\r\n");
 4138              		.loc 1 932 0
 4139 0490 4048     		ldr	r0, .L229+4
 4140 0492 FFF7FEFF 		bl	UART_PutString
 933:.\main.c      ****                 instructionCount = instructionCount*10 + (rf_char-48);
 4141              		.loc 1 933 0
 4142 0496 404B     		ldr	r3, .L229+8
 4143 0498 1B88     		ldrh	r3, [r3]
 4144 049a 1A46     		mov	r2, r3	@ movhi
 4145 049c 9200     		lsls	r2, r2, #2
 4146 049e 1344     		add	r3, r3, r2
 4147 04a0 5B00     		lsls	r3, r3, #1
 4148 04a2 9AB2     		uxth	r2, r3
 4149 04a4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4150 04a8 9BB2     		uxth	r3, r3
 4151 04aa 1344     		add	r3, r3, r2
 4152 04ac 9BB2     		uxth	r3, r3
 4153 04ae 303B     		subs	r3, r3, #48
 4154 04b0 9AB2     		uxth	r2, r3
 4155 04b2 394B     		ldr	r3, .L229+8
 4156 04b4 1A80     		strh	r2, [r3]	@ movhi
 4157              	.L219:
 924:.\main.c      ****         {
 4158              		.loc 1 924 0
 4159 04b6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 4160 04ba 462B     		cmp	r3, #70
 4161 04bc CED1     		bne	.L222
 4162              	.L221:
 934:.\main.c      ****             }
 935:.\main.c      ****             
 936:.\main.c      ****         }
 937:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4163              		.loc 1 937 0
 4164 04be 3748     		ldr	r0, .L229+12
 4165 04c0 FFF7FEFF 		bl	isrRF_RX_StartEx
 938:.\main.c      ****         sprintf(mes, "num instruct:%d\r\n", instructionLength);
 4166              		.loc 1 938 0
 4167 04c4 364B     		ldr	r3, .L229+16
 4168 04c6 1B88     		ldrh	r3, [r3]
 4169 04c8 1A46     		mov	r2, r3
 4170 04ca 3B46     		mov	r3, r7
 4171 04cc 1846     		mov	r0, r3
 4172 04ce 3549     		ldr	r1, .L229+20
 4173 04d0 FFF7FEFF 		bl	sprintf
 939:.\main.c      ****         UART_PutString(mes);
 4174              		.loc 1 939 0
 4175 04d4 3B46     		mov	r3, r7
 4176 04d6 1846     		mov	r0, r3
 4177 04d8 FFF7FEFF 		bl	UART_PutString
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 92


 940:.\main.c      ****         sprintf(mes, "starting from instruction %d\r\n", instructionCount);
 4178              		.loc 1 940 0
 4179 04dc 2E4B     		ldr	r3, .L229+8
 4180 04de 1B88     		ldrh	r3, [r3]
 4181 04e0 1A46     		mov	r2, r3
 4182 04e2 3B46     		mov	r3, r7
 4183 04e4 1846     		mov	r0, r3
 4184 04e6 3049     		ldr	r1, .L229+24
 4185 04e8 FFF7FEFF 		bl	sprintf
 941:.\main.c      ****         UART_PutString(mes);
 4186              		.loc 1 941 0
 4187 04ec 3B46     		mov	r3, r7
 4188 04ee 1846     		mov	r0, r3
 4189 04f0 FFF7FEFF 		bl	UART_PutString
 942:.\main.c      ****         //instructionCount = instructionLength - 22;
 943:.\main.c      ****         int x;
 944:.\main.c      ****         
 945:.\main.c      **** //        for(x  = instructionCount; x < instructionLength; x+=2)
 946:.\main.c      **** //        {
 947:.\main.c      **** //            char step = instructions[x];
 948:.\main.c      **** //            uint8_t dist = instructions[x+1];
 949:.\main.c      **** //            
 950:.\main.c      **** //            if(step == 'D' && dist == 0)
 951:.\main.c      **** //            {
 952:.\main.c      **** //            }
 953:.\main.c      **** //            else
 954:.\main.c      **** //            {
 955:.\main.c      **** //                
 956:.\main.c      **** //            }
 957:.\main.c      **** //        }
 958:.\main.c      ****         for(x = instructionCount;x < instructionLength; x++)
 4190              		.loc 1 958 0
 4191 04f4 284B     		ldr	r3, .L229+8
 4192 04f6 1B88     		ldrh	r3, [r3]
 4193 04f8 7B62     		str	r3, [r7, #36]
 4194 04fa 18E0     		b	.L223
 4195              	.L226:
 959:.\main.c      ****         {
 960:.\main.c      ****             
 961:.\main.c      ****             if(x%2 == 0)
 4196              		.loc 1 961 0
 4197 04fc 7B6A     		ldr	r3, [r7, #36]
 4198 04fe 03F00103 		and	r3, r3, #1
 4199 0502 002B     		cmp	r3, #0
 4200 0504 07D1     		bne	.L224
 962:.\main.c      ****             {
 963:.\main.c      ****                 UART_PutChar(instructions[x]);
 4201              		.loc 1 963 0
 4202 0506 294A     		ldr	r2, .L229+28
 4203 0508 7B6A     		ldr	r3, [r7, #36]
 4204 050a 1344     		add	r3, r3, r2
 4205 050c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4206 050e 1846     		mov	r0, r3
 4207 0510 FFF7FEFF 		bl	UART_PutChar
 4208 0514 08E0     		b	.L225
 4209              	.L224:
 964:.\main.c      ****             }
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 93


 965:.\main.c      ****             else UART_PutChar(instructions[x] + 48);
 4210              		.loc 1 965 0
 4211 0516 254A     		ldr	r2, .L229+28
 4212 0518 7B6A     		ldr	r3, [r7, #36]
 4213 051a 1344     		add	r3, r3, r2
 4214 051c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4215 051e 3033     		adds	r3, r3, #48
 4216 0520 DBB2     		uxtb	r3, r3
 4217 0522 1846     		mov	r0, r3
 4218 0524 FFF7FEFF 		bl	UART_PutChar
 4219              	.L225:
 958:.\main.c      ****         {
 4220              		.loc 1 958 0 discriminator 2
 4221 0528 7B6A     		ldr	r3, [r7, #36]
 4222 052a 0133     		adds	r3, r3, #1
 4223 052c 7B62     		str	r3, [r7, #36]
 4224              	.L223:
 958:.\main.c      ****         {
 4225              		.loc 1 958 0 is_stmt 0 discriminator 1
 4226 052e 1C4B     		ldr	r3, .L229+16
 4227 0530 1B88     		ldrh	r3, [r3]
 4228 0532 1A46     		mov	r2, r3
 4229 0534 7B6A     		ldr	r3, [r7, #36]
 4230 0536 9A42     		cmp	r2, r3
 4231 0538 E0DC     		bgt	.L226
 966:.\main.c      **** 
 967:.\main.c      ****         }
 968:.\main.c      ****         
 969:.\main.c      ****         UART_PutString("\r\n");
 4232              		.loc 1 969 0 is_stmt 1
 4233 053a 1648     		ldr	r0, .L229+4
 4234 053c FFF7FEFF 		bl	UART_PutString
 970:.\main.c      **** 
 971:.\main.c      ****         nextStep = instructions[instructionCount];
 4235              		.loc 1 971 0
 4236 0540 154B     		ldr	r3, .L229+8
 4237 0542 1B88     		ldrh	r3, [r3]
 4238 0544 1A46     		mov	r2, r3
 4239 0546 194B     		ldr	r3, .L229+28
 4240 0548 9B5C     		ldrb	r3, [r3, r2]
 4241 054a 87F82330 		strb	r3, [r7, #35]
 972:.\main.c      ****         
 973:.\main.c      ****         
 974:.\main.c      ****         target_distance_quad = QUAD_PER_UNIT * instructions[instructionCount+1]; 
 4242              		.loc 1 974 0
 4243 054e 124B     		ldr	r3, .L229+8
 4244 0550 1B88     		ldrh	r3, [r3]
 4245 0552 0133     		adds	r3, r3, #1
 4246 0554 154A     		ldr	r2, .L229+28
 4247 0556 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 4248 0558 9BB2     		uxth	r3, r3
 4249 055a 1A46     		mov	r2, r3	@ movhi
 4250 055c D200     		lsls	r2, r2, #3
 4251 055e 1344     		add	r3, r3, r2
 4252 0560 1B01     		lsls	r3, r3, #4
 4253 0562 9BB2     		uxth	r3, r3
 4254 0564 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 94


 4255 0566 124B     		ldr	r3, .L229+32
 4256 0568 1A80     		strh	r2, [r3]	@ movhi
 975:.\main.c      ****        // if(instructionCount == 0) target_distance_quad += QUAD_PER_UNIT; 
 976:.\main.c      ****         sprintf(mes, "Target dist: %d\r\n", target_distance_quad);
 4257              		.loc 1 976 0
 4258 056a 114B     		ldr	r3, .L229+32
 4259 056c 1B88     		ldrh	r3, [r3]
 4260 056e 1BB2     		sxth	r3, r3
 4261 0570 3A46     		mov	r2, r7
 4262 0572 1046     		mov	r0, r2
 4263 0574 0F49     		ldr	r1, .L229+36
 4264 0576 1A46     		mov	r2, r3
 4265 0578 FFF7FEFF 		bl	sprintf
 977:.\main.c      ****         UART_PutString(mes);
 4266              		.loc 1 977 0
 4267 057c 3B46     		mov	r3, r7
 4268 057e 1846     		mov	r0, r3
 4269 0580 FFF7FEFF 		bl	UART_PutString
 978:.\main.c      ****         inittrackLineZ();
 4270              		.loc 1 978 0
 4271 0584 FFF7FEFF 		bl	inittrackLineZ
 979:.\main.c      ****         break;
 4272              		.loc 1 979 0
 4273 0588 00BF     		nop
 4274              	.L194:
 4275              	.LBE9:
 980:.\main.c      ****     }
 981:.\main.c      **** }
 4276              		.loc 1 981 0
 4277 058a 3037     		adds	r7, r7, #48
 4278              		.cfi_def_cfa_offset 8
 4279 058c BD46     		mov	sp, r7
 4280              		.cfi_def_cfa_register 13
 4281              		@ sp needed
 4282 058e 80BD     		pop	{r7, pc}
 4283              	.L230:
 4284              		.align	2
 4285              	.L229:
 4286 0590 D8000000 		.word	.LC11
 4287 0594 E4000000 		.word	.LC12
 4288 0598 00000000 		.word	instructionCount
 4289 059c 00000000 		.word	BT_rxInt
 4290 05a0 00000000 		.word	instructionLength
 4291 05a4 E8000000 		.word	.LC13
 4292 05a8 FC000000 		.word	.LC14
 4293 05ac 00000000 		.word	instructions
 4294 05b0 00000000 		.word	target_distance_quad
 4295 05b4 5C000000 		.word	.LC5
 4296              		.cfi_endproc
 4297              	.LFE93:
 4298              		.size	BT_rxInt, .-BT_rxInt
 4299              		.section	.text.changeToRF,"ax",%progbits
 4300              		.align	2
 4301              		.global	changeToRF
 4302              		.thumb
 4303              		.thumb_func
 4304              		.type	changeToRF, %function
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 95


 4305              	changeToRF:
 4306              	.LFB94:
 982:.\main.c      **** 
 983:.\main.c      **** 
 984:.\main.c      **** void changeToRF()
 985:.\main.c      **** {
 4307              		.loc 1 985 0
 4308              		.cfi_startproc
 4309              		@ args = 0, pretend = 0, frame = 0
 4310              		@ frame_needed = 1, uses_anonymous_args = 0
 4311 0000 80B5     		push	{r7, lr}
 4312              		.cfi_def_cfa_offset 8
 4313              		.cfi_offset 7, -8
 4314              		.cfi_offset 14, -4
 4315 0002 00AF     		add	r7, sp, #0
 4316              		.cfi_def_cfa_register 7
 986:.\main.c      ****         //disable BT
 987:.\main.c      ****         BT_ENABLED = 0;
 4317              		.loc 1 987 0
 4318 0004 0B4B     		ldr	r3, .L232
 4319 0006 0022     		movs	r2, #0
 4320 0008 1A70     		strb	r2, [r3]
 988:.\main.c      ****         isrRF_RX_Stop();
 4321              		.loc 1 988 0
 4322 000a FFF7FEFF 		bl	isrRF_RX_Stop
 989:.\main.c      ****         UART_Stop();
 4323              		.loc 1 989 0
 4324 000e FFF7FEFF 		bl	UART_Stop
 990:.\main.c      ****         
 991:.\main.c      ****         //enable RF
 992:.\main.c      ****         BIN_ENABLED = 1;
 4325              		.loc 1 992 0
 4326 0012 094B     		ldr	r3, .L232+4
 4327 0014 0122     		movs	r2, #1
 4328 0016 1A70     		strb	r2, [r3]
 993:.\main.c      ****         UART_clk_SetDividerValue(130);
 4329              		.loc 1 993 0
 4330 0018 8120     		movs	r0, #129
 4331 001a 0121     		movs	r1, #1
 4332 001c FFF7FEFF 		bl	UART_clk_SetDividerRegister
 994:.\main.c      ****         isrRF_RX_StartEx(rxInt);
 4333              		.loc 1 994 0
 4334 0020 0648     		ldr	r0, .L232+8
 4335 0022 FFF7FEFF 		bl	isrRF_RX_StartEx
 995:.\main.c      ****         UART_Start();
 4336              		.loc 1 995 0
 4337 0026 FFF7FEFF 		bl	UART_Start
 996:.\main.c      ****         RF_BT_SELECT_Write(0);
 4338              		.loc 1 996 0
 4339 002a 0020     		movs	r0, #0
 4340 002c FFF7FEFF 		bl	RF_BT_SELECT_Write
 997:.\main.c      **** }
 4341              		.loc 1 997 0
 4342 0030 80BD     		pop	{r7, pc}
 4343              	.L233:
 4344 0032 00BF     		.align	2
 4345              	.L232:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 96


 4346 0034 00000000 		.word	BT_ENABLED
 4347 0038 00000000 		.word	BIN_ENABLED
 4348 003c 00000000 		.word	rxInt
 4349              		.cfi_endproc
 4350              	.LFE94:
 4351              		.size	changeToRF, .-changeToRF
 4352              		.section	.text.changeToBT,"ax",%progbits
 4353              		.align	2
 4354              		.global	changeToBT
 4355              		.thumb
 4356              		.thumb_func
 4357              		.type	changeToBT, %function
 4358              	changeToBT:
 4359              	.LFB95:
 998:.\main.c      **** 
 999:.\main.c      **** void changeToBT()
1000:.\main.c      **** {
 4360              		.loc 1 1000 0
 4361              		.cfi_startproc
 4362              		@ args = 0, pretend = 0, frame = 0
 4363              		@ frame_needed = 1, uses_anonymous_args = 0
 4364 0000 80B5     		push	{r7, lr}
 4365              		.cfi_def_cfa_offset 8
 4366              		.cfi_offset 7, -8
 4367              		.cfi_offset 14, -4
 4368 0002 00AF     		add	r7, sp, #0
 4369              		.cfi_def_cfa_register 7
1001:.\main.c      ****         //disable RF
1002:.\main.c      ****         BIN_ENABLED = 0;
 4370              		.loc 1 1002 0
 4371 0004 0B4B     		ldr	r3, .L235
 4372 0006 0022     		movs	r2, #0
 4373 0008 1A70     		strb	r2, [r3]
1003:.\main.c      ****         isrRF_RX_Stop();
 4374              		.loc 1 1003 0
 4375 000a FFF7FEFF 		bl	isrRF_RX_Stop
1004:.\main.c      ****         UART_Stop();
 4376              		.loc 1 1004 0
 4377 000e FFF7FEFF 		bl	UART_Stop
1005:.\main.c      ****         
1006:.\main.c      ****         //enable BT
1007:.\main.c      ****         BT_ENABLED = 1;
 4378              		.loc 1 1007 0
 4379 0012 094B     		ldr	r3, .L235+4
 4380 0014 0122     		movs	r2, #1
 4381 0016 1A70     		strb	r2, [r3]
1008:.\main.c      ****         UART_clk_SetDividerValue(781);
 4382              		.loc 1 1008 0
 4383 0018 4FF44370 		mov	r0, #780
 4384 001c 0121     		movs	r1, #1
 4385 001e FFF7FEFF 		bl	UART_clk_SetDividerRegister
1009:.\main.c      ****         isrRF_RX_StartEx(BT_rxInt);
 4386              		.loc 1 1009 0
 4387 0022 0648     		ldr	r0, .L235+8
 4388 0024 FFF7FEFF 		bl	isrRF_RX_StartEx
1010:.\main.c      ****         UART_Start();
 4389              		.loc 1 1010 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 97


 4390 0028 FFF7FEFF 		bl	UART_Start
1011:.\main.c      ****         RF_BT_SELECT_Write(1);
 4391              		.loc 1 1011 0
 4392 002c 0120     		movs	r0, #1
 4393 002e FFF7FEFF 		bl	RF_BT_SELECT_Write
1012:.\main.c      **** }
 4394              		.loc 1 1012 0
 4395 0032 80BD     		pop	{r7, pc}
 4396              	.L236:
 4397              		.align	2
 4398              	.L235:
 4399 0034 00000000 		.word	BIN_ENABLED
 4400 0038 00000000 		.word	BT_ENABLED
 4401 003c 00000000 		.word	BT_rxInt
 4402              		.cfi_endproc
 4403              	.LFE95:
 4404              		.size	changeToBT, .-changeToBT
 4405              		.section	.text.Quad_Dec_response,"ax",%progbits
 4406              		.align	2
 4407              		.global	Quad_Dec_response
 4408              		.thumb
 4409              		.thumb_func
 4410              		.type	Quad_Dec_response, %function
 4411              	Quad_Dec_response:
 4412              	.LFB96:
1013:.\main.c      **** 
1014:.\main.c      **** 
1015:.\main.c      **** void Quad_Dec_response()
1016:.\main.c      **** {
 4413              		.loc 1 1016 0
 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 32
 4416              		@ frame_needed = 1, uses_anonymous_args = 0
 4417 0000 B0B5     		push	{r4, r5, r7, lr}
 4418              		.cfi_def_cfa_offset 16
 4419              		.cfi_offset 4, -16
 4420              		.cfi_offset 5, -12
 4421              		.cfi_offset 7, -8
 4422              		.cfi_offset 14, -4
 4423 0002 88B0     		sub	sp, sp, #32
 4424              		.cfi_def_cfa_offset 48
 4425 0004 00AF     		add	r7, sp, #0
 4426              		.cfi_def_cfa_register 7
1017:.\main.c      ****     //Check if the flag has been set
1018:.\main.c      ****     if (!flag_calc_wheelspeed) return;
 4427              		.loc 1 1018 0
 4428 0006 824B     		ldr	r3, .L245
 4429 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4430 000a 002B     		cmp	r3, #0
 4431 000c 00D1     		bne	.L238
 4432 000e FCE0     		b	.L237
 4433              	.L238:
1019:.\main.c      ****     flag_calc_wheelspeed = 0;
 4434              		.loc 1 1019 0
 4435 0010 7F4B     		ldr	r3, .L245
 4436 0012 0022     		movs	r2, #0
 4437 0014 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 98


1020:.\main.c      ****     
1021:.\main.c      ****     //char wheel_1_str [64];
1022:.\main.c      ****     //char wheel_2_str [64];
1023:.\main.c      ****     //sprintf(wheel_1_str, "quad count 1 is: %d\n\r", quad_diff1);
1024:.\main.c      ****     //usbPutString(wheel_1_str);
1025:.\main.c      ****     //sprintf(wheel_2_str, "quad count 2 is: %d\n\r", quad_diff2);
1026:.\main.c      ****     
1027:.\main.c      ****     //usbPutString(wheel_2_str);
1028:.\main.c      ****     
1029:.\main.c      ****     int16 leftSpeed = quad_diff1;
 4438              		.loc 1 1029 0
 4439 0016 7F4B     		ldr	r3, .L245+4
 4440 0018 1B88     		ldrh	r3, [r3]	@ movhi
 4441 001a FB81     		strh	r3, [r7, #14]	@ movhi
1030:.\main.c      ****     int16 rightSpeed = quad_diff2;
 4442              		.loc 1 1030 0
 4443 001c 7E4B     		ldr	r3, .L245+8
 4444 001e 1B88     		ldrh	r3, [r3]	@ movhi
 4445 0020 BB81     		strh	r3, [r7, #12]	@ movhi
1031:.\main.c      ****     double scalingLeft = 1;
 4446              		.loc 1 1031 0
 4447 0022 4FF00002 		mov	r2, #0
 4448 0026 7D4B     		ldr	r3, .L245+12
 4449 0028 C7E90623 		strd	r2, [r7, #24]
1032:.\main.c      ****     double scalingRight = 1;
 4450              		.loc 1 1032 0
 4451 002c 4FF00002 		mov	r2, #0
 4452 0030 7A4B     		ldr	r3, .L245+12
 4453 0032 C7E90423 		strd	r2, [r7, #16]
1033:.\main.c      ****     
1034:.\main.c      ****     //there's an initial right tilt by default, so we want to decrease the initial left speed
1035:.\main.c      ****     if(leftSpeed == 0 && rightSpeed == 0){ 
 4454              		.loc 1 1035 0
 4455 0036 B7F90E30 		ldrsh	r3, [r7, #14]
 4456 003a 002B     		cmp	r3, #0
 4457 003c 0FD1     		bne	.L240
 4458              		.loc 1 1035 0 is_stmt 0 discriminator 1
 4459 003e B7F90C30 		ldrsh	r3, [r7, #12]
 4460 0042 002B     		cmp	r3, #0
 4461 0044 0BD1     		bne	.L240
1036:.\main.c      ****        //leftSpeed = 3;
1037:.\main.c      ****         scalingLeft = 2;
 4462              		.loc 1 1037 0 is_stmt 1
 4463 0046 4FF00002 		mov	r2, #0
 4464 004a 4FF08043 		mov	r3, #1073741824
 4465 004e C7E90623 		strd	r2, [r7, #24]
1038:.\main.c      ****         scalingRight = 2;
 4466              		.loc 1 1038 0
 4467 0052 4FF00002 		mov	r2, #0
 4468 0056 4FF08043 		mov	r3, #1073741824
 4469 005a C7E90423 		strd	r2, [r7, #16]
 4470              	.L240:
1039:.\main.c      ****     }
1040:.\main.c      **** 
1041:.\main.c      ****     int interCalc = leftSpeedLimit - abs(leftSpeed);
 4471              		.loc 1 1041 0
 4472 005e 704B     		ldr	r3, .L245+16
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 99


 4473 0060 1B88     		ldrh	r3, [r3]
 4474 0062 1AB2     		sxth	r2, r3
 4475 0064 B7F90E30 		ldrsh	r3, [r7, #14]
 4476 0068 002B     		cmp	r3, #0
 4477 006a B8BF     		it	lt
 4478 006c 5B42     		rsblt	r3, r3, #0
 4479 006e D31A     		subs	r3, r2, r3
 4480 0070 BB60     		str	r3, [r7, #8]
1042:.\main.c      ****     int nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs((int)(interCalc)));
 4481              		.loc 1 1042 0
 4482 0072 BB68     		ldr	r3, [r7, #8]
 4483 0074 83EAE372 		eor	r2, r3, r3, asr #31
 4484 0078 A2EBE372 		sub	r2, r2, r3, asr #31
 4485 007c BB68     		ldr	r3, [r7, #8]
 4486 007e 92FBF3F3 		sdiv	r3, r2, r3
 4487 0082 1846     		mov	r0, r3
 4488 0084 FFF7FEFF 		bl	__aeabi_i2d
 4489 0088 0446     		mov	r4, r0
 4490 008a 0D46     		mov	r5, r1
 4491 008c BB68     		ldr	r3, [r7, #8]
 4492 008e 002B     		cmp	r3, #0
 4493 0090 B8BF     		it	lt
 4494 0092 5B42     		rsblt	r3, r3, #0
 4495 0094 1846     		mov	r0, r3
 4496 0096 FFF7FEFF 		bl	__aeabi_i2d
 4497 009a 0246     		mov	r2, r0
 4498 009c 0B46     		mov	r3, r1
 4499 009e 1046     		mov	r0, r2
 4500 00a0 1946     		mov	r1, r3
 4501 00a2 FFF7FEFF 		bl	sqrt
 4502 00a6 0246     		mov	r2, r0
 4503 00a8 0B46     		mov	r3, r1
 4504 00aa 2046     		mov	r0, r4
 4505 00ac 2946     		mov	r1, r5
 4506 00ae FFF7FEFF 		bl	__aeabi_dmul
 4507 00b2 0246     		mov	r2, r0
 4508 00b4 0B46     		mov	r3, r1
 4509 00b6 1046     		mov	r0, r2
 4510 00b8 1946     		mov	r1, r3
 4511 00ba FFF7FEFF 		bl	__aeabi_d2iz
 4512 00be 0346     		mov	r3, r0
 4513 00c0 7B60     		str	r3, [r7, #4]
1043:.\main.c      ****     left_duty_cycle = left_duty_cycle + scalingLeft*nextSpeed;
 4514              		.loc 1 1043 0
 4515 00c2 584B     		ldr	r3, .L245+20
 4516 00c4 1B88     		ldrh	r3, [r3]
 4517 00c6 1BB2     		sxth	r3, r3
 4518 00c8 1846     		mov	r0, r3
 4519 00ca FFF7FEFF 		bl	__aeabi_i2d
 4520 00ce 0446     		mov	r4, r0
 4521 00d0 0D46     		mov	r5, r1
 4522 00d2 7868     		ldr	r0, [r7, #4]
 4523 00d4 FFF7FEFF 		bl	__aeabi_i2d
 4524 00d8 0246     		mov	r2, r0
 4525 00da 0B46     		mov	r3, r1
 4526 00dc 1046     		mov	r0, r2
 4527 00de 1946     		mov	r1, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 100


 4528 00e0 D7E90623 		ldrd	r2, [r7, #24]
 4529 00e4 FFF7FEFF 		bl	__aeabi_dmul
 4530 00e8 0246     		mov	r2, r0
 4531 00ea 0B46     		mov	r3, r1
 4532 00ec 2046     		mov	r0, r4
 4533 00ee 2946     		mov	r1, r5
 4534 00f0 FFF7FEFF 		bl	__aeabi_dadd
 4535 00f4 0246     		mov	r2, r0
 4536 00f6 0B46     		mov	r3, r1
 4537 00f8 1046     		mov	r0, r2
 4538 00fa 1946     		mov	r1, r3
 4539 00fc FFF7FEFF 		bl	__aeabi_d2iz
 4540 0100 0346     		mov	r3, r0
 4541 0102 9AB2     		uxth	r2, r3
 4542 0104 474B     		ldr	r3, .L245+20
 4543 0106 1A80     		strh	r2, [r3]	@ movhi
1044:.\main.c      ****     interCalc = rightSpeedLimit - abs(rightSpeed);
 4544              		.loc 1 1044 0
 4545 0108 474B     		ldr	r3, .L245+24
 4546 010a 1B88     		ldrh	r3, [r3]
 4547 010c 1AB2     		sxth	r2, r3
 4548 010e B7F90C30 		ldrsh	r3, [r7, #12]
 4549 0112 002B     		cmp	r3, #0
 4550 0114 B8BF     		it	lt
 4551 0116 5B42     		rsblt	r3, r3, #0
 4552 0118 D31A     		subs	r3, r2, r3
 4553 011a BB60     		str	r3, [r7, #8]
1045:.\main.c      ****     nextSpeed = (abs(interCalc) / interCalc) * sqrt(abs(interCalc));
 4554              		.loc 1 1045 0
 4555 011c BB68     		ldr	r3, [r7, #8]
 4556 011e 83EAE372 		eor	r2, r3, r3, asr #31
 4557 0122 A2EBE372 		sub	r2, r2, r3, asr #31
 4558 0126 BB68     		ldr	r3, [r7, #8]
 4559 0128 92FBF3F3 		sdiv	r3, r2, r3
 4560 012c 1846     		mov	r0, r3
 4561 012e FFF7FEFF 		bl	__aeabi_i2d
 4562 0132 0446     		mov	r4, r0
 4563 0134 0D46     		mov	r5, r1
 4564 0136 BB68     		ldr	r3, [r7, #8]
 4565 0138 002B     		cmp	r3, #0
 4566 013a B8BF     		it	lt
 4567 013c 5B42     		rsblt	r3, r3, #0
 4568 013e 1846     		mov	r0, r3
 4569 0140 FFF7FEFF 		bl	__aeabi_i2d
 4570 0144 0246     		mov	r2, r0
 4571 0146 0B46     		mov	r3, r1
 4572 0148 1046     		mov	r0, r2
 4573 014a 1946     		mov	r1, r3
 4574 014c FFF7FEFF 		bl	sqrt
 4575 0150 0246     		mov	r2, r0
 4576 0152 0B46     		mov	r3, r1
 4577 0154 2046     		mov	r0, r4
 4578 0156 2946     		mov	r1, r5
 4579 0158 FFF7FEFF 		bl	__aeabi_dmul
 4580 015c 0246     		mov	r2, r0
 4581 015e 0B46     		mov	r3, r1
 4582 0160 1046     		mov	r0, r2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 101


 4583 0162 1946     		mov	r1, r3
 4584 0164 FFF7FEFF 		bl	__aeabi_d2iz
 4585 0168 0346     		mov	r3, r0
 4586 016a 7B60     		str	r3, [r7, #4]
1046:.\main.c      ****     right_duty_cycle = right_duty_cycle + scalingRight*nextSpeed;
 4587              		.loc 1 1046 0
 4588 016c 2F4B     		ldr	r3, .L245+28
 4589 016e 1B88     		ldrh	r3, [r3]
 4590 0170 1BB2     		sxth	r3, r3
 4591 0172 1846     		mov	r0, r3
 4592 0174 FFF7FEFF 		bl	__aeabi_i2d
 4593 0178 0446     		mov	r4, r0
 4594 017a 0D46     		mov	r5, r1
 4595 017c 7868     		ldr	r0, [r7, #4]
 4596 017e FFF7FEFF 		bl	__aeabi_i2d
 4597 0182 0246     		mov	r2, r0
 4598 0184 0B46     		mov	r3, r1
 4599 0186 1046     		mov	r0, r2
 4600 0188 1946     		mov	r1, r3
 4601 018a D7E90423 		ldrd	r2, [r7, #16]
 4602 018e FFF7FEFF 		bl	__aeabi_dmul
 4603 0192 0246     		mov	r2, r0
 4604 0194 0B46     		mov	r3, r1
 4605 0196 2046     		mov	r0, r4
 4606 0198 2946     		mov	r1, r5
 4607 019a FFF7FEFF 		bl	__aeabi_dadd
 4608 019e 0246     		mov	r2, r0
 4609 01a0 0B46     		mov	r3, r1
 4610 01a2 1046     		mov	r0, r2
 4611 01a4 1946     		mov	r1, r3
 4612 01a6 FFF7FEFF 		bl	__aeabi_d2iz
 4613 01aa 0346     		mov	r3, r0
 4614 01ac 9AB2     		uxth	r2, r3
 4615 01ae 1F4B     		ldr	r3, .L245+28
 4616 01b0 1A80     		strh	r2, [r3]	@ movhi
1047:.\main.c      ****     
1048:.\main.c      ****     if(right_duty_cycle < 0) right_duty_cycle = 0;
 4617              		.loc 1 1048 0
 4618 01b2 1E4B     		ldr	r3, .L245+28
 4619 01b4 1B88     		ldrh	r3, [r3]
 4620 01b6 1BB2     		sxth	r3, r3
 4621 01b8 002B     		cmp	r3, #0
 4622 01ba 02DA     		bge	.L241
 4623              		.loc 1 1048 0 is_stmt 0 discriminator 1
 4624 01bc 1B4B     		ldr	r3, .L245+28
 4625 01be 0022     		movs	r2, #0
 4626 01c0 1A80     		strh	r2, [r3]	@ movhi
 4627              	.L241:
1049:.\main.c      ****     if(left_duty_cycle < 0) left_duty_cycle = 0;
 4628              		.loc 1 1049 0 is_stmt 1
 4629 01c2 184B     		ldr	r3, .L245+20
 4630 01c4 1B88     		ldrh	r3, [r3]
 4631 01c6 1BB2     		sxth	r3, r3
 4632 01c8 002B     		cmp	r3, #0
 4633 01ca 02DA     		bge	.L242
 4634              		.loc 1 1049 0 is_stmt 0 discriminator 1
 4635 01cc 154B     		ldr	r3, .L245+20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 102


 4636 01ce 0022     		movs	r2, #0
 4637 01d0 1A80     		strh	r2, [r3]	@ movhi
 4638              	.L242:
1050:.\main.c      ****     if(right_duty_cycle > 100) right_duty_cycle = 100;
 4639              		.loc 1 1050 0 is_stmt 1
 4640 01d2 164B     		ldr	r3, .L245+28
 4641 01d4 1B88     		ldrh	r3, [r3]
 4642 01d6 1BB2     		sxth	r3, r3
 4643 01d8 642B     		cmp	r3, #100
 4644 01da 02DD     		ble	.L243
 4645              		.loc 1 1050 0 is_stmt 0 discriminator 1
 4646 01dc 134B     		ldr	r3, .L245+28
 4647 01de 6422     		movs	r2, #100
 4648 01e0 1A80     		strh	r2, [r3]	@ movhi
 4649              	.L243:
1051:.\main.c      ****     if(left_duty_cycle > 100) left_duty_cycle = 100;
 4650              		.loc 1 1051 0 is_stmt 1
 4651 01e2 104B     		ldr	r3, .L245+20
 4652 01e4 1B88     		ldrh	r3, [r3]
 4653 01e6 1BB2     		sxth	r3, r3
 4654 01e8 642B     		cmp	r3, #100
 4655 01ea 02DD     		ble	.L244
 4656              		.loc 1 1051 0 is_stmt 0 discriminator 1
 4657 01ec 0D4B     		ldr	r3, .L245+20
 4658 01ee 6422     		movs	r2, #100
 4659 01f0 1A80     		strh	r2, [r3]	@ movhi
 4660              	.L244:
1052:.\main.c      ****     PWM_1_WriteCompare(left_duty_cycle);
 4661              		.loc 1 1052 0 is_stmt 1
 4662 01f2 0C4B     		ldr	r3, .L245+20
 4663 01f4 1B88     		ldrh	r3, [r3]
 4664 01f6 DBB2     		uxtb	r3, r3
 4665 01f8 1846     		mov	r0, r3
 4666 01fa FFF7FEFF 		bl	PWM_1_WriteCompare
1053:.\main.c      ****     PWM_2_WriteCompare(right_duty_cycle);
 4667              		.loc 1 1053 0
 4668 01fe 0B4B     		ldr	r3, .L245+28
 4669 0200 1B88     		ldrh	r3, [r3]
 4670 0202 DBB2     		uxtb	r3, r3
 4671 0204 1846     		mov	r0, r3
 4672 0206 FFF7FEFF 		bl	PWM_2_WriteCompare
 4673              	.L237:
1054:.\main.c      **** }
 4674              		.loc 1 1054 0
 4675 020a 2037     		adds	r7, r7, #32
 4676              		.cfi_def_cfa_offset 16
 4677 020c BD46     		mov	sp, r7
 4678              		.cfi_def_cfa_register 13
 4679              		@ sp needed
 4680 020e B0BD     		pop	{r4, r5, r7, pc}
 4681              	.L246:
 4682              		.align	2
 4683              	.L245:
 4684 0210 00000000 		.word	flag_calc_wheelspeed
 4685 0214 00000000 		.word	quad_diff1
 4686 0218 00000000 		.word	quad_diff2
 4687 021c 0000F03F 		.word	1072693248
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 103


 4688 0220 00000000 		.word	leftSpeedLimit
 4689 0224 00000000 		.word	left_duty_cycle
 4690 0228 00000000 		.word	rightSpeedLimit
 4691 022c 00000000 		.word	right_duty_cycle
 4692              		.cfi_endproc
 4693              	.LFE96:
 4694              		.size	Quad_Dec_response, .-Quad_Dec_response
 4695              		.section	.text.trackLine,"ax",%progbits
 4696              		.align	2
 4697              		.global	trackLine
 4698              		.thumb
 4699              		.thumb_func
 4700              		.type	trackLine, %function
 4701              	trackLine:
 4702              	.LFB97:
1055:.\main.c      **** 
1056:.\main.c      **** void trackLine()
1057:.\main.c      **** {
 4703              		.loc 1 1057 0
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 0
 4706              		@ frame_needed = 1, uses_anonymous_args = 0
 4707              		@ link register save eliminated.
 4708 0000 80B4     		push	{r7}
 4709              		.cfi_def_cfa_offset 4
 4710              		.cfi_offset 7, -4
 4711 0002 00AF     		add	r7, sp, #0
 4712              		.cfi_def_cfa_register 7
1058:.\main.c      ****  //removed from implementation
1059:.\main.c      **** }
 4713              		.loc 1 1059 0
 4714 0004 BD46     		mov	sp, r7
 4715              		.cfi_def_cfa_register 13
 4716              		@ sp needed
 4717 0006 5DF8047B 		ldr	r7, [sp], #4
 4718              		.cfi_restore 7
 4719              		.cfi_def_cfa_offset 0
 4720 000a 7047     		bx	lr
 4721              		.cfi_endproc
 4722              	.LFE97:
 4723              		.size	trackLine, .-trackLine
 4724              		.global	leftTurnCount
 4725              		.bss
 4726              		.align	1
 4727              		.type	leftTurnCount, %object
 4728              		.size	leftTurnCount, 2
 4729              	leftTurnCount:
 4730 1ec0 0000     		.space	2
 4731              		.global	rightTurnCount
 4732              		.align	1
 4733              		.type	rightTurnCount, %object
 4734              		.size	rightTurnCount, 2
 4735              	rightTurnCount:
 4736 1ec2 0000     		.space	2
 4737              		.section	.text.trackLineZ,"ax",%progbits
 4738              		.align	2
 4739              		.global	trackLineZ
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 104


 4740              		.thumb
 4741              		.thumb_func
 4742              		.type	trackLineZ, %function
 4743              	trackLineZ:
 4744              	.LFB98:
1060:.\main.c      **** uint16 leftTurnCount = 0;
1061:.\main.c      **** uint16 rightTurnCount = 0;
1062:.\main.c      **** void trackLineZ()
1063:.\main.c      **** {
 4745              		.loc 1 1063 0
 4746              		.cfi_startproc
 4747              		@ args = 0, pretend = 0, frame = 8
 4748              		@ frame_needed = 1, uses_anonymous_args = 0
 4749 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 4750              		.cfi_def_cfa_offset 24
 4751              		.cfi_offset 4, -24
 4752              		.cfi_offset 5, -20
 4753              		.cfi_offset 7, -16
 4754              		.cfi_offset 8, -12
 4755              		.cfi_offset 9, -8
 4756              		.cfi_offset 14, -4
 4757 0004 82B0     		sub	sp, sp, #8
 4758              		.cfi_def_cfa_offset 32
 4759 0006 00AF     		add	r7, sp, #0
 4760              		.cfi_def_cfa_register 7
1064:.\main.c      ****     //read the value of the three central-front sensors
1065:.\main.c      ****     
1066:.\main.c      ****     uint8 nl = NLSens_out_Read();
 4761              		.loc 1 1066 0
 4762 0008 FFF7FEFF 		bl	NLSens_out_Read
 4763 000c 0346     		mov	r3, r0
 4764 000e FB71     		strb	r3, [r7, #7]
1067:.\main.c      ****     uint8 nr = NRSens_out_Read();
 4765              		.loc 1 1067 0
 4766 0010 FFF7FEFF 		bl	NRSens_out_Read
 4767 0014 0346     		mov	r3, r0
 4768 0016 BB71     		strb	r3, [r7, #6]
1068:.\main.c      ****     uint8 mid = MSens_out_Read();
 4769              		.loc 1 1068 0
 4770 0018 FFF7FEFF 		bl	MSens_out_Read
 4771 001c 0346     		mov	r3, r0
 4772 001e 7B71     		strb	r3, [r7, #5]
1069:.\main.c      ****     
1070:.\main.c      ****         //if only the left one, hard left
1071:.\main.c      ****     if(nl && !nr && !mid)// && trackTurnCount > 0)
 4773              		.loc 1 1071 0
 4774 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4775 0022 002B     		cmp	r3, #0
 4776 0024 27D0     		beq	.L249
 4777              		.loc 1 1071 0 is_stmt 0 discriminator 1
 4778 0026 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4779 0028 002B     		cmp	r3, #0
 4780 002a 24D1     		bne	.L249
 4781              		.loc 1 1071 0 discriminator 2
 4782 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4783 002e 002B     		cmp	r3, #0
 4784 0030 21D1     		bne	.L249
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 105


1072:.\main.c      ****     {
1073:.\main.c      ****         setSpeed(speed / 1.6,-speed / 1.6);
 4785              		.loc 1 1073 0 is_stmt 1
 4786 0032 454B     		ldr	r3, .L254+8
 4787 0034 D3E90023 		ldrd	r2, [r3]
 4788 0038 1046     		mov	r0, r2
 4789 003a 1946     		mov	r1, r3
 4790 003c 40A3     		adr	r3, .L254
 4791 003e D3E90023 		ldrd	r2, [r3]
 4792 0042 FFF7FEFF 		bl	__aeabi_ddiv
 4793 0046 0246     		mov	r2, r0
 4794 0048 0B46     		mov	r3, r1
 4795 004a 1446     		mov	r4, r2
 4796 004c 1D46     		mov	r5, r3
 4797 004e 3E4B     		ldr	r3, .L254+8
 4798 0050 D3E90023 		ldrd	r2, [r3]
 4799 0054 9046     		mov	r8, r2
 4800 0056 83F00049 		eor	r9, r3, #-2147483648
 4801 005a 4046     		mov	r0, r8
 4802 005c 4946     		mov	r1, r9
 4803 005e 38A3     		adr	r3, .L254
 4804 0060 D3E90023 		ldrd	r2, [r3]
 4805 0064 FFF7FEFF 		bl	__aeabi_ddiv
 4806 0068 0246     		mov	r2, r0
 4807 006a 0B46     		mov	r3, r1
 4808 006c 2046     		mov	r0, r4
 4809 006e 2946     		mov	r1, r5
 4810 0070 FFF7FEFF 		bl	setSpeed
 4811 0074 5FE0     		b	.L248
 4812              	.L249:
1074:.\main.c      ****     }
1075:.\main.c      ****     else if(nl && mid && !nr)   //if centre/middle, soft left
 4813              		.loc 1 1075 0
 4814 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4815 0078 002B     		cmp	r3, #0
 4816 007a 0ED0     		beq	.L251
 4817              		.loc 1 1075 0 is_stmt 0 discriminator 1
 4818 007c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4819 007e 002B     		cmp	r3, #0
 4820 0080 0BD0     		beq	.L251
 4821              		.loc 1 1075 0 discriminator 2
 4822 0082 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4823 0084 002B     		cmp	r3, #0
 4824 0086 08D1     		bne	.L251
1076:.\main.c      ****     {
1077:.\main.c      ****         setSpeed(speed,speed);
 4825              		.loc 1 1077 0 is_stmt 1
 4826 0088 2F4B     		ldr	r3, .L254+8
 4827 008a D3E90001 		ldrd	r0, [r3]
 4828 008e 2E4B     		ldr	r3, .L254+8
 4829 0090 D3E90023 		ldrd	r2, [r3]
 4830 0094 FFF7FEFF 		bl	setSpeed
 4831 0098 4DE0     		b	.L248
 4832              	.L251:
1078:.\main.c      ****     }
1079:.\main.c      ****     else if (nr && mid && !nl)//if centre/right, soft right
 4833              		.loc 1 1079 0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 106


 4834 009a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4835 009c 002B     		cmp	r3, #0
 4836 009e 0ED0     		beq	.L252
 4837              		.loc 1 1079 0 is_stmt 0 discriminator 1
 4838 00a0 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4839 00a2 002B     		cmp	r3, #0
 4840 00a4 0BD0     		beq	.L252
 4841              		.loc 1 1079 0 discriminator 2
 4842 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4843 00a8 002B     		cmp	r3, #0
 4844 00aa 08D1     		bne	.L252
1080:.\main.c      ****     {
1081:.\main.c      ****         setSpeed(speed ,speed);
 4845              		.loc 1 1081 0 is_stmt 1
 4846 00ac 264B     		ldr	r3, .L254+8
 4847 00ae D3E90001 		ldrd	r0, [r3]
 4848 00b2 254B     		ldr	r3, .L254+8
 4849 00b4 D3E90023 		ldrd	r2, [r3]
 4850 00b8 FFF7FEFF 		bl	setSpeed
 4851 00bc 3BE0     		b	.L248
 4852              	.L252:
1082:.\main.c      ****     }
1083:.\main.c      ****    else if (nr && !mid && !nl)    //if only right, hard right
 4853              		.loc 1 1083 0
 4854 00be BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4855 00c0 002B     		cmp	r3, #0
 4856 00c2 27D0     		beq	.L253
 4857              		.loc 1 1083 0 is_stmt 0 discriminator 1
 4858 00c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4859 00c6 002B     		cmp	r3, #0
 4860 00c8 24D1     		bne	.L253
 4861              		.loc 1 1083 0 discriminator 2
 4862 00ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4863 00cc 002B     		cmp	r3, #0
 4864 00ce 21D1     		bne	.L253
1084:.\main.c      ****     {
1085:.\main.c      ****         setSpeed(-speed / 1.6,speed / 1.6);
 4865              		.loc 1 1085 0 is_stmt 1
 4866 00d0 1D4B     		ldr	r3, .L254+8
 4867 00d2 D3E90023 		ldrd	r2, [r3]
 4868 00d6 1446     		mov	r4, r2
 4869 00d8 83F00045 		eor	r5, r3, #-2147483648
 4870 00dc 2046     		mov	r0, r4
 4871 00de 2946     		mov	r1, r5
 4872 00e0 17A3     		adr	r3, .L254
 4873 00e2 D3E90023 		ldrd	r2, [r3]
 4874 00e6 FFF7FEFF 		bl	__aeabi_ddiv
 4875 00ea 0246     		mov	r2, r0
 4876 00ec 0B46     		mov	r3, r1
 4877 00ee 1446     		mov	r4, r2
 4878 00f0 1D46     		mov	r5, r3
 4879 00f2 154B     		ldr	r3, .L254+8
 4880 00f4 D3E90023 		ldrd	r2, [r3]
 4881 00f8 1046     		mov	r0, r2
 4882 00fa 1946     		mov	r1, r3
 4883 00fc 10A3     		adr	r3, .L254
 4884 00fe D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 107


 4885 0102 FFF7FEFF 		bl	__aeabi_ddiv
 4886 0106 0246     		mov	r2, r0
 4887 0108 0B46     		mov	r3, r1
 4888 010a 2046     		mov	r0, r4
 4889 010c 2946     		mov	r1, r5
 4890 010e FFF7FEFF 		bl	setSpeed
 4891 0112 10E0     		b	.L248
 4892              	.L253:
1086:.\main.c      ****     }
1087:.\main.c      ****     else if (mid && !nr && !nl)
 4893              		.loc 1 1087 0
 4894 0114 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 4895 0116 002B     		cmp	r3, #0
 4896 0118 0DD0     		beq	.L248
 4897              		.loc 1 1087 0 is_stmt 0 discriminator 1
 4898 011a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 4899 011c 002B     		cmp	r3, #0
 4900 011e 0AD1     		bne	.L248
 4901              		.loc 1 1087 0 discriminator 2
 4902 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4903 0122 002B     		cmp	r3, #0
 4904 0124 07D1     		bne	.L248
1088:.\main.c      ****     {
1089:.\main.c      ****         setSpeed(speed,speed);
 4905              		.loc 1 1089 0 is_stmt 1
 4906 0126 084B     		ldr	r3, .L254+8
 4907 0128 D3E90001 		ldrd	r0, [r3]
 4908 012c 064B     		ldr	r3, .L254+8
 4909 012e D3E90023 		ldrd	r2, [r3]
 4910 0132 FFF7FEFF 		bl	setSpeed
 4911              	.L248:
1090:.\main.c      ****     }
1091:.\main.c      **** }
 4912              		.loc 1 1091 0
 4913 0136 0837     		adds	r7, r7, #8
 4914              		.cfi_def_cfa_offset 24
 4915 0138 BD46     		mov	sp, r7
 4916              		.cfi_def_cfa_register 13
 4917              		@ sp needed
 4918 013a BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 4919              	.L255:
 4920 013e 00BF     		.align	3
 4921              	.L254:
 4922 0140 9A999999 		.word	-1717986918
 4923 0144 9999F93F 		.word	1073322393
 4924 0148 00000000 		.word	speed
 4925              		.cfi_endproc
 4926              	.LFE98:
 4927              		.size	trackLineZ, .-trackLineZ
 4928 014c AFF30080 		.section	.text.trackLineU,"ax",%progbits
 4929              		.align	2
 4930              		.global	trackLineU
 4931              		.thumb
 4932              		.thumb_func
 4933              		.type	trackLineU, %function
 4934              	trackLineU:
 4935              	.LFB99:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 108


1092:.\main.c      **** 
1093:.\main.c      **** 
1094:.\main.c      **** void trackLineU()
1095:.\main.c      **** { 
 4936              		.loc 1 1095 0
 4937              		.cfi_startproc
 4938              		@ args = 0, pretend = 0, frame = 0
 4939              		@ frame_needed = 1, uses_anonymous_args = 0
 4940              		@ link register save eliminated.
 4941 0000 80B4     		push	{r7}
 4942              		.cfi_def_cfa_offset 4
 4943              		.cfi_offset 7, -4
 4944 0002 00AF     		add	r7, sp, #0
 4945              		.cfi_def_cfa_register 7
1096:.\main.c      **** //removed from final implementation
1097:.\main.c      **** }
 4946              		.loc 1 1097 0
 4947 0004 BD46     		mov	sp, r7
 4948              		.cfi_def_cfa_register 13
 4949              		@ sp needed
 4950 0006 5DF8047B 		ldr	r7, [sp], #4
 4951              		.cfi_restore 7
 4952              		.cfi_def_cfa_offset 0
 4953 000a 7047     		bx	lr
 4954              		.cfi_endproc
 4955              	.LFE99:
 4956              		.size	trackLineU, .-trackLineU
 4957              		.global	__aeabi_fadd
 4958              		.section	.rodata
 4959 011b 00       		.align	2
 4960              	.LC15:
 4961 011c 42617474 		.ascii	"Battery Voltage: %dmv\012\015\000"
 4961      65727920 
 4961      566F6C74 
 4961      6167653A 
 4961      2025646D 
 4962              		.section	.text.print_ADC,"ax",%progbits
 4963              		.align	2
 4964              		.global	print_ADC
 4965              		.thumb
 4966              		.thumb_func
 4967              		.type	print_ADC, %function
 4968              	print_ADC:
 4969              	.LFB100:
1098:.\main.c      **** 
1099:.\main.c      **** void print_ADC()
1100:.\main.c      **** {
 4970              		.loc 1 1100 0
 4971              		.cfi_startproc
 4972              		@ args = 0, pretend = 0, frame = 24
 4973              		@ frame_needed = 1, uses_anonymous_args = 0
 4974 0000 80B5     		push	{r7, lr}
 4975              		.cfi_def_cfa_offset 8
 4976              		.cfi_offset 7, -8
 4977              		.cfi_offset 14, -4
 4978 0002 86B0     		sub	sp, sp, #24
 4979              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 109


 4980 0004 00AF     		add	r7, sp, #0
 4981              		.cfi_def_cfa_register 7
1101:.\main.c      ****    //usbPutString("HII\n");
1102:.\main.c      ****     if(flag_receive_ADC == 1)
 4982              		.loc 1 1102 0
 4983 0006 274B     		ldr	r3, .L260
 4984 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4985 000a 012B     		cmp	r3, #1
 4986 000c 46D1     		bne	.L257
 4987              	.LBB10:
1103:.\main.c      ****     {
1104:.\main.c      ****         //usbPutString("AAA\r\n");
1105:.\main.c      ****         flag_receive_ADC = 0;
 4988              		.loc 1 1105 0
 4989 000e 254B     		ldr	r3, .L260
 4990 0010 0022     		movs	r2, #0
 4991 0012 1A70     		strb	r2, [r3]
1106:.\main.c      ****         
1107:.\main.c      ****        // int8 channel = ADC_
1108:.\main.c      ****         float scalingFactor = 0.972;
 4992              		.loc 1 1108 0
 4993 0014 244B     		ldr	r3, .L260+4
 4994 0016 7B61     		str	r3, [r7, #20]	@ float
1109:.\main.c      ****         int16 converted_val = (5000 * adc_result) / 4096 * scalingFactor * 2;
 4995              		.loc 1 1109 0
 4996 0018 244B     		ldr	r3, .L260+8
 4997 001a 1B88     		ldrh	r3, [r3]
 4998 001c 1BB2     		sxth	r3, r3
 4999 001e 41F28832 		movw	r2, #5000
 5000 0022 02FB03F3 		mul	r3, r2, r3
 5001 0026 002B     		cmp	r3, #0
 5002 0028 01DA     		bge	.L259
 5003 002a 03F6FF73 		addw	r3, r3, #4095
 5004              	.L259:
 5005 002e 1B13     		asrs	r3, r3, #12
 5006 0030 1846     		mov	r0, r3
 5007 0032 FFF7FEFF 		bl	__aeabi_i2f
 5008 0036 0346     		mov	r3, r0
 5009 0038 1846     		mov	r0, r3
 5010 003a 7969     		ldr	r1, [r7, #20]	@ float
 5011 003c FFF7FEFF 		bl	__aeabi_fmul
 5012 0040 0346     		mov	r3, r0
 5013 0042 1846     		mov	r0, r3
 5014 0044 1946     		mov	r1, r3
 5015 0046 FFF7FEFF 		bl	__aeabi_fadd
 5016 004a 0346     		mov	r3, r0
 5017 004c 1846     		mov	r0, r3
 5018 004e FFF7FEFF 		bl	__aeabi_f2iz
 5019 0052 0346     		mov	r3, r0
 5020 0054 7B82     		strh	r3, [r7, #18]	@ movhi
1110:.\main.c      ****         converted_val = (converted_val + prevVoltage + prevVoltage2) / 3; //smooth rapid changes in
 5021              		.loc 1 1110 0
 5022 0056 B7F91220 		ldrsh	r2, [r7, #18]
 5023 005a 154B     		ldr	r3, .L260+12
 5024 005c 1B88     		ldrh	r3, [r3]
 5025 005e 1BB2     		sxth	r3, r3
 5026 0060 1A44     		add	r2, r2, r3
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 110


 5027 0062 144B     		ldr	r3, .L260+16
 5028 0064 1B88     		ldrh	r3, [r3]
 5029 0066 1BB2     		sxth	r3, r3
 5030 0068 1344     		add	r3, r3, r2
 5031 006a 134A     		ldr	r2, .L260+20
 5032 006c 82FB0312 		smull	r1, r2, r2, r3
 5033 0070 DB17     		asrs	r3, r3, #31
 5034 0072 D31A     		subs	r3, r2, r3
 5035 0074 7B82     		strh	r3, [r7, #18]	@ movhi
1111:.\main.c      ****         prevVoltage2 = prevVoltage;
 5036              		.loc 1 1111 0
 5037 0076 0E4B     		ldr	r3, .L260+12
 5038 0078 1A88     		ldrh	r2, [r3]
 5039 007a 0E4B     		ldr	r3, .L260+16
 5040 007c 1A80     		strh	r2, [r3]	@ movhi
1112:.\main.c      ****         prevVoltage = converted_val;
 5041              		.loc 1 1112 0
 5042 007e 0C4A     		ldr	r2, .L260+12
 5043 0080 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 5044 0082 1380     		strh	r3, [r2]	@ movhi
1113:.\main.c      ****         
1114:.\main.c      ****         char result_str[16];
1115:.\main.c      ****         sprintf(result_str, "Battery Voltage: %dmv\n\r", converted_val);
 5045              		.loc 1 1115 0
 5046 0084 B7F91230 		ldrsh	r3, [r7, #18]
 5047 0088 3A46     		mov	r2, r7
 5048 008a 1046     		mov	r0, r2
 5049 008c 0B49     		ldr	r1, .L260+24
 5050 008e 1A46     		mov	r2, r3
 5051 0090 FFF7FEFF 		bl	sprintf
1116:.\main.c      ****         
1117:.\main.c      ****         usbPutString(result_str);
 5052              		.loc 1 1117 0
 5053 0094 3B46     		mov	r3, r7
 5054 0096 1846     		mov	r0, r3
 5055 0098 FFF7FEFF 		bl	usbPutString
 5056              	.L257:
 5057              	.LBE10:
1118:.\main.c      ****     }
1119:.\main.c      **** }
 5058              		.loc 1 1119 0
 5059 009c 1837     		adds	r7, r7, #24
 5060              		.cfi_def_cfa_offset 8
 5061 009e BD46     		mov	sp, r7
 5062              		.cfi_def_cfa_register 13
 5063              		@ sp needed
 5064 00a0 80BD     		pop	{r7, pc}
 5065              	.L261:
 5066 00a2 00BF     		.align	2
 5067              	.L260:
 5068 00a4 00000000 		.word	flag_receive_ADC
 5069 00a8 FED4783F 		.word	1064883454
 5070 00ac 00000000 		.word	adc_result
 5071 00b0 00000000 		.word	prevVoltage
 5072 00b4 00000000 		.word	prevVoltage2
 5073 00b8 56555555 		.word	1431655766
 5074 00bc 1C010000 		.word	.LC15
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 111


 5075              		.cfi_endproc
 5076              	.LFE100:
 5077              		.size	print_ADC, .-print_ADC
 5078              		.section	.rodata
 5079              		.align	2
 5080              	.LC16:
 5081 0134 52535349 		.ascii	"RSSI:\000"
 5081      3A00
 5082 013a 0000     		.align	2
 5083              	.LC17:
 5084 013c 25640D0A 		.ascii	"%d\015\012\000"
 5084      00
 5085 0141 000000   		.align	2
 5086              	.LC18:
 5087 0144 726F626F 		.ascii	"robot_x:\000"
 5087      745F783A 
 5087      00
 5088 014d 000000   		.align	2
 5089              	.LC19:
 5090 0150 726F626F 		.ascii	"robot_y:\000"
 5090      745F793A 
 5090      00
 5091 0159 000000   		.align	2
 5092              	.LC20:
 5093 015c 726F626F 		.ascii	"robot_dir:\000"
 5093      745F6469 
 5093      723A00
 5094 0167 00       		.section	.text.print_RF,"ax",%progbits
 5095              		.align	2
 5096              		.global	print_RF
 5097              		.thumb
 5098              		.thumb_func
 5099              		.type	print_RF, %function
 5100              	print_RF:
 5101              	.LFB101:
1120:.\main.c      **** 
1121:.\main.c      **** void print_RF()
1122:.\main.c      **** {
 5102              		.loc 1 1122 0
 5103              		.cfi_startproc
 5104              		@ args = 0, pretend = 0, frame = 16
 5105              		@ frame_needed = 1, uses_anonymous_args = 0
 5106 0000 80B5     		push	{r7, lr}
 5107              		.cfi_def_cfa_offset 8
 5108              		.cfi_offset 7, -8
 5109              		.cfi_offset 14, -4
 5110 0002 84B0     		sub	sp, sp, #16
 5111              		.cfi_def_cfa_offset 24
 5112 0004 00AF     		add	r7, sp, #0
 5113              		.cfi_def_cfa_register 7
1123:.\main.c      ****     if(flag_print_rf == 1)
 5114              		.loc 1 1123 0
 5115 0006 254B     		ldr	r3, .L264
 5116 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5117 000a 012B     		cmp	r3, #1
 5118 000c 42D1     		bne	.L262
 5119              	.LBB11:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 112


1124:.\main.c      ****     {
1125:.\main.c      ****         char printString[16];
1126:.\main.c      ****         flag_print_rf = 0;
 5120              		.loc 1 1126 0
 5121 000e 234B     		ldr	r3, .L264
 5122 0010 0022     		movs	r2, #0
 5123 0012 1A70     		strb	r2, [r3]
1127:.\main.c      ****         usbPutString("RSSI:");
 5124              		.loc 1 1127 0
 5125 0014 2248     		ldr	r0, .L264+4
 5126 0016 FFF7FEFF 		bl	usbPutString
1128:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.rssi);
 5127              		.loc 1 1128 0
 5128 001a 224B     		ldr	r3, .L264+8
 5129 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5130 001e 5BB2     		sxtb	r3, r3
 5131 0020 3A46     		mov	r2, r7
 5132 0022 1046     		mov	r0, r2
 5133 0024 2049     		ldr	r1, .L264+12
 5134 0026 1A46     		mov	r2, r3
 5135 0028 FFF7FEFF 		bl	sprintf
1129:.\main.c      ****         usbPutString(printString);
 5136              		.loc 1 1129 0
 5137 002c 3B46     		mov	r3, r7
 5138 002e 1846     		mov	r0, r3
 5139 0030 FFF7FEFF 		bl	usbPutString
1130:.\main.c      ****         usbPutString("robot_x:");
 5140              		.loc 1 1130 0
 5141 0034 1D48     		ldr	r0, .L264+16
 5142 0036 FFF7FEFF 		bl	usbPutString
1131:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_xpos);
 5143              		.loc 1 1131 0
 5144 003a 1A4B     		ldr	r3, .L264+8
 5145 003c 5B88     		ldrh	r3, [r3, #2]
 5146 003e 1BB2     		sxth	r3, r3
 5147 0040 3A46     		mov	r2, r7
 5148 0042 1046     		mov	r0, r2
 5149 0044 1849     		ldr	r1, .L264+12
 5150 0046 1A46     		mov	r2, r3
 5151 0048 FFF7FEFF 		bl	sprintf
1132:.\main.c      ****         usbPutString(printString);
 5152              		.loc 1 1132 0
 5153 004c 3B46     		mov	r3, r7
 5154 004e 1846     		mov	r0, r3
 5155 0050 FFF7FEFF 		bl	usbPutString
1133:.\main.c      ****         usbPutString("robot_y:");
 5156              		.loc 1 1133 0
 5157 0054 1648     		ldr	r0, .L264+20
 5158 0056 FFF7FEFF 		bl	usbPutString
1134:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_ypos);
 5159              		.loc 1 1134 0
 5160 005a 124B     		ldr	r3, .L264+8
 5161 005c 9B88     		ldrh	r3, [r3, #4]
 5162 005e 1BB2     		sxth	r3, r3
 5163 0060 3A46     		mov	r2, r7
 5164 0062 1046     		mov	r0, r2
 5165 0064 1049     		ldr	r1, .L264+12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 113


 5166 0066 1A46     		mov	r2, r3
 5167 0068 FFF7FEFF 		bl	sprintf
1135:.\main.c      ****         usbPutString(printString);
 5168              		.loc 1 1135 0
 5169 006c 3B46     		mov	r3, r7
 5170 006e 1846     		mov	r0, r3
 5171 0070 FFF7FEFF 		bl	usbPutString
1136:.\main.c      ****         usbPutString("robot_dir:");
 5172              		.loc 1 1136 0
 5173 0074 0F48     		ldr	r0, .L264+24
 5174 0076 FFF7FEFF 		bl	usbPutString
1137:.\main.c      ****         sprintf(printString, "%d\r\n", system_state.robot_orientation);
 5175              		.loc 1 1137 0
 5176 007a 0A4B     		ldr	r3, .L264+8
 5177 007c DB88     		ldrh	r3, [r3, #6]
 5178 007e 1BB2     		sxth	r3, r3
 5179 0080 3A46     		mov	r2, r7
 5180 0082 1046     		mov	r0, r2
 5181 0084 0849     		ldr	r1, .L264+12
 5182 0086 1A46     		mov	r2, r3
 5183 0088 FFF7FEFF 		bl	sprintf
1138:.\main.c      ****         usbPutString(printString);
 5184              		.loc 1 1138 0
 5185 008c 3B46     		mov	r3, r7
 5186 008e 1846     		mov	r0, r3
 5187 0090 FFF7FEFF 		bl	usbPutString
 5188              	.L262:
 5189              	.LBE11:
1139:.\main.c      ****     }
1140:.\main.c      **** }
 5190              		.loc 1 1140 0
 5191 0094 1037     		adds	r7, r7, #16
 5192              		.cfi_def_cfa_offset 8
 5193 0096 BD46     		mov	sp, r7
 5194              		.cfi_def_cfa_register 13
 5195              		@ sp needed
 5196 0098 80BD     		pop	{r7, pc}
 5197              	.L265:
 5198 009a 00BF     		.align	2
 5199              	.L264:
 5200 009c 00000000 		.word	flag_print_rf
 5201 00a0 34010000 		.word	.LC16
 5202 00a4 00000000 		.word	system_state
 5203 00a8 3C010000 		.word	.LC17
 5204 00ac 44010000 		.word	.LC18
 5205 00b0 50010000 		.word	.LC19
 5206 00b4 5C010000 		.word	.LC20
 5207              		.cfi_endproc
 5208              	.LFE101:
 5209              		.size	print_RF, .-print_RF
 5210              		.section	.text.readFrontSensors,"ax",%progbits
 5211              		.align	2
 5212              		.global	readFrontSensors
 5213              		.thumb
 5214              		.thumb_func
 5215              		.type	readFrontSensors, %function
 5216              	readFrontSensors:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 114


 5217              	.LFB102:
1141:.\main.c      **** 
1142:.\main.c      **** void readFrontSensors(uint8 sensorVals[5])
1143:.\main.c      **** {
 5218              		.loc 1 1143 0
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 8
 5221              		@ frame_needed = 1, uses_anonymous_args = 0
 5222 0000 90B5     		push	{r4, r7, lr}
 5223              		.cfi_def_cfa_offset 12
 5224              		.cfi_offset 4, -12
 5225              		.cfi_offset 7, -8
 5226              		.cfi_offset 14, -4
 5227 0002 83B0     		sub	sp, sp, #12
 5228              		.cfi_def_cfa_offset 24
 5229 0004 00AF     		add	r7, sp, #0
 5230              		.cfi_def_cfa_register 7
 5231 0006 7860     		str	r0, [r7, #4]
1144:.\main.c      ****     sensorVals[0] = FLSens_out_Read();
 5232              		.loc 1 1144 0
 5233 0008 FFF7FEFF 		bl	FLSens_out_Read
 5234 000c 0346     		mov	r3, r0
 5235 000e 1A46     		mov	r2, r3
 5236 0010 7B68     		ldr	r3, [r7, #4]
 5237 0012 1A70     		strb	r2, [r3]
1145:.\main.c      ****     sensorVals[1] = NLSens_out_Read();
 5238              		.loc 1 1145 0
 5239 0014 7B68     		ldr	r3, [r7, #4]
 5240 0016 5C1C     		adds	r4, r3, #1
 5241 0018 FFF7FEFF 		bl	NLSens_out_Read
 5242 001c 0346     		mov	r3, r0
 5243 001e 2370     		strb	r3, [r4]
1146:.\main.c      ****     sensorVals[2] = MSens_out_Read();
 5244              		.loc 1 1146 0
 5245 0020 7B68     		ldr	r3, [r7, #4]
 5246 0022 9C1C     		adds	r4, r3, #2
 5247 0024 FFF7FEFF 		bl	MSens_out_Read
 5248 0028 0346     		mov	r3, r0
 5249 002a 2370     		strb	r3, [r4]
1147:.\main.c      ****     sensorVals[3] = NRSens_out_Read();
 5250              		.loc 1 1147 0
 5251 002c 7B68     		ldr	r3, [r7, #4]
 5252 002e DC1C     		adds	r4, r3, #3
 5253 0030 FFF7FEFF 		bl	NRSens_out_Read
 5254 0034 0346     		mov	r3, r0
 5255 0036 2370     		strb	r3, [r4]
1148:.\main.c      ****     sensorVals[4] = FRSens_out_Read();
 5256              		.loc 1 1148 0
 5257 0038 7B68     		ldr	r3, [r7, #4]
 5258 003a 1C1D     		adds	r4, r3, #4
 5259 003c FFF7FEFF 		bl	FRSens_out_Read
 5260 0040 0346     		mov	r3, r0
 5261 0042 2370     		strb	r3, [r4]
1149:.\main.c      **** }
 5262              		.loc 1 1149 0
 5263 0044 0C37     		adds	r7, r7, #12
 5264              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 115


 5265 0046 BD46     		mov	sp, r7
 5266              		.cfi_def_cfa_register 13
 5267              		@ sp needed
 5268 0048 90BD     		pop	{r4, r7, pc}
 5269              		.cfi_endproc
 5270              	.LFE102:
 5271              		.size	readFrontSensors, .-readFrontSensors
 5272 004a 00BF     		.section	.text.usbPutString,"ax",%progbits
 5273              		.align	2
 5274              		.global	usbPutString
 5275              		.thumb
 5276              		.thumb_func
 5277              		.type	usbPutString, %function
 5278              	usbPutString:
 5279              	.LFB103:
1150:.\main.c      **** 
1151:.\main.c      **** 
1152:.\main.c      **** //* ========================================
1153:.\main.c      **** void usbPutString(char *s)
1154:.\main.c      **** {
 5280              		.loc 1 1154 0
 5281              		.cfi_startproc
 5282              		@ args = 0, pretend = 0, frame = 16
 5283              		@ frame_needed = 1, uses_anonymous_args = 0
 5284 0000 80B5     		push	{r7, lr}
 5285              		.cfi_def_cfa_offset 8
 5286              		.cfi_offset 7, -8
 5287              		.cfi_offset 14, -4
 5288 0002 84B0     		sub	sp, sp, #16
 5289              		.cfi_def_cfa_offset 24
 5290 0004 00AF     		add	r7, sp, #0
 5291              		.cfi_def_cfa_register 7
 5292 0006 7860     		str	r0, [r7, #4]
1155:.\main.c      **** // !! Assumes that *s is a string with allocated space >=64 chars     
1156:.\main.c      **** //  Since USB implementation retricts data packets to 64 chars, this function truncates the
1157:.\main.c      **** //  length to 62 char (63rd char is a '!')
1158:.\main.c      ****     if (USE_USB && portOpen)
 5293              		.loc 1 1158 0
 5294 0008 154B     		ldr	r3, .L271
 5295 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5296 000c 002B     		cmp	r3, #0
 5297 000e 23D0     		beq	.L267
 5298              	.LBB12:
1159:.\main.c      ****     {
1160:.\main.c      ****             uint32 cnt = 0;
 5299              		.loc 1 1160 0
 5300 0010 0023     		movs	r3, #0
 5301 0012 FB60     		str	r3, [r7, #12]
1161:.\main.c      ****             while (USBUART_CDCIsReady() == 0)
 5302              		.loc 1 1161 0
 5303 0014 0AE0     		b	.L269
 5304              	.L270:
1162:.\main.c      ****             {
1163:.\main.c      ****                 cnt++;
 5305              		.loc 1 1163 0
 5306 0016 FB68     		ldr	r3, [r7, #12]
 5307 0018 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 116


 5308 001a FB60     		str	r3, [r7, #12]
1164:.\main.c      ****                 if(cnt == 3000000){
 5309              		.loc 1 1164 0
 5310 001c FB68     		ldr	r3, [r7, #12]
 5311 001e 114A     		ldr	r2, .L271+4
 5312 0020 9342     		cmp	r3, r2
 5313 0022 03D1     		bne	.L269
1165:.\main.c      ****                     portOpen = 0;
 5314              		.loc 1 1165 0
 5315 0024 0E4B     		ldr	r3, .L271
 5316 0026 0022     		movs	r2, #0
 5317 0028 1A70     		strb	r2, [r3]
1166:.\main.c      ****                     return;
 5318              		.loc 1 1166 0
 5319 002a 15E0     		b	.L267
 5320              	.L269:
1161:.\main.c      ****             {
 5321              		.loc 1 1161 0
 5322 002c FFF7FEFF 		bl	USBUART_CDCIsReady
 5323 0030 0346     		mov	r3, r0
 5324 0032 002B     		cmp	r3, #0
 5325 0034 EFD0     		beq	.L270
1167:.\main.c      ****                 }
1168:.\main.c      ****             }
1169:.\main.c      ****             s[63]='\0';
 5326              		.loc 1 1169 0
 5327 0036 7B68     		ldr	r3, [r7, #4]
 5328 0038 3F33     		adds	r3, r3, #63
 5329 003a 0022     		movs	r2, #0
 5330 003c 1A70     		strb	r2, [r3]
1170:.\main.c      ****             s[62]='!';
 5331              		.loc 1 1170 0
 5332 003e 7B68     		ldr	r3, [r7, #4]
 5333 0040 3E33     		adds	r3, r3, #62
 5334 0042 2122     		movs	r2, #33
 5335 0044 1A70     		strb	r2, [r3]
1171:.\main.c      ****             USBUART_PutData((uint8*)s,strlen(s));
 5336              		.loc 1 1171 0
 5337 0046 7868     		ldr	r0, [r7, #4]
 5338 0048 FFF7FEFF 		bl	strlen
 5339 004c 0346     		mov	r3, r0
 5340 004e 9BB2     		uxth	r3, r3
 5341 0050 7868     		ldr	r0, [r7, #4]
 5342 0052 1946     		mov	r1, r3
 5343 0054 FFF7FEFF 		bl	USBUART_PutData
 5344              	.L267:
 5345              	.LBE12:
1172:.\main.c      ****     }
1173:.\main.c      **** }
 5346              		.loc 1 1173 0
 5347 0058 1037     		adds	r7, r7, #16
 5348              		.cfi_def_cfa_offset 8
 5349 005a BD46     		mov	sp, r7
 5350              		.cfi_def_cfa_register 13
 5351              		@ sp needed
 5352 005c 80BD     		pop	{r7, pc}
 5353              	.L272:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 117


 5354 005e 00BF     		.align	2
 5355              	.L271:
 5356 0060 00000000 		.word	portOpen
 5357 0064 C0C62D00 		.word	3000000
 5358              		.cfi_endproc
 5359              	.LFE103:
 5360              		.size	usbPutString, .-usbPutString
 5361              		.section	.text.usbPutChar,"ax",%progbits
 5362              		.align	2
 5363              		.global	usbPutChar
 5364              		.thumb
 5365              		.thumb_func
 5366              		.type	usbPutChar, %function
 5367              	usbPutChar:
 5368              	.LFB104:
1174:.\main.c      **** //* ========================================
1175:.\main.c      **** void usbPutChar(char c)
1176:.\main.c      **** {
 5369              		.loc 1 1176 0
 5370              		.cfi_startproc
 5371              		@ args = 0, pretend = 0, frame = 16
 5372              		@ frame_needed = 1, uses_anonymous_args = 0
 5373 0000 80B5     		push	{r7, lr}
 5374              		.cfi_def_cfa_offset 8
 5375              		.cfi_offset 7, -8
 5376              		.cfi_offset 14, -4
 5377 0002 84B0     		sub	sp, sp, #16
 5378              		.cfi_def_cfa_offset 24
 5379 0004 00AF     		add	r7, sp, #0
 5380              		.cfi_def_cfa_register 7
 5381 0006 0346     		mov	r3, r0
 5382 0008 FB71     		strb	r3, [r7, #7]
1177:.\main.c      ****     if (USE_USB && portOpen)    
 5383              		.loc 1 1177 0
 5384 000a 0F4B     		ldr	r3, .L277
 5385 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5386 000e 002B     		cmp	r3, #0
 5387 0010 16D0     		beq	.L273
 5388              	.LBB13:
1178:.\main.c      ****     {    
1179:.\main.c      ****         uint32 cnt = 0;
 5389              		.loc 1 1179 0
 5390 0012 0023     		movs	r3, #0
 5391 0014 FB60     		str	r3, [r7, #12]
1180:.\main.c      ****         while (USBUART_CDCIsReady() == 0){
 5392              		.loc 1 1180 0
 5393 0016 0AE0     		b	.L275
 5394              	.L276:
1181:.\main.c      ****             cnt++;
 5395              		.loc 1 1181 0
 5396 0018 FB68     		ldr	r3, [r7, #12]
 5397 001a 0133     		adds	r3, r3, #1
 5398 001c FB60     		str	r3, [r7, #12]
1182:.\main.c      ****             if(cnt == 3000000){
 5399              		.loc 1 1182 0
 5400 001e FB68     		ldr	r3, [r7, #12]
 5401 0020 0A4A     		ldr	r2, .L277+4
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 118


 5402 0022 9342     		cmp	r3, r2
 5403 0024 03D1     		bne	.L275
1183:.\main.c      ****                 portOpen = 0;
 5404              		.loc 1 1183 0
 5405 0026 084B     		ldr	r3, .L277
 5406 0028 0022     		movs	r2, #0
 5407 002a 1A70     		strb	r2, [r3]
1184:.\main.c      ****                 return;
 5408              		.loc 1 1184 0
 5409 002c 08E0     		b	.L273
 5410              	.L275:
1180:.\main.c      ****             cnt++;
 5411              		.loc 1 1180 0
 5412 002e FFF7FEFF 		bl	USBUART_CDCIsReady
 5413 0032 0346     		mov	r3, r0
 5414 0034 002B     		cmp	r3, #0
 5415 0036 EFD0     		beq	.L276
1185:.\main.c      ****             }
1186:.\main.c      ****         }
1187:.\main.c      ****         USBUART_PutChar(c);
 5416              		.loc 1 1187 0
 5417 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5418 003a 1846     		mov	r0, r3
 5419 003c FFF7FEFF 		bl	USBUART_PutChar
 5420              	.L273:
 5421              	.LBE13:
1188:.\main.c      ****     }    
1189:.\main.c      **** }
 5422              		.loc 1 1189 0
 5423 0040 1037     		adds	r7, r7, #16
 5424              		.cfi_def_cfa_offset 8
 5425 0042 BD46     		mov	sp, r7
 5426              		.cfi_def_cfa_register 13
 5427              		@ sp needed
 5428 0044 80BD     		pop	{r7, pc}
 5429              	.L278:
 5430 0046 00BF     		.align	2
 5431              	.L277:
 5432 0048 00000000 		.word	portOpen
 5433 004c C0C62D00 		.word	3000000
 5434              		.cfi_endproc
 5435              	.LFE104:
 5436              		.size	usbPutChar, .-usbPutChar
 5437              		.section	.text.uart_set_PWM,"ax",%progbits
 5438              		.align	2
 5439              		.global	uart_set_PWM
 5440              		.thumb
 5441              		.thumb_func
 5442              		.type	uart_set_PWM, %function
 5443              	uart_set_PWM:
 5444              	.LFB105:
1190:.\main.c      **** //* ========================================
1191:.\main.c      **** 
1192:.\main.c      **** void uart_set_PWM()
1193:.\main.c      **** {
 5445              		.loc 1 1193 0
 5446              		.cfi_startproc
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 119


 5447              		@ args = 0, pretend = 0, frame = 0
 5448              		@ frame_needed = 1, uses_anonymous_args = 0
 5449              		@ link register save eliminated.
 5450 0000 80B4     		push	{r7}
 5451              		.cfi_def_cfa_offset 4
 5452              		.cfi_offset 7, -4
 5453 0002 00AF     		add	r7, sp, #0
 5454              		.cfi_def_cfa_register 7
1194:.\main.c      ****     //removed from final implementation
1195:.\main.c      **** }
 5455              		.loc 1 1195 0
 5456 0004 BD46     		mov	sp, r7
 5457              		.cfi_def_cfa_register 13
 5458              		@ sp needed
 5459 0006 5DF8047B 		ldr	r7, [sp], #4
 5460              		.cfi_restore 7
 5461              		.cfi_def_cfa_offset 0
 5462 000a 7047     		bx	lr
 5463              		.cfi_endproc
 5464              	.LFE105:
 5465              		.size	uart_set_PWM, .-uart_set_PWM
 5466              		.text
 5467              	.Letext0:
 5468              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5469              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 5470              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 5471              		.file 5 ".\\vars.h"
 5472              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 5473              		.file 7 ".\\pathfinder.h"
 5474              		.section	.debug_info,"",%progbits
 5475              	.Ldebug_info0:
 5476 0000 6E0E0000 		.4byte	0xe6e
 5477 0004 0400     		.2byte	0x4
 5478 0006 00000000 		.4byte	.Ldebug_abbrev0
 5479 000a 04       		.byte	0x4
 5480 000b 01       		.uleb128 0x1
 5481 000c AE040000 		.4byte	.LASF198
 5482 0010 01       		.byte	0x1
 5483 0011 93090000 		.4byte	.LASF199
 5484 0015 1C000000 		.4byte	.LASF200
 5485 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5486 001d 00000000 		.4byte	0
 5487 0021 00000000 		.4byte	.Ldebug_line0
 5488 0025 02       		.uleb128 0x2
 5489 0026 01       		.byte	0x1
 5490 0027 06       		.byte	0x6
 5491 0028 CD080000 		.4byte	.LASF0
 5492 002c 02       		.uleb128 0x2
 5493 002d 01       		.byte	0x1
 5494 002e 08       		.byte	0x8
 5495 002f 0A080000 		.4byte	.LASF1
 5496 0033 02       		.uleb128 0x2
 5497 0034 02       		.byte	0x2
 5498 0035 05       		.byte	0x5
 5499 0036 64060000 		.4byte	.LASF2
 5500 003a 02       		.uleb128 0x2
 5501 003b 02       		.byte	0x2
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 120


 5502 003c 07       		.byte	0x7
 5503 003d D9080000 		.4byte	.LASF3
 5504 0041 03       		.uleb128 0x3
 5505 0042 DF000000 		.4byte	.LASF5
 5506 0046 02       		.byte	0x2
 5507 0047 3F       		.byte	0x3f
 5508 0048 4C000000 		.4byte	0x4c
 5509 004c 02       		.uleb128 0x2
 5510 004d 04       		.byte	0x4
 5511 004e 05       		.byte	0x5
 5512 004f 98060000 		.4byte	.LASF4
 5513 0053 03       		.uleb128 0x3
 5514 0054 18080000 		.4byte	.LASF6
 5515 0058 02       		.byte	0x2
 5516 0059 41       		.byte	0x41
 5517 005a 5E000000 		.4byte	0x5e
 5518 005e 02       		.uleb128 0x2
 5519 005f 04       		.byte	0x4
 5520 0060 07       		.byte	0x7
 5521 0061 9C070000 		.4byte	.LASF7
 5522 0065 02       		.uleb128 0x2
 5523 0066 08       		.byte	0x8
 5524 0067 05       		.byte	0x5
 5525 0068 78040000 		.4byte	.LASF8
 5526 006c 02       		.uleb128 0x2
 5527 006d 08       		.byte	0x8
 5528 006e 07       		.byte	0x7
 5529 006f 86020000 		.4byte	.LASF9
 5530 0073 04       		.uleb128 0x4
 5531 0074 04       		.byte	0x4
 5532 0075 05       		.byte	0x5
 5533 0076 696E7400 		.ascii	"int\000"
 5534 007a 02       		.uleb128 0x2
 5535 007b 04       		.byte	0x4
 5536 007c 07       		.byte	0x7
 5537 007d C7000000 		.4byte	.LASF10
 5538 0081 02       		.uleb128 0x2
 5539 0082 04       		.byte	0x4
 5540 0083 07       		.byte	0x7
 5541 0084 93070000 		.4byte	.LASF11
 5542 0088 05       		.uleb128 0x5
 5543 0089 04       		.byte	0x4
 5544 008a 8E000000 		.4byte	0x8e
 5545 008e 02       		.uleb128 0x2
 5546 008f 01       		.byte	0x1
 5547 0090 08       		.byte	0x8
 5548 0091 B5030000 		.4byte	.LASF12
 5549 0095 03       		.uleb128 0x3
 5550 0096 BA070000 		.4byte	.LASF13
 5551 009a 03       		.byte	0x3
 5552 009b 2C       		.byte	0x2c
 5553 009c 41000000 		.4byte	0x41
 5554 00a0 03       		.uleb128 0x3
 5555 00a1 06020000 		.4byte	.LASF14
 5556 00a5 03       		.byte	0x3
 5557 00a6 2D       		.byte	0x2d
 5558 00a7 53000000 		.4byte	0x53
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 121


 5559 00ab 06       		.uleb128 0x6
 5560 00ac 20090000 		.4byte	.LASF15
 5561 00b0 04       		.byte	0x4
 5562 00b1 9201     		.2byte	0x192
 5563 00b3 2C000000 		.4byte	0x2c
 5564 00b7 06       		.uleb128 0x6
 5565 00b8 08040000 		.4byte	.LASF16
 5566 00bc 04       		.byte	0x4
 5567 00bd 9301     		.2byte	0x193
 5568 00bf 3A000000 		.4byte	0x3a
 5569 00c3 06       		.uleb128 0x6
 5570 00c4 7F050000 		.4byte	.LASF17
 5571 00c8 04       		.byte	0x4
 5572 00c9 9401     		.2byte	0x194
 5573 00cb 5E000000 		.4byte	0x5e
 5574 00cf 06       		.uleb128 0x6
 5575 00d0 0F040000 		.4byte	.LASF18
 5576 00d4 04       		.byte	0x4
 5577 00d5 9501     		.2byte	0x195
 5578 00d7 25000000 		.4byte	0x25
 5579 00db 06       		.uleb128 0x6
 5580 00dc E9000000 		.4byte	.LASF19
 5581 00e0 04       		.byte	0x4
 5582 00e1 9601     		.2byte	0x196
 5583 00e3 33000000 		.4byte	0x33
 5584 00e7 02       		.uleb128 0x2
 5585 00e8 04       		.byte	0x4
 5586 00e9 04       		.byte	0x4
 5587 00ea 26020000 		.4byte	.LASF20
 5588 00ee 02       		.uleb128 0x2
 5589 00ef 08       		.byte	0x8
 5590 00f0 04       		.byte	0x4
 5591 00f1 26090000 		.4byte	.LASF21
 5592 00f5 07       		.uleb128 0x7
 5593 00f6 A0000000 		.4byte	0xa0
 5594 00fa 05010000 		.4byte	0x105
 5595 00fe 08       		.uleb128 0x8
 5596 00ff 81000000 		.4byte	0x81
 5597 0103 01       		.byte	0x1
 5598 0104 00       		.byte	0
 5599 0105 02       		.uleb128 0x2
 5600 0106 08       		.byte	0x8
 5601 0107 04       		.byte	0x4
 5602 0108 FB050000 		.4byte	.LASF22
 5603 010c 09       		.uleb128 0x9
 5604 010d 65080000 		.4byte	.LASF31
 5605 0111 01       		.byte	0x1
 5606 0112 05       		.byte	0x5
 5607 0113 63       		.byte	0x63
 5608 0114 49010000 		.4byte	0x149
 5609 0118 0A       		.uleb128 0xa
 5610 0119 45020000 		.4byte	.LASF23
 5611 011d 00       		.sleb128 0
 5612 011e 0A       		.uleb128 0xa
 5613 011f FC000000 		.4byte	.LASF24
 5614 0123 01       		.sleb128 1
 5615 0124 0A       		.uleb128 0xa
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 122


 5616 0125 5B000000 		.4byte	.LASF25
 5617 0129 02       		.sleb128 2
 5618 012a 0A       		.uleb128 0xa
 5619 012b EA050000 		.4byte	.LASF26
 5620 012f 03       		.sleb128 3
 5621 0130 0A       		.uleb128 0xa
 5622 0131 17010000 		.4byte	.LASF27
 5623 0135 04       		.sleb128 4
 5624 0136 0A       		.uleb128 0xa
 5625 0137 EF010000 		.4byte	.LASF28
 5626 013b 05       		.sleb128 5
 5627 013c 0A       		.uleb128 0xa
 5628 013d 0E070000 		.4byte	.LASF29
 5629 0141 06       		.sleb128 6
 5630 0142 0A       		.uleb128 0xa
 5631 0143 60090000 		.4byte	.LASF30
 5632 0147 07       		.sleb128 7
 5633 0148 00       		.byte	0
 5634 0149 09       		.uleb128 0x9
 5635 014a 52010000 		.4byte	.LASF32
 5636 014e 01       		.byte	0x1
 5637 014f 05       		.byte	0x5
 5638 0150 64       		.byte	0x64
 5639 0151 86010000 		.4byte	0x186
 5640 0155 0A       		.uleb128 0xa
 5641 0156 E0060000 		.4byte	.LASF33
 5642 015a 00       		.sleb128 0
 5643 015b 0A       		.uleb128 0xa
 5644 015c 3F040000 		.4byte	.LASF34
 5645 0160 01       		.sleb128 1
 5646 0161 0A       		.uleb128 0xa
 5647 0162 AF060000 		.4byte	.LASF35
 5648 0166 02       		.sleb128 2
 5649 0167 0A       		.uleb128 0xa
 5650 0168 A9010000 		.4byte	.LASF36
 5651 016c 03       		.sleb128 3
 5652 016d 0A       		.uleb128 0xa
 5653 016e FE080000 		.4byte	.LASF37
 5654 0172 04       		.sleb128 4
 5655 0173 0A       		.uleb128 0xa
 5656 0174 3E090000 		.4byte	.LASF38
 5657 0178 05       		.sleb128 5
 5658 0179 0A       		.uleb128 0xa
 5659 017a 78000000 		.4byte	.LASF39
 5660 017e 06       		.sleb128 6
 5661 017f 0A       		.uleb128 0xa
 5662 0180 01070000 		.4byte	.LASF40
 5663 0184 07       		.sleb128 7
 5664 0185 00       		.byte	0
 5665 0186 0B       		.uleb128 0xb
 5666 0187 9F050000 		.4byte	.LASF201
 5667 018b 20       		.byte	0x20
 5668 018c 05       		.byte	0x5
 5669 018d 6A       		.byte	0x6a
 5670 018e 5F020000 		.4byte	0x25f
 5671 0192 0C       		.uleb128 0xc
 5672 0193 BD050000 		.4byte	.LASF41
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 123


 5673 0197 05       		.byte	0x5
 5674 0198 6B       		.byte	0x6b
 5675 0199 CF000000 		.4byte	0xcf
 5676 019d 00       		.byte	0
 5677 019e 0C       		.uleb128 0xc
 5678 019f 3F020000 		.4byte	.LASF42
 5679 01a3 05       		.byte	0x5
 5680 01a4 6C       		.byte	0x6c
 5681 01a5 AB000000 		.4byte	0xab
 5682 01a9 01       		.byte	0x1
 5683 01aa 0C       		.uleb128 0xc
 5684 01ab E2070000 		.4byte	.LASF43
 5685 01af 05       		.byte	0x5
 5686 01b0 6D       		.byte	0x6d
 5687 01b1 DB000000 		.4byte	0xdb
 5688 01b5 02       		.byte	0x2
 5689 01b6 0C       		.uleb128 0xc
 5690 01b7 89030000 		.4byte	.LASF44
 5691 01bb 05       		.byte	0x5
 5692 01bc 6E       		.byte	0x6e
 5693 01bd DB000000 		.4byte	0xdb
 5694 01c1 04       		.byte	0x4
 5695 01c2 0C       		.uleb128 0xc
 5696 01c3 EC080000 		.4byte	.LASF45
 5697 01c7 05       		.byte	0x5
 5698 01c8 6F       		.byte	0x6f
 5699 01c9 DB000000 		.4byte	0xdb
 5700 01cd 06       		.byte	0x6
 5701 01ce 0C       		.uleb128 0xc
 5702 01cf 66090000 		.4byte	.LASF46
 5703 01d3 05       		.byte	0x5
 5704 01d4 70       		.byte	0x70
 5705 01d5 DB000000 		.4byte	0xdb
 5706 01d9 08       		.byte	0x8
 5707 01da 0C       		.uleb128 0xc
 5708 01db 45050000 		.4byte	.LASF47
 5709 01df 05       		.byte	0x5
 5710 01e0 71       		.byte	0x71
 5711 01e1 DB000000 		.4byte	0xdb
 5712 01e5 0A       		.byte	0xa
 5713 01e6 0C       		.uleb128 0xc
 5714 01e7 BA030000 		.4byte	.LASF48
 5715 01eb 05       		.byte	0x5
 5716 01ec 72       		.byte	0x72
 5717 01ed DB000000 		.4byte	0xdb
 5718 01f1 0C       		.byte	0xc
 5719 01f2 0C       		.uleb128 0xc
 5720 01f3 CC050000 		.4byte	.LASF49
 5721 01f7 05       		.byte	0x5
 5722 01f8 73       		.byte	0x73
 5723 01f9 DB000000 		.4byte	0xdb
 5724 01fd 0E       		.byte	0xe
 5725 01fe 0C       		.uleb128 0xc
 5726 01ff 93040000 		.4byte	.LASF50
 5727 0203 05       		.byte	0x5
 5728 0204 74       		.byte	0x74
 5729 0205 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 124


 5730 0209 10       		.byte	0x10
 5731 020a 0C       		.uleb128 0xc
 5732 020b 53070000 		.4byte	.LASF51
 5733 020f 05       		.byte	0x5
 5734 0210 75       		.byte	0x75
 5735 0211 DB000000 		.4byte	0xdb
 5736 0215 12       		.byte	0x12
 5737 0216 0C       		.uleb128 0xc
 5738 0217 8A090000 		.4byte	.LASF52
 5739 021b 05       		.byte	0x5
 5740 021c 76       		.byte	0x76
 5741 021d DB000000 		.4byte	0xdb
 5742 0221 14       		.byte	0x14
 5743 0222 0C       		.uleb128 0xc
 5744 0223 21040000 		.4byte	.LASF53
 5745 0227 05       		.byte	0x5
 5746 0228 77       		.byte	0x77
 5747 0229 DB000000 		.4byte	0xdb
 5748 022d 16       		.byte	0x16
 5749 022e 0C       		.uleb128 0xc
 5750 022f 4A010000 		.4byte	.LASF54
 5751 0233 05       		.byte	0x5
 5752 0234 78       		.byte	0x78
 5753 0235 DB000000 		.4byte	0xdb
 5754 0239 18       		.byte	0x18
 5755 023a 0C       		.uleb128 0xc
 5756 023b F5030000 		.4byte	.LASF55
 5757 023f 05       		.byte	0x5
 5758 0240 79       		.byte	0x79
 5759 0241 DB000000 		.4byte	0xdb
 5760 0245 1A       		.byte	0x1a
 5761 0246 0C       		.uleb128 0xc
 5762 0247 3C050000 		.4byte	.LASF56
 5763 024b 05       		.byte	0x5
 5764 024c 7A       		.byte	0x7a
 5765 024d DB000000 		.4byte	0xdb
 5766 0251 1C       		.byte	0x1c
 5767 0252 0C       		.uleb128 0xc
 5768 0253 0F020000 		.4byte	.LASF57
 5769 0257 05       		.byte	0x5
 5770 0258 7B       		.byte	0x7b
 5771 0259 DB000000 		.4byte	0xdb
 5772 025d 1E       		.byte	0x1e
 5773 025e 00       		.byte	0
 5774 025f 0D       		.uleb128 0xd
 5775 0260 0D090000 		.4byte	.LASF58
 5776 0264 01       		.byte	0x1
 5777 0265 84       		.byte	0x84
 5778 0266 00000000 		.4byte	.LFB63
 5779 026a 0C000000 		.4byte	.LFE63-.LFB63
 5780 026e 01       		.uleb128 0x1
 5781 026f 9C       		.byte	0x9c
 5782 0270 0E       		.uleb128 0xe
 5783 0271 5B070000 		.4byte	.LASF59
 5784 0275 01       		.byte	0x1
 5785 0276 8A       		.byte	0x8a
 5786 0277 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 125


 5787 027b 2C000000 		.4byte	.LFE64-.LFB64
 5788 027f 01       		.uleb128 0x1
 5789 0280 9C       		.byte	0x9c
 5790 0281 0E       		.uleb128 0xe
 5791 0282 1C020000 		.4byte	.LASF60
 5792 0286 01       		.byte	0x1
 5793 0287 93       		.byte	0x93
 5794 0288 00000000 		.4byte	.LFB65
 5795 028c 98010000 		.4byte	.LFE65-.LFB65
 5796 0290 01       		.uleb128 0x1
 5797 0291 9C       		.byte	0x9c
 5798 0292 0F       		.uleb128 0xf
 5799 0293 B6020000 		.4byte	.LASF66
 5800 0297 01       		.byte	0x1
 5801 0298 B8       		.byte	0xb8
 5802 0299 00000000 		.4byte	.LFB66
 5803 029d 34010000 		.4byte	.LFE66-.LFB66
 5804 02a1 01       		.uleb128 0x1
 5805 02a2 9C       		.byte	0x9c
 5806 02a3 DC020000 		.4byte	0x2dc
 5807 02a7 10       		.uleb128 0x10
 5808 02a8 0E000000 		.4byte	.LBB2
 5809 02ac 64000000 		.4byte	.LBE2-.LBB2
 5810 02b0 C3020000 		.4byte	0x2c3
 5811 02b4 11       		.uleb128 0x11
 5812 02b5 FD030000 		.4byte	.LASF61
 5813 02b9 01       		.byte	0x1
 5814 02ba BC       		.byte	0xbc
 5815 02bb B7000000 		.4byte	0xb7
 5816 02bf 02       		.uleb128 0x2
 5817 02c0 91       		.byte	0x91
 5818 02c1 76       		.sleb128 -10
 5819 02c2 00       		.byte	0
 5820 02c3 12       		.uleb128 0x12
 5821 02c4 7E000000 		.4byte	.LBB3
 5822 02c8 64000000 		.4byte	.LBE3-.LBB3
 5823 02cc 11       		.uleb128 0x11
 5824 02cd FD030000 		.4byte	.LASF61
 5825 02d1 01       		.byte	0x1
 5826 02d2 C8       		.byte	0xc8
 5827 02d3 B7000000 		.4byte	0xb7
 5828 02d7 02       		.uleb128 0x2
 5829 02d8 91       		.byte	0x91
 5830 02d9 74       		.sleb128 -12
 5831 02da 00       		.byte	0
 5832 02db 00       		.byte	0
 5833 02dc 0D       		.uleb128 0xd
 5834 02dd 37080000 		.4byte	.LASF62
 5835 02e1 01       		.byte	0x1
 5836 02e2 DE       		.byte	0xde
 5837 02e3 00000000 		.4byte	.LFB67
 5838 02e7 20000000 		.4byte	.LFE67-.LFB67
 5839 02eb 01       		.uleb128 0x1
 5840 02ec 9C       		.byte	0x9c
 5841 02ed 0E       		.uleb128 0xe
 5842 02ee 3C030000 		.4byte	.LASF63
 5843 02f2 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 126


 5844 02f3 E5       		.byte	0xe5
 5845 02f4 00000000 		.4byte	.LFB68
 5846 02f8 28000000 		.4byte	.LFE68-.LFB68
 5847 02fc 01       		.uleb128 0x1
 5848 02fd 9C       		.byte	0x9c
 5849 02fe 0E       		.uleb128 0xe
 5850 02ff 07060000 		.4byte	.LASF64
 5851 0303 01       		.byte	0x1
 5852 0304 EE       		.byte	0xee
 5853 0305 00000000 		.4byte	.LFB69
 5854 0309 0A000000 		.4byte	.LFE69-.LFB69
 5855 030d 01       		.uleb128 0x1
 5856 030e 9C       		.byte	0x9c
 5857 030f 0E       		.uleb128 0xe
 5858 0310 24060000 		.4byte	.LASF65
 5859 0314 01       		.byte	0x1
 5860 0315 F3       		.byte	0xf3
 5861 0316 00000000 		.4byte	.LFB70
 5862 031a 28000000 		.4byte	.LFE70-.LFB70
 5863 031e 01       		.uleb128 0x1
 5864 031f 9C       		.byte	0x9c
 5865 0320 13       		.uleb128 0x13
 5866 0321 08090000 		.4byte	.LASF67
 5867 0325 01       		.byte	0x1
 5868 0326 FE       		.byte	0xfe
 5869 0327 73000000 		.4byte	0x73
 5870 032b 00000000 		.4byte	.LFB71
 5871 032f EC060000 		.4byte	.LFE71-.LFB71
 5872 0333 01       		.uleb128 0x1
 5873 0334 9C       		.byte	0x9c
 5874 0335 C0030000 		.4byte	0x3c0
 5875 0339 14       		.uleb128 0x14
 5876 033a 2D030000 		.4byte	.LASF68
 5877 033e 01       		.byte	0x1
 5878 033f 3701     		.2byte	0x137
 5879 0341 B7000000 		.4byte	0xb7
 5880 0345 02       		.uleb128 0x2
 5881 0346 91       		.byte	0x91
 5882 0347 6E       		.sleb128 -18
 5883 0348 12       		.uleb128 0x12
 5884 0349 38010000 		.4byte	.LBB4
 5885 034d 02050000 		.4byte	.LBE4-.LBB4
 5886 0351 14       		.uleb128 0x14
 5887 0352 A5040000 		.4byte	.LASF69
 5888 0356 01       		.byte	0x1
 5889 0357 6F01     		.2byte	0x16f
 5890 0359 8E000000 		.4byte	0x8e
 5891 035d 02       		.uleb128 0x2
 5892 035e 91       		.byte	0x91
 5893 035f 6B       		.sleb128 -21
 5894 0360 10       		.uleb128 0x10
 5895 0361 88010000 		.4byte	.LBB5
 5896 0365 D6020000 		.4byte	.LBE5-.LBB5
 5897 0369 8C030000 		.4byte	0x38c
 5898 036d 15       		.uleb128 0x15
 5899 036e 6D657300 		.ascii	"mes\000"
 5900 0372 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 127


 5901 0373 7C01     		.2byte	0x17c
 5902 0375 C0030000 		.4byte	0x3c0
 5903 0379 02       		.uleb128 0x2
 5904 037a 91       		.byte	0x91
 5905 037b 48       		.sleb128 -56
 5906 037c 14       		.uleb128 0x14
 5907 037d 14040000 		.4byte	.LASF70
 5908 0381 01       		.byte	0x1
 5909 0382 8001     		.2byte	0x180
 5910 0384 AB000000 		.4byte	0xab
 5911 0388 02       		.uleb128 0x2
 5912 0389 91       		.byte	0x91
 5913 038a 6D       		.sleb128 -19
 5914 038b 00       		.byte	0
 5915 038c 12       		.uleb128 0x12
 5916 038d 9E040000 		.4byte	.LBB6
 5917 0391 90010000 		.4byte	.LBE6-.LBB6
 5918 0395 15       		.uleb128 0x15
 5919 0396 6D657300 		.ascii	"mes\000"
 5920 039a 01       		.byte	0x1
 5921 039b C801     		.2byte	0x1c8
 5922 039d C0030000 		.4byte	0x3c0
 5923 03a1 02       		.uleb128 0x2
 5924 03a2 91       		.byte	0x91
 5925 03a3 48       		.sleb128 -56
 5926 03a4 12       		.uleb128 0x12
 5927 03a5 C8040000 		.4byte	.LBB7
 5928 03a9 66010000 		.4byte	.LBE7-.LBB7
 5929 03ad 14       		.uleb128 0x14
 5930 03ae 14040000 		.4byte	.LASF70
 5931 03b2 01       		.byte	0x1
 5932 03b3 D901     		.2byte	0x1d9
 5933 03b5 AB000000 		.4byte	0xab
 5934 03b9 02       		.uleb128 0x2
 5935 03ba 91       		.byte	0x91
 5936 03bb 6C       		.sleb128 -20
 5937 03bc 00       		.byte	0
 5938 03bd 00       		.byte	0
 5939 03be 00       		.byte	0
 5940 03bf 00       		.byte	0
 5941 03c0 07       		.uleb128 0x7
 5942 03c1 8E000000 		.4byte	0x8e
 5943 03c5 D0030000 		.4byte	0x3d0
 5944 03c9 08       		.uleb128 0x8
 5945 03ca 81000000 		.4byte	0x81
 5946 03ce 1F       		.byte	0x1f
 5947 03cf 00       		.byte	0
 5948 03d0 16       		.uleb128 0x16
 5949 03d1 46090000 		.4byte	.LASF76
 5950 03d5 01       		.byte	0x1
 5951 03d6 3802     		.2byte	0x238
 5952 03d8 00000000 		.4byte	.LFB72
 5953 03dc 60010000 		.4byte	.LFE72-.LFB72
 5954 03e0 01       		.uleb128 0x1
 5955 03e1 9C       		.byte	0x9c
 5956 03e2 1E040000 		.4byte	0x41e
 5957 03e6 12       		.uleb128 0x12
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 128


 5958 03e7 10000000 		.4byte	.LBB8
 5959 03eb 34010000 		.4byte	.LBE8-.LBB8
 5960 03ef 14       		.uleb128 0x14
 5961 03f0 3D010000 		.4byte	.LASF71
 5962 03f4 01       		.byte	0x1
 5963 03f5 3E02     		.2byte	0x23e
 5964 03f7 B7000000 		.4byte	0xb7
 5965 03fb 02       		.uleb128 0x2
 5966 03fc 91       		.byte	0x91
 5967 03fd 76       		.sleb128 -10
 5968 03fe 14       		.uleb128 0x14
 5969 03ff AE070000 		.4byte	.LASF72
 5970 0403 01       		.byte	0x1
 5971 0404 3F02     		.2byte	0x23f
 5972 0406 1E040000 		.4byte	0x41e
 5973 040a 02       		.uleb128 0x2
 5974 040b 91       		.byte	0x91
 5975 040c 68       		.sleb128 -24
 5976 040d 14       		.uleb128 0x14
 5977 040e 4B020000 		.4byte	.LASF73
 5978 0412 01       		.byte	0x1
 5979 0413 4002     		.2byte	0x240
 5980 0415 1E040000 		.4byte	0x41e
 5981 0419 02       		.uleb128 0x2
 5982 041a 91       		.byte	0x91
 5983 041b 5C       		.sleb128 -36
 5984 041c 00       		.byte	0
 5985 041d 00       		.byte	0
 5986 041e 07       		.uleb128 0x7
 5987 041f 8E000000 		.4byte	0x8e
 5988 0423 2E040000 		.4byte	0x42e
 5989 0427 08       		.uleb128 0x8
 5990 0428 81000000 		.4byte	0x81
 5991 042c 0B       		.byte	0xb
 5992 042d 00       		.byte	0
 5993 042e 17       		.uleb128 0x17
 5994 042f D3030000 		.4byte	.LASF74
 5995 0433 01       		.byte	0x1
 5996 0434 7902     		.2byte	0x279
 5997 0436 00000000 		.4byte	.LFB73
 5998 043a 18000000 		.4byte	.LFE73-.LFB73
 5999 043e 01       		.uleb128 0x1
 6000 043f 9C       		.byte	0x9c
 6001 0440 54040000 		.4byte	0x454
 6002 0444 18       		.uleb128 0x18
 6003 0445 64697200 		.ascii	"dir\000"
 6004 0449 01       		.byte	0x1
 6005 044a 7902     		.2byte	0x279
 6006 044c AB000000 		.4byte	0xab
 6007 0450 02       		.uleb128 0x2
 6008 0451 91       		.byte	0x91
 6009 0452 77       		.sleb128 -9
 6010 0453 00       		.byte	0
 6011 0454 17       		.uleb128 0x17
 6012 0455 33040000 		.4byte	.LASF75
 6013 0459 01       		.byte	0x1
 6014 045a 7E02     		.2byte	0x27e
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 129


 6015 045c 00000000 		.4byte	.LFB74
 6016 0460 18000000 		.4byte	.LFE74-.LFB74
 6017 0464 01       		.uleb128 0x1
 6018 0465 9C       		.byte	0x9c
 6019 0466 7A040000 		.4byte	0x47a
 6020 046a 18       		.uleb128 0x18
 6021 046b 64697200 		.ascii	"dir\000"
 6022 046f 01       		.byte	0x1
 6023 0470 7E02     		.2byte	0x27e
 6024 0472 AB000000 		.4byte	0xab
 6025 0476 02       		.uleb128 0x2
 6026 0477 91       		.byte	0x91
 6027 0478 77       		.sleb128 -9
 6028 0479 00       		.byte	0
 6029 047a 19       		.uleb128 0x19
 6030 047b 6B080000 		.4byte	.LASF77
 6031 047f 01       		.byte	0x1
 6032 0480 8302     		.2byte	0x283
 6033 0482 00000000 		.4byte	.LFB75
 6034 0486 54000000 		.4byte	.LFE75-.LFB75
 6035 048a 01       		.uleb128 0x1
 6036 048b 9C       		.byte	0x9c
 6037 048c A0040000 		.4byte	0x4a0
 6038 0490 15       		.uleb128 0x15
 6039 0491 6D657300 		.ascii	"mes\000"
 6040 0495 01       		.byte	0x1
 6041 0496 8802     		.2byte	0x288
 6042 0498 C0030000 		.4byte	0x3c0
 6043 049c 02       		.uleb128 0x2
 6044 049d 91       		.byte	0x91
 6045 049e 58       		.sleb128 -40
 6046 049f 00       		.byte	0
 6047 04a0 17       		.uleb128 0x17
 6048 04a1 2C020000 		.4byte	.LASF78
 6049 04a5 01       		.byte	0x1
 6050 04a6 8D02     		.2byte	0x28d
 6051 04a8 00000000 		.4byte	.LFB76
 6052 04ac F4000000 		.4byte	.LFE76-.LFB76
 6053 04b0 01       		.uleb128 0x1
 6054 04b1 9C       		.byte	0x9c
 6055 04b2 F3040000 		.4byte	0x4f3
 6056 04b6 1A       		.uleb128 0x1a
 6057 04b7 2C070000 		.4byte	.LASF79
 6058 04bb 01       		.byte	0x1
 6059 04bc 8D02     		.2byte	0x28d
 6060 04be EE000000 		.4byte	0xee
 6061 04c2 02       		.uleb128 0x2
 6062 04c3 91       		.byte	0x91
 6063 04c4 68       		.sleb128 -24
 6064 04c5 1A       		.uleb128 0x1a
 6065 04c6 60040000 		.4byte	.LASF80
 6066 04ca 01       		.byte	0x1
 6067 04cb 8D02     		.2byte	0x28d
 6068 04cd EE000000 		.4byte	0xee
 6069 04d1 02       		.uleb128 0x2
 6070 04d2 91       		.byte	0x91
 6071 04d3 60       		.sleb128 -32
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 130


 6072 04d4 14       		.uleb128 0x14
 6073 04d5 64020000 		.4byte	.LASF81
 6074 04d9 01       		.byte	0x1
 6075 04da A202     		.2byte	0x2a2
 6076 04dc DB000000 		.4byte	0xdb
 6077 04e0 02       		.uleb128 0x2
 6078 04e1 91       		.byte	0x91
 6079 04e2 76       		.sleb128 -10
 6080 04e3 14       		.uleb128 0x14
 6081 04e4 93050000 		.4byte	.LASF82
 6082 04e8 01       		.byte	0x1
 6083 04e9 A302     		.2byte	0x2a3
 6084 04eb DB000000 		.4byte	0xdb
 6085 04ef 02       		.uleb128 0x2
 6086 04f0 91       		.byte	0x91
 6087 04f1 74       		.sleb128 -12
 6088 04f2 00       		.byte	0
 6089 04f3 1B       		.uleb128 0x1b
 6090 04f4 7C080000 		.4byte	.LASF83
 6091 04f8 01       		.byte	0x1
 6092 04f9 A902     		.2byte	0x2a9
 6093 04fb 00000000 		.4byte	.LFB77
 6094 04ff 18000000 		.4byte	.LFE77-.LFB77
 6095 0503 01       		.uleb128 0x1
 6096 0504 9C       		.byte	0x9c
 6097 0505 1B       		.uleb128 0x1b
 6098 0506 AA090000 		.4byte	.LASF84
 6099 050a 01       		.byte	0x1
 6100 050b AF02     		.2byte	0x2af
 6101 050d 00000000 		.4byte	.LFB78
 6102 0511 18000000 		.4byte	.LFE78-.LFB78
 6103 0515 01       		.uleb128 0x1
 6104 0516 9C       		.byte	0x9c
 6105 0517 1B       		.uleb128 0x1b
 6106 0518 ED070000 		.4byte	.LASF85
 6107 051c 01       		.byte	0x1
 6108 051d B502     		.2byte	0x2b5
 6109 051f 00000000 		.4byte	.LFB79
 6110 0523 22000000 		.4byte	.LFE79-.LFB79
 6111 0527 01       		.uleb128 0x1
 6112 0528 9C       		.byte	0x9c
 6113 0529 1B       		.uleb128 0x1b
 6114 052a 6F020000 		.4byte	.LASF86
 6115 052e 01       		.byte	0x1
 6116 052f BB02     		.2byte	0x2bb
 6117 0531 00000000 		.4byte	.LFB80
 6118 0535 1C000000 		.4byte	.LFE80-.LFB80
 6119 0539 01       		.uleb128 0x1
 6120 053a 9C       		.byte	0x9c
 6121 053b 1B       		.uleb128 0x1b
 6122 053c 49070000 		.4byte	.LASF87
 6123 0540 01       		.byte	0x1
 6124 0541 C002     		.2byte	0x2c0
 6125 0543 00000000 		.4byte	.LFB81
 6126 0547 34000000 		.4byte	.LFE81-.LFB81
 6127 054b 01       		.uleb128 0x1
 6128 054c 9C       		.byte	0x9c
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 131


 6129 054d 1B       		.uleb128 0x1b
 6130 054e 7D020000 		.4byte	.LASF88
 6131 0552 01       		.byte	0x1
 6132 0553 C502     		.2byte	0x2c5
 6133 0555 00000000 		.4byte	.LFB82
 6134 0559 38000000 		.4byte	.LFE82-.LFB82
 6135 055d 01       		.uleb128 0x1
 6136 055e 9C       		.byte	0x9c
 6137 055f 1B       		.uleb128 0x1b
 6138 0560 EF030000 		.4byte	.LASF89
 6139 0564 01       		.byte	0x1
 6140 0565 CA02     		.2byte	0x2ca
 6141 0567 00000000 		.4byte	.LFB83
 6142 056b 4C000000 		.4byte	.LFE83-.LFB83
 6143 056f 01       		.uleb128 0x1
 6144 0570 9C       		.byte	0x9c
 6145 0571 1B       		.uleb128 0x1b
 6146 0572 D0020000 		.4byte	.LASF90
 6147 0576 01       		.byte	0x1
 6148 0577 CF02     		.2byte	0x2cf
 6149 0579 00000000 		.4byte	.LFB84
 6150 057d 38000000 		.4byte	.LFE84-.LFB84
 6151 0581 01       		.uleb128 0x1
 6152 0582 9C       		.byte	0x9c
 6153 0583 1B       		.uleb128 0x1b
 6154 0584 A1060000 		.4byte	.LASF91
 6155 0588 01       		.byte	0x1
 6156 0589 D802     		.2byte	0x2d8
 6157 058b 00000000 		.4byte	.LFB85
 6158 058f 38000000 		.4byte	.LFE85-.LFB85
 6159 0593 01       		.uleb128 0x1
 6160 0594 9C       		.byte	0x9c
 6161 0595 1B       		.uleb128 0x1b
 6162 0596 79060000 		.4byte	.LASF92
 6163 059a 01       		.byte	0x1
 6164 059b E102     		.2byte	0x2e1
 6165 059d 00000000 		.4byte	.LFB86
 6166 05a1 38000000 		.4byte	.LFE86-.LFB86
 6167 05a5 01       		.uleb128 0x1
 6168 05a6 9C       		.byte	0x9c
 6169 05a7 1B       		.uleb128 0x1b
 6170 05a8 FA010000 		.4byte	.LASF93
 6171 05ac 01       		.byte	0x1
 6172 05ad EA02     		.2byte	0x2ea
 6173 05af 00000000 		.4byte	.LFB87
 6174 05b3 14000000 		.4byte	.LFE87-.LFB87
 6175 05b7 01       		.uleb128 0x1
 6176 05b8 9C       		.byte	0x9c
 6177 05b9 1C       		.uleb128 0x1c
 6178 05ba E6020000 		.4byte	.LASF94
 6179 05be 01       		.byte	0x1
 6180 05bf EF02     		.2byte	0x2ef
 6181 05c1 00000000 		.4byte	.LFB88
 6182 05c5 18000000 		.4byte	.LFE88-.LFB88
 6183 05c9 01       		.uleb128 0x1
 6184 05ca 9C       		.byte	0x9c
 6185 05cb 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 132


 6186 05cc 9B040000 		.4byte	.LASF95
 6187 05d0 01       		.byte	0x1
 6188 05d1 F302     		.2byte	0x2f3
 6189 05d3 00000000 		.4byte	.LFB89
 6190 05d7 18000000 		.4byte	.LFE89-.LFB89
 6191 05db 01       		.uleb128 0x1
 6192 05dc 9C       		.byte	0x9c
 6193 05dd 1C       		.uleb128 0x1c
 6194 05de B5090000 		.4byte	.LASF96
 6195 05e2 01       		.byte	0x1
 6196 05e3 F802     		.2byte	0x2f8
 6197 05e5 00000000 		.4byte	.LFB90
 6198 05e9 18000000 		.4byte	.LFE90-.LFB90
 6199 05ed 01       		.uleb128 0x1
 6200 05ee 9C       		.byte	0x9c
 6201 05ef 1C       		.uleb128 0x1c
 6202 05f0 7A030000 		.4byte	.LASF97
 6203 05f4 01       		.byte	0x1
 6204 05f5 FC02     		.2byte	0x2fc
 6205 05f7 00000000 		.4byte	.LFB91
 6206 05fb 18000000 		.4byte	.LFE91-.LFB91
 6207 05ff 01       		.uleb128 0x1
 6208 0600 9C       		.byte	0x9c
 6209 0601 17       		.uleb128 0x17
 6210 0602 D0060000 		.4byte	.LASF98
 6211 0606 01       		.byte	0x1
 6212 0607 0303     		.2byte	0x303
 6213 0609 00000000 		.4byte	.LFB92
 6214 060d B8000000 		.4byte	.LFE92-.LFB92
 6215 0611 01       		.uleb128 0x1
 6216 0612 9C       		.byte	0x9c
 6217 0613 27060000 		.4byte	0x627
 6218 0617 14       		.uleb128 0x14
 6219 0618 4D050000 		.4byte	.LASF99
 6220 061c 01       		.byte	0x1
 6221 061d 0403     		.2byte	0x304
 6222 061f 8E000000 		.4byte	0x8e
 6223 0623 02       		.uleb128 0x2
 6224 0624 91       		.byte	0x91
 6225 0625 6F       		.sleb128 -17
 6226 0626 00       		.byte	0
 6227 0627 17       		.uleb128 0x17
 6228 0628 F2050000 		.4byte	.LASF100
 6229 062c 01       		.byte	0x1
 6230 062d 2003     		.2byte	0x320
 6231 062f 00000000 		.4byte	.LFB93
 6232 0633 B8050000 		.4byte	.LFE93-.LFB93
 6233 0637 01       		.uleb128 0x1
 6234 0638 9C       		.byte	0x9c
 6235 0639 8F060000 		.4byte	0x68f
 6236 063d 14       		.uleb128 0x14
 6237 063e 4D050000 		.4byte	.LASF99
 6238 0642 01       		.byte	0x1
 6239 0643 2203     		.2byte	0x322
 6240 0645 8E000000 		.4byte	0x8e
 6241 0649 02       		.uleb128 0x2
 6242 064a 91       		.byte	0x91
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 133


 6243 064b 77       		.sleb128 -9
 6244 064c 12       		.uleb128 0x12
 6245 064d 4C010000 		.4byte	.LBB9
 6246 0651 3E040000 		.4byte	.LBE9-.LBB9
 6247 0655 15       		.uleb128 0x15
 6248 0656 6D657300 		.ascii	"mes\000"
 6249 065a 01       		.byte	0x1
 6250 065b 4803     		.2byte	0x348
 6251 065d C0030000 		.4byte	0x3c0
 6252 0661 02       		.uleb128 0x2
 6253 0662 91       		.byte	0x91
 6254 0663 48       		.sleb128 -56
 6255 0664 15       		.uleb128 0x15
 6256 0665 6900     		.ascii	"i\000"
 6257 0667 01       		.byte	0x1
 6258 0668 7503     		.2byte	0x375
 6259 066a 73000000 		.4byte	0x73
 6260 066e 02       		.uleb128 0x2
 6261 066f 91       		.byte	0x91
 6262 0670 70       		.sleb128 -16
 6263 0671 14       		.uleb128 0x14
 6264 0672 A5040000 		.4byte	.LASF69
 6265 0676 01       		.byte	0x1
 6266 0677 8703     		.2byte	0x387
 6267 0679 8E000000 		.4byte	0x8e
 6268 067d 02       		.uleb128 0x2
 6269 067e 91       		.byte	0x91
 6270 067f 6B       		.sleb128 -21
 6271 0680 15       		.uleb128 0x15
 6272 0681 7800     		.ascii	"x\000"
 6273 0683 01       		.byte	0x1
 6274 0684 AF03     		.2byte	0x3af
 6275 0686 73000000 		.4byte	0x73
 6276 068a 02       		.uleb128 0x2
 6277 068b 91       		.byte	0x91
 6278 068c 6C       		.sleb128 -20
 6279 068d 00       		.byte	0
 6280 068e 00       		.byte	0
 6281 068f 1B       		.uleb128 0x1b
 6282 0690 C5020000 		.4byte	.LASF101
 6283 0694 01       		.byte	0x1
 6284 0695 D803     		.2byte	0x3d8
 6285 0697 00000000 		.4byte	.LFB94
 6286 069b 40000000 		.4byte	.LFE94-.LFB94
 6287 069f 01       		.uleb128 0x1
 6288 06a0 9C       		.byte	0x9c
 6289 06a1 1B       		.uleb128 0x1b
 6290 06a2 59020000 		.4byte	.LASF102
 6291 06a6 01       		.byte	0x1
 6292 06a7 E703     		.2byte	0x3e7
 6293 06a9 00000000 		.4byte	.LFB95
 6294 06ad 40000000 		.4byte	.LFE95-.LFB95
 6295 06b1 01       		.uleb128 0x1
 6296 06b2 9C       		.byte	0x9c
 6297 06b3 19       		.uleb128 0x19
 6298 06b4 98000000 		.4byte	.LASF103
 6299 06b8 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 134


 6300 06b9 F703     		.2byte	0x3f7
 6301 06bb 00000000 		.4byte	.LFB96
 6302 06bf 30020000 		.4byte	.LFE96-.LFB96
 6303 06c3 01       		.uleb128 0x1
 6304 06c4 9C       		.byte	0x9c
 6305 06c5 24070000 		.4byte	0x724
 6306 06c9 14       		.uleb128 0x14
 6307 06ca 0D030000 		.4byte	.LASF104
 6308 06ce 01       		.byte	0x1
 6309 06cf 0504     		.2byte	0x405
 6310 06d1 DB000000 		.4byte	0xdb
 6311 06d5 02       		.uleb128 0x2
 6312 06d6 91       		.byte	0x91
 6313 06d7 5E       		.sleb128 -34
 6314 06d8 14       		.uleb128 0x14
 6315 06d9 6B050000 		.4byte	.LASF105
 6316 06dd 01       		.byte	0x1
 6317 06de 0604     		.2byte	0x406
 6318 06e0 DB000000 		.4byte	0xdb
 6319 06e4 02       		.uleb128 0x2
 6320 06e5 91       		.byte	0x91
 6321 06e6 5C       		.sleb128 -36
 6322 06e7 14       		.uleb128 0x14
 6323 06e8 A9030000 		.4byte	.LASF106
 6324 06ec 01       		.byte	0x1
 6325 06ed 0704     		.2byte	0x407
 6326 06ef EE000000 		.4byte	0xee
 6327 06f3 02       		.uleb128 0x2
 6328 06f4 91       		.byte	0x91
 6329 06f5 68       		.sleb128 -24
 6330 06f6 14       		.uleb128 0x14
 6331 06f7 6E090000 		.4byte	.LASF107
 6332 06fb 01       		.byte	0x1
 6333 06fc 0804     		.2byte	0x408
 6334 06fe EE000000 		.4byte	0xee
 6335 0702 02       		.uleb128 0x2
 6336 0703 91       		.byte	0x91
 6337 0704 60       		.sleb128 -32
 6338 0705 14       		.uleb128 0x14
 6339 0706 4B040000 		.4byte	.LASF108
 6340 070a 01       		.byte	0x1
 6341 070b 1104     		.2byte	0x411
 6342 070d 73000000 		.4byte	0x73
 6343 0711 02       		.uleb128 0x2
 6344 0712 91       		.byte	0x91
 6345 0713 58       		.sleb128 -40
 6346 0714 14       		.uleb128 0x14
 6347 0715 16090000 		.4byte	.LASF109
 6348 0719 01       		.byte	0x1
 6349 071a 1204     		.2byte	0x412
 6350 071c 73000000 		.4byte	0x73
 6351 0720 02       		.uleb128 0x2
 6352 0721 91       		.byte	0x91
 6353 0722 54       		.sleb128 -44
 6354 0723 00       		.byte	0
 6355 0724 1C       		.uleb128 0x1c
 6356 0725 C2050000 		.4byte	.LASF110
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 135


 6357 0729 01       		.byte	0x1
 6358 072a 2004     		.2byte	0x420
 6359 072c 00000000 		.4byte	.LFB97
 6360 0730 0C000000 		.4byte	.LFE97-.LFB97
 6361 0734 01       		.uleb128 0x1
 6362 0735 9C       		.byte	0x9c
 6363 0736 19       		.uleb128 0x19
 6364 0737 8A010000 		.4byte	.LASF111
 6365 073b 01       		.byte	0x1
 6366 073c 2604     		.2byte	0x426
 6367 073e 00000000 		.4byte	.LFB98
 6368 0742 4C010000 		.4byte	.LFE98-.LFB98
 6369 0746 01       		.uleb128 0x1
 6370 0747 9C       		.byte	0x9c
 6371 0748 78070000 		.4byte	0x778
 6372 074c 15       		.uleb128 0x15
 6373 074d 6E6C00   		.ascii	"nl\000"
 6374 0750 01       		.byte	0x1
 6375 0751 2A04     		.2byte	0x42a
 6376 0753 AB000000 		.4byte	0xab
 6377 0757 02       		.uleb128 0x2
 6378 0758 91       		.byte	0x91
 6379 0759 67       		.sleb128 -25
 6380 075a 15       		.uleb128 0x15
 6381 075b 6E7200   		.ascii	"nr\000"
 6382 075e 01       		.byte	0x1
 6383 075f 2B04     		.2byte	0x42b
 6384 0761 AB000000 		.4byte	0xab
 6385 0765 02       		.uleb128 0x2
 6386 0766 91       		.byte	0x91
 6387 0767 66       		.sleb128 -26
 6388 0768 15       		.uleb128 0x15
 6389 0769 6D696400 		.ascii	"mid\000"
 6390 076d 01       		.byte	0x1
 6391 076e 2C04     		.2byte	0x42c
 6392 0770 AB000000 		.4byte	0xab
 6393 0774 02       		.uleb128 0x2
 6394 0775 91       		.byte	0x91
 6395 0776 65       		.sleb128 -27
 6396 0777 00       		.byte	0
 6397 0778 1C       		.uleb128 0x1c
 6398 0779 6F010000 		.4byte	.LASF112
 6399 077d 01       		.byte	0x1
 6400 077e 4604     		.2byte	0x446
 6401 0780 00000000 		.4byte	.LFB99
 6402 0784 0C000000 		.4byte	.LFE99-.LFB99
 6403 0788 01       		.uleb128 0x1
 6404 0789 9C       		.byte	0x9c
 6405 078a 19       		.uleb128 0x19
 6406 078b 9F030000 		.4byte	.LASF113
 6407 078f 01       		.byte	0x1
 6408 0790 4B04     		.2byte	0x44b
 6409 0792 00000000 		.4byte	.LFB100
 6410 0796 C0000000 		.4byte	.LFE100-.LFB100
 6411 079a 01       		.uleb128 0x1
 6412 079b 9C       		.byte	0x9c
 6413 079c D8070000 		.4byte	0x7d8
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 136


 6414 07a0 12       		.uleb128 0x12
 6415 07a1 0E000000 		.4byte	.LBB10
 6416 07a5 8E000000 		.4byte	.LBE10-.LBB10
 6417 07a9 14       		.uleb128 0x14
 6418 07aa FF020000 		.4byte	.LASF114
 6419 07ae 01       		.byte	0x1
 6420 07af 5404     		.2byte	0x454
 6421 07b1 E7000000 		.4byte	0xe7
 6422 07b5 02       		.uleb128 0x2
 6423 07b6 91       		.byte	0x91
 6424 07b7 74       		.sleb128 -12
 6425 07b8 14       		.uleb128 0x14
 6426 07b9 A9050000 		.4byte	.LASF115
 6427 07bd 01       		.byte	0x1
 6428 07be 5504     		.2byte	0x455
 6429 07c0 DB000000 		.4byte	0xdb
 6430 07c4 02       		.uleb128 0x2
 6431 07c5 91       		.byte	0x91
 6432 07c6 72       		.sleb128 -14
 6433 07c7 14       		.uleb128 0x14
 6434 07c8 62030000 		.4byte	.LASF116
 6435 07cc 01       		.byte	0x1
 6436 07cd 5A04     		.2byte	0x45a
 6437 07cf D8070000 		.4byte	0x7d8
 6438 07d3 02       		.uleb128 0x2
 6439 07d4 91       		.byte	0x91
 6440 07d5 60       		.sleb128 -32
 6441 07d6 00       		.byte	0
 6442 07d7 00       		.byte	0
 6443 07d8 07       		.uleb128 0x7
 6444 07d9 8E000000 		.4byte	0x8e
 6445 07dd E8070000 		.4byte	0x7e8
 6446 07e1 08       		.uleb128 0x8
 6447 07e2 81000000 		.4byte	0x81
 6448 07e6 0F       		.byte	0xf
 6449 07e7 00       		.byte	0
 6450 07e8 19       		.uleb128 0x19
 6451 07e9 57090000 		.4byte	.LASF117
 6452 07ed 01       		.byte	0x1
 6453 07ee 6104     		.2byte	0x461
 6454 07f0 00000000 		.4byte	.LFB101
 6455 07f4 B8000000 		.4byte	.LFE101-.LFB101
 6456 07f8 01       		.uleb128 0x1
 6457 07f9 9C       		.byte	0x9c
 6458 07fa 18080000 		.4byte	0x818
 6459 07fe 12       		.uleb128 0x12
 6460 07ff 0E000000 		.4byte	.LBB11
 6461 0803 86000000 		.4byte	.LBE11-.LBB11
 6462 0807 14       		.uleb128 0x14
 6463 0808 C4060000 		.4byte	.LASF118
 6464 080c 01       		.byte	0x1
 6465 080d 6504     		.2byte	0x465
 6466 080f D8070000 		.4byte	0x7d8
 6467 0813 02       		.uleb128 0x2
 6468 0814 91       		.byte	0x91
 6469 0815 68       		.sleb128 -24
 6470 0816 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 137


 6471 0817 00       		.byte	0
 6472 0818 17       		.uleb128 0x17
 6473 0819 63070000 		.4byte	.LASF119
 6474 081d 01       		.byte	0x1
 6475 081e 7604     		.2byte	0x476
 6476 0820 00000000 		.4byte	.LFB102
 6477 0824 4A000000 		.4byte	.LFE102-.LFB102
 6478 0828 01       		.uleb128 0x1
 6479 0829 9C       		.byte	0x9c
 6480 082a 3E080000 		.4byte	0x83e
 6481 082e 1A       		.uleb128 0x1a
 6482 082f 57030000 		.4byte	.LASF120
 6483 0833 01       		.byte	0x1
 6484 0834 7604     		.2byte	0x476
 6485 0836 3E080000 		.4byte	0x83e
 6486 083a 02       		.uleb128 0x2
 6487 083b 91       		.byte	0x91
 6488 083c 6C       		.sleb128 -20
 6489 083d 00       		.byte	0
 6490 083e 05       		.uleb128 0x5
 6491 083f 04       		.byte	0x4
 6492 0840 AB000000 		.4byte	0xab
 6493 0844 17       		.uleb128 0x17
 6494 0845 3C070000 		.4byte	.LASF121
 6495 0849 01       		.byte	0x1
 6496 084a 8104     		.2byte	0x481
 6497 084c 00000000 		.4byte	.LFB103
 6498 0850 68000000 		.4byte	.LFE103-.LFB103
 6499 0854 01       		.uleb128 0x1
 6500 0855 9C       		.byte	0x9c
 6501 0856 81080000 		.4byte	0x881
 6502 085a 18       		.uleb128 0x18
 6503 085b 7300     		.ascii	"s\000"
 6504 085d 01       		.byte	0x1
 6505 085e 8104     		.2byte	0x481
 6506 0860 88000000 		.4byte	0x88
 6507 0864 02       		.uleb128 0x2
 6508 0865 91       		.byte	0x91
 6509 0866 6C       		.sleb128 -20
 6510 0867 12       		.uleb128 0x12
 6511 0868 10000000 		.4byte	.LBB12
 6512 086c 48000000 		.4byte	.LBE12-.LBB12
 6513 0870 15       		.uleb128 0x15
 6514 0871 636E7400 		.ascii	"cnt\000"
 6515 0875 01       		.byte	0x1
 6516 0876 8804     		.2byte	0x488
 6517 0878 C3000000 		.4byte	0xc3
 6518 087c 02       		.uleb128 0x2
 6519 087d 91       		.byte	0x91
 6520 087e 74       		.sleb128 -12
 6521 087f 00       		.byte	0
 6522 0880 00       		.byte	0
 6523 0881 17       		.uleb128 0x17
 6524 0882 C2080000 		.4byte	.LASF122
 6525 0886 01       		.byte	0x1
 6526 0887 9704     		.2byte	0x497
 6527 0889 00000000 		.4byte	.LFB104
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 138


 6528 088d 50000000 		.4byte	.LFE104-.LFB104
 6529 0891 01       		.uleb128 0x1
 6530 0892 9C       		.byte	0x9c
 6531 0893 BE080000 		.4byte	0x8be
 6532 0897 18       		.uleb128 0x18
 6533 0898 6300     		.ascii	"c\000"
 6534 089a 01       		.byte	0x1
 6535 089b 9704     		.2byte	0x497
 6536 089d 8E000000 		.4byte	0x8e
 6537 08a1 02       		.uleb128 0x2
 6538 08a2 91       		.byte	0x91
 6539 08a3 6F       		.sleb128 -17
 6540 08a4 12       		.uleb128 0x12
 6541 08a5 12000000 		.4byte	.LBB13
 6542 08a9 2E000000 		.4byte	.LBE13-.LBB13
 6543 08ad 15       		.uleb128 0x15
 6544 08ae 636E7400 		.ascii	"cnt\000"
 6545 08b2 01       		.byte	0x1
 6546 08b3 9B04     		.2byte	0x49b
 6547 08b5 C3000000 		.4byte	0xc3
 6548 08b9 02       		.uleb128 0x2
 6549 08ba 91       		.byte	0x91
 6550 08bb 74       		.sleb128 -12
 6551 08bc 00       		.byte	0
 6552 08bd 00       		.byte	0
 6553 08be 1C       		.uleb128 0x1c
 6554 08bf 6D030000 		.4byte	.LASF123
 6555 08c3 01       		.byte	0x1
 6556 08c4 A804     		.2byte	0x4a8
 6557 08c6 00000000 		.4byte	.LFB105
 6558 08ca 0C000000 		.4byte	.LFE105-.LFB105
 6559 08ce 01       		.uleb128 0x1
 6560 08cf 9C       		.byte	0x9c
 6561 08d0 1D       		.uleb128 0x1d
 6562 08d1 B7060000 		.4byte	.LASF124
 6563 08d5 06       		.byte	0x6
 6564 08d6 9606     		.2byte	0x696
 6565 08d8 DC080000 		.4byte	0x8dc
 6566 08dc 1E       		.uleb128 0x1e
 6567 08dd 95000000 		.4byte	0x95
 6568 08e1 1F       		.uleb128 0x1f
 6569 08e2 747300   		.ascii	"ts\000"
 6570 08e5 05       		.byte	0x5
 6571 08e6 10       		.byte	0x10
 6572 08e7 AB000000 		.4byte	0xab
 6573 08eb 05       		.uleb128 0x5
 6574 08ec 03       		.byte	0x3
 6575 08ed 00000000 		.4byte	ts
 6576 08f1 20       		.uleb128 0x20
 6577 08f2 44080000 		.4byte	.LASF125
 6578 08f6 05       		.byte	0x5
 6579 08f7 11       		.byte	0x11
 6580 08f8 B7000000 		.4byte	0xb7
 6581 08fc 05       		.uleb128 0x5
 6582 08fd 03       		.byte	0x3
 6583 08fe 00000000 		.4byte	ts_enc
 6584 0902 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 139


 6585 0903 D6060000 		.4byte	.LASF126
 6586 0907 05       		.byte	0x5
 6587 0908 12       		.byte	0x12
 6588 0909 B7000000 		.4byte	0xb7
 6589 090d 05       		.uleb128 0x5
 6590 090e 03       		.byte	0x3
 6591 090f 00000000 		.4byte	ts_update
 6592 0913 20       		.uleb128 0x20
 6593 0914 76050000 		.4byte	.LASF127
 6594 0918 05       		.byte	0x5
 6595 0919 13       		.byte	0x13
 6596 091a B7000000 		.4byte	0xb7
 6597 091e 05       		.uleb128 0x5
 6598 091f 03       		.byte	0x3
 6599 0920 00000000 		.4byte	ts_speed
 6600 0924 20       		.uleb128 0x20
 6601 0925 94030000 		.4byte	.LASF128
 6602 0929 05       		.byte	0x5
 6603 092a 14       		.byte	0x14
 6604 092b B7000000 		.4byte	0xb7
 6605 092f 05       		.uleb128 0x5
 6606 0930 03       		.byte	0x3
 6607 0931 00000000 		.4byte	ts_display
 6608 0935 20       		.uleb128 0x20
 6609 0936 17030000 		.4byte	.LASF129
 6610 093a 05       		.byte	0x5
 6611 093b 16       		.byte	0x16
 6612 093c AB000000 		.4byte	0xab
 6613 0940 05       		.uleb128 0x5
 6614 0941 03       		.byte	0x3
 6615 0942 00000000 		.4byte	flag_ts_enc
 6616 0946 20       		.uleb128 0x20
 6617 0947 F0020000 		.4byte	.LASF130
 6618 094b 05       		.byte	0x5
 6619 094c 17       		.byte	0x17
 6620 094d AB000000 		.4byte	0xab
 6621 0951 05       		.uleb128 0x5
 6622 0952 03       		.byte	0x3
 6623 0953 00000000 		.4byte	flag_ts_update
 6624 0957 20       		.uleb128 0x20
 6625 0958 31060000 		.4byte	.LASF131
 6626 095c 05       		.byte	0x5
 6627 095d 18       		.byte	0x18
 6628 095e AB000000 		.4byte	0xab
 6629 0962 05       		.uleb128 0x5
 6630 0963 03       		.byte	0x3
 6631 0964 00000000 		.4byte	flag_ts_speed
 6632 0968 20       		.uleb128 0x20
 6633 0969 55080000 		.4byte	.LASF132
 6634 096d 05       		.byte	0x5
 6635 096e 19       		.byte	0x19
 6636 096f AB000000 		.4byte	0xab
 6637 0973 05       		.uleb128 0x5
 6638 0974 03       		.byte	0x3
 6639 0975 00000000 		.4byte	flag_ts_display
 6640 0979 20       		.uleb128 0x20
 6641 097a 5C060000 		.4byte	.LASF133
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 140


 6642 097e 05       		.byte	0x5
 6643 097f 1C       		.byte	0x1c
 6644 0980 AB000000 		.4byte	0xab
 6645 0984 05       		.uleb128 0x5
 6646 0985 03       		.byte	0x3
 6647 0986 00000000 		.4byte	flag_rx
 6648 098a 20       		.uleb128 0x20
 6649 098b 9D020000 		.4byte	.LASF134
 6650 098f 05       		.byte	0x5
 6651 0990 1D       		.byte	0x1d
 6652 0991 AB000000 		.4byte	0xab
 6653 0995 05       		.uleb128 0x5
 6654 0996 03       		.byte	0x3
 6655 0997 00000000 		.4byte	flag_packet
 6656 099b 20       		.uleb128 0x20
 6657 099c 7B090000 		.4byte	.LASF135
 6658 09a0 05       		.byte	0x5
 6659 09a1 1E       		.byte	0x1e
 6660 09a2 AB000000 		.4byte	0xab
 6661 09a6 05       		.uleb128 0x5
 6662 09a7 03       		.byte	0x3
 6663 09a8 00000000 		.4byte	flag_KB_string
 6664 09ac 20       		.uleb128 0x20
 6665 09ad 3F060000 		.4byte	.LASF136
 6666 09b1 05       		.byte	0x5
 6667 09b2 20       		.byte	0x20
 6668 09b3 AB000000 		.4byte	0xab
 6669 09b7 05       		.uleb128 0x5
 6670 09b8 03       		.byte	0x3
 6671 09b9 00000000 		.4byte	dataready_flag
 6672 09bd 20       		.uleb128 0x20
 6673 09be B6010000 		.4byte	.LASF137
 6674 09c2 05       		.byte	0x5
 6675 09c3 22       		.byte	0x22
 6676 09c4 AB000000 		.4byte	0xab
 6677 09c8 05       		.uleb128 0x5
 6678 09c9 03       		.byte	0x3
 6679 09ca 00000000 		.4byte	flag_rf_transmission_active
 6680 09ce 20       		.uleb128 0x20
 6681 09cf D2010000 		.4byte	.LASF138
 6682 09d3 05       		.byte	0x5
 6683 09d4 23       		.byte	0x23
 6684 09d5 AB000000 		.4byte	0xab
 6685 09d9 05       		.uleb128 0x5
 6686 09da 03       		.byte	0x3
 6687 09db 00000000 		.4byte	flag_print_rf
 6688 09df 20       		.uleb128 0x20
 6689 09e0 D9050000 		.4byte	.LASF139
 6690 09e4 05       		.byte	0x5
 6691 09e5 25       		.byte	0x25
 6692 09e6 AB000000 		.4byte	0xab
 6693 09ea 05       		.uleb128 0x5
 6694 09eb 03       		.byte	0x3
 6695 09ec 00000000 		.4byte	flag_receive_ADC
 6696 09f0 20       		.uleb128 0x20
 6697 09f1 6E060000 		.4byte	.LASF140
 6698 09f5 05       		.byte	0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 141


 6699 09f6 26       		.byte	0x26
 6700 09f7 DB000000 		.4byte	0xdb
 6701 09fb 05       		.uleb128 0x5
 6702 09fc 03       		.byte	0x3
 6703 09fd 00000000 		.4byte	adc_result
 6704 0a01 20       		.uleb128 0x20
 6705 0a02 00000000 		.4byte	.LASF141
 6706 0a06 05       		.byte	0x5
 6707 0a07 28       		.byte	0x28
 6708 0a08 AB000000 		.4byte	0xab
 6709 0a0c 05       		.uleb128 0x5
 6710 0a0d 03       		.byte	0x3
 6711 0a0e 00000000 		.4byte	direction
 6712 0a12 20       		.uleb128 0x20
 6713 0a13 5F050000 		.4byte	.LASF142
 6714 0a17 05       		.byte	0x5
 6715 0a18 2B       		.byte	0x2b
 6716 0a19 AB000000 		.4byte	0xab
 6717 0a1d 05       		.uleb128 0x5
 6718 0a1e 03       		.byte	0x3
 6719 0a1f 00000000 		.4byte	BIN_ENABLED
 6720 0a23 20       		.uleb128 0x20
 6721 0a24 55040000 		.4byte	.LASF143
 6722 0a28 05       		.byte	0x5
 6723 0a29 2D       		.byte	0x2d
 6724 0a2a AB000000 		.4byte	0xab
 6725 0a2e 05       		.uleb128 0x5
 6726 0a2f 03       		.byte	0x3
 6727 0a30 00000000 		.4byte	BT_ENABLED
 6728 0a34 20       		.uleb128 0x20
 6729 0a35 83060000 		.4byte	.LASF144
 6730 0a39 05       		.byte	0x5
 6731 0a3a 32       		.byte	0x32
 6732 0a3b AB000000 		.4byte	0xab
 6733 0a3f 05       		.uleb128 0x5
 6734 0a40 03       		.byte	0x3
 6735 0a41 00000000 		.4byte	flag_calc_wheelspeed
 6736 0a45 20       		.uleb128 0x20
 6737 0a46 57010000 		.4byte	.LASF145
 6738 0a4a 05       		.byte	0x5
 6739 0a4b 33       		.byte	0x33
 6740 0a4c DB000000 		.4byte	0xdb
 6741 0a50 05       		.uleb128 0x5
 6742 0a51 03       		.byte	0x3
 6743 0a52 00000000 		.4byte	quad_count1
 6744 0a56 20       		.uleb128 0x20
 6745 0a57 63010000 		.4byte	.LASF146
 6746 0a5b 05       		.byte	0x5
 6747 0a5c 34       		.byte	0x34
 6748 0a5d DB000000 		.4byte	0xdb
 6749 0a61 05       		.uleb128 0x5
 6750 0a62 03       		.byte	0x3
 6751 0a63 00000000 		.4byte	quad_count2
 6752 0a67 20       		.uleb128 0x20
 6753 0a68 94080000 		.4byte	.LASF147
 6754 0a6c 05       		.byte	0x5
 6755 0a6d 35       		.byte	0x35
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 142


 6756 0a6e DB000000 		.4byte	0xdb
 6757 0a72 05       		.uleb128 0x5
 6758 0a73 03       		.byte	0x3
 6759 0a74 00000000 		.4byte	last_quad_count1
 6760 0a78 20       		.uleb128 0x20
 6761 0a79 A5080000 		.4byte	.LASF148
 6762 0a7d 05       		.byte	0x5
 6763 0a7e 36       		.byte	0x36
 6764 0a7f DB000000 		.4byte	0xdb
 6765 0a83 05       		.uleb128 0x5
 6766 0a84 03       		.byte	0x3
 6767 0a85 00000000 		.4byte	last_quad_count2
 6768 0a89 20       		.uleb128 0x20
 6769 0a8a 82000000 		.4byte	.LASF149
 6770 0a8e 05       		.byte	0x5
 6771 0a8f 37       		.byte	0x37
 6772 0a90 DB000000 		.4byte	0xdb
 6773 0a94 05       		.uleb128 0x5
 6774 0a95 03       		.byte	0x3
 6775 0a96 00000000 		.4byte	quad_diff1
 6776 0a9a 20       		.uleb128 0x20
 6777 0a9b 8D000000 		.4byte	.LASF150
 6778 0a9f 05       		.byte	0x5
 6779 0aa0 38       		.byte	0x38
 6780 0aa1 DB000000 		.4byte	0xdb
 6781 0aa5 05       		.uleb128 0x5
 6782 0aa6 03       		.byte	0x3
 6783 0aa7 00000000 		.4byte	quad_diff2
 6784 0aab 20       		.uleb128 0x20
 6785 0aac E9060000 		.4byte	.LASF151
 6786 0ab0 05       		.byte	0x5
 6787 0ab1 39       		.byte	0x39
 6788 0ab2 AB000000 		.4byte	0xab
 6789 0ab6 05       		.uleb128 0x5
 6790 0ab7 03       		.byte	0x3
 6791 0ab8 00000000 		.4byte	deadzone
 6792 0abc 20       		.uleb128 0x20
 6793 0abd B6000000 		.4byte	.LASF152
 6794 0ac1 05       		.byte	0x5
 6795 0ac2 3C       		.byte	0x3c
 6796 0ac3 DB000000 		.4byte	0xdb
 6797 0ac7 05       		.uleb128 0x5
 6798 0ac8 03       		.byte	0x3
 6799 0ac9 00000000 		.4byte	start_turn_count
 6800 0acd 20       		.uleb128 0x20
 6801 0ace 14060000 		.4byte	.LASF153
 6802 0ad2 05       		.byte	0x5
 6803 0ad3 3F       		.byte	0x3f
 6804 0ad4 DB000000 		.4byte	0xdb
 6805 0ad8 05       		.uleb128 0x5
 6806 0ad9 03       		.byte	0x3
 6807 0ada 00000000 		.4byte	left_duty_cycle
 6808 0ade 20       		.uleb128 0x20
 6809 0adf 2D090000 		.4byte	.LASF154
 6810 0ae3 05       		.byte	0x5
 6811 0ae4 40       		.byte	0x40
 6812 0ae5 DB000000 		.4byte	0xdb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 143


 6813 0ae9 05       		.uleb128 0x5
 6814 0aea 03       		.byte	0x3
 6815 0aeb 00000000 		.4byte	right_duty_cycle
 6816 0aef 20       		.uleb128 0x20
 6817 0af0 F2060000 		.4byte	.LASF155
 6818 0af4 05       		.byte	0x5
 6819 0af5 43       		.byte	0x43
 6820 0af6 DB000000 		.4byte	0xdb
 6821 0afa 05       		.uleb128 0x5
 6822 0afb 03       		.byte	0x3
 6823 0afc 00000000 		.4byte	leftSpeedLimit
 6824 0b00 20       		.uleb128 0x20
 6825 0b01 C3030000 		.4byte	.LASF156
 6826 0b05 05       		.byte	0x5
 6827 0b06 44       		.byte	0x44
 6828 0b07 DB000000 		.4byte	0xdb
 6829 0b0b 05       		.uleb128 0x5
 6830 0b0c 03       		.byte	0x3
 6831 0b0d 00000000 		.4byte	rightSpeedLimit
 6832 0b11 20       		.uleb128 0x20
 6833 0b12 80070000 		.4byte	.LASF157
 6834 0b16 05       		.byte	0x5
 6835 0b17 47       		.byte	0x47
 6836 0b18 DB000000 		.4byte	0xdb
 6837 0b1c 05       		.uleb128 0x5
 6838 0b1d 03       		.byte	0x3
 6839 0b1e 00000000 		.4byte	target_distance_cm
 6840 0b22 20       		.uleb128 0x20
 6841 0b23 31070000 		.4byte	.LASF158
 6842 0b27 05       		.byte	0x5
 6843 0b28 49       		.byte	0x49
 6844 0b29 DB000000 		.4byte	0xdb
 6845 0b2d 05       		.uleb128 0x5
 6846 0b2e 03       		.byte	0x3
 6847 0b2f 00000000 		.4byte	accum_dist
 6848 0b33 20       		.uleb128 0x20
 6849 0b34 02010000 		.4byte	.LASF159
 6850 0b38 05       		.byte	0x5
 6851 0b39 4A       		.byte	0x4a
 6852 0b3a DB000000 		.4byte	0xdb
 6853 0b3e 05       		.uleb128 0x5
 6854 0b3f 03       		.byte	0x3
 6855 0b40 00000000 		.4byte	target_distance_quad
 6856 0b44 20       		.uleb128 0x20
 6857 0b45 28080000 		.4byte	.LASF160
 6858 0b49 05       		.byte	0x5
 6859 0b4a 4B       		.byte	0x4b
 6860 0b4b AB000000 		.4byte	0xab
 6861 0b4f 05       		.uleb128 0x5
 6862 0b50 03       		.byte	0x3
 6863 0b51 00000000 		.4byte	reached_target
 6864 0b55 20       		.uleb128 0x20
 6865 0b56 1C070000 		.4byte	.LASF161
 6866 0b5a 05       		.byte	0x5
 6867 0b5b 4C       		.byte	0x4c
 6868 0b5c AB000000 		.4byte	0xab
 6869 0b60 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 144


 6870 0b61 03       		.byte	0x3
 6871 0b62 00000000 		.4byte	overshot_target
 6872 0b66 20       		.uleb128 0x20
 6873 0b67 74070000 		.4byte	.LASF162
 6874 0b6b 05       		.byte	0x5
 6875 0b6c 4D       		.byte	0x4d
 6876 0b6d E7000000 		.4byte	0xe7
 6877 0b71 05       		.uleb128 0x5
 6878 0b72 03       		.byte	0x3
 6879 0b73 00000000 		.4byte	quad_per_cm
 6880 0b77 20       		.uleb128 0x20
 6881 0b78 66040000 		.4byte	.LASF163
 6882 0b7c 05       		.byte	0x5
 6883 0b7d 50       		.byte	0x50
 6884 0b7e AB000000 		.4byte	0xab
 6885 0b82 05       		.uleb128 0x5
 6886 0b83 03       		.byte	0x3
 6887 0b84 00000000 		.4byte	initial_pos_valid
 6888 0b88 20       		.uleb128 0x20
 6889 0b89 9C090000 		.4byte	.LASF164
 6890 0b8d 05       		.byte	0x5
 6891 0b8e 51       		.byte	0x51
 6892 0b8f DB000000 		.4byte	0xdb
 6893 0b93 05       		.uleb128 0x5
 6894 0b94 03       		.byte	0x3
 6895 0b95 00000000 		.4byte	initial_x_pos
 6896 0b99 20       		.uleb128 0x20
 6897 0b9a 4E060000 		.4byte	.LASF165
 6898 0b9e 05       		.byte	0x5
 6899 0b9f 52       		.byte	0x52
 6900 0ba0 DB000000 		.4byte	0xdb
 6901 0ba4 05       		.uleb128 0x5
 6902 0ba5 03       		.byte	0x3
 6903 0ba6 00000000 		.4byte	initial_y_pos
 6904 0baa 20       		.uleb128 0x20
 6905 0bab 4B080000 		.4byte	.LASF166
 6906 0baf 05       		.byte	0x5
 6907 0bb0 55       		.byte	0x55
 6908 0bb1 AB000000 		.4byte	0xab
 6909 0bb5 05       		.uleb128 0x5
 6910 0bb6 03       		.byte	0x3
 6911 0bb7 00000000 		.4byte	brakeFlag
 6912 0bbb 20       		.uleb128 0x20
 6913 0bbc DD020000 		.4byte	.LASF167
 6914 0bc0 05       		.byte	0x5
 6915 0bc1 56       		.byte	0x56
 6916 0bc2 AB000000 		.4byte	0xab
 6917 0bc6 05       		.uleb128 0x5
 6918 0bc7 03       		.byte	0x3
 6919 0bc8 00000000 		.4byte	portOpen
 6920 0bcc 07       		.uleb128 0x7
 6921 0bcd AB000000 		.4byte	0xab
 6922 0bd1 DC0B0000 		.4byte	0xbdc
 6923 0bd5 08       		.uleb128 0x8
 6924 0bd6 81000000 		.4byte	0x81
 6925 0bda 04       		.byte	0x4
 6926 0bdb 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 145


 6927 0bdc 20       		.uleb128 0x20
 6928 0bdd A9020000 		.4byte	.LASF168
 6929 0be1 05       		.byte	0x5
 6930 0be2 59       		.byte	0x59
 6931 0be3 CC0B0000 		.4byte	0xbcc
 6932 0be7 05       		.uleb128 0x5
 6933 0be8 03       		.byte	0x3
 6934 0be9 00000000 		.4byte	frontSensors
 6935 0bed 20       		.uleb128 0x20
 6936 0bee DB070000 		.4byte	.LASF169
 6937 0bf2 05       		.byte	0x5
 6938 0bf3 5A       		.byte	0x5a
 6939 0bf4 AB000000 		.4byte	0xab
 6940 0bf8 05       		.uleb128 0x5
 6941 0bf9 03       		.byte	0x3
 6942 0bfa 00000000 		.4byte	leftOn
 6943 0bfe 20       		.uleb128 0x20
 6944 0bff 70000000 		.4byte	.LASF170
 6945 0c03 05       		.byte	0x5
 6946 0c04 5B       		.byte	0x5b
 6947 0c05 AB000000 		.4byte	0xab
 6948 0c09 05       		.uleb128 0x5
 6949 0c0a 03       		.byte	0x3
 6950 0c0b 00000000 		.4byte	rightOn
 6951 0c0f 20       		.uleb128 0x20
 6952 0c10 AA000000 		.4byte	.LASF171
 6953 0c14 05       		.byte	0x5
 6954 0c15 5F       		.byte	0x5f
 6955 0c16 DB000000 		.4byte	0xdb
 6956 0c1a 05       		.uleb128 0x5
 6957 0c1b 03       		.byte	0x3
 6958 0c1c 00000000 		.4byte	prevVoltage
 6959 0c20 20       		.uleb128 0x20
 6960 0c21 20010000 		.4byte	.LASF172
 6961 0c25 05       		.byte	0x5
 6962 0c26 60       		.byte	0x60
 6963 0c27 DB000000 		.4byte	0xdb
 6964 0c2b 05       		.uleb128 0x5
 6965 0c2c 03       		.byte	0x3
 6966 0c2d 00000000 		.4byte	prevVoltage2
 6967 0c31 07       		.uleb128 0x7
 6968 0c32 8E000000 		.4byte	0x8e
 6969 0c36 410C0000 		.4byte	0xc41
 6970 0c3a 08       		.uleb128 0x8
 6971 0c3b 81000000 		.4byte	0x81
 6972 0c3f 3F       		.byte	0x3f
 6973 0c40 00       		.byte	0
 6974 0c41 20       		.uleb128 0x20
 6975 0c42 86080000 		.4byte	.LASF173
 6976 0c46 05       		.byte	0x5
 6977 0c47 66       		.byte	0x66
 6978 0c48 310C0000 		.4byte	0xc31
 6979 0c4c 05       		.uleb128 0x5
 6980 0c4d 03       		.byte	0x3
 6981 0c4e 00000000 		.4byte	displaystring
 6982 0c52 20       		.uleb128 0x20
 6983 0c53 23080000 		.4byte	.LASF174
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 146


 6984 0c57 05       		.byte	0x5
 6985 0c58 67       		.byte	0x67
 6986 0c59 310C0000 		.4byte	0xc31
 6987 0c5d 05       		.uleb128 0x5
 6988 0c5e 03       		.byte	0x3
 6989 0c5f 00000000 		.4byte	line
 6990 0c63 20       		.uleb128 0x20
 6991 0c64 04080000 		.4byte	.LASF175
 6992 0c68 05       		.byte	0x5
 6993 0c69 67       		.byte	0x67
 6994 0c6a 310C0000 		.4byte	0xc31
 6995 0c6e 05       		.uleb128 0x5
 6996 0c6f 03       		.byte	0x3
 6997 0c70 00000000 		.4byte	entry
 6998 0c74 07       		.uleb128 0x7
 6999 0c75 AB000000 		.4byte	0xab
 7000 0c79 840C0000 		.4byte	0xc84
 7001 0c7d 08       		.uleb128 0x8
 7002 0c7e 81000000 		.4byte	0x81
 7003 0c82 3F       		.byte	0x3f
 7004 0c83 00       		.byte	0
 7005 0c84 20       		.uleb128 0x20
 7006 0c85 35020000 		.4byte	.LASF176
 7007 0c89 05       		.byte	0x5
 7008 0c8a 68       		.byte	0x68
 7009 0c8b 740C0000 		.4byte	0xc74
 7010 0c8f 05       		.uleb128 0x5
 7011 0c90 03       		.byte	0x3
 7012 0c91 00000000 		.4byte	usbBuffer
 7013 0c95 20       		.uleb128 0x20
 7014 0c96 86040000 		.4byte	.LASF177
 7015 0c9a 05       		.byte	0x5
 7016 0c9b 7D       		.byte	0x7d
 7017 0c9c 86010000 		.4byte	0x186
 7018 0ca0 05       		.uleb128 0x5
 7019 0ca1 03       		.byte	0x3
 7020 0ca2 00000000 		.4byte	buffer_state
 7021 0ca6 20       		.uleb128 0x20
 7022 0ca7 EF000000 		.4byte	.LASF178
 7023 0cab 05       		.byte	0x5
 7024 0cac 7E       		.byte	0x7e
 7025 0cad 86010000 		.4byte	0x186
 7026 0cb1 05       		.uleb128 0x5
 7027 0cb2 03       		.byte	0x3
 7028 0cb3 00000000 		.4byte	system_state
 7029 0cb7 20       		.uleb128 0x20
 7030 0cb8 43030000 		.4byte	.LASF179
 7031 0cbc 05       		.byte	0x5
 7032 0cbd 80       		.byte	0x80
 7033 0cbe 0C010000 		.4byte	0x10c
 7034 0cc2 05       		.uleb128 0x5
 7035 0cc3 03       		.byte	0x3
 7036 0cc4 00000000 		.4byte	prev_movement_state
 7037 0cc8 20       		.uleb128 0x20
 7038 0cc9 E0010000 		.4byte	.LASF180
 7039 0ccd 05       		.byte	0x5
 7040 0cce 81       		.byte	0x81
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 147


 7041 0ccf 0C010000 		.4byte	0x10c
 7042 0cd3 05       		.uleb128 0x5
 7043 0cd4 03       		.byte	0x3
 7044 0cd5 00000000 		.4byte	movement_state
 7045 0cd9 20       		.uleb128 0x20
 7046 0cda D4000000 		.4byte	.LASF181
 7047 0cde 05       		.byte	0x5
 7048 0cdf 82       		.byte	0x82
 7049 0ce0 49010000 		.4byte	0x149
 7050 0ce4 05       		.uleb128 0x5
 7051 0ce5 03       		.byte	0x3
 7052 0ce6 00000000 		.4byte	track_mode
 7053 0cea 20       		.uleb128 0x20
 7054 0ceb 23030000 		.4byte	.LASF182
 7055 0cef 05       		.byte	0x5
 7056 0cf0 84       		.byte	0x84
 7057 0cf1 AB000000 		.4byte	0xab
 7058 0cf5 05       		.uleb128 0x5
 7059 0cf6 03       		.byte	0x3
 7060 0cf7 00000000 		.4byte	byteCount
 7061 0cfb 07       		.uleb128 0x7
 7062 0cfc 8E000000 		.4byte	0x8e
 7063 0d00 0B0D0000 		.4byte	0xd0b
 7064 0d04 08       		.uleb128 0x8
 7065 0d05 81000000 		.4byte	0x81
 7066 0d09 01       		.byte	0x1
 7067 0d0a 00       		.byte	0
 7068 0d0b 20       		.uleb128 0x20
 7069 0d0c C2070000 		.4byte	.LASF183
 7070 0d10 05       		.byte	0x5
 7071 0d11 85       		.byte	0x85
 7072 0d12 FB0C0000 		.4byte	0xcfb
 7073 0d16 05       		.uleb128 0x5
 7074 0d17 03       		.byte	0x3
 7075 0d18 00000000 		.4byte	packet
 7076 0d1c 20       		.uleb128 0x20
 7077 0d1d A3010000 		.4byte	.LASF184
 7078 0d21 05       		.byte	0x5
 7079 0d22 89       		.byte	0x89
 7080 0d23 EE000000 		.4byte	0xee
 7081 0d27 05       		.uleb128 0x5
 7082 0d28 03       		.byte	0x3
 7083 0d29 00000000 		.4byte	speed
 7084 0d2d 20       		.uleb128 0x20
 7085 0d2e DE030000 		.4byte	.LASF185
 7086 0d32 01       		.byte	0x1
 7087 0d33 25       		.byte	0x25
 7088 0d34 B7000000 		.4byte	0xb7
 7089 0d38 05       		.uleb128 0x5
 7090 0d39 03       		.byte	0x3
 7091 0d3a 00000000 		.4byte	instructionCount
 7092 0d3e 20       		.uleb128 0x20
 7093 0d3f 2D010000 		.4byte	.LASF186
 7094 0d43 01       		.byte	0x1
 7095 0d44 27       		.byte	0x27
 7096 0d45 A0000000 		.4byte	0xa0
 7097 0d49 05       		.uleb128 0x5
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 148


 7098 0d4a 03       		.byte	0x3
 7099 0d4b 00000000 		.4byte	sensorsDisabled
 7100 0d4f 07       		.uleb128 0x7
 7101 0d50 A0000000 		.4byte	0xa0
 7102 0d54 650D0000 		.4byte	0xd65
 7103 0d58 08       		.uleb128 0x8
 7104 0d59 81000000 		.4byte	0x81
 7105 0d5d 0E       		.byte	0xe
 7106 0d5e 08       		.uleb128 0x8
 7107 0d5f 81000000 		.4byte	0x81
 7108 0d63 12       		.byte	0x12
 7109 0d64 00       		.byte	0
 7110 0d65 1F       		.uleb128 0x1f
 7111 0d66 6D617000 		.ascii	"map\000"
 7112 0d6a 01       		.byte	0x1
 7113 0d6b 43       		.byte	0x43
 7114 0d6c 4F0D0000 		.4byte	0xd4f
 7115 0d70 05       		.uleb128 0x5
 7116 0d71 03       		.byte	0x3
 7117 0d72 00000000 		.4byte	map
 7118 0d76 07       		.uleb128 0x7
 7119 0d77 A0000000 		.4byte	0xa0
 7120 0d7b 8C0D0000 		.4byte	0xd8c
 7121 0d7f 08       		.uleb128 0x8
 7122 0d80 81000000 		.4byte	0x81
 7123 0d84 05       		.byte	0x5
 7124 0d85 08       		.uleb128 0x8
 7125 0d86 81000000 		.4byte	0x81
 7126 0d8a 01       		.byte	0x1
 7127 0d8b 00       		.byte	0
 7128 0d8c 20       		.uleb128 0x20
 7129 0d8d 55050000 		.4byte	.LASF187
 7130 0d91 01       		.byte	0x1
 7131 0d92 64       		.byte	0x64
 7132 0d93 760D0000 		.4byte	0xd76
 7133 0d97 05       		.uleb128 0x5
 7134 0d98 03       		.byte	0x3
 7135 0d99 00000000 		.4byte	food_list
 7136 0d9d 07       		.uleb128 0x7
 7137 0d9e A0000000 		.4byte	0xa0
 7138 0da2 B40D0000 		.4byte	0xdb4
 7139 0da6 21       		.uleb128 0x21
 7140 0da7 81000000 		.4byte	0x81
 7141 0dab 5702     		.2byte	0x257
 7142 0dad 08       		.uleb128 0x8
 7143 0dae 81000000 		.4byte	0x81
 7144 0db2 02       		.byte	0x2
 7145 0db3 00       		.byte	0
 7146 0db4 20       		.uleb128 0x20
 7147 0db5 2E040000 		.4byte	.LASF188
 7148 0db9 01       		.byte	0x1
 7149 0dba 2B       		.byte	0x2b
 7150 0dbb 9D0D0000 		.4byte	0xd9d
 7151 0dbf 05       		.uleb128 0x5
 7152 0dc0 03       		.byte	0x3
 7153 0dc1 00000000 		.4byte	path
 7154 0dc5 20       		.uleb128 0x20
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 149


 7155 0dc6 B7050000 		.4byte	.LASF189
 7156 0dca 01       		.byte	0x1
 7157 0dcb 2C       		.byte	0x2c
 7158 0dcc F5000000 		.4byte	0xf5
 7159 0dd0 05       		.uleb128 0x5
 7160 0dd1 03       		.byte	0x3
 7161 0dd2 00000000 		.4byte	start
 7162 0dd6 20       		.uleb128 0x20
 7163 0dd7 B6080000 		.4byte	.LASF190
 7164 0ddb 01       		.byte	0x1
 7165 0ddc 2D       		.byte	0x2d
 7166 0ddd F5000000 		.4byte	0xf5
 7167 0de1 05       		.uleb128 0x5
 7168 0de2 03       		.byte	0x3
 7169 0de3 00000000 		.4byte	destination
 7170 0de7 20       		.uleb128 0x20
 7171 0de8 7A010000 		.4byte	.LASF191
 7172 0dec 01       		.byte	0x1
 7173 0ded 29       		.byte	0x29
 7174 0dee A0000000 		.4byte	0xa0
 7175 0df2 05       		.uleb128 0x5
 7176 0df3 03       		.byte	0x3
 7177 0df4 00000000 		.4byte	robot_direction
 7178 0df8 20       		.uleb128 0x20
 7179 0df9 0A000000 		.4byte	.LASF192
 7180 0dfd 07       		.byte	0x7
 7181 0dfe 22       		.byte	0x22
 7182 0dff A0000000 		.4byte	0xa0
 7183 0e03 05       		.uleb128 0x5
 7184 0e04 03       		.byte	0x3
 7185 0e05 00000000 		.4byte	tracked_direction
 7186 0e09 20       		.uleb128 0x20
 7187 0e0a F8070000 		.4byte	.LASF193
 7188 0e0e 01       		.byte	0x1
 7189 0e0f 69       		.byte	0x69
 7190 0e10 A0000000 		.4byte	0xa0
 7191 0e14 05       		.uleb128 0x5
 7192 0e15 03       		.byte	0x3
 7193 0e16 00000000 		.4byte	food_length
 7194 0e1a 07       		.uleb128 0x7
 7195 0e1b 8E000000 		.4byte	0x8e
 7196 0e1f 2B0E0000 		.4byte	0xe2b
 7197 0e23 21       		.uleb128 0x21
 7198 0e24 81000000 		.4byte	0x81
 7199 0e28 5702     		.2byte	0x257
 7200 0e2a 00       		.byte	0
 7201 0e2b 20       		.uleb128 0x20
 7202 0e2c 86050000 		.4byte	.LASF194
 7203 0e30 01       		.byte	0x1
 7204 0e31 24       		.byte	0x24
 7205 0e32 1A0E0000 		.4byte	0xe1a
 7206 0e36 05       		.uleb128 0x5
 7207 0e37 03       		.byte	0x3
 7208 0e38 00000000 		.4byte	instructions
 7209 0e3c 20       		.uleb128 0x20
 7210 0e3d C9070000 		.4byte	.LASF195
 7211 0e41 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 150


 7212 0e42 26       		.byte	0x26
 7213 0e43 B7000000 		.4byte	0xb7
 7214 0e47 05       		.uleb128 0x5
 7215 0e48 03       		.byte	0x3
 7216 0e49 00000000 		.4byte	instructionLength
 7217 0e4d 22       		.uleb128 0x22
 7218 0e4e 95010000 		.4byte	.LASF196
 7219 0e52 01       		.byte	0x1
 7220 0e53 2404     		.2byte	0x424
 7221 0e55 B7000000 		.4byte	0xb7
 7222 0e59 05       		.uleb128 0x5
 7223 0e5a 03       		.byte	0x3
 7224 0e5b 00000000 		.4byte	leftTurnCount
 7225 0e5f 22       		.uleb128 0x22
 7226 0e60 61000000 		.4byte	.LASF197
 7227 0e64 01       		.byte	0x1
 7228 0e65 2504     		.2byte	0x425
 7229 0e67 B7000000 		.4byte	0xb7
 7230 0e6b 05       		.uleb128 0x5
 7231 0e6c 03       		.byte	0x3
 7232 0e6d 00000000 		.4byte	rightTurnCount
 7233 0e71 00       		.byte	0
 7234              		.section	.debug_abbrev,"",%progbits
 7235              	.Ldebug_abbrev0:
 7236 0000 01       		.uleb128 0x1
 7237 0001 11       		.uleb128 0x11
 7238 0002 01       		.byte	0x1
 7239 0003 25       		.uleb128 0x25
 7240 0004 0E       		.uleb128 0xe
 7241 0005 13       		.uleb128 0x13
 7242 0006 0B       		.uleb128 0xb
 7243 0007 03       		.uleb128 0x3
 7244 0008 0E       		.uleb128 0xe
 7245 0009 1B       		.uleb128 0x1b
 7246 000a 0E       		.uleb128 0xe
 7247 000b 55       		.uleb128 0x55
 7248 000c 17       		.uleb128 0x17
 7249 000d 11       		.uleb128 0x11
 7250 000e 01       		.uleb128 0x1
 7251 000f 10       		.uleb128 0x10
 7252 0010 17       		.uleb128 0x17
 7253 0011 00       		.byte	0
 7254 0012 00       		.byte	0
 7255 0013 02       		.uleb128 0x2
 7256 0014 24       		.uleb128 0x24
 7257 0015 00       		.byte	0
 7258 0016 0B       		.uleb128 0xb
 7259 0017 0B       		.uleb128 0xb
 7260 0018 3E       		.uleb128 0x3e
 7261 0019 0B       		.uleb128 0xb
 7262 001a 03       		.uleb128 0x3
 7263 001b 0E       		.uleb128 0xe
 7264 001c 00       		.byte	0
 7265 001d 00       		.byte	0
 7266 001e 03       		.uleb128 0x3
 7267 001f 16       		.uleb128 0x16
 7268 0020 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 151


 7269 0021 03       		.uleb128 0x3
 7270 0022 0E       		.uleb128 0xe
 7271 0023 3A       		.uleb128 0x3a
 7272 0024 0B       		.uleb128 0xb
 7273 0025 3B       		.uleb128 0x3b
 7274 0026 0B       		.uleb128 0xb
 7275 0027 49       		.uleb128 0x49
 7276 0028 13       		.uleb128 0x13
 7277 0029 00       		.byte	0
 7278 002a 00       		.byte	0
 7279 002b 04       		.uleb128 0x4
 7280 002c 24       		.uleb128 0x24
 7281 002d 00       		.byte	0
 7282 002e 0B       		.uleb128 0xb
 7283 002f 0B       		.uleb128 0xb
 7284 0030 3E       		.uleb128 0x3e
 7285 0031 0B       		.uleb128 0xb
 7286 0032 03       		.uleb128 0x3
 7287 0033 08       		.uleb128 0x8
 7288 0034 00       		.byte	0
 7289 0035 00       		.byte	0
 7290 0036 05       		.uleb128 0x5
 7291 0037 0F       		.uleb128 0xf
 7292 0038 00       		.byte	0
 7293 0039 0B       		.uleb128 0xb
 7294 003a 0B       		.uleb128 0xb
 7295 003b 49       		.uleb128 0x49
 7296 003c 13       		.uleb128 0x13
 7297 003d 00       		.byte	0
 7298 003e 00       		.byte	0
 7299 003f 06       		.uleb128 0x6
 7300 0040 16       		.uleb128 0x16
 7301 0041 00       		.byte	0
 7302 0042 03       		.uleb128 0x3
 7303 0043 0E       		.uleb128 0xe
 7304 0044 3A       		.uleb128 0x3a
 7305 0045 0B       		.uleb128 0xb
 7306 0046 3B       		.uleb128 0x3b
 7307 0047 05       		.uleb128 0x5
 7308 0048 49       		.uleb128 0x49
 7309 0049 13       		.uleb128 0x13
 7310 004a 00       		.byte	0
 7311 004b 00       		.byte	0
 7312 004c 07       		.uleb128 0x7
 7313 004d 01       		.uleb128 0x1
 7314 004e 01       		.byte	0x1
 7315 004f 49       		.uleb128 0x49
 7316 0050 13       		.uleb128 0x13
 7317 0051 01       		.uleb128 0x1
 7318 0052 13       		.uleb128 0x13
 7319 0053 00       		.byte	0
 7320 0054 00       		.byte	0
 7321 0055 08       		.uleb128 0x8
 7322 0056 21       		.uleb128 0x21
 7323 0057 00       		.byte	0
 7324 0058 49       		.uleb128 0x49
 7325 0059 13       		.uleb128 0x13
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 152


 7326 005a 2F       		.uleb128 0x2f
 7327 005b 0B       		.uleb128 0xb
 7328 005c 00       		.byte	0
 7329 005d 00       		.byte	0
 7330 005e 09       		.uleb128 0x9
 7331 005f 04       		.uleb128 0x4
 7332 0060 01       		.byte	0x1
 7333 0061 03       		.uleb128 0x3
 7334 0062 0E       		.uleb128 0xe
 7335 0063 0B       		.uleb128 0xb
 7336 0064 0B       		.uleb128 0xb
 7337 0065 3A       		.uleb128 0x3a
 7338 0066 0B       		.uleb128 0xb
 7339 0067 3B       		.uleb128 0x3b
 7340 0068 0B       		.uleb128 0xb
 7341 0069 01       		.uleb128 0x1
 7342 006a 13       		.uleb128 0x13
 7343 006b 00       		.byte	0
 7344 006c 00       		.byte	0
 7345 006d 0A       		.uleb128 0xa
 7346 006e 28       		.uleb128 0x28
 7347 006f 00       		.byte	0
 7348 0070 03       		.uleb128 0x3
 7349 0071 0E       		.uleb128 0xe
 7350 0072 1C       		.uleb128 0x1c
 7351 0073 0D       		.uleb128 0xd
 7352 0074 00       		.byte	0
 7353 0075 00       		.byte	0
 7354 0076 0B       		.uleb128 0xb
 7355 0077 13       		.uleb128 0x13
 7356 0078 01       		.byte	0x1
 7357 0079 03       		.uleb128 0x3
 7358 007a 0E       		.uleb128 0xe
 7359 007b 0B       		.uleb128 0xb
 7360 007c 0B       		.uleb128 0xb
 7361 007d 3A       		.uleb128 0x3a
 7362 007e 0B       		.uleb128 0xb
 7363 007f 3B       		.uleb128 0x3b
 7364 0080 0B       		.uleb128 0xb
 7365 0081 01       		.uleb128 0x1
 7366 0082 13       		.uleb128 0x13
 7367 0083 00       		.byte	0
 7368 0084 00       		.byte	0
 7369 0085 0C       		.uleb128 0xc
 7370 0086 0D       		.uleb128 0xd
 7371 0087 00       		.byte	0
 7372 0088 03       		.uleb128 0x3
 7373 0089 0E       		.uleb128 0xe
 7374 008a 3A       		.uleb128 0x3a
 7375 008b 0B       		.uleb128 0xb
 7376 008c 3B       		.uleb128 0x3b
 7377 008d 0B       		.uleb128 0xb
 7378 008e 49       		.uleb128 0x49
 7379 008f 13       		.uleb128 0x13
 7380 0090 38       		.uleb128 0x38
 7381 0091 0B       		.uleb128 0xb
 7382 0092 00       		.byte	0
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 153


 7383 0093 00       		.byte	0
 7384 0094 0D       		.uleb128 0xd
 7385 0095 2E       		.uleb128 0x2e
 7386 0096 00       		.byte	0
 7387 0097 3F       		.uleb128 0x3f
 7388 0098 19       		.uleb128 0x19
 7389 0099 03       		.uleb128 0x3
 7390 009a 0E       		.uleb128 0xe
 7391 009b 3A       		.uleb128 0x3a
 7392 009c 0B       		.uleb128 0xb
 7393 009d 3B       		.uleb128 0x3b
 7394 009e 0B       		.uleb128 0xb
 7395 009f 27       		.uleb128 0x27
 7396 00a0 19       		.uleb128 0x19
 7397 00a1 11       		.uleb128 0x11
 7398 00a2 01       		.uleb128 0x1
 7399 00a3 12       		.uleb128 0x12
 7400 00a4 06       		.uleb128 0x6
 7401 00a5 40       		.uleb128 0x40
 7402 00a6 18       		.uleb128 0x18
 7403 00a7 9742     		.uleb128 0x2117
 7404 00a9 19       		.uleb128 0x19
 7405 00aa 00       		.byte	0
 7406 00ab 00       		.byte	0
 7407 00ac 0E       		.uleb128 0xe
 7408 00ad 2E       		.uleb128 0x2e
 7409 00ae 00       		.byte	0
 7410 00af 3F       		.uleb128 0x3f
 7411 00b0 19       		.uleb128 0x19
 7412 00b1 03       		.uleb128 0x3
 7413 00b2 0E       		.uleb128 0xe
 7414 00b3 3A       		.uleb128 0x3a
 7415 00b4 0B       		.uleb128 0xb
 7416 00b5 3B       		.uleb128 0x3b
 7417 00b6 0B       		.uleb128 0xb
 7418 00b7 27       		.uleb128 0x27
 7419 00b8 19       		.uleb128 0x19
 7420 00b9 11       		.uleb128 0x11
 7421 00ba 01       		.uleb128 0x1
 7422 00bb 12       		.uleb128 0x12
 7423 00bc 06       		.uleb128 0x6
 7424 00bd 40       		.uleb128 0x40
 7425 00be 18       		.uleb128 0x18
 7426 00bf 9642     		.uleb128 0x2116
 7427 00c1 19       		.uleb128 0x19
 7428 00c2 00       		.byte	0
 7429 00c3 00       		.byte	0
 7430 00c4 0F       		.uleb128 0xf
 7431 00c5 2E       		.uleb128 0x2e
 7432 00c6 01       		.byte	0x1
 7433 00c7 3F       		.uleb128 0x3f
 7434 00c8 19       		.uleb128 0x19
 7435 00c9 03       		.uleb128 0x3
 7436 00ca 0E       		.uleb128 0xe
 7437 00cb 3A       		.uleb128 0x3a
 7438 00cc 0B       		.uleb128 0xb
 7439 00cd 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 154


 7440 00ce 0B       		.uleb128 0xb
 7441 00cf 27       		.uleb128 0x27
 7442 00d0 19       		.uleb128 0x19
 7443 00d1 11       		.uleb128 0x11
 7444 00d2 01       		.uleb128 0x1
 7445 00d3 12       		.uleb128 0x12
 7446 00d4 06       		.uleb128 0x6
 7447 00d5 40       		.uleb128 0x40
 7448 00d6 18       		.uleb128 0x18
 7449 00d7 9642     		.uleb128 0x2116
 7450 00d9 19       		.uleb128 0x19
 7451 00da 01       		.uleb128 0x1
 7452 00db 13       		.uleb128 0x13
 7453 00dc 00       		.byte	0
 7454 00dd 00       		.byte	0
 7455 00de 10       		.uleb128 0x10
 7456 00df 0B       		.uleb128 0xb
 7457 00e0 01       		.byte	0x1
 7458 00e1 11       		.uleb128 0x11
 7459 00e2 01       		.uleb128 0x1
 7460 00e3 12       		.uleb128 0x12
 7461 00e4 06       		.uleb128 0x6
 7462 00e5 01       		.uleb128 0x1
 7463 00e6 13       		.uleb128 0x13
 7464 00e7 00       		.byte	0
 7465 00e8 00       		.byte	0
 7466 00e9 11       		.uleb128 0x11
 7467 00ea 34       		.uleb128 0x34
 7468 00eb 00       		.byte	0
 7469 00ec 03       		.uleb128 0x3
 7470 00ed 0E       		.uleb128 0xe
 7471 00ee 3A       		.uleb128 0x3a
 7472 00ef 0B       		.uleb128 0xb
 7473 00f0 3B       		.uleb128 0x3b
 7474 00f1 0B       		.uleb128 0xb
 7475 00f2 49       		.uleb128 0x49
 7476 00f3 13       		.uleb128 0x13
 7477 00f4 02       		.uleb128 0x2
 7478 00f5 18       		.uleb128 0x18
 7479 00f6 00       		.byte	0
 7480 00f7 00       		.byte	0
 7481 00f8 12       		.uleb128 0x12
 7482 00f9 0B       		.uleb128 0xb
 7483 00fa 01       		.byte	0x1
 7484 00fb 11       		.uleb128 0x11
 7485 00fc 01       		.uleb128 0x1
 7486 00fd 12       		.uleb128 0x12
 7487 00fe 06       		.uleb128 0x6
 7488 00ff 00       		.byte	0
 7489 0100 00       		.byte	0
 7490 0101 13       		.uleb128 0x13
 7491 0102 2E       		.uleb128 0x2e
 7492 0103 01       		.byte	0x1
 7493 0104 3F       		.uleb128 0x3f
 7494 0105 19       		.uleb128 0x19
 7495 0106 03       		.uleb128 0x3
 7496 0107 0E       		.uleb128 0xe
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 155


 7497 0108 3A       		.uleb128 0x3a
 7498 0109 0B       		.uleb128 0xb
 7499 010a 3B       		.uleb128 0x3b
 7500 010b 0B       		.uleb128 0xb
 7501 010c 49       		.uleb128 0x49
 7502 010d 13       		.uleb128 0x13
 7503 010e 11       		.uleb128 0x11
 7504 010f 01       		.uleb128 0x1
 7505 0110 12       		.uleb128 0x12
 7506 0111 06       		.uleb128 0x6
 7507 0112 40       		.uleb128 0x40
 7508 0113 18       		.uleb128 0x18
 7509 0114 9642     		.uleb128 0x2116
 7510 0116 19       		.uleb128 0x19
 7511 0117 01       		.uleb128 0x1
 7512 0118 13       		.uleb128 0x13
 7513 0119 00       		.byte	0
 7514 011a 00       		.byte	0
 7515 011b 14       		.uleb128 0x14
 7516 011c 34       		.uleb128 0x34
 7517 011d 00       		.byte	0
 7518 011e 03       		.uleb128 0x3
 7519 011f 0E       		.uleb128 0xe
 7520 0120 3A       		.uleb128 0x3a
 7521 0121 0B       		.uleb128 0xb
 7522 0122 3B       		.uleb128 0x3b
 7523 0123 05       		.uleb128 0x5
 7524 0124 49       		.uleb128 0x49
 7525 0125 13       		.uleb128 0x13
 7526 0126 02       		.uleb128 0x2
 7527 0127 18       		.uleb128 0x18
 7528 0128 00       		.byte	0
 7529 0129 00       		.byte	0
 7530 012a 15       		.uleb128 0x15
 7531 012b 34       		.uleb128 0x34
 7532 012c 00       		.byte	0
 7533 012d 03       		.uleb128 0x3
 7534 012e 08       		.uleb128 0x8
 7535 012f 3A       		.uleb128 0x3a
 7536 0130 0B       		.uleb128 0xb
 7537 0131 3B       		.uleb128 0x3b
 7538 0132 05       		.uleb128 0x5
 7539 0133 49       		.uleb128 0x49
 7540 0134 13       		.uleb128 0x13
 7541 0135 02       		.uleb128 0x2
 7542 0136 18       		.uleb128 0x18
 7543 0137 00       		.byte	0
 7544 0138 00       		.byte	0
 7545 0139 16       		.uleb128 0x16
 7546 013a 2E       		.uleb128 0x2e
 7547 013b 01       		.byte	0x1
 7548 013c 3F       		.uleb128 0x3f
 7549 013d 19       		.uleb128 0x19
 7550 013e 03       		.uleb128 0x3
 7551 013f 0E       		.uleb128 0xe
 7552 0140 3A       		.uleb128 0x3a
 7553 0141 0B       		.uleb128 0xb
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 156


 7554 0142 3B       		.uleb128 0x3b
 7555 0143 05       		.uleb128 0x5
 7556 0144 11       		.uleb128 0x11
 7557 0145 01       		.uleb128 0x1
 7558 0146 12       		.uleb128 0x12
 7559 0147 06       		.uleb128 0x6
 7560 0148 40       		.uleb128 0x40
 7561 0149 18       		.uleb128 0x18
 7562 014a 9742     		.uleb128 0x2117
 7563 014c 19       		.uleb128 0x19
 7564 014d 01       		.uleb128 0x1
 7565 014e 13       		.uleb128 0x13
 7566 014f 00       		.byte	0
 7567 0150 00       		.byte	0
 7568 0151 17       		.uleb128 0x17
 7569 0152 2E       		.uleb128 0x2e
 7570 0153 01       		.byte	0x1
 7571 0154 3F       		.uleb128 0x3f
 7572 0155 19       		.uleb128 0x19
 7573 0156 03       		.uleb128 0x3
 7574 0157 0E       		.uleb128 0xe
 7575 0158 3A       		.uleb128 0x3a
 7576 0159 0B       		.uleb128 0xb
 7577 015a 3B       		.uleb128 0x3b
 7578 015b 05       		.uleb128 0x5
 7579 015c 27       		.uleb128 0x27
 7580 015d 19       		.uleb128 0x19
 7581 015e 11       		.uleb128 0x11
 7582 015f 01       		.uleb128 0x1
 7583 0160 12       		.uleb128 0x12
 7584 0161 06       		.uleb128 0x6
 7585 0162 40       		.uleb128 0x40
 7586 0163 18       		.uleb128 0x18
 7587 0164 9642     		.uleb128 0x2116
 7588 0166 19       		.uleb128 0x19
 7589 0167 01       		.uleb128 0x1
 7590 0168 13       		.uleb128 0x13
 7591 0169 00       		.byte	0
 7592 016a 00       		.byte	0
 7593 016b 18       		.uleb128 0x18
 7594 016c 05       		.uleb128 0x5
 7595 016d 00       		.byte	0
 7596 016e 03       		.uleb128 0x3
 7597 016f 08       		.uleb128 0x8
 7598 0170 3A       		.uleb128 0x3a
 7599 0171 0B       		.uleb128 0xb
 7600 0172 3B       		.uleb128 0x3b
 7601 0173 05       		.uleb128 0x5
 7602 0174 49       		.uleb128 0x49
 7603 0175 13       		.uleb128 0x13
 7604 0176 02       		.uleb128 0x2
 7605 0177 18       		.uleb128 0x18
 7606 0178 00       		.byte	0
 7607 0179 00       		.byte	0
 7608 017a 19       		.uleb128 0x19
 7609 017b 2E       		.uleb128 0x2e
 7610 017c 01       		.byte	0x1
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 157


 7611 017d 3F       		.uleb128 0x3f
 7612 017e 19       		.uleb128 0x19
 7613 017f 03       		.uleb128 0x3
 7614 0180 0E       		.uleb128 0xe
 7615 0181 3A       		.uleb128 0x3a
 7616 0182 0B       		.uleb128 0xb
 7617 0183 3B       		.uleb128 0x3b
 7618 0184 05       		.uleb128 0x5
 7619 0185 11       		.uleb128 0x11
 7620 0186 01       		.uleb128 0x1
 7621 0187 12       		.uleb128 0x12
 7622 0188 06       		.uleb128 0x6
 7623 0189 40       		.uleb128 0x40
 7624 018a 18       		.uleb128 0x18
 7625 018b 9642     		.uleb128 0x2116
 7626 018d 19       		.uleb128 0x19
 7627 018e 01       		.uleb128 0x1
 7628 018f 13       		.uleb128 0x13
 7629 0190 00       		.byte	0
 7630 0191 00       		.byte	0
 7631 0192 1A       		.uleb128 0x1a
 7632 0193 05       		.uleb128 0x5
 7633 0194 00       		.byte	0
 7634 0195 03       		.uleb128 0x3
 7635 0196 0E       		.uleb128 0xe
 7636 0197 3A       		.uleb128 0x3a
 7637 0198 0B       		.uleb128 0xb
 7638 0199 3B       		.uleb128 0x3b
 7639 019a 05       		.uleb128 0x5
 7640 019b 49       		.uleb128 0x49
 7641 019c 13       		.uleb128 0x13
 7642 019d 02       		.uleb128 0x2
 7643 019e 18       		.uleb128 0x18
 7644 019f 00       		.byte	0
 7645 01a0 00       		.byte	0
 7646 01a1 1B       		.uleb128 0x1b
 7647 01a2 2E       		.uleb128 0x2e
 7648 01a3 00       		.byte	0
 7649 01a4 3F       		.uleb128 0x3f
 7650 01a5 19       		.uleb128 0x19
 7651 01a6 03       		.uleb128 0x3
 7652 01a7 0E       		.uleb128 0xe
 7653 01a8 3A       		.uleb128 0x3a
 7654 01a9 0B       		.uleb128 0xb
 7655 01aa 3B       		.uleb128 0x3b
 7656 01ab 05       		.uleb128 0x5
 7657 01ac 11       		.uleb128 0x11
 7658 01ad 01       		.uleb128 0x1
 7659 01ae 12       		.uleb128 0x12
 7660 01af 06       		.uleb128 0x6
 7661 01b0 40       		.uleb128 0x40
 7662 01b1 18       		.uleb128 0x18
 7663 01b2 9642     		.uleb128 0x2116
 7664 01b4 19       		.uleb128 0x19
 7665 01b5 00       		.byte	0
 7666 01b6 00       		.byte	0
 7667 01b7 1C       		.uleb128 0x1c
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 158


 7668 01b8 2E       		.uleb128 0x2e
 7669 01b9 00       		.byte	0
 7670 01ba 3F       		.uleb128 0x3f
 7671 01bb 19       		.uleb128 0x19
 7672 01bc 03       		.uleb128 0x3
 7673 01bd 0E       		.uleb128 0xe
 7674 01be 3A       		.uleb128 0x3a
 7675 01bf 0B       		.uleb128 0xb
 7676 01c0 3B       		.uleb128 0x3b
 7677 01c1 05       		.uleb128 0x5
 7678 01c2 11       		.uleb128 0x11
 7679 01c3 01       		.uleb128 0x1
 7680 01c4 12       		.uleb128 0x12
 7681 01c5 06       		.uleb128 0x6
 7682 01c6 40       		.uleb128 0x40
 7683 01c7 18       		.uleb128 0x18
 7684 01c8 9742     		.uleb128 0x2117
 7685 01ca 19       		.uleb128 0x19
 7686 01cb 00       		.byte	0
 7687 01cc 00       		.byte	0
 7688 01cd 1D       		.uleb128 0x1d
 7689 01ce 34       		.uleb128 0x34
 7690 01cf 00       		.byte	0
 7691 01d0 03       		.uleb128 0x3
 7692 01d1 0E       		.uleb128 0xe
 7693 01d2 3A       		.uleb128 0x3a
 7694 01d3 0B       		.uleb128 0xb
 7695 01d4 3B       		.uleb128 0x3b
 7696 01d5 05       		.uleb128 0x5
 7697 01d6 49       		.uleb128 0x49
 7698 01d7 13       		.uleb128 0x13
 7699 01d8 3F       		.uleb128 0x3f
 7700 01d9 19       		.uleb128 0x19
 7701 01da 3C       		.uleb128 0x3c
 7702 01db 19       		.uleb128 0x19
 7703 01dc 00       		.byte	0
 7704 01dd 00       		.byte	0
 7705 01de 1E       		.uleb128 0x1e
 7706 01df 35       		.uleb128 0x35
 7707 01e0 00       		.byte	0
 7708 01e1 49       		.uleb128 0x49
 7709 01e2 13       		.uleb128 0x13
 7710 01e3 00       		.byte	0
 7711 01e4 00       		.byte	0
 7712 01e5 1F       		.uleb128 0x1f
 7713 01e6 34       		.uleb128 0x34
 7714 01e7 00       		.byte	0
 7715 01e8 03       		.uleb128 0x3
 7716 01e9 08       		.uleb128 0x8
 7717 01ea 3A       		.uleb128 0x3a
 7718 01eb 0B       		.uleb128 0xb
 7719 01ec 3B       		.uleb128 0x3b
 7720 01ed 0B       		.uleb128 0xb
 7721 01ee 49       		.uleb128 0x49
 7722 01ef 13       		.uleb128 0x13
 7723 01f0 3F       		.uleb128 0x3f
 7724 01f1 19       		.uleb128 0x19
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 159


 7725 01f2 02       		.uleb128 0x2
 7726 01f3 18       		.uleb128 0x18
 7727 01f4 00       		.byte	0
 7728 01f5 00       		.byte	0
 7729 01f6 20       		.uleb128 0x20
 7730 01f7 34       		.uleb128 0x34
 7731 01f8 00       		.byte	0
 7732 01f9 03       		.uleb128 0x3
 7733 01fa 0E       		.uleb128 0xe
 7734 01fb 3A       		.uleb128 0x3a
 7735 01fc 0B       		.uleb128 0xb
 7736 01fd 3B       		.uleb128 0x3b
 7737 01fe 0B       		.uleb128 0xb
 7738 01ff 49       		.uleb128 0x49
 7739 0200 13       		.uleb128 0x13
 7740 0201 3F       		.uleb128 0x3f
 7741 0202 19       		.uleb128 0x19
 7742 0203 02       		.uleb128 0x2
 7743 0204 18       		.uleb128 0x18
 7744 0205 00       		.byte	0
 7745 0206 00       		.byte	0
 7746 0207 21       		.uleb128 0x21
 7747 0208 21       		.uleb128 0x21
 7748 0209 00       		.byte	0
 7749 020a 49       		.uleb128 0x49
 7750 020b 13       		.uleb128 0x13
 7751 020c 2F       		.uleb128 0x2f
 7752 020d 05       		.uleb128 0x5
 7753 020e 00       		.byte	0
 7754 020f 00       		.byte	0
 7755 0210 22       		.uleb128 0x22
 7756 0211 34       		.uleb128 0x34
 7757 0212 00       		.byte	0
 7758 0213 03       		.uleb128 0x3
 7759 0214 0E       		.uleb128 0xe
 7760 0215 3A       		.uleb128 0x3a
 7761 0216 0B       		.uleb128 0xb
 7762 0217 3B       		.uleb128 0x3b
 7763 0218 05       		.uleb128 0x5
 7764 0219 49       		.uleb128 0x49
 7765 021a 13       		.uleb128 0x13
 7766 021b 3F       		.uleb128 0x3f
 7767 021c 19       		.uleb128 0x19
 7768 021d 02       		.uleb128 0x2
 7769 021e 18       		.uleb128 0x18
 7770 021f 00       		.byte	0
 7771 0220 00       		.byte	0
 7772 0221 00       		.byte	0
 7773              		.section	.debug_aranges,"",%progbits
 7774 0000 6C010000 		.4byte	0x16c
 7775 0004 0200     		.2byte	0x2
 7776 0006 00000000 		.4byte	.Ldebug_info0
 7777 000a 04       		.byte	0x4
 7778 000b 00       		.byte	0
 7779 000c 0000     		.2byte	0
 7780 000e 0000     		.2byte	0
 7781 0010 00000000 		.4byte	.LFB63
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 160


 7782 0014 0C000000 		.4byte	.LFE63-.LFB63
 7783 0018 00000000 		.4byte	.LFB64
 7784 001c 2C000000 		.4byte	.LFE64-.LFB64
 7785 0020 00000000 		.4byte	.LFB65
 7786 0024 98010000 		.4byte	.LFE65-.LFB65
 7787 0028 00000000 		.4byte	.LFB66
 7788 002c 34010000 		.4byte	.LFE66-.LFB66
 7789 0030 00000000 		.4byte	.LFB67
 7790 0034 20000000 		.4byte	.LFE67-.LFB67
 7791 0038 00000000 		.4byte	.LFB68
 7792 003c 28000000 		.4byte	.LFE68-.LFB68
 7793 0040 00000000 		.4byte	.LFB69
 7794 0044 0A000000 		.4byte	.LFE69-.LFB69
 7795 0048 00000000 		.4byte	.LFB70
 7796 004c 28000000 		.4byte	.LFE70-.LFB70
 7797 0050 00000000 		.4byte	.LFB71
 7798 0054 EC060000 		.4byte	.LFE71-.LFB71
 7799 0058 00000000 		.4byte	.LFB72
 7800 005c 60010000 		.4byte	.LFE72-.LFB72
 7801 0060 00000000 		.4byte	.LFB73
 7802 0064 18000000 		.4byte	.LFE73-.LFB73
 7803 0068 00000000 		.4byte	.LFB74
 7804 006c 18000000 		.4byte	.LFE74-.LFB74
 7805 0070 00000000 		.4byte	.LFB75
 7806 0074 54000000 		.4byte	.LFE75-.LFB75
 7807 0078 00000000 		.4byte	.LFB76
 7808 007c F4000000 		.4byte	.LFE76-.LFB76
 7809 0080 00000000 		.4byte	.LFB77
 7810 0084 18000000 		.4byte	.LFE77-.LFB77
 7811 0088 00000000 		.4byte	.LFB78
 7812 008c 18000000 		.4byte	.LFE78-.LFB78
 7813 0090 00000000 		.4byte	.LFB79
 7814 0094 22000000 		.4byte	.LFE79-.LFB79
 7815 0098 00000000 		.4byte	.LFB80
 7816 009c 1C000000 		.4byte	.LFE80-.LFB80
 7817 00a0 00000000 		.4byte	.LFB81
 7818 00a4 34000000 		.4byte	.LFE81-.LFB81
 7819 00a8 00000000 		.4byte	.LFB82
 7820 00ac 38000000 		.4byte	.LFE82-.LFB82
 7821 00b0 00000000 		.4byte	.LFB83
 7822 00b4 4C000000 		.4byte	.LFE83-.LFB83
 7823 00b8 00000000 		.4byte	.LFB84
 7824 00bc 38000000 		.4byte	.LFE84-.LFB84
 7825 00c0 00000000 		.4byte	.LFB85
 7826 00c4 38000000 		.4byte	.LFE85-.LFB85
 7827 00c8 00000000 		.4byte	.LFB86
 7828 00cc 38000000 		.4byte	.LFE86-.LFB86
 7829 00d0 00000000 		.4byte	.LFB87
 7830 00d4 14000000 		.4byte	.LFE87-.LFB87
 7831 00d8 00000000 		.4byte	.LFB88
 7832 00dc 18000000 		.4byte	.LFE88-.LFB88
 7833 00e0 00000000 		.4byte	.LFB89
 7834 00e4 18000000 		.4byte	.LFE89-.LFB89
 7835 00e8 00000000 		.4byte	.LFB90
 7836 00ec 18000000 		.4byte	.LFE90-.LFB90
 7837 00f0 00000000 		.4byte	.LFB91
 7838 00f4 18000000 		.4byte	.LFE91-.LFB91
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 161


 7839 00f8 00000000 		.4byte	.LFB92
 7840 00fc B8000000 		.4byte	.LFE92-.LFB92
 7841 0100 00000000 		.4byte	.LFB93
 7842 0104 B8050000 		.4byte	.LFE93-.LFB93
 7843 0108 00000000 		.4byte	.LFB94
 7844 010c 40000000 		.4byte	.LFE94-.LFB94
 7845 0110 00000000 		.4byte	.LFB95
 7846 0114 40000000 		.4byte	.LFE95-.LFB95
 7847 0118 00000000 		.4byte	.LFB96
 7848 011c 30020000 		.4byte	.LFE96-.LFB96
 7849 0120 00000000 		.4byte	.LFB97
 7850 0124 0C000000 		.4byte	.LFE97-.LFB97
 7851 0128 00000000 		.4byte	.LFB98
 7852 012c 4C010000 		.4byte	.LFE98-.LFB98
 7853 0130 00000000 		.4byte	.LFB99
 7854 0134 0C000000 		.4byte	.LFE99-.LFB99
 7855 0138 00000000 		.4byte	.LFB100
 7856 013c C0000000 		.4byte	.LFE100-.LFB100
 7857 0140 00000000 		.4byte	.LFB101
 7858 0144 B8000000 		.4byte	.LFE101-.LFB101
 7859 0148 00000000 		.4byte	.LFB102
 7860 014c 4A000000 		.4byte	.LFE102-.LFB102
 7861 0150 00000000 		.4byte	.LFB103
 7862 0154 68000000 		.4byte	.LFE103-.LFB103
 7863 0158 00000000 		.4byte	.LFB104
 7864 015c 50000000 		.4byte	.LFE104-.LFB104
 7865 0160 00000000 		.4byte	.LFB105
 7866 0164 0C000000 		.4byte	.LFE105-.LFB105
 7867 0168 00000000 		.4byte	0
 7868 016c 00000000 		.4byte	0
 7869              		.section	.debug_ranges,"",%progbits
 7870              	.Ldebug_ranges0:
 7871 0000 00000000 		.4byte	.LFB63
 7872 0004 0C000000 		.4byte	.LFE63
 7873 0008 00000000 		.4byte	.LFB64
 7874 000c 2C000000 		.4byte	.LFE64
 7875 0010 00000000 		.4byte	.LFB65
 7876 0014 98010000 		.4byte	.LFE65
 7877 0018 00000000 		.4byte	.LFB66
 7878 001c 34010000 		.4byte	.LFE66
 7879 0020 00000000 		.4byte	.LFB67
 7880 0024 20000000 		.4byte	.LFE67
 7881 0028 00000000 		.4byte	.LFB68
 7882 002c 28000000 		.4byte	.LFE68
 7883 0030 00000000 		.4byte	.LFB69
 7884 0034 0A000000 		.4byte	.LFE69
 7885 0038 00000000 		.4byte	.LFB70
 7886 003c 28000000 		.4byte	.LFE70
 7887 0040 00000000 		.4byte	.LFB71
 7888 0044 EC060000 		.4byte	.LFE71
 7889 0048 00000000 		.4byte	.LFB72
 7890 004c 60010000 		.4byte	.LFE72
 7891 0050 00000000 		.4byte	.LFB73
 7892 0054 18000000 		.4byte	.LFE73
 7893 0058 00000000 		.4byte	.LFB74
 7894 005c 18000000 		.4byte	.LFE74
 7895 0060 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 162


 7896 0064 54000000 		.4byte	.LFE75
 7897 0068 00000000 		.4byte	.LFB76
 7898 006c F4000000 		.4byte	.LFE76
 7899 0070 00000000 		.4byte	.LFB77
 7900 0074 18000000 		.4byte	.LFE77
 7901 0078 00000000 		.4byte	.LFB78
 7902 007c 18000000 		.4byte	.LFE78
 7903 0080 00000000 		.4byte	.LFB79
 7904 0084 22000000 		.4byte	.LFE79
 7905 0088 00000000 		.4byte	.LFB80
 7906 008c 1C000000 		.4byte	.LFE80
 7907 0090 00000000 		.4byte	.LFB81
 7908 0094 34000000 		.4byte	.LFE81
 7909 0098 00000000 		.4byte	.LFB82
 7910 009c 38000000 		.4byte	.LFE82
 7911 00a0 00000000 		.4byte	.LFB83
 7912 00a4 4C000000 		.4byte	.LFE83
 7913 00a8 00000000 		.4byte	.LFB84
 7914 00ac 38000000 		.4byte	.LFE84
 7915 00b0 00000000 		.4byte	.LFB85
 7916 00b4 38000000 		.4byte	.LFE85
 7917 00b8 00000000 		.4byte	.LFB86
 7918 00bc 38000000 		.4byte	.LFE86
 7919 00c0 00000000 		.4byte	.LFB87
 7920 00c4 14000000 		.4byte	.LFE87
 7921 00c8 00000000 		.4byte	.LFB88
 7922 00cc 18000000 		.4byte	.LFE88
 7923 00d0 00000000 		.4byte	.LFB89
 7924 00d4 18000000 		.4byte	.LFE89
 7925 00d8 00000000 		.4byte	.LFB90
 7926 00dc 18000000 		.4byte	.LFE90
 7927 00e0 00000000 		.4byte	.LFB91
 7928 00e4 18000000 		.4byte	.LFE91
 7929 00e8 00000000 		.4byte	.LFB92
 7930 00ec B8000000 		.4byte	.LFE92
 7931 00f0 00000000 		.4byte	.LFB93
 7932 00f4 B8050000 		.4byte	.LFE93
 7933 00f8 00000000 		.4byte	.LFB94
 7934 00fc 40000000 		.4byte	.LFE94
 7935 0100 00000000 		.4byte	.LFB95
 7936 0104 40000000 		.4byte	.LFE95
 7937 0108 00000000 		.4byte	.LFB96
 7938 010c 30020000 		.4byte	.LFE96
 7939 0110 00000000 		.4byte	.LFB97
 7940 0114 0C000000 		.4byte	.LFE97
 7941 0118 00000000 		.4byte	.LFB98
 7942 011c 4C010000 		.4byte	.LFE98
 7943 0120 00000000 		.4byte	.LFB99
 7944 0124 0C000000 		.4byte	.LFE99
 7945 0128 00000000 		.4byte	.LFB100
 7946 012c C0000000 		.4byte	.LFE100
 7947 0130 00000000 		.4byte	.LFB101
 7948 0134 B8000000 		.4byte	.LFE101
 7949 0138 00000000 		.4byte	.LFB102
 7950 013c 4A000000 		.4byte	.LFE102
 7951 0140 00000000 		.4byte	.LFB103
 7952 0144 68000000 		.4byte	.LFE103
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 163


 7953 0148 00000000 		.4byte	.LFB104
 7954 014c 50000000 		.4byte	.LFE104
 7955 0150 00000000 		.4byte	.LFB105
 7956 0154 0C000000 		.4byte	.LFE105
 7957 0158 00000000 		.4byte	0
 7958 015c 00000000 		.4byte	0
 7959              		.section	.debug_line,"",%progbits
 7960              	.Ldebug_line0:
 7961 0000 F0070000 		.section	.debug_str,"MS",%progbits,1
 7961      02006701 
 7961      00000201 
 7961      FB0E0D00 
 7961      01010101 
 7962              	.LASF141:
 7963 0000 64697265 		.ascii	"direction\000"
 7963      6374696F 
 7963      6E00
 7964              	.LASF192:
 7965 000a 74726163 		.ascii	"tracked_direction\000"
 7965      6B65645F 
 7965      64697265 
 7965      6374696F 
 7965      6E00
 7966              	.LASF200:
 7967 001c 433A5C55 		.ascii	"C:\\Users\\Logan\\Desktop\\repos\\CS301-Team-Repo\\"
 7967      73657273 
 7967      5C4C6F67 
 7967      616E5C44 
 7967      65736B74 
 7968 0049 43533330 		.ascii	"CS301_Class.cydsn\000"
 7968      315F436C 
 7968      6173732E 
 7968      63796473 
 7968      6E00
 7969              	.LASF25:
 7970 005b 52545552 		.ascii	"RTURN\000"
 7970      4E00
 7971              	.LASF197:
 7972 0061 72696768 		.ascii	"rightTurnCount\000"
 7972      74547572 
 7972      6E436F75 
 7972      6E7400
 7973              	.LASF170:
 7974 0070 72696768 		.ascii	"rightOn\000"
 7974      744F6E00 
 7975              	.LASF39:
 7976 0078 44455354 		.ascii	"DEST_TEST\000"
 7976      5F544553 
 7976      5400
 7977              	.LASF149:
 7978 0082 71756164 		.ascii	"quad_diff1\000"
 7978      5F646966 
 7978      663100
 7979              	.LASF150:
 7980 008d 71756164 		.ascii	"quad_diff2\000"
 7980      5F646966 
 7980      663200
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 164


 7981              	.LASF103:
 7982 0098 51756164 		.ascii	"Quad_Dec_response\000"
 7982      5F446563 
 7982      5F726573 
 7982      706F6E73 
 7982      6500
 7983              	.LASF171:
 7984 00aa 70726576 		.ascii	"prevVoltage\000"
 7984      566F6C74 
 7984      61676500 
 7985              	.LASF152:
 7986 00b6 73746172 		.ascii	"start_turn_count\000"
 7986      745F7475 
 7986      726E5F63 
 7986      6F756E74 
 7986      00
 7987              	.LASF10:
 7988 00c7 756E7369 		.ascii	"unsigned int\000"
 7988      676E6564 
 7988      20696E74 
 7988      00
 7989              	.LASF181:
 7990 00d4 74726163 		.ascii	"track_mode\000"
 7990      6B5F6D6F 
 7990      646500
 7991              	.LASF5:
 7992 00df 5F5F696E 		.ascii	"__int32_t\000"
 7992      7433325F 
 7992      7400
 7993              	.LASF19:
 7994 00e9 696E7431 		.ascii	"int16\000"
 7994      3600
 7995              	.LASF178:
 7996 00ef 73797374 		.ascii	"system_state\000"
 7996      656D5F73 
 7996      74617465 
 7996      00
 7997              	.LASF24:
 7998 00fc 4C545552 		.ascii	"LTURN\000"
 7998      4E00
 7999              	.LASF159:
 8000 0102 74617267 		.ascii	"target_distance_quad\000"
 8000      65745F64 
 8000      69737461 
 8000      6E63655F 
 8000      71756164 
 8001              	.LASF27:
 8002 0117 54524143 		.ascii	"TRACKING\000"
 8002      4B494E47 
 8002      00
 8003              	.LASF172:
 8004 0120 70726576 		.ascii	"prevVoltage2\000"
 8004      566F6C74 
 8004      61676532 
 8004      00
 8005              	.LASF186:
 8006 012d 73656E73 		.ascii	"sensorsDisabled\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 165


 8006      6F727344 
 8006      69736162 
 8006      6C656400 
 8007              	.LASF71:
 8008 013d 7061636B 		.ascii	"packet_bytes\000"
 8008      65745F62 
 8008      79746573 
 8008      00
 8009              	.LASF54:
 8010 014a 67325F78 		.ascii	"g2_xpos\000"
 8010      706F7300 
 8011              	.LASF32:
 8012 0152 6D6F6465 		.ascii	"mode\000"
 8012      00
 8013              	.LASF145:
 8014 0157 71756164 		.ascii	"quad_count1\000"
 8014      5F636F75 
 8014      6E743100 
 8015              	.LASF146:
 8016 0163 71756164 		.ascii	"quad_count2\000"
 8016      5F636F75 
 8016      6E743200 
 8017              	.LASF112:
 8018 016f 74726163 		.ascii	"trackLineU\000"
 8018      6B4C696E 
 8018      655500
 8019              	.LASF191:
 8020 017a 726F626F 		.ascii	"robot_direction\000"
 8020      745F6469 
 8020      72656374 
 8020      696F6E00 
 8021              	.LASF111:
 8022 018a 74726163 		.ascii	"trackLineZ\000"
 8022      6B4C696E 
 8022      655A00
 8023              	.LASF196:
 8024 0195 6C656674 		.ascii	"leftTurnCount\000"
 8024      5475726E 
 8024      436F756E 
 8024      7400
 8025              	.LASF184:
 8026 01a3 73706565 		.ascii	"speed\000"
 8026      6400
 8027              	.LASF36:
 8028 01a9 53515541 		.ascii	"SQUARE_TRACK\000"
 8028      52455F54 
 8028      5241434B 
 8028      00
 8029              	.LASF137:
 8030 01b6 666C6167 		.ascii	"flag_rf_transmission_active\000"
 8030      5F72665F 
 8030      7472616E 
 8030      736D6973 
 8030      73696F6E 
 8031              	.LASF138:
 8032 01d2 666C6167 		.ascii	"flag_print_rf\000"
 8032      5F707269 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 166


 8032      6E745F72 
 8032      6600
 8033              	.LASF180:
 8034 01e0 6D6F7665 		.ascii	"movement_state\000"
 8034      6D656E74 
 8034      5F737461 
 8034      746500
 8035              	.LASF28:
 8036 01ef 54524143 		.ascii	"TRACKING_U\000"
 8036      4B494E47 
 8036      5F5500
 8037              	.LASF93:
 8038 01fa 696E6974 		.ascii	"initForward\000"
 8038      466F7277 
 8038      61726400 
 8039              	.LASF14:
 8040 0206 75696E74 		.ascii	"uint32_t\000"
 8040      33325F74 
 8040      00
 8041              	.LASF57:
 8042 020f 67325F64 		.ascii	"g2_direction\000"
 8042      69726563 
 8042      74696F6E 
 8042      00
 8043              	.LASF60:
 8044 021c 6973725F 		.ascii	"isr_quad1\000"
 8044      71756164 
 8044      3100
 8045              	.LASF20:
 8046 0226 666C6F61 		.ascii	"float\000"
 8046      7400
 8047              	.LASF78:
 8048 022c 73657453 		.ascii	"setSpeed\000"
 8048      70656564 
 8048      00
 8049              	.LASF176:
 8050 0235 75736242 		.ascii	"usbBuffer\000"
 8050      75666665 
 8050      7200
 8051              	.LASF42:
 8052 023f 696E6465 		.ascii	"index\000"
 8052      7800
 8053              	.LASF23:
 8054 0245 44524956 		.ascii	"DRIVE\000"
 8054      4500
 8055              	.LASF73:
 8056 024b 73747269 		.ascii	"string_packet\000"
 8056      6E675F70 
 8056      61636B65 
 8056      7400
 8057              	.LASF102:
 8058 0259 6368616E 		.ascii	"changeToBT\000"
 8058      6765546F 
 8058      425400
 8059              	.LASF81:
 8060 0264 636F756E 		.ascii	"countsLeft\000"
 8060      74734C65 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 167


 8060      667400
 8061              	.LASF86:
 8062 026f 64726976 		.ascii	"driveForwards\000"
 8062      65466F72 
 8062      77617264 
 8062      7300
 8063              	.LASF88:
 8064 027d 7475726E 		.ascii	"turnLeft\000"
 8064      4C656674 
 8064      00
 8065              	.LASF9:
 8066 0286 6C6F6E67 		.ascii	"long long unsigned int\000"
 8066      206C6F6E 
 8066      6720756E 
 8066      7369676E 
 8066      65642069 
 8067              	.LASF134:
 8068 029d 666C6167 		.ascii	"flag_packet\000"
 8068      5F706163 
 8068      6B657400 
 8069              	.LASF168:
 8070 02a9 66726F6E 		.ascii	"frontSensors\000"
 8070      7453656E 
 8070      736F7273 
 8070      00
 8071              	.LASF66:
 8072 02b6 6973725F 		.ascii	"isr_turn_timer\000"
 8072      7475726E 
 8072      5F74696D 
 8072      657200
 8073              	.LASF101:
 8074 02c5 6368616E 		.ascii	"changeToRF\000"
 8074      6765546F 
 8074      524600
 8075              	.LASF90:
 8076 02d0 696E6974 		.ascii	"initTurnLeft\000"
 8076      5475726E 
 8076      4C656674 
 8076      00
 8077              	.LASF167:
 8078 02dd 706F7274 		.ascii	"portOpen\000"
 8078      4F70656E 
 8078      00
 8079              	.LASF94:
 8080 02e6 696E6974 		.ascii	"initBrake\000"
 8080      4272616B 
 8080      6500
 8081              	.LASF130:
 8082 02f0 666C6167 		.ascii	"flag_ts_update\000"
 8082      5F74735F 
 8082      75706461 
 8082      746500
 8083              	.LASF114:
 8084 02ff 7363616C 		.ascii	"scalingFactor\000"
 8084      696E6746 
 8084      6163746F 
 8084      7200
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 168


 8085              	.LASF104:
 8086 030d 6C656674 		.ascii	"leftSpeed\000"
 8086      53706565 
 8086      6400
 8087              	.LASF129:
 8088 0317 666C6167 		.ascii	"flag_ts_enc\000"
 8088      5F74735F 
 8088      656E6300 
 8089              	.LASF182:
 8090 0323 62797465 		.ascii	"byteCount\000"
 8090      436F756E 
 8090      7400
 8091              	.LASF68:
 8092 032d 61637469 		.ascii	"actionDebounce\000"
 8092      6F6E4465 
 8092      626F756E 
 8092      636500
 8093              	.LASF63:
 8094 033c 62757474 		.ascii	"button\000"
 8094      6F6E00
 8095              	.LASF179:
 8096 0343 70726576 		.ascii	"prev_movement_state\000"
 8096      5F6D6F76 
 8096      656D656E 
 8096      745F7374 
 8096      61746500 
 8097              	.LASF120:
 8098 0357 73656E73 		.ascii	"sensorVals\000"
 8098      6F725661 
 8098      6C7300
 8099              	.LASF116:
 8100 0362 72657375 		.ascii	"result_str\000"
 8100      6C745F73 
 8100      747200
 8101              	.LASF123:
 8102 036d 75617274 		.ascii	"uart_set_PWM\000"
 8102      5F736574 
 8102      5F50574D 
 8102      00
 8103              	.LASF97:
 8104 037a 696E6974 		.ascii	"inittrackLineZ\000"
 8104      74726163 
 8104      6B4C696E 
 8104      655A00
 8105              	.LASF44:
 8106 0389 726F626F 		.ascii	"robot_ypos\000"
 8106      745F7970 
 8106      6F7300
 8107              	.LASF128:
 8108 0394 74735F64 		.ascii	"ts_display\000"
 8108      6973706C 
 8108      617900
 8109              	.LASF113:
 8110 039f 7072696E 		.ascii	"print_ADC\000"
 8110      745F4144 
 8110      4300
 8111              	.LASF106:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 169


 8112 03a9 7363616C 		.ascii	"scalingLeft\000"
 8112      696E674C 
 8112      65667400 
 8113              	.LASF12:
 8114 03b5 63686172 		.ascii	"char\000"
 8114      00
 8115              	.LASF48:
 8116 03ba 67305F73 		.ascii	"g0_speed\000"
 8116      70656564 
 8116      00
 8117              	.LASF156:
 8118 03c3 72696768 		.ascii	"rightSpeedLimit\000"
 8118      74537065 
 8118      65644C69 
 8118      6D697400 
 8119              	.LASF74:
 8120 03d3 7365744C 		.ascii	"setLeftDir\000"
 8120      65667444 
 8120      697200
 8121              	.LASF185:
 8122 03de 696E7374 		.ascii	"instructionCount\000"
 8122      72756374 
 8122      696F6E43 
 8122      6F756E74 
 8122      00
 8123              	.LASF89:
 8124 03ef 7475726E 		.ascii	"turnU\000"
 8124      5500
 8125              	.LASF55:
 8126 03f5 67325F79 		.ascii	"g2_ypos\000"
 8126      706F7300 
 8127              	.LASF61:
 8128 03fd 64697374 		.ascii	"distTurned\000"
 8128      5475726E 
 8128      656400
 8129              	.LASF16:
 8130 0408 75696E74 		.ascii	"uint16\000"
 8130      313600
 8131              	.LASF18:
 8132 040f 696E7438 		.ascii	"int8\000"
 8132      00
 8133              	.LASF70:
 8134 0414 6E657874 		.ascii	"nextStepDist\000"
 8134      53746570 
 8134      44697374 
 8134      00
 8135              	.LASF53:
 8136 0421 67315F64 		.ascii	"g1_direction\000"
 8136      69726563 
 8136      74696F6E 
 8136      00
 8137              	.LASF188:
 8138 042e 70617468 		.ascii	"path\000"
 8138      00
 8139              	.LASF75:
 8140 0433 73657452 		.ascii	"setRightDir\000"
 8140      69676874 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 170


 8140      44697200 
 8141              	.LASF34:
 8142 043f 43555256 		.ascii	"CURVE_TRACK\000"
 8142      455F5452 
 8142      41434B00 
 8143              	.LASF108:
 8144 044b 696E7465 		.ascii	"interCalc\000"
 8144      7243616C 
 8144      6300
 8145              	.LASF143:
 8146 0455 42545F45 		.ascii	"BT_ENABLED\000"
 8146      4E41424C 
 8146      454400
 8147              	.LASF80:
 8148 0460 72696768 		.ascii	"right\000"
 8148      7400
 8149              	.LASF163:
 8150 0466 696E6974 		.ascii	"initial_pos_valid\000"
 8150      69616C5F 
 8150      706F735F 
 8150      76616C69 
 8150      6400
 8151              	.LASF8:
 8152 0478 6C6F6E67 		.ascii	"long long int\000"
 8152      206C6F6E 
 8152      6720696E 
 8152      7400
 8153              	.LASF177:
 8154 0486 62756666 		.ascii	"buffer_state\000"
 8154      65725F73 
 8154      74617465 
 8154      00
 8155              	.LASF50:
 8156 0493 67315F78 		.ascii	"g1_xpos\000"
 8156      706F7300 
 8157              	.LASF95:
 8158 049b 696E6974 		.ascii	"initTrack\000"
 8158      54726163 
 8158      6B00
 8159              	.LASF69:
 8160 04a5 6E657874 		.ascii	"nextStep\000"
 8160      53746570 
 8160      00
 8161              	.LASF198:
 8162 04ae 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 8162      4320342E 
 8162      392E3320 
 8162      32303135 
 8162      30333033 
 8163 04e1 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 8163      20726576 
 8163      6973696F 
 8163      6E203232 
 8163      31323230 
 8164 0514 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 8164      66756E63 
 8164      74696F6E 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 171


 8164      2D736563 
 8164      74696F6E 
 8165              	.LASF56:
 8166 053c 67325F73 		.ascii	"g2_speed\000"
 8166      70656564 
 8166      00
 8167              	.LASF47:
 8168 0545 67305F79 		.ascii	"g0_ypos\000"
 8168      706F7300 
 8169              	.LASF99:
 8170 054d 72665F63 		.ascii	"rf_char\000"
 8170      68617200 
 8171              	.LASF187:
 8172 0555 666F6F64 		.ascii	"food_list\000"
 8172      5F6C6973 
 8172      7400
 8173              	.LASF142:
 8174 055f 42494E5F 		.ascii	"BIN_ENABLED\000"
 8174      454E4142 
 8174      4C454400 
 8175              	.LASF105:
 8176 056b 72696768 		.ascii	"rightSpeed\000"
 8176      74537065 
 8176      656400
 8177              	.LASF127:
 8178 0576 74735F73 		.ascii	"ts_speed\000"
 8178      70656564 
 8178      00
 8179              	.LASF17:
 8180 057f 75696E74 		.ascii	"uint32\000"
 8180      333200
 8181              	.LASF194:
 8182 0586 696E7374 		.ascii	"instructions\000"
 8182      72756374 
 8182      696F6E73 
 8182      00
 8183              	.LASF82:
 8184 0593 636F756E 		.ascii	"countsRight\000"
 8184      74735269 
 8184      67687400 
 8185              	.LASF201:
 8186 059f 64617461 		.ascii	"data_main\000"
 8186      5F6D6169 
 8186      6E00
 8187              	.LASF115:
 8188 05a9 636F6E76 		.ascii	"converted_val\000"
 8188      65727465 
 8188      645F7661 
 8188      6C00
 8189              	.LASF189:
 8190 05b7 73746172 		.ascii	"start\000"
 8190      7400
 8191              	.LASF41:
 8192 05bd 72737369 		.ascii	"rssi\000"
 8192      00
 8193              	.LASF110:
 8194 05c2 74726163 		.ascii	"trackLine\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 172


 8194      6B4C696E 
 8194      6500
 8195              	.LASF49:
 8196 05cc 67305F64 		.ascii	"g0_direction\000"
 8196      69726563 
 8196      74696F6E 
 8196      00
 8197              	.LASF139:
 8198 05d9 666C6167 		.ascii	"flag_receive_ADC\000"
 8198      5F726563 
 8198      65697665 
 8198      5F414443 
 8198      00
 8199              	.LASF26:
 8200 05ea 53544F50 		.ascii	"STOPPED\000"
 8200      50454400 
 8201              	.LASF100:
 8202 05f2 42545F72 		.ascii	"BT_rxInt\000"
 8202      78496E74 
 8202      00
 8203              	.LASF22:
 8204 05fb 6C6F6E67 		.ascii	"long double\000"
 8204      20646F75 
 8204      626C6500 
 8205              	.LASF64:
 8206 0607 6973725F 		.ascii	"isr_adcTimer\000"
 8206      61646354 
 8206      696D6572 
 8206      00
 8207              	.LASF153:
 8208 0614 6C656674 		.ascii	"left_duty_cycle\000"
 8208      5F647574 
 8208      795F6379 
 8208      636C6500 
 8209              	.LASF65:
 8210 0624 6973725F 		.ascii	"isr_deadzone\000"
 8210      64656164 
 8210      7A6F6E65 
 8210      00
 8211              	.LASF131:
 8212 0631 666C6167 		.ascii	"flag_ts_speed\000"
 8212      5F74735F 
 8212      73706565 
 8212      6400
 8213              	.LASF136:
 8214 063f 64617461 		.ascii	"dataready_flag\000"
 8214      72656164 
 8214      795F666C 
 8214      616700
 8215              	.LASF165:
 8216 064e 696E6974 		.ascii	"initial_y_pos\000"
 8216      69616C5F 
 8216      795F706F 
 8216      7300
 8217              	.LASF133:
 8218 065c 666C6167 		.ascii	"flag_rx\000"
 8218      5F727800 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 173


 8219              	.LASF2:
 8220 0664 73686F72 		.ascii	"short int\000"
 8220      7420696E 
 8220      7400
 8221              	.LASF140:
 8222 066e 6164635F 		.ascii	"adc_result\000"
 8222      72657375 
 8222      6C7400
 8223              	.LASF92:
 8224 0679 696E6974 		.ascii	"initTurnU\000"
 8224      5475726E 
 8224      5500
 8225              	.LASF144:
 8226 0683 666C6167 		.ascii	"flag_calc_wheelspeed\000"
 8226      5F63616C 
 8226      635F7768 
 8226      65656C73 
 8226      70656564 
 8227              	.LASF4:
 8228 0698 6C6F6E67 		.ascii	"long int\000"
 8228      20696E74 
 8228      00
 8229              	.LASF91:
 8230 06a1 696E6974 		.ascii	"initTurnRight\000"
 8230      5475726E 
 8230      52696768 
 8230      7400
 8231              	.LASF35:
 8232 06af 555F5452 		.ascii	"U_TRACK\000"
 8232      41434B00 
 8233              	.LASF124:
 8234 06b7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8234      52784275 
 8234      66666572 
 8234      00
 8235              	.LASF118:
 8236 06c4 7072696E 		.ascii	"printString\000"
 8236      74537472 
 8236      696E6700 
 8237              	.LASF98:
 8238 06d0 7278496E 		.ascii	"rxInt\000"
 8238      7400
 8239              	.LASF126:
 8240 06d6 74735F75 		.ascii	"ts_update\000"
 8240      70646174 
 8240      6500
 8241              	.LASF33:
 8242 06e0 4E4F5F54 		.ascii	"NO_TRACK\000"
 8242      5241434B 
 8242      00
 8243              	.LASF151:
 8244 06e9 64656164 		.ascii	"deadzone\000"
 8244      7A6F6E65 
 8244      00
 8245              	.LASF155:
 8246 06f2 6C656674 		.ascii	"leftSpeedLimit\000"
 8246      53706565 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 174


 8246      644C696D 
 8246      697400
 8247              	.LASF40:
 8248 0701 4D41505F 		.ascii	"MAP_TRAVERSE\000"
 8248      54524156 
 8248      45525345 
 8248      00
 8249              	.LASF29:
 8250 070e 54524143 		.ascii	"TRACKING_SOFT\000"
 8250      4B494E47 
 8250      5F534F46 
 8250      5400
 8251              	.LASF161:
 8252 071c 6F766572 		.ascii	"overshot_target\000"
 8252      73686F74 
 8252      5F746172 
 8252      67657400 
 8253              	.LASF79:
 8254 072c 6C656674 		.ascii	"left\000"
 8254      00
 8255              	.LASF158:
 8256 0731 61636375 		.ascii	"accum_dist\000"
 8256      6D5F6469 
 8256      737400
 8257              	.LASF121:
 8258 073c 75736250 		.ascii	"usbPutString\000"
 8258      75745374 
 8258      72696E67 
 8258      00
 8259              	.LASF87:
 8260 0749 7475726E 		.ascii	"turnRight\000"
 8260      52696768 
 8260      7400
 8261              	.LASF51:
 8262 0753 67315F79 		.ascii	"g1_ypos\000"
 8262      706F7300 
 8263              	.LASF59:
 8264 075b 6164635F 		.ascii	"adc_isr\000"
 8264      69737200 
 8265              	.LASF119:
 8266 0763 72656164 		.ascii	"readFrontSensors\000"
 8266      46726F6E 
 8266      7453656E 
 8266      736F7273 
 8266      00
 8267              	.LASF162:
 8268 0774 71756164 		.ascii	"quad_per_cm\000"
 8268      5F706572 
 8268      5F636D00 
 8269              	.LASF157:
 8270 0780 74617267 		.ascii	"target_distance_cm\000"
 8270      65745F64 
 8270      69737461 
 8270      6E63655F 
 8270      636D00
 8271              	.LASF11:
 8272 0793 73697A65 		.ascii	"sizetype\000"
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 175


 8272      74797065 
 8272      00
 8273              	.LASF7:
 8274 079c 6C6F6E67 		.ascii	"long unsigned int\000"
 8274      20756E73 
 8274      69676E65 
 8274      6420696E 
 8274      7400
 8275              	.LASF72:
 8276 07ae 62797465 		.ascii	"byte_packet\000"
 8276      5F706163 
 8276      6B657400 
 8277              	.LASF13:
 8278 07ba 696E7433 		.ascii	"int32_t\000"
 8278      325F7400 
 8279              	.LASF183:
 8280 07c2 7061636B 		.ascii	"packet\000"
 8280      657400
 8281              	.LASF195:
 8282 07c9 696E7374 		.ascii	"instructionLength\000"
 8282      72756374 
 8282      696F6E4C 
 8282      656E6774 
 8282      6800
 8283              	.LASF169:
 8284 07db 6C656674 		.ascii	"leftOn\000"
 8284      4F6E00
 8285              	.LASF43:
 8286 07e2 726F626F 		.ascii	"robot_xpos\000"
 8286      745F7870 
 8286      6F7300
 8287              	.LASF85:
 8288 07ed 6272616B 		.ascii	"brakeMotor\000"
 8288      654D6F74 
 8288      6F7200
 8289              	.LASF193:
 8290 07f8 666F6F64 		.ascii	"food_length\000"
 8290      5F6C656E 
 8290      67746800 
 8291              	.LASF175:
 8292 0804 656E7472 		.ascii	"entry\000"
 8292      7900
 8293              	.LASF1:
 8294 080a 756E7369 		.ascii	"unsigned char\000"
 8294      676E6564 
 8294      20636861 
 8294      7200
 8295              	.LASF6:
 8296 0818 5F5F7569 		.ascii	"__uint32_t\000"
 8296      6E743332 
 8296      5F7400
 8297              	.LASF174:
 8298 0823 6C696E65 		.ascii	"line\000"
 8298      00
 8299              	.LASF160:
 8300 0828 72656163 		.ascii	"reached_target\000"
 8300      6865645F 
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 176


 8300      74617267 
 8300      657400
 8301              	.LASF62:
 8302 0837 53746F70 		.ascii	"Stop_on_line\000"
 8302      5F6F6E5F 
 8302      6C696E65 
 8302      00
 8303              	.LASF125:
 8304 0844 74735F65 		.ascii	"ts_enc\000"
 8304      6E6300
 8305              	.LASF166:
 8306 084b 6272616B 		.ascii	"brakeFlag\000"
 8306      65466C61 
 8306      6700
 8307              	.LASF132:
 8308 0855 666C6167 		.ascii	"flag_ts_display\000"
 8308      5F74735F 
 8308      64697370 
 8308      6C617900 
 8309              	.LASF31:
 8310 0865 73746174 		.ascii	"state\000"
 8310      6500
 8311              	.LASF77:
 8312 086b 72657665 		.ascii	"reverseDirection\000"
 8312      72736544 
 8312      69726563 
 8312      74696F6E 
 8312      00
 8313              	.LASF83:
 8314 087c 6272616B 		.ascii	"brakeLeft\000"
 8314      654C6566 
 8314      7400
 8315              	.LASF173:
 8316 0886 64697370 		.ascii	"displaystring\000"
 8316      6C617973 
 8316      7472696E 
 8316      6700
 8317              	.LASF147:
 8318 0894 6C617374 		.ascii	"last_quad_count1\000"
 8318      5F717561 
 8318      645F636F 
 8318      756E7431 
 8318      00
 8319              	.LASF148:
 8320 08a5 6C617374 		.ascii	"last_quad_count2\000"
 8320      5F717561 
 8320      645F636F 
 8320      756E7432 
 8320      00
 8321              	.LASF190:
 8322 08b6 64657374 		.ascii	"destination\000"
 8322      696E6174 
 8322      696F6E00 
 8323              	.LASF122:
 8324 08c2 75736250 		.ascii	"usbPutChar\000"
 8324      75744368 
 8324      617200
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 177


 8325              	.LASF0:
 8326 08cd 7369676E 		.ascii	"signed char\000"
 8326      65642063 
 8326      68617200 
 8327              	.LASF3:
 8328 08d9 73686F72 		.ascii	"short unsigned int\000"
 8328      7420756E 
 8328      7369676E 
 8328      65642069 
 8328      6E7400
 8329              	.LASF45:
 8330 08ec 726F626F 		.ascii	"robot_orientation\000"
 8330      745F6F72 
 8330      69656E74 
 8330      6174696F 
 8330      6E00
 8331              	.LASF37:
 8332 08fe 51554144 		.ascii	"QUAD_STOP\000"
 8332      5F53544F 
 8332      5000
 8333              	.LASF67:
 8334 0908 6D61696E 		.ascii	"main\000"
 8334      00
 8335              	.LASF58:
 8336 090d 42545F74 		.ascii	"BT_txInt\000"
 8336      78496E74 
 8336      00
 8337              	.LASF109:
 8338 0916 6E657874 		.ascii	"nextSpeed\000"
 8338      53706565 
 8338      6400
 8339              	.LASF15:
 8340 0920 75696E74 		.ascii	"uint8\000"
 8340      3800
 8341              	.LASF21:
 8342 0926 646F7562 		.ascii	"double\000"
 8342      6C6500
 8343              	.LASF154:
 8344 092d 72696768 		.ascii	"right_duty_cycle\000"
 8344      745F6475 
 8344      74795F63 
 8344      79636C65 
 8344      00
 8345              	.LASF38:
 8346 093e 52465F53 		.ascii	"RF_STOP\000"
 8346      544F5000 
 8347              	.LASF76:
 8348 0946 68616E64 		.ascii	"handle_rx_binary\000"
 8348      6C655F72 
 8348      785F6269 
 8348      6E617279 
 8348      00
 8349              	.LASF117:
 8350 0957 7072696E 		.ascii	"print_RF\000"
 8350      745F5246 
 8350      00
 8351              	.LASF30:
ARM GAS  C:\Users\Logan\AppData\Local\Temp\ccmASfBs.s 			page 178


 8352 0960 55545552 		.ascii	"UTURN\000"
 8352      4E00
 8353              	.LASF46:
 8354 0966 67305F78 		.ascii	"g0_xpos\000"
 8354      706F7300 
 8355              	.LASF107:
 8356 096e 7363616C 		.ascii	"scalingRight\000"
 8356      696E6752 
 8356      69676874 
 8356      00
 8357              	.LASF135:
 8358 097b 666C6167 		.ascii	"flag_KB_string\000"
 8358      5F4B425F 
 8358      73747269 
 8358      6E6700
 8359              	.LASF52:
 8360 098a 67315F73 		.ascii	"g1_speed\000"
 8360      70656564 
 8360      00
 8361              	.LASF199:
 8362 0993 2E5C6D61 		.ascii	".\\main.c\000"
 8362      696E2E63 
 8362      00
 8363              	.LASF164:
 8364 099c 696E6974 		.ascii	"initial_x_pos\000"
 8364      69616C5F 
 8364      785F706F 
 8364      7300
 8365              	.LASF84:
 8366 09aa 6272616B 		.ascii	"brakeRight\000"
 8366      65526967 
 8366      687400
 8367              	.LASF96:
 8368 09b5 696E6974 		.ascii	"initTrackU\000"
 8368      54726163 
 8368      6B5500
 8369              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
